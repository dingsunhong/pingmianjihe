Attribute VB_Name = "setment"

Option Explicit
Type input_wenti_data0
wenti_type As Integer
wenti_point(8) As Integer
End Type
Public temp_input_wenti_data(1 To 4) As input_wenti_data0 '用于记录临时输入语句，用于平行垂直，圆的切线
Public last_temp_input_wenti As Integer '
Public display_add_condition(10) As Integer '
Public Function set_display_eline(el As eline_data_type, is_display As Boolean, is_depend As Boolean) As String
Dim i%
 If el.record.data0.condition_data.condition(1).ty = new_point_ And _
       el.record.data0.condition_data.condition_no = 1 Then
 set_display_eline = _
  new_point(el.record.data0.condition_data.condition(1).no).data(0).display_string
 If is_display = True Then
       Call draw_aid_point(el.record.data0.condition_data.condition(1).no)
 End If
 Else
set_display_eline = _
 m_poi(el.data0.poi(0)).data(0).data0.name + m_poi(el.data0.poi(1)).data(0).data0.name + "=" + _
  m_poi(el.data0.poi(2)).data(0).data0.name + m_poi(el.data0.poi(3)).data(0).data0.name
End If
If is_depend Then
  Call set_depend_from_point(el.data0.poi(0))
End If
End Function
Public Function set_Epolygon(pol As polygon, _
         re As total_record_type, no%, ByVal no_reduce As Byte, _
           ByVal is_no_initial As Byte, cond_ty As Byte, is_reduce As Boolean) As Byte
Dim i%, j%, tn%, t_p%, ln%, k%, tA%, tn1%, temp_no%
Dim p As POINTAPI
Dim n_(5) As Integer
Dim l_(1) As Integer
Dim v$, v1$, v2$
Dim t_s$
Dim con_ty As Byte
Dim set_new_data As Boolean
Dim r!
Dim t_pol As polygon
Dim E_pol As epolygon_data_type
Dim side_length As String
Dim A As Integer
Dim set_type As Byte
Dim level As Byte
Dim tp(5) As Integer
Dim temp_record As total_record_type
Dim display_no%
Dim c_data As condition_data_type
'On Error GoTo set_epolygon_error
If no% > 0 Then
 If epolygon(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_epolygon_mark0
 End If
ElseIf no_reduce = 255 Then
 Exit Function
End If
temp_record = re
t_pol = pol
Call set_level(temp_record.record_data.data0.condition_data)
display_inform = 0
If no% > 0 Then
If epolygon(no%).record_.no_reduce < 2 Then
 GoTo set_epolygon_mark0
Else
Exit Function
End If
End If
If t_pol.total_v = 4 Then
   cond_ty = Squre
   Call set_squre(t_pol.v(0), t_pol.v(1), t_pol.v(2), t_pol.v(3), no%, re, 0, is_reduce)
End If
'**********************************************************
If is_epolygon(t_pol, no%, E_pol) Then
 If no% > 0 And run_type < 10 Then
 level = epolygon(no%).data(0).record.data0.condition_data.level
 If set_prove_type(epolygon_, no%, temp_record.record_data, _
      epolygon(no%).data(0).record) And set_or_prove < 2 Then
   Call simple_record(epolygon_, no%, epolygon(no%).data(0).record.data0.condition_data.level, level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
      Exit Function
     Else
     no_reduce = 2
'      epolygon(no%).record_.no_reduce = 0
       GoTo set_epolygon_mark_0
     End If
 End If
 End If
  If set_or_prove < 2 Then
   If no_reduce = 0 Then
   no% = 0
  End If
      set_Epolygon = 0
        Exit Function
   Else
   If display_inform = 1 Then
    If conclusion_data(0).ty = epolygon_ And conclusion_data(0).no(0) = no% Then
     prove_type = 4
    event_statue = complete_prove
    End If
       Call display_prove_inform(modify_wenti_no, display)
   Else
    Exit Function
   End If
   End If
   Exit Function
  Else
 If set_or_prove = 3 Then
  set_Epolygon = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
   Exit Function
   End If
End If
'****************************************
temp_no% = last_conditions.last_cond(1).epolygon_no
For i% = 1 To temp_no%
epolygon(i%).record_.index = epolygon(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).epolygon_no Mod 10 = 0 Then
 ReDim Preserve epolygon(last_conditions.last_cond(1).epolygon_no + 10) As epolygon_type
End If
last_conditions.last_cond(1).epolygon_no = last_conditions.last_cond(1).epolygon_no + 1
cond_ty = epolygon_
set_new_data = True
epolygon(last_conditions.last_cond(1).epolygon_no).data(0) = E_pol
epolygon(last_conditions.last_cond(1).epolygon_no).data(0).record = temp_record.record_data
epolygon(last_conditions.last_cond(1).epolygon_no).record_ = temp_record.record_
epolygon(last_conditions.last_cond(1).epolygon_no).record_.no_reduce = 0
For i% = last_conditions.last_cond(1).epolygon_no To no% + 2 Step -1
 epolygon(i%).data(0).record.data1.index.i(0) = epolygon(i% - 1).data(0).record.data1.index.i(0)
Next i%
 epolygon(no% + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).epolygon_no
 no% = last_conditions.last_cond(1).epolygon_no
If last_conditions_for_aid_no > 0 Then
 'If new_result_from_add = False Then
  For i% = 0 To E_pol.p.total_v - 1
   If E_pol.p.v(i%) > last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
    GoTo set_epolygon_mark_result
   End If
  Next i%
   last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
 End If
'End If
set_epolygon_mark_result:
  t_s$ = ""
  For i% = 0 To E_pol.p.total_v - 1
  t_s$ = t_s$ + m_poi(E_pol.p.v(i%)).data(0).data0.name
  Next i%
  If E_pol.p.total_v = 3 Then
  t_s$ = LoadResString_from_inpcond(-16, _
                        "\\0\\" + m_poi(E_pol.p.v(0)).data(0).data0.name & _
                        "\\1\\" + m_poi(E_pol.p.v(1)).data(0).data0.name & _
                        "\\2\\" + m_poi(E_pol.p.v(2)).data(0).data0.name)
  ElseIf E_pol.p.total_v = 4 Then
  t_s$ = LoadResString_from_inpcond(-12, _
                        "\\0\\" + m_poi(E_pol.p.v(0)).data(0).data0.name & _
                        "\\1\\" + m_poi(E_pol.p.v(1)).data(0).data0.name & _
                        "\\2\\" + m_poi(E_pol.p.v(2)).data(0).data0.name & _
                        "\\3\\" + m_poi(E_pol.p.v(3)).data(0).data0.name)
  ElseIf E_pol.p.total_v = 5 Then
  t_s$ = LoadResString_from_inpcond(-9, _
                        "\\0\\" + m_poi(E_pol.p.v(0)).data(0).data0.name & _
                        "\\1\\" + m_poi(E_pol.p.v(1)).data(0).data0.name & _
                        "\\2\\" + m_poi(E_pol.p.v(2)).data(0).data0.name & _
                        "\\3\\" + m_poi(E_pol.p.v(3)).data(0).data0.name & _
                        "\\4\\" + m_poi(E_pol.p.v(4)).data(0).data0.name)
  ElseIf E_pol.p.total_v = 6 Then
  t_s$ = LoadResString_from_inpcond(-8, _
                        "\\0\\" + m_poi(E_pol.p.v(0)).data(0).data0.name & _
                        "\\1\\" + m_poi(E_pol.p.v(1)).data(0).data0.name & _
                        "\\2\\" + m_poi(E_pol.p.v(2)).data(0).data0.name & _
                        "\\3\\" + m_poi(E_pol.p.v(3)).data(0).data0.name & _
                        "\\4\\" + m_poi(E_pol.p.v(4)).data(0).data0.name & _
                        "\\5\\" + m_poi(E_pol.p.v(5)).data(0).data0.name)
  End If
set_Epolygon = set_prove_proccess(t_s$, epolygon_, no%, epolygon(no%).data(0).record.display_string)
'If run_statue = 1 Then '12.10
' Call set_element_branch(epolygon_, no%, 0)
'End If
If set_Epolygon > 1 Then
  Exit Function
ElseIf is_reduce Then
  GoTo set_epolygon_mark_0:
End If
'If no_reduce = 0 Then
' If epolygon(no%).data(0).record.display_no = 0 Then
'  Exit Function
' End If
'End If
set_epolygon_mark0:

If epolygon(no%).record_.no_reduce = 0 Or _
    epolygon(no%).record_.no_reduce = 2 Or _
     epolygon(no%).record_.no_reduce = 4 Then
set_epolygon_mark_0:
'If run_statue < 2 Then
If epolygon(no%).data(0).p.total_v = 3 Then
     Call draw_triangle(epolygon(no%).data(0).p.v(0), _
                        epolygon(no%).data(0).p.v(1), _
                        epolygon(no%).data(0).p.v(2), condition)
ElseIf epolygon(no%).data(0).p.total_v = 4 Then
     Call draw_polygon4(epolygon(no%).data(0).p.v(0), _
                        epolygon(no%).data(0).p.v(1), _
                        epolygon(no%).data(0).p.v(2), _
                        epolygon(no%).data(0).p.v(3), condition)
End If
If no_reduce > 0 And no_reduce < 255 Then
 no_reduce = no_reduce - 1
End If
      Call set_level_(epolygon(no%).record_.no_reduce, 1)
temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
 temp_record.record_data.data0.condition_data.condition_no = 1
  temp_record.record_data.data0.condition_data.condition(1).ty = epolygon_
   temp_record.record_data.data0.condition_data.condition(1).no = no%
 '边相等
 ' If epolygon(no%).data(0).record.condition_data.condition_no = 0 Then '已知多边形
 E_pol = epolygon(no%).data(0)
 For i% = 1 To E_pol.p.total_v - 1
  For j% = 0 To i% - 1
   For k% = 0 To j% - 1
    tA% = triangle_number(E_pol.p.v(i%), E_pol.p.v(j%), _
       E_pol.p.v(k%), 0, 0, 0, 0, 0, 0, 0)
        If tA% > 0 Then
         triangle(tA%).epolygon_no = no%
        End If
   Next k%
  set_Epolygon = set_equal_dline(E_pol.p.v(i%), E_pol.p.v((i% + 1) Mod E_pol.p.total_v), _
     E_pol.p.v(j%), E_pol.p.v(j% + 1), 0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, _
       no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
  Next j%
 Next i%
 If E_pol.p.total_v = 4 Then
  epolygon(no%).data(0).p.line_no(0) = line_number0(E_pol.p.v(0), E_pol.p.v(1), 0, 0)
  epolygon(no%).data(0).p.line_no(1) = line_number0(E_pol.p.v(1), E_pol.p.v(2), 0, 0)
  epolygon(no%).data(0).p.line_no(2) = line_number0(E_pol.p.v(2), E_pol.p.v(3), 0, 0)
  epolygon(no%).data(0).p.line_no(3) = line_number0(E_pol.p.v(3), E_pol.p.v(0), 0, 0)
  temp_record.record_data.data0.condition_data.condition_no = 2
  For i% = 1 To last_conditions.last_cond(1).epolygon_no - 1
   If epolygon(i%).data(0).p.total_v = 4 Then
    temp_record.record_data.data0.condition_data.condition(1).ty = epolygon_
    temp_record.record_data.data0.condition_data.condition(2).ty = epolygon_
    temp_record.record_data.data0.condition_data.condition(1).no = no%
    temp_record.record_data.data0.condition_data.condition(2).no = i%
    temp_record.record_data.data0.theorem_no = 1
    For j% = 0 To 3
      For k% = 0 To 3
       If epolygon(no%).data(0).p.line_no(k%) = epolygon(i%).data(0).p.line_no(j%) Then
        If epolygon(no%).data(0).p.v(k) = epolygon(i%).data(0).p.v((j% + 1) Mod 4) Then
          set_Epolygon = combine_two_line(epolygon(no%).data(0).p.line_no((k% + 3) Mod 4), _
            epolygon(i%).data(0).p.line_no((j% + 1) Mod 4), epolygon(i%).data(0).p.line_no(j%), _
             record0, 0, is_no_initial)
        End If
        If epolygon(no%).data(0).p.v((k% + 1) Mod 4) = epolygon(i%).data(0).p.v(j%) Then
          set_Epolygon = combine_two_line(epolygon(no%).data(0).p.line_no((k% + 1) Mod 4), _
            epolygon(i%).data(0).p.line_no((j% + 3) Mod 4), epolygon(i%).data(0).p.line_no(j%), _
               record0, 0, is_no_initial)
        End If
       End If
      Next k%
   Next j%
   End If
  Next i%
  If th_chose(81).chose = 1 Then
    temp_record.record_data.data0.condition_data.condition_no = 1
     temp_record.record_data.data0.theorem_no = 81
   set_Epolygon = set_equal_dline(E_pol.p.v(0), E_pol.p.v(2), _
       E_pol.p.v(1), E_pol.p.v(3), 0, 0, 0, 0, 0, 0, 0, _
        temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
     If set_Epolygon > 1 Then
      Exit Function
     End If
  End If
 For i% = 0 To 3
  For j% = 0 To 1
  temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.theorem_no = 0
    set_Epolygon = set_Drelation(E_pol.p.v(j%), E_pol.p.v((j% + 2) Mod 4), _
       E_pol.p.v(i%), E_pol.p.v((i% + 1) Mod 4), _
        0, 0, 0, 0, 0, 0, "'2", temp_record, 0, 0, 0, 0, no_reduce, False)
    If set_Epolygon > 1 Then
     Exit Function
    End If
  Next j%
 Next i%
ElseIf E_pol.p.total_v = 5 Then
 v1$ = divide_string(add_string("1", "'5", False, False), "2", True, False)
  For i% = 0 To 4
   For j% = 0 To 4
    If j% > i% Then
     temp_record.record_data.data0.condition_data.condition_no = 1
      temp_record.record_data.data0.theorem_no = 0
       set_Epolygon = set_equal_dline(E_pol.p.v(i%), E_pol.p.v((i% + 2) Mod 5), _
        E_pol.p.v(j%), E_pol.p.v((j% + 2) Mod 5), _
         0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
    End If
temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.theorem_no = 0
 set_Epolygon = set_Drelation(E_pol.p.v(i%), E_pol.p.v((i% + 2) Mod 5), _
       E_pol.p.v(j%), E_pol.p.v((j% + 1) Mod 5), _
        0, 0, 0, 0, 0, 0, v1$, temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
 Next j%
 Next i%
ElseIf E_pol.p.total_v = 6 Then
For i% = 0 To 5
 For j% = 0 To 5
If j% > i% Then
 temp_record.record_data.data0.condition_data.condition_no = 1
  temp_record.record_data.data0.theorem_no = 0
  set_Epolygon = set_equal_dline(E_pol.p.v(i%), E_pol.p.v((i% + 2) Mod 6), _
       E_pol.p.v(j%), E_pol.p.v((j% + 2) Mod 6), 0, 0, 0, 0, 0, 0, _
        0, temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
End If
temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.theorem_no = 0
 set_Epolygon = set_Drelation(E_pol.p.v(i%), E_pol.p.v((i% + 2) Mod 6), _
       E_pol.p.v(j%), E_pol.p.v((j% + 1) Mod 6), _
        0, 0, 0, 0, 0, 0, "'3", temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
If j% > i% And j% < 3 And i% < 3 Then
temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.theorem_no = 0
 set_Epolygon = set_equal_dline(E_pol.p.v(i%), E_pol.p.v((i% + 3) Mod 6), _
       E_pol.p.v(j%), E_pol.p.v((j% + 3) Mod 6), 0, 0, 0, 0, 0, 0, _
        0, temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
End If
If j% < 3 Then
temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.theorem_no = 0
 set_Epolygon = set_Drelation(E_pol.p.v(j%), E_pol.p.v((j% + 3) Mod 6), _
       E_pol.p.v(i%), E_pol.p.v((i% + 1) Mod 6), _
        0, 0, 0, 0, 0, 0, "2", temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
 End If
Next j%
Next i%
End If
 '对角线的长
'*************************************
If E_pol.p.total_v = 3 Then
 v$ = "60" '顶角
ElseIf E_pol.p.total_v = 4 Then
 v$ = "90"
ElseIf E_pol.p.total_v = 5 Then
 v$ = "108"
ElseIf E_pol.p.total_v = 6 Then
v$ = "120"
End If
If E_pol.p.total_v <> 4 Or th_chose(80).chose = 1 Then
If E_pol.p.total_v = 4 Then
 temp_record.record_data.data0.theorem_no = 80
Else
 temp_record.record_data.data0.theorem_no = 0
End If
For i% = 0 To E_pol.p.total_v - 1
'顶角相等
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 1) Mod E_pol.p.total_v), _
           E_pol.p.v((i% + 2) Mod E_pol.p.total_v), 0, 0)
 temp_record.record_data.data0.condition_data.condition_no = 1
   set_Epolygon = set_angle_value(Abs(A), v$, temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
Next i%
End If
'****************************************************
If E_pol.p.total_v = 4 Then
For i% = 0 To 3
  A = angle_number(E_pol.p.v(i%), _
     E_pol.p.v((i% + 1) Mod 4), _
        E_pol.p.v((i% + 3) Mod 4), 0, 0)
    temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "45", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
  A = angle_number(E_pol.p.v(i%), _
     E_pol.p.v((i% + 2) Mod 4), _
        E_pol.p.v((i% + 3) Mod 4), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "45", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
Next i%
ElseIf E_pol.p.total_v = 5 Then
For i% = 0 To 4
 A = angle_number(E_pol.p.v(i%), _
     E_pol.p.v((i% + 1) Mod 5), _
        E_pol.p.v((i% + 3) Mod 5), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "72", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
  A = angle_number(E_pol.p.v(i%), _
     E_pol.p.v((i% + 2) Mod 5), _
        E_pol.p.v((i% + 3) Mod 5), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "72", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
 '*********************************
  A = angle_number(E_pol.p.v(i%), _
     E_pol.p.v((i% + 1) Mod 5), _
        E_pol.p.v((i% + 4) Mod 5), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "36", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
  A = angle_number(E_pol.p.v(i%), _
     E_pol.p.v((i% + 2) Mod 5), _
        E_pol.p.v((i% + 4) Mod 5), 0, 0)
    temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "36", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
  A = angle_number(E_pol.p.v(i%), _
     E_pol.p.v((i% + 3) Mod 5), _
        E_pol.p.v((i% + 4) Mod 5), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "36", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
Next i%
ElseIf E_pol.p.total_v = 6 Then
For i% = 0 To 5
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 1) Mod 6), E_pol.p.v((i% + 3) Mod 6), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "90", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 2) Mod 6), E_pol.p.v((i% + 3) Mod 6), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "90", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 1) Mod 6), E_pol.p.v((i% + 4) Mod 6), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "60", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 2) Mod 6), E_pol.p.v((i% + 4) Mod 6), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "60", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 3) Mod 6), E_pol.p.v((i% + 4) Mod 6), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "60", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 1) Mod 6), E_pol.p.v((i% + 5) Mod 6), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "30", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 2) Mod 6), E_pol.p.v((i% + 5) Mod 6), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "30", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 3) Mod 6), E_pol.p.v((i% + 5) Mod 6), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "30", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
A = angle_number(E_pol.p.v(i%), _
       E_pol.p.v((i% + 4) Mod 6), E_pol.p.v((i% + 5) Mod 6), 0, 0)
   temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.theorem_no = 0
   set_Epolygon = set_angle_value(Abs(A), "30", temp_record, 0, no_reduce, is_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
Next i%
End If
'***************
'平行垂直关系
If E_pol.p.total_v = 4 Then
For i% = 0 To 3
If i% < 2 And th_chose(57).chose = 1 Then '平行四边形定义
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 57
set_Epolygon = set_dparal(line_number0(E_pol.p.v(i%), _
   E_pol.p.v((i% + 1) Mod 4), 0, 0), _
     line_number0(E_pol.p.v((i% + 2) Mod 4), _
      E_pol.p.v((i% + 3) Mod 4), 0, 0), temp_record, 0, no_reduce, True)
       If set_Epolygon > 1 Then
        Exit Function
       End If
End If
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
set_Epolygon = set_dverti(line_number0(E_pol.p.v(i%), _
   E_pol.p.v((i% + 1) Mod 4), 0, 0), _
     line_number0(E_pol.p.v((i% + 1) Mod 4), _
      E_pol.p.v((i% + 2) Mod 4), 0, 0), temp_record, 0, no_reduce, True)
       If set_Epolygon > 1 Then
        Exit Function
       End If
Next i%
If th_chose(80).chose = 1 Then '正方形内角
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 80
set_Epolygon = set_dverti(line_number0(E_pol.p.v(0), _
   E_pol.p.v(2), 0, 0), _
     line_number0(E_pol.p.v(1), _
      E_pol.p.v(3), 0, 0), temp_record, 0, no_reduce, True)
       If set_Epolygon > 1 Then
        Exit Function
       End If
End If
ElseIf E_pol.p.total_v = 6 Then
 For i% = 0 To 5
If i% < 3 Then
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
set_Epolygon = set_dparal(line_number0(E_pol.p.v(i%), _
   E_pol.p.v((i% + 1) Mod 6), 0, 0), _
     line_number0(E_pol.p.v((i% + 2) Mod 6), _
      E_pol.p.v((i% + 5) Mod 6), 0, 0), temp_record, 0, no_reduce, False)
       If set_Epolygon > 1 Then
        Exit Function
       End If
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
set_Epolygon = set_dparal(line_number0(E_pol.p.v(i%), _
   E_pol.p.v((i% + 1) Mod 6), 0, 0), _
     line_number0(E_pol.p.v((i% + 3) Mod 6), _
      E_pol.p.v((i% + 4) Mod 6), 0, 0), temp_record, 0, no_reduce, False)
       If set_Epolygon > 1 Then
        Exit Function
       End If
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 0
set_Epolygon = set_dparal(line_number0(E_pol.p.v(i%), _
   E_pol.p.v((i% + 2) Mod 6), 0, 0), _
     line_number0(E_pol.p.v((i% + 3) Mod 6), _
      E_pol.p.v((i% + 5) Mod 6), 0, 0), temp_record, 0, no_reduce, False)
       If set_Epolygon > 1 Then
        Exit Function
       End If
End If
 Next i%
End If

SET_EPOLYGON_MARK1:

 If E_pol.p.total_v = 4 Then
   temp_record.record_data.data0.condition_data.condition_no = 1
 set_Epolygon = set_four_sides_polygon_for_mid_paral( _
     E_pol.p.v(0), E_pol.p.v(1), _
      E_pol.p.v(2), E_pol.p.v(3), temp_record, no_reduce)
  If set_Epolygon > 1 Then
   Exit Function
  End If
    temp_record.record_data.data0.condition_data.condition_no = 1
  set_Epolygon = set_four_sides_polygon_for_mid_paral( _
     E_pol.p.v(1), E_pol.p.v(2), _
      E_pol.p.v(3), E_pol.p.v(0), temp_record, no_reduce)
  If set_Epolygon > 1 Then
   Exit Function
  End If
If th_chose(81).chose = 1 Then
    l_(0) = line_number0(E_pol.p.v(0), E_pol.p.v(2), n_(0), n_(1))
    l_(1) = line_number0(E_pol.p.v(1), E_pol.p.v(3), n_(2), n_(3))
    t_p% = is_line_line_intersect(l_(0), l_(1), n_(4), n_(5), False)
  If t_p% > 0 Then
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.theorem_no = 81
    set_Epolygon = set_mid_point(E_pol.p.v(0), t_p%, _
     E_pol.p.v(2), n_(0), n_(4), n_(1), l_(0), 0, temp_record, 0, 0, 0, 0, no_reduce)
     If set_Epolygon > 1 Then
     Exit Function
    End If
   temp_record.record_data.data0.condition_data.condition_no = 1
  set_Epolygon = set_mid_point(E_pol.p.v(1), t_p%, _
     E_pol.p.v(3), n_(2), n_(5), n_(3), l_(1), 0, temp_record, 0, 0, 0, 0, no_reduce)
    If set_Epolygon > 1 Then
     Exit Function
    End If
  End If
End If
End If
'***************************
'****************************************
If E_pol.p.total_v = 3 Then
 c_data.condition_no = 0
 If is_mid_point(E_pol.p.v(0), 0, E_pol.p.v(1), _
        0, 0, 0, 0, tn%, -1000, 0, 0, 0, 0, 0, 0, _
         Dmid_point_data0, "", con_ty, tn%, tn1%, c_data) Then
   temp_record.record_data.data0.condition_data.condition_no = 1
   Call add_conditions_to_record(con_ty, tn%, tn1%, 0, temp_record.record_data.data0.condition_data)
  set_Epolygon = set_mid_point_equal_side_triangle(E_pol.p.v(0), _
    E_pol.p.v(2), E_pol.p.v(1), _
        Dmid_point(tn%).data(0).data0.poi(1), temp_record, 0)
     If set_Epolygon > 1 Then
      Exit Function
    End If
 End If
 c_data.condition_no = 0
 If is_mid_point(E_pol.p.v(0), 0, E_pol.p.v(2), _
        0, 0, 0, 0, tn%, -1000, 0, 0, 0, 0, 0, 0, _
         Dmid_point_data0, "", con_ty, tn%, tn1%, c_data) Then
   temp_record.record_data.data0.condition_data.condition_no = 1
   Call add_conditions_to_record(con_ty, tn%, tn1%, 0, temp_record.record_data.data0.condition_data)
  set_Epolygon = set_mid_point_equal_side_triangle(E_pol.p.v(0), _
    E_pol.p.v(1), E_pol.p.v(2), _
        Dmid_point(tn%).data(0).data0.poi(1), temp_record, 0)
     If set_Epolygon = 2 Then
     Exit Function
    End If
 End If
 c_data.condition_no = 0
 If is_mid_point(E_pol.p.v(2), 0, E_pol.p.v(1), _
        0, 0, 0, 0, tn%, -1000, 0, 0, 0, 0, 0, 0, _
          Dmid_point_data0, "", con_ty, tn%, tn1%, c_data) Then
   temp_record.record_data.data0.condition_data.condition_no = 1
   Call add_conditions_to_record(con_ty, tn%, tn1%, 0, temp_record.record_data.data0.condition_data)
    set_Epolygon = set_mid_point_equal_side_triangle(E_pol.p.v(2), _
    E_pol.p.v(0), E_pol.p.v(1), _
        Dmid_point(tn%).data(0).data0.poi(1), temp_record, 0)
     If set_Epolygon > 1 Then
     Exit Function
    End If
 End If
End If
End If
Exit Function
set_epolygon_error:
If set_new_data Then
 last_conditions.last_cond(1).epolygon_no = temp_no%
 For i% = 1 To temp_no%
 epolygon(i%).data(0).record.data1.index = epolygon(i%).record_.index
 Next i%
End If
set_Epolygon = 0
End Function
Public Function set_Drelation(ByVal p1%, ByVal p2%, ByVal p3%, _
   ByVal p4%, ByVal in1%, ByVal in2%, ByVal in3%, ByVal in4%, _
    ByVal il1%, ByVal il2%, ByVal value As String, re As total_record_type, _
      no%, cond_type As Byte, no1%, no2%, ByVal no_reduce As Byte, reduce As Boolean) As Byte
Dim i%, j%, k%, l%, m%, n%, temp_no%
'Dim t_n(3) As Integer
Dim n_(7) As Integer
Dim dn(2) As Integer
Dim ty As Boolean
'Dim tp(5) As Integer
Dim para(1) As String
Dim nu(1) As Integer
Dim dr As relation_data0_type
Dim tl(2) As Integer
Dim level As Byte
Dim con_no%
Dim ts$
Dim c_data As condition_data_type
Dim mid_p As mid_point_data0_type
Dim set_new_data As Boolean
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
'On Error GoTo set_Drelation_error
If no% > 0 Then
 If Drelation(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
 GoTo set_drelation_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
ElseIf no_reduce = 255 Or InStr(1, value, "F", 0) > 0 Or InStr(1, value, ".", 0) > 0 Then
 Exit Function
ElseIf no% = 0 Then
 If p1% = 0 Or p2% = 0 Or p3% = 0 Or p4% = 0 Then
  Exit Function
 'ElseIf m_poi(p1%).data(0).no_reduce > 0 Or m_poi(p1%).data(1).no_reduce > 0 Or _
 '        m_poi(p1%).data(2).no_reduce > 0 Or m_poi(p1%).data(3).no_reduce > 0 Then
 '          Exit Function
 End If
End If
temp_record = re
If value = "1" Then
 set_Drelation = set_equal_dline(p1%, p2%, p3%, p4%, _
    in1%, in2%, in3%, in4%, il1%, il2%, 0, temp_record, no%, cond_type, no1%, no2%, no_reduce, reduce)
  Exit Function
ElseIf InStr(1, value, "F", 0) > 0 Then
  Exit Function
End If
display_inform = 0
If no% = -2 Then
initial_string (value)
End If
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_relation(p1%, p2%, p3%, p4%, in1%, in2%, in3%, in4%, il1%, il2%, _
    value, no%, n_(0), n_(1), n_(2), n_(3), _
      dr, no1%, no2%, cond_type, temp_record.record_data.data0.condition_data, 0) Then
 Call set_level(temp_record.record_data.data0.condition_data)
 If cond_type = relation_ And no% > 0 And run_type < 10 Then
 temp_record1.record_data = re.record_data
 'Call add_conditions_to_record(relation_, no%, 0, 0, _
           temp_record1.record_data.data0.condition_data,0)
 set_Drelation = set_string_value_(Drelation(no%).data(0).data0.value, _
                       dr.value, relation_, no%, temp_record1.record_data, no_reduce)
 If set_Drelation > 1 Then
  Exit Function
 End If
    If InStr(1, dr.value, ".", 0) = 0 And _
            InStr(1, Drelation(no%).data(0).data0.value, ".", 0) > 0 Then
           Drelation(no%).data(0).data0.value = dr.value
     End If
 level = Drelation(no%).data(0).record.data0.condition_data.level
 If set_prove_type(relation_, no%, temp_record.record_data, _
      Drelation(no%).data(0).record) And _
       set_or_prove < 2 Then
     Call simple_record(relation_, no%, Drelation(no%).data(0).record.data0.condition_data.level, level)
     If InStr(1, dr.value, ".", 0) = 0 Then
      Drelation(no%).data(0).data0.value = dr.value
     End If
     If no_reduce = 0 Or run_type <= 1 Then
      set_Drelation = 0
      Exit Function
     Else
      no_reduce = 2
        GoTo set_drelation_mark_0
     End If
  End If
   If set_or_prove < 2 Then
  If no_reduce = 0 Then
   no% = 0
  End If
       set_Drelation = 0
        Exit Function
   Else
    If display_inform = 1 Then
    If conclusion_data(0).ty = relation_ And conclusion_data(0).no(0) = no% Then
     prove_type = 4
    event_statue = complete_prove
    End If
        Call display_prove_inform(modify_wenti_no, display)
    Else
    Exit Function
    End If
    End If
    Exit Function
 ElseIf cond_type = eline_ And no% > 0 And run_type < 10 Then
   Call set_level(temp_record.record_data.data0.condition_data)
   If set_prove_type(eline_, no%, temp_record.record_data, Deline(no%).data(0).record) And _
    set_or_prove < 2 Then
      set_Drelation = set_equal_dline( _
       Deline(no%).data(0).data0.poi(0), Deline(no%).data(0).data0.poi(1), _
        Deline(no%).data(0).data0.poi(2), Deline(no%).data(0).data0.poi(3), _
         Deline(no%).data(0).data0.n(0), Deline(no%).data(0).data0.n(1), _
          Deline(no%).data(0).data0.n(2), Deline(no%).data(0).data0.n(3), _
           Deline(no%).data(0).data0.line_no(0), Deline(no%).data(0).data0.line_no(1), _
             0, temp_record, no%, cond_type, no1%, no2%, no_reduce, reduce)
      Exit Function
   End If
    If set_or_prove < 2 Then
       set_Drelation = 0
        Exit Function
   Else
    If display_inform = 1 Then
     If conclusion_data(0).ty = eline_ And conclusion_data(0).no(0) = no% Then
      prove_type = 4
     event_statue = complete_prove
    End If
        Call display_prove_inform(modify_wenti_no, display)
    Else
     Exit Function
    End If
  End If
 ElseIf cond_type = midpoint_ And no% > 0 And run_type < 10 Then
   Call set_level(temp_record.record_data.data0.condition_data)
  If set_prove_type(midpoint_, no%, temp_record.record_data, Dmid_point(no%).data(0).record) And _
       set_or_prove < 2 Then
    set_Drelation = set_mid_point(Dmid_point(no%).data(0).data0.poi(0), _
         Dmid_point(no%).data(0).data0.poi(1), Dmid_point(no%).data(0).data0.poi(2), _
          Dmid_point(no%).data(0).data0.n(0), Dmid_point(no%).data(0).data0.n(1), _
           Dmid_point(no%).data(0).data0.n(2), Dmid_point(no%).data(0).data0.line_no, 0, _
             re, no%, cond_type, no1%, no2%, no_reduce)
         Exit Function
  End If
   If set_or_prove < 2 Then
       set_Drelation = 0
        Exit Function
   Else
    If display_inform = 1 Then
     If conclusion_data(0).ty = midpoint_ And conclusion_data(0).no(0) = no% Then
      prove_type = 4
    event_statue = complete_prove
     End If
        Call display_prove_inform(modify_wenti_no, display)
    Else
      Exit Function
    End If
   End If
Else
 Exit Function
End If
Else
 For i% = 0 To last_conclusion - 1
  If conclusion_data(i%).ty = relation_ And conclusion_data(i%).no(0) = 0 Then
     If con_relation(i%).data(0).poi(0) = dr.poi(0) And _
         con_relation(i%).data(0).poi(1) = dr.poi(1) And _
          con_relation(i%).data(0).poi(2) = dr.poi(2) And _
           con_relation(i%).data(0).poi(3) = dr.poi(3) Then
            GoTo set_drelation_mark10
     End If
  End If
 Next i%
 If set_or_prove = 2 And display_inform = 1 Then
  set_Drelation = 0
    prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
    Exit Function
   End If
 If dr.line_no(2) > 0 And dr.poi(1) = dr.poi(2) Then
  mid_p.line_no = dr.line_no(2)
  mid_p.poi(0) = dr.poi(0)
  mid_p.poi(1) = dr.poi(1)
  mid_p.poi(2) = dr.poi(3)
  mid_p.n(0) = dr.n(0)
  mid_p.n(1) = dr.n(1)
  mid_p.n(2) = dr.n(3)
  If search_for_mid_point(mid_p, 0, 0, 1) Then
   If dr.value <> "1" Then
    error_of_wenti = 1
     set_Drelation = 2
   End If
   Exit Function
  End If
 End If
End If
'****************************************************************
If cond_type = line_value_ Then
no2% = 0
 set_Drelation = set_line_value(dr.poi(0), dr.poi(1), dr.value, _
        dr.n(0), dr.n(1), dr.line_no(0), temp_record, no2%, _
       no_reduce, False)
  Exit Function
ElseIf cond_type = eline_ Then
no% = 0
 set_Drelation = set_equal_dline(dr.poi(0), dr.poi(1), _
     dr.poi(2), dr.poi(3), dr.n(0), dr.n(1), dr.n(2), _
      dr.n(3), dr.line_no(0), dr.line_no(1), 0, temp_record, _
         no%, cond_type, no1%, no2%, no_reduce, reduce)
  Exit Function
ElseIf cond_type = midpoint_ Then
no% = 0
 set_Drelation = set_mid_point(dr.poi(0), dr.poi(1), _
       dr.poi(3), dr.n(0), dr.n(1), dr.n(3), dr.line_no(0), _
         0, temp_record, no%, cond_type, no1%, no2%, no_reduce)
  Exit Function
End If
'*************************************
set_drelation_mark10:
temp_no% = last_conditions.last_cond(1).relation_no
For i% = 1 To temp_no%
 Drelation(i%).record_.index = Drelation(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).relation_no Mod 10 = 0 Then
ReDim Preserve Drelation(last_conditions.last_cond(1).relation_no + 10) As relation_type
End If
 last_conditions.last_cond(1).relation_no = last_conditions.last_cond(1).relation_no + 1
 set_new_data = True
   Drelation(last_conditions.last_cond(1).relation_no).data(0).data0 = dr
    Drelation(last_conditions.last_cond(1).relation_no).reduce = reduce
          Drelation(last_conditions.last_cond(1).relation_no).data(0).record = temp_record.record_data
           Drelation(last_conditions.last_cond(1).relation_no).record_ = temp_record.record_
            Drelation(last_conditions.last_cond(1).relation_no).record_.no_reduce = 0
 For j% = 0 To 3
 For i% = last_conditions.last_cond(1).relation_no To n_(j%) + 2 Step -1
 Drelation(i%).data(0).record.data1.index.i(j%) = Drelation(i% - 1).data(0).record.data1.index.i(j%)
 Next i%
 Drelation(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).relation_no
 Next j%
 no% = last_conditions.last_cond(1).relation_no
 cond_type = relation_
 If last_conditions_for_aid_no > 0 Then
  If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
   If dr.poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       dr.poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        dr.poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
         dr.poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
       last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
    End If
  End If
 End If
ts$ = set_display_relation(Drelation(no%), 0, False, 0, 1, False)
set_Drelation = set_prove_proccess(ts$, relation_, no%, Drelation(no%).data(0).record.display_string)
    If set_Drelation > 1 Then
  Exit Function
Else
  set_Drelation = 1
End If
If no_reduce = 0 Then
  Exit Function
End If
set_drelation_mark0:
If regist_data.run_type = 0 Then
If Drelation(no%).record_.no_reduce = 0 Or _
    Drelation(no%).record_.no_reduce = 2 Or _
     Drelation(no%).record_.no_reduce = 4 Then
set_drelation_mark_0:
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
      Call set_level_(Drelation(no%).record_.no_reduce, 1)
 temp_record.record_data.data0.condition_data.condition_no = 0 ' = record0
  Call add_conditions_to_record(relation_, no%, 0, 0, temp_record.record_data.data0.condition_data)
set_Drelation = set_property_of_relation(Drelation(no%).data(0).data0.poi(0), _
   Drelation(no%).data(0).data0.poi(1), Drelation(no%).data(0).data0.poi(2), Drelation(no%).data(0).data0.poi(3), _
    Drelation(no%).data(0).data0.value, Drelation(no%).data(0).data0.n(0), Drelation(no%).data(0).data0.n(1), _
     Drelation(no%).data(0).data0.n(2), Drelation(no%).data(0).data0.n(3), Drelation(no%).data(0).data0.line_no(0), Drelation(no%).data(0).data0.line_no(1), _
      temp_record, no_reduce)
     If set_Drelation > 1 Then
      Exit Function
     End If
End If
If Drelation(no%).record_.no_reduce < 2 Then
'If Drelation(no%).data(0).record.data0.level < 10 Then
    Call set_level_(Drelation(no%).record_.no_reduce, 2)
set_Drelation = combine_relation_with_others_condition(no%, no_reduce)
If set_Drelation > 1 Then
 Exit Function
End If
'If set_Drelation > 1 Then
' Exit Function
'End If
'等量替换
'End If
End If
Exit Function
set_Drelation_error:
set_Drelation = 0
If set_new_data Then
 last_conditions.last_cond(1).relation_no = temp_no%
 For i% = 1 To temp_no%
 Drelation(i%).data(0).record.data1.index = Drelation(i%).record_.index
 Next i%
End If
'*********************************************
ElseIf Drelation(no%).data(0).record.data0.condition_data.condition_no = 0 Then ' run_type=1
Dim v_value As v_string
Dim vl As V_line_value_data0_type
temp_record.record_data.data0.condition_data.condition_no = 1
temp_record.record_data.data0.condition_data.condition(1).ty = relation_
temp_record.record_data.data0.condition_data.condition(1).no = no%
    n_(0) = vector_number(Drelation(no%).data(0).data0.poi(0), _
             Drelation(no%).data(0).data0.poi(1), "")
    n_(1) = vector_number(Drelation(no%).data(0).data0.poi(2), _
             Drelation(no%).data(0).data0.poi(3), "")
    If Drelation(no%).data(0).data0.line_no(0) = Drelation(no%).data(0).data0.line_no(1) Then
    ElseIf is_dparal(Drelation(no%).data(0).data0.line_no(0), _
                  Drelation(no%).data(0).data0.line_no(1), _
                    n%, -1000, 0, 0, 0, 0) Then
      Call add_conditions_to_record(paral_, n%, 0, 0, temp_record.record_data.data0.condition_data)
    Else
         Call set_item0(n_(0), -10, n_(0), -10, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
              para(0), 0, c_data, 0, dn(0), 0, 0, c_data, False)
         Call set_item0(n_(1), -10, n_(1), -10, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
              para(1), 0, c_data, 0, dn(1), 0, 0, c_data, False)
     set_Drelation = set_general_string(dn(0), dn(1), 0, 0, time_string(para(0), para(0), True, False), _
         time_string(Drelation(no%).data(0).data0.value, _
           time_string("-1", time_string(para(1), para(1), False, False), False, False), True, False), _
            "0", "0", "0", 0, 0, 0, temp_record, 0, 0)
                  Exit Function
   End If
    Call set_item0(n_(0), -10, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          para(0), 0, c_data, 0, dn(0), 0, 0, c_data, False)
    Call set_item0(n_(1), -10, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          para(1), 0, c_data, 0, dn(1), 0, 0, c_data, False)
    set_Drelation = set_general_string(dn(0), dn(1), 0, 0, para(0), _
         time_string(Drelation(no%).data(0).data0.value, _
           time_string("-1", para(1), False, False), True, False), _
            "0", "0", "0", 0, 0, 0, temp_record, 0, 0)
              If set_Drelation > 1 Then
                  Exit Function
              End If
End If
End Function
Public Function set_Drelation0(ByVal p1%, ByVal p2%, ByVal p3%, _
   ByVal p4%, value As String, no%, cond_ty As Byte, re As total_record_type) As Byte
   '结论与推理等价,但形式不同
Dim t_relation_data As relation_data0_type
Dim tn(3) As Integer
Dim i%, j%
Dim temp_record As total_record_type
If InStr(1, value, "F", 0) > 0 Then
 Exit Function
End If
If value = "1" Then
Else
 t_relation_data.line_no(0) = line_number0(p1%, p2%, t_relation_data.n(0), t_relation_data.n(1))
 If t_relation_data.n(0) > t_relation_data.n(1) Then
  Call exchange_two_integer(t_relation_data.n(0), t_relation_data.n(1))
   t_relation_data.poi(0) = p2%
    t_relation_data.poi(1) = p1%
 Else
  t_relation_data.poi(0) = p1%
   t_relation_data.poi(1) = p2%
 End If
 t_relation_data.line_no(1) = line_number0(p3%, p4%, t_relation_data.n(2), t_relation_data.n(3))
 If t_relation_data.n(0) > t_relation_data.n(1) Then
  Call exchange_two_integer(t_relation_data.n(2), t_relation_data.n(3))
   t_relation_data.poi(2) = p4%
    t_relation_data.poi(3) = p3%
 Else
  t_relation_data.poi(2) = p3%
   t_relation_data.poi(3) = p4%
 End If
  t_relation_data.value = value
cond_ty = relation_
If search_for_relation(t_relation_data, 0, no%, 0) Then
    set_Drelation0 = 1
     Exit Function
Else
 tn(0) = no%
  Call search_for_relation(t_relation_data, 1, tn(1), 1) '5.7
   Call search_for_relation(t_relation_data, 2, tn(2), 1)
    Call search_for_relation(t_relation_data, 3, tn(3), 1)
temp_record = re
If last_conditions.last_cond(1).relation_no Mod 10 = 0 Then
 ReDim Preserve Drelation(last_conditions.last_cond(1).relation_no + 10) As relation_type
End If
last_conditions.last_cond(1).relation_no = last_conditions.last_cond(1).relation_no + 1
no% = last_conditions.last_cond(1).relation_no
Drelation(no%).data(0).data0 = t_relation_data
Drelation(no%).data(0).record = temp_record.record_data
 For j% = 0 To 3
 For i% = last_conditions.last_cond(1).relation_no To tn(j%) + 2 Step -1
 Drelation(i%).data(0).record.data1.index.i(j%) = Drelation(i% - 1).data(0).record.data1.index.i(j%)
 Next i%
 Drelation(tn(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).relation_no
 Next j%
 cond_ty = relation_
set_Drelation0 = 1
End If
End If
End Function



Function vertical_line(ByVal l1%, ByVal l2%, t As Boolean, _
         is_draw As Boolean) As Boolean
 't　开关，决定是否延伸垂直关系
Dim i%, j%
Dim n(1) As Integer ', k%
Dim temp_record As record_type
Dim ty As Boolean
If l1% = l2% Or l1% = 0 Or l2% = 0 Then '同一直线
 vertical_line = False
 Exit Function
End If
 For i% = 1 To m_lin(l1%).data(0).in_verti(0).line_no
   '　将line2%放入line1% 的平行线族
 If l2% = m_lin(l1%).data(0).in_verti(i%).line_no Then
 vertical_line = False
  Exit Function
  '　已有垂直关系
 End If
 Next i%
  Call set_line_in_verti(l1%, l2%, 0, 0)
'****************************************************************
 
     ' If Lin(l1%).k(0) <> 0 And Lin(l1%).k(1) <> 0 _
      'And Lin(l2%).k(0) = 0 And Lin(l2%).k(1) = 0 Then
      '设置斜率关系
       
       '   Lin(l2%).k(0) = Lin(l1%).k(1)
        '  Lin(l2%).k(1) = -Lin(l1%).k(0)
      
      'ElseIf Lin(l2%).k(0) <> 0 And Lin(l2%).k(1) <> 0 _
       'And Lin(l1%).k(0) = 0 And Lin(l1%).k(1) = 0 Then
      '设置斜率关系
       
        '  Lin(l1%).k(0) = Lin(l2%).k(1)
         ' Lin(l1%).k(1) = -Lin(l2%).k(0)
     'End If
'**************************************************************************
If t Then
'将垂直关系延伸
 For i% = 1 To m_lin(l1%).data(0).in_verti(0).line_no  '　将line确%放入lin(line1%).data(0).in_paral(i%)  的平行线族
 Call paral_line(m_lin(l1%).data(0).in_verti(i%).line_no, l2%, False, is_draw)
 Next i%
 For i% = 1 To m_lin(l1%).data(0).in_paral(0).line_no
 Call vertical_line(m_lin(l1%).data(0).in_paral(i%).line_no, l2%, False, is_draw)
 Next i%
 For i% = 1 To m_lin(l2%).data(0).in_verti(0).line_no  '　将line确%放入lin(line1%).data(0).in_paral(i%)  的平行线族
 Call paral_line(m_lin(l2%).data(0).in_verti(i%).line_no, l1%, False, is_draw)
 Next i%
  For i% = 1 To m_lin(l2%).data(0).in_paral(0).line_no
 Call vertical_line(m_lin(l2%).data(0).in_paral(i%).line_no, l1%, False, is_draw)
 Next i%
End If
vertical_line = True
End Function


Public Sub set_two_point_line_for_line(ByVal l%, re As record_data_type)
Dim i%, j%
If l% > 0 Then
For i% = 1 To m_lin(l%).data(0).data0.in_point(0) - 1
 For j% = i% + 1 To m_lin(l%).data(0).data0.in_point(0)
  Call set_line_from_two_point(m_lin(l%).data(0).data0.in_point(i%), _
   m_lin(l%).data(0).data0.in_point(j%), i%, j%, l%, 0, 0, re)
 Next j%
Next i%
End If
End Sub
Public Function set_two_line_value(ByVal p1%, ByVal p2%, _
  ByVal p3%, ByVal p4%, ByVal in1%, ByVal in2%, ByVal in3%, _
   ByVal in4%, ByVal il1%, ByVal il2%, ByVal para1 As String, _
    ByVal para2 As String, ByVal v As String, re As total_record_type, _
     no%, ByVal no_reduce As Byte) As Byte
Dim i%, j%, tn%, temp_no%, triA%, n%
Dim n_(3) As Integer
Dim tp(2) As Integer
Dim t_s$
Dim reduce As Boolean
Dim dn(2) As Integer
Dim t_l_value As two_line_value_data0_type
Dim re1 As total_record_type
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim prove_type As Byte
Dim ty As Byte
Dim con_no%
Dim set_new_data As Boolean
Dim level As Byte
Dim t_l As line_value_data0_type
'On Error GoTo set_two_line_value_error
re1 = re
display_inform = 0
If no% > 0 Then
 If two_line_value(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_two_line_value_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
ElseIf no_reduce = 255 Or InStr(1, para1, "F", 0) > 0 Or _
      InStr(1, para2, "F", 0) > 0 Or InStr(1, v, "F", 0) > 0 Then
 Exit Function
End If
temp_record = re
If v = "0" And para1 <> "0" Then
 set_two_line_value = set_Drelation(p1%, p2%, p3%, p4%, _
      0, 0, 0, 0, 0, 0, divide_string(time_string("-1", para2, False, False), _
        para1, True, False), re, 0, 0, 0, 0, no_reduce, reduce)
        Exit Function
Else
If (para1 = "0" Or para1 = "") And (para2 = "0" Or para2 = "") Then
 Exit Function
ElseIf (para1 = "0" Or para1 = "") Then
set_two_line_value = set_line_value(p3%, p4%, _
 divide_string(v, para2, True, False), 0, 0, 0, re, 0, no_reduce, False)
  If set_two_line_value > 1 Then
   Exit Function
  End If
ElseIf para2 = "0" Or para2 = "" Then
set_two_line_value = set_line_value(p1%, p2%, _
 divide_string(v, para1, True, False), 0, 0, 0, re, 0, no_reduce, False)
  If set_two_line_value > 1 Then
   Exit Function
  End If
End If
End If
If no% = -2 Then
initial_string (v)
End If
level = set_level(re1.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
temp_record = re1
ty = is_two_line_value(p1%, p2%, p3%, p4%, in1%, in2%, in3%, _
    in4%, il1%, il2%, para1, para2, v, no%, n_(0), n_(1), _
     n_(2), n_(3), t_l_value, cond_type, _
       temp_record.record_data.data0.condition_data)
If ty > 1 Then
 set_two_line_value = ty
  Exit Function
ElseIf ty = 1 Then
If no% > 0 And run_type < 10 And cond_type = two_line_value_ Then
temp_record1.record_data = re1.record_data
'Call add_conditions_to_record(two_line_value_, no%, 0, 0, _
           temp_record1.record_data.data0.condition_data)
set_two_line_value = set_string_value_(two_line_value(no%).data(0).data0.value, _
                       t_l_value.value, two_line_value_, no%, temp_record1.record_data, no_reduce)
If set_two_line_value > 1 Then
 Exit Function
End If
Call set_level(temp_record.record_data.data0.condition_data)
If cond_type = two_line_value_ Then
level = two_line_value(no%).data(0).record.data0.condition_data.level
If set_prove_type(two_line_value_, no%, re1.record_data, _
     two_line_value(no%).data(0).record) And set_or_prove < 2 Then
     Call simple_record(two_line_value_, no%, two_line_value(no%).data(0).record.data0.condition_data.level, _
                      level)
     If no_reduce = 0 Or run_type <= 1 Then
      set_two_line_value = 0
      Exit Function
     Else
     no_reduce = 0
      GoTo set_two_line_value_mark0
     End If
End If
  
If set_or_prove < 2 Then
 Exit Function
Else
 If display_inform = 1 Then
  If conclusion_data(0).ty = two_line_value_ And conclusion_data(0).no(0) = no% Then
   prove_type = 4
        event_statue = complete_prove
  End If
      Call display_prove_inform(modify_wenti_no, display)
 Else
  Exit Function
 End If
 End If
 ElseIf cond_type = line_value_ Then
  Call set_prove_type(line_value_, no%, temp_record.record_data, _
      line_value(no%).data(0).record)
  Exit Function
 ElseIf cond_type = midpoint_ Then
 ' Call set_level(temp_record.record_data)
  Call set_prove_type(midpoint_, no%, temp_record.record_data, _
      Dmid_point(no%).data(0).record)
  Exit Function
 ElseIf cond_type = eline_ Then
  'Call set_level(temp_record.record_data)
  Call set_prove_type(eline_, no%, temp_record.record_data, _
      Deline(no%).data(0).record)
  Exit Function
 ElseIf cond_type = relation_ Then
  'Call set_level(temp_record.record_data)
  Call set_prove_type(relation_, no%, temp_record.record_data, _
      Drelation(no%).data(0).record)
  Exit Function
 End If
 Else
 Exit Function

 End If
Else
 If set_or_prove = 2 And display_inform = 1 Then
  prove_type = 0
  set_two_line_value = 0
      Call display_prove_inform(modify_wenti_no, display)
       Exit Function
 End If
End If
'*********************
If cond_type = relation_ Then
 set_two_line_value = set_Drelation(t_l_value.poi(0), t_l_value.poi(1), _
     t_l_value.poi(2), t_l_value.poi(3), t_l_value.n(0), t_l_value.n(1), _
      t_l_value.n(2), t_l_value.n(3), t_l_value.line_no(0), t_l_value.line_no(1), _
       time_string("-1", t_l_value.para(1), True, False), temp_record, 0, _
         0, 0, 0, no_reduce, reduce)
 Exit Function
ElseIf cond_type = line_value_ Then
 set_two_line_value = set_line_value(t_l_value.poi(0), t_l_value.poi(1), _
       t_l_value.value, t_l_value.n(0), t_l_value.n(1), t_l_value.line_no(0), _
        temp_record, 0, no_reduce, False)
Exit Function
ElseIf cond_type = eline_ Then
 set_two_line_value = set_equal_dline(t_l_value.poi(0), t_l_value.poi(1), _
     t_l_value.poi(2), t_l_value.poi(3), t_l_value.n(0), t_l_value.n(1), _
      t_l_value.n(2), t_l_value.n(3), t_l_value.line_no(0), t_l_value.line_no(1), _
       0, temp_record, 0, 0, 0, 0, no_reduce, reduce)
  Exit Function
ElseIf cond_type = midpoint_ Then
 set_two_line_value = set_mid_point(t_l_value.poi(0), t_l_value.poi(1), _
      t_l_value.poi(3), t_l_value.n(0), t_l_value.n(1), t_l_value.n(3), _
       t_l_value.line_no(0), 0, temp_record, 0, 0, 0, 0, no_reduce)
  Exit Function
End If
'***********
temp_no% = last_conditions.last_cond(1).two_line_value_no
For i% = 1 To temp_no%
 two_line_value(i%).record_.index = two_line_value(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).two_line_value_no Mod 10 = 0 Then
ReDim Preserve two_line_value(last_conditions.last_cond(1).two_line_value_no + 10) _
                              As two_line_value_type
End If
last_conditions.last_cond(1).two_line_value_no = last_conditions.last_cond(1).two_line_value_no + 1
set_new_data = True
two_line_value(last_conditions.last_cond(1).two_line_value_no).data(0).data0 = t_l_value
two_line_value(last_conditions.last_cond(1).two_line_value_no).data(0).record = temp_record.record_data
two_line_value(last_conditions.last_cond(1).two_line_value_no).record_ = temp_record.record_
two_line_value(last_conditions.last_cond(1).two_line_value_no).record_.no_reduce = 0
For j% = 0 To 3
For i% = last_conditions.last_cond(1).two_line_value_no To n_(j%) + 2 Step -1
two_line_value(i%).data(0).record.data1.index.i(j%) = _
   two_line_value(i% - 1).data(0).record.data1.index.i(j%)
Next i%
two_line_value(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).two_line_value_no
Next j%
no% = last_conditions.last_cond(1).two_line_value_no
If last_conditions_for_aid_no > 0 Then
If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
If t_l_value.poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
    t_l_value.poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
     t_l_value.poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      t_l_value.poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
      last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
End If
End If
End If
 t_s$ = set_display_two_line_value(two_line_value(no%), False, 1, False)
set_two_line_value = set_prove_proccess(t_s$, two_line_value_, no%, two_line_value(no%).data(0).record.display_string)
If set_two_line_value > 1 Then
  Exit Function
End If
If t_l_value.para(0) = "1" And t_l_value.para(1) = "1" And t_l_value.poi(1) > 0 Then
 If triangle(triA%).data(0).length_of_sides_value = "" Then
  If set_triangle0(t_l_value.poi(0), t_l_value.poi(1), t_l_value.poi(2), t_l_value.poi(3), triA%, _
       0, tp(0), tp(1), tp(2), 0, 0, 0) > 0 Then
    If is_line_value(tp(1), tp(2), 0, 0, 0, "", n%, -1000, 0, 0, 0, t_l) = 1 Then
     triangle(triA%).data(0).length_of_sides_value = _
         add_string(line_value(n%).data(0).data0.value, t_l_value.value, True, False)
     Call add_conditions_to_record(line_value_, n%, 0, 0, _
             triangle(triA%).data(0).length_of_sides)
     Call add_record_to_record(temp_record.record_data.data0.condition_data, _
             triangle(triA%).data(0).length_of_sides)
     set_two_line_value = set_length_of_sides_from_length_of_sides(triA%)
       If set_two_line_value > 1 Then
          Exit Function
       End If
    End If
 End If
End If
End If
If no_reduce = 0 Then
' If two_line_value(no%).data(0).record.display_no >= 0 Then
 ' GoTo set_two_line_value_combine
 'Else
  Exit Function
 'End If
End If
set_two_line_value_mark0:
If two_line_value(no%).record_.no_reduce = 0 Or _
    two_line_value(no%).record_.no_reduce = 2 Or _
     two_line_value(no%).record_.no_reduce = 4 Then
 If no_reduce > 0 And no_reduce < 255 Then
  no_reduce = no_reduce - 1
 End If
If two_line_value(no%).data(0).data0.poi(1) > 0 Then '非向量
If two_line_value(no%).data(0).data0.para(0) = "1" And _
    two_line_value(no%).data(0).data0.para(1) = "1" Then
    For i% = 1 To last_conditions.last_cond(1).tixing_no
       If Dpolygon4(Dtixing(i%).data(0).poly4_no).data(0).area_value = "" Then
        If Dtixing(i%).data(0).buttom_(0).ty <> two_line_value_ Then
          If (is_same_two_point(two_line_value(no%).data(0).data0.poi(0), _
               two_line_value(no%).data(0).data0.poi(1), Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1)) And _
               is_same_two_point(two_line_value(no%).data(0).data0.poi(2), _
             two_line_value(no%).data(0).data0.poi(3), Dtixing(i%).data(0).poi(2), Dtixing(i%).data(0).poi(3))) Or _
            (is_same_two_point(two_line_value(no%).data(0).data0.poi(0), _
             two_line_value(no%).data(0).data0.poi(1), Dtixing(i%).data(0).poi(2), Dtixing(i%).data(0).poi(3)) And _
             is_same_two_point(two_line_value(no%).data(0).data0.poi(2), _
             two_line_value(no%).data(0).data0.poi(3), Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1))) Then
              Dtixing(i%).data(0).buttom_(0).ty = two_line_value_
              Dtixing(i%).data(0).buttom_(0).no = no%
              Dtixing(i%).data(0).buttom_(1).ty = 0
              Dtixing(i%).data(0).buttom_(1).no = 0
              set_two_line_value = set_area_of_tixing(i%)
                  If set_two_line_value > 1 Then
                  Exit Function
              End If
          End If
        End If
       End If
    Next i%
End If
End If
End If
       Call set_level_(two_line_value(no%).record_.no_reduce, 1)
'set_two_line_value_combine:
If two_line_value(no%).record_.no_reduce < 2 Then
'If two_line_value(no%).data(0).record.data0.level < 10 Then
    Call set_level_(two_line_value(no%).record_.no_reduce, 2)
set_two_line_value = combine_two_line_with_line_value(no%, 0, no_reduce)
If set_two_line_value > 1 Then
 Exit Function
End If
set_two_line_value = combine_two_line_with_mid_point(no%, 0, no_reduce)
If set_two_line_value > 1 Then
 Exit Function
End If
set_two_line_value = combine_two_line_with_eline(no%, 0, no_reduce)
If set_two_line_value > 1 Then
 Exit Function
End If
set_two_line_value = combine_two_line_with_relation(no%, 0, no_reduce)
If set_two_line_value > 1 Then
 Exit Function
End If
set_two_line_value = combine_two_two_line_(no%, no_reduce)
If set_two_line_value > 1 Then
 Exit Function
End If
set_two_line_value = combine_two_line_with_three_line(no%, 0, no_reduce) 'no_reduce)
If set_two_line_value > 1 Then
 Exit Function
End If
set_two_line_value = combine_two_line_value_with_length_of_polygon(no%)  'no_reduce)
If set_two_line_value > 1 Then
 Exit Function
End If
set_two_line_value = combine_item0_value_with_two_line_value(no%, 0)
  If set_two_line_value > 1 Then
    Exit Function
  End If
set_two_line_value = combine_general_string_with_two_line_value(0, no%)
  If set_two_line_value > 1 Then
    Exit Function
  End If
set_two_line_value = combine_two_line_value_with_item(no%)
'combine_item0_value_and_two_line_value_and_relation( _
    0, no%, 0)
  If set_two_line_value > 1 Then
    Exit Function
  End If
End If
Exit Function
set_two_line_value_error:
set_two_line_value = 0
If set_new_data Then
last_conditions.last_cond(1).two_line_value_no = temp_no
For i% = 1 To temp_no%
two_line_value(i%).data(0).record.data1.index = two_line_value(i%).record_.index
Next i%
End If
End Function


Public Function set_equal_dline(ByVal p1%, ByVal p2%, ByVal p3%, _
      ByVal p4%, ByVal in1%, ByVal in2%, ByVal in3%, ByVal in4%, _
       ByVal il1%, ByVal il2%, ByVal is_no_simple As Byte, _
        re As total_record_type, no%, cond_type As Byte, no1%, no2%, _
         ByVal no_reduce As Byte, is_reduce As Boolean) As Byte
Dim i%, j%, k%, l%, m%, n%, o%, p%, t_n%, temp_no%
Dim n_(4) As Integer
Dim dn(2) As Integer
Dim arc(1) As Integer
Dim tp1(3) As Integer
Dim tn(5) As Integer
'Dim tl(1) As Integer
Dim po As polygon
Dim ty As Boolean
Dim set_new_data As Boolean
Dim el_data As eline_data0_type
Dim con_ty As Byte
Dim ts$
Dim t_p As Integer '记录全等类型
'Dim dn(2) As Integer
Dim temp_record As total_record_type
Dim A(5) As Integer
Dim deg(1) As Integer
Dim triA(1) As temp_triangle_type
Dim con_no%
Dim level As Byte
Dim num_string As String
'On Error GoTo set_equal_dline_error
'cond_type = 0
If no% > 0 Then
 If Deline(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
   GoTo set_equal_dline_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
ElseIf no_reduce = 255 Then
 Exit Function
End If
If no% = 0 And (p1% = p2% Or p3% = p4% Or is_same_two_point(p1%, p2%, p3%, p4%)) Then
 set_equal_dline = 0
  If no% = -1 Then
   prove_type = 0
       Call display_prove_inform(modify_wenti_no, display)
  End If
 Exit Function
End If
display_inform = 0
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_no_simple = 1 Then
 n_(0) = -5000
End If
il1% = line_number0(p1%, p2%, in1%, in2%, False)
il2% = line_number0(p3%, p4%, in3%, in4%, False)

If is_equal_dline(p1%, p2%, p3%, p4%, in1%, in2%, in3%, in4%, _
      il1%, il2%, no%, n_(0), n_(1), n_(2), n_(3), _
      el_data, no1%, no2%, cond_type, num_string, temp_record.record_data.data0.condition_data) Then
      temp_record.record_data = re.record_data
 Call set_level(temp_record.record_data.data0.condition_data)
 If cond_type = eline_ And no% > 0 And run_type < 10 Then
   If Deline(no%).data(0).record.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_ Then
     If is_condition_in_record_(eline_, no%, temp_record.record_data) = 0 Then
         pseudo_total_equal_triangle(Deline(no%).data(0).record.data0.condition_data.condition(1).no). _
            data(0).is_set = 1
         Deline(no%).record_ = temp_record.record_
         Deline(no%).data(0).record = temp_record.record_data
          Exit Function
     End If
  End If
 level = Deline(no%).data(0).record.data0.condition_data.level
  If set_prove_type(eline_, no%, temp_record.record_data, _
       Deline(no%).data(0).record) And _
        set_or_prove < 2 Then
   Call simple_record(eline_, no%, Deline(no%).data(0).record.data0.condition_data.level, level)
       If no_reduce = 0 Then 'Or run_type = 1 Then
       set_equal_dline = 0
         Exit Function
       Else
        no_reduce = 2
   '      Deline(no%).record_.no_reduce = 0
          GoTo set_equal_dline_mark_0
       End If
  End If
   If set_or_prove < 2 Then
   'If no_reduce = 0 Then
   'no% = 0
  'End If
   set_equal_dline = 0
     Exit Function
   Else
    If display_inform = 1 Then
     If conclusion_data(0).ty = eline_ And conclusion_data(0).no(0) = no% Then
      prove_type = 4
    event_statue = complete_prove
     End If
         Call display_prove_inform(modify_wenti_no, display)
    Else
    Exit Function
   End If
   End If
   Exit Function
 ElseIf cond_type = midpoint_ And no% > 0 And run_type < 10 Then
   If set_prove_type(midpoint_, no%, temp_record.record_data, _
       Dmid_point(no%).data(0).record) And set_or_prove < 2 Then
      set_equal_dline = set_mid_point(Dmid_point(no%).data(0).data0.poi(0), _
       Dmid_point(no%).data(0).data0.poi(1), Dmid_point(no%).data(0).data0.poi(2), _
        Dmid_point(no%).data(0).data0.n(0), Dmid_point(no%).data(0).data0.n(1), _
         Dmid_point(no%).data(0).data0.n(2), Dmid_point(no%).data(0).data0.line_no, _
           0, re, no%, cond_type, no1%, no2%, no_reduce)
       Exit Function
    End If
    If set_or_prove < 2 Then
     no% = 0
     set_equal_dline = 0
      Exit Function
    Else
     If display_inform = 1 Then
         Call display_prove_inform(modify_wenti_no, display)
     Else
     Exit Function
     End If
     End If
 Else
       Exit Function
        no% = 0
End If
Else
  If set_or_prove = 2 Then
   set_equal_dline = 0
   prove_type = 0
  Call display_prove_inform(modify_wenti_no, display)
    Exit Function
  End If
End If
For i% = 0 To last_conclusion - 1
 If conclusion_data(i%).ty = eline_ And conclusion_data(i%).no(0) = 0 Then
    If con_eline(i%).data(0).data0.poi(0) = el_data.poi(0) And _
        con_eline(i%).data(0).data0.poi(1) = el_data.poi(1) And _
         con_eline(i%).data(0).data0.poi(2) = el_data.poi(2) And _
          con_eline(i%).data(0).data0.poi(3) = el_data.poi(3) Then
           GoTo set_equal_dline_mark10
    End If
 End If
Next i%
If cond_type = midpoint_ Then
 no% = 0
 set_equal_dline = set_mid_point(el_data.poi(0), _
   el_data.poi(1), el_data.poi(3), el_data.n(0), _
    el_data.n(1), el_data.n(3), el_data.line_no(0), _
     0, re, no%, cond_type, no1%, no2%, no_reduce)
  Exit Function
End If
'**************************
If no% = -1000 Then
 Exit Function
End If
If cond_type = midpoint_ Then
 no% = 0
  set_equal_dline = set_mid_point(el_data.poi(0), _
   el_data.poi(1), el_data.poi(3), el_data.n(0), _
    el_data.n(1), el_data.n(3), el_data.line_no(0), _
     0, temp_record, no%, cond_type, no1%, no2%, no_reduce)
   Exit Function
ElseIf cond_type = line_value_ Then
 no% = 0
 set_equal_dline = set_line_value(el_data.poi(0), _
  el_data.poi(1), num_string, _
  0, 0, 0, temp_record, no2%, no_reduce, False)
  Exit Function
End If
set_equal_dline_mark10:
temp_no% = last_conditions.last_cond(1).eline_no
For i% = 1 To temp_no%
 Deline(i%).record_.index = Deline(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).eline_no Mod 10 = 0 Then
ReDim Preserve Deline(last_conditions.last_cond(1).eline_no + 10) As eline_type
End If
last_conditions.last_cond(1).eline_no = last_conditions.last_cond(1).eline_no + 1
set_new_data = True
Deline(last_conditions.last_cond(1).eline_no).data(0).data0 = el_data
Deline(last_conditions.last_cond(1).eline_no).reduce = is_reduce
Deline(last_conditions.last_cond(1).eline_no).data(0).record = temp_record.record_data
Deline(last_conditions.last_cond(1).eline_no).record_ = temp_record.record_
Deline(last_conditions.last_cond(1).eline_no).record_.no_reduce = 0
If is_no_simple = 1 Then
Deline(last_conditions.last_cond(1).eline_no).record_.no_reduce = 255
For i% = last_conditions.last_cond(1).eline_no To n_(0) + 2 Step -1
 Deline(i%).data(0).record.data1.index.i(0) = Deline(i% - 1).data(0).record.data1.index.i(0)
Next i%
Deline(n_(j%) + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).eline_no
For j% = 1 To 3
For i% = last_conditions.last_cond(1).eline_no To 2 Step -1
 Deline(i%).data(0).record.data1.index.i(j%) = Deline(i% - 1).data(0).record.data1.index.i(j%)
Next i%
Deline(1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).eline_no
Next j%
Else
For j% = 0 To 3
For i% = last_conditions.last_cond(1).eline_no To n_(j%) + 2 Step -1
 Deline(i%).data(0).record.data1.index.i(j%) = Deline(i% - 1).data(0).record.data1.index.i(j%)
Next i%
Deline(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).eline_no
Next j%
End If
no% = last_conditions.last_cond(1).eline_no
cond_type = eline_
If last_conditions_for_aid_no > 0 Then
   If el_data.poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      el_data.poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       el_data.poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        el_data.poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
     last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
   Else
    If el_data.poi(0) = last_conditions.last_cond(1).point_no Then '0顺序
       Call set_add_aid_point_for_eline(el_data.poi(2), el_data.poi(3), el_data.poi(1), _
                el_data.poi(0), el_data.line_no(0), 1)
    ElseIf el_data.poi(1) = last_conditions.last_cond(1).point_no Then
       Call set_add_aid_point_for_eline(el_data.poi(2), el_data.poi(3), el_data.poi(0), _
                el_data.poi(1), el_data.line_no(0), 0)
    ElseIf el_data.poi(2) = last_conditions.last_cond(1).point_no Then
       Call set_add_aid_point_for_eline(el_data.poi(0), el_data.poi(1), el_data.poi(3), _
                el_data.poi(2), el_data.line_no(0), 1)
    ElseIf el_data.poi(3) = last_conditions.last_cond(1).point_no Then
       Call set_add_aid_point_for_eline(el_data.poi(0), el_data.poi(1), el_data.poi(2), _
                el_data.poi(2), el_data.line_no(0), 0)
    End If
   End If
End If
If Deline(no%).data(0).data0.poi(0) = Deline(no%).data(0).data0.poi(2) Then
   Deline(no%).data(0).data0.eside_tri_point(0) = Deline(no%).data(0).data0.poi(0)
    If Deline(no%).data(0).data0.poi(1) < Deline(no%).data(0).data0.poi(3) Then
     Deline(no%).data(0).data0.eside_tri_point(1) = Deline(no%).data(0).data0.poi(1)
     Deline(no%).data(0).data0.eside_tri_point(2) = Deline(no%).data(0).data0.poi(3)
    Else
     Deline(no%).data(0).data0.eside_tri_point(1) = Deline(no%).data(0).data0.poi(3)
     Deline(no%).data(0).data0.eside_tri_point(2) = Deline(no%).data(0).data0.poi(1)
    End If
ElseIf Deline(no%).data(0).data0.poi(0) = Deline(no%).data(0).data0.poi(3) Then
   Deline(no%).data(0).data0.eside_tri_point(0) = Deline(no%).data(0).data0.poi(0)
    If Deline(no%).data(0).data0.poi(1) < Deline(no%).data(0).data0.poi(2) Then
     Deline(no%).data(0).data0.eside_tri_point(1) = Deline(no%).data(0).data0.poi(1)
     Deline(no%).data(0).data0.eside_tri_point(2) = Deline(no%).data(0).data0.poi(2)
    Else
     Deline(no%).data(0).data0.eside_tri_point(1) = Deline(no%).data(0).data0.poi(2)
     Deline(no%).data(0).data0.eside_tri_point(2) = Deline(no%).data(0).data0.poi(1)
    End If
ElseIf Deline(no%).data(0).data0.poi(1) = Deline(no%).data(0).data0.poi(2) Then
   Deline(no%).data(0).data0.eside_tri_point(0) = Deline(no%).data(0).data0.poi(1)
    If Deline(no%).data(0).data0.poi(0) < Deline(no%).data(0).data0.poi(3) Then
     Deline(no%).data(0).data0.eside_tri_point(1) = Deline(no%).data(0).data0.poi(0)
     Deline(no%).data(0).data0.eside_tri_point(2) = Deline(no%).data(0).data0.poi(3)
    Else
     Deline(no%).data(0).data0.eside_tri_point(1) = Deline(no%).data(0).data0.poi(3)
     Deline(no%).data(0).data0.eside_tri_point(2) = Deline(no%).data(0).data0.poi(0)
    End If
ElseIf Deline(no%).data(0).data0.poi(1) = Deline(no%).data(0).data0.poi(3) Then
   Deline(no%).data(0).data0.eside_tri_point(0) = Deline(no%).data(0).data0.poi(1)
    If Deline(no%).data(0).data0.poi(0) < Deline(no%).data(0).data0.poi(2) Then
     Deline(no%).data(0).data0.eside_tri_point(1) = Deline(no%).data(0).data0.poi(0)
     Deline(no%).data(0).data0.eside_tri_point(2) = Deline(no%).data(0).data0.poi(2)
    Else
     Deline(no%).data(0).data0.eside_tri_point(1) = Deline(no%).data(0).data0.poi(2)
     Deline(no%).data(0).data0.eside_tri_point(2) = Deline(no%).data(0).data0.poi(0)
    End If
End If
ts$ = set_display_eline(Deline(no%).data(0), False, False)
set_equal_dline = set_prove_proccess(ts$, eline_, no%, Deline(no%).data(0).record.display_string)
If set_equal_dline > 1 Then
  Exit Function
End If
If no_reduce = 0 Then
  Exit Function
End If
set_equal_dline_mark0:
If regist_data.run_type = 0 Then
If Deline(no%).record_.no_reduce = 0 Or _
    Deline(no%).record_.no_reduce = 2 Or _
     Deline(no%).record_.no_reduce = 4 Then
set_equal_dline_mark_0:
 If no_reduce > 0 And no_reduce < 255 Then
 no_reduce = no_reduce - 1
 End If
      Call set_level_(Deline(no%).record_.no_reduce, 1)
'*****************************************
temp_record.record_data.data0.condition_data.condition_no = 0 ' = record0
Call add_conditions_to_record(eline_, no%, 0, 0, temp_record.record_data.data0.condition_data)
temp_record.record_data.data0.condition_data.condition_no = 1
   set_equal_dline = set_property_of_eline( _
    Deline(no%).data(0).data0.poi(0), Deline(no%).data(0).data0.poi(1), _
     Deline(no%).data(0).data0.poi(2), Deline(no%).data(0).data0.poi(3), _
      Deline(no%).data(0).data0.n(0), Deline(no%).data(0).data0.n(1), _
       Deline(no%).data(0).data0.n(2), Deline(no%).data(0).data0.n(3), _
        Deline(no%).data(0).data0.line_no(0), Deline(no%).data(0).data0.line_no(1), _
         Deline(no%).data(0).data0.eside_tri_point(0), _
          Deline(no%).data(0).data0.eside_tri_point(1), _
           Deline(no%).data(0).data0.eside_tri_point(2), temp_record, 0, no_reduce)
If set_equal_dline > 1 Then
 Exit Function
End If
End If
set_equal_dline_combine:
If Deline(no%).record_.no_reduce < 2 Then
' If Deline(no%).data(0).record.data0.level < 10 Then
     Call set_level_(Deline(no%).record_.no_reduce, 2)
 set_equal_dline = combine_eline_with_line_value(no%, 0, no_reduce)
   If set_equal_dline > 1 Then
    Exit Function
   End If
 set_equal_dline = combine_eline_with_item(no%, no_reduce) ', no_reduce)
 If set_equal_dline > 1 Then
  Exit Function
 End If
 set_equal_dline = combine_eline_with_eline(no%, no_reduce)
 If set_equal_dline > 1 Then
  Exit Function
 End If
   set_equal_dline = combine_eline_with_midpoint(no%, 0, no_reduce)
   If set_equal_dline > 1 Then
    Exit Function
   End If
  set_equal_dline = combine_eline_with_relation(no%, 0, no_reduce)
   If set_equal_dline > 1 Then
    Exit Function
   End If
   set_equal_dline = combine_eline_with_two_line(no%, 0, no_reduce)
   If set_equal_dline > 1 Then
    Exit Function
   End If
set_equal_dline = combine_eline_with_three_line(no%, 0, no_reduce)
   If set_equal_dline > 1 Then
    Exit Function
   End If
set_equal_dline = combine_eline_with_dpoint_pair(no%, 0, no_reduce)
 If set_equal_dline > 1 Then
  Exit Function
 End If
set_equal_dline = combine_eline_with_length_of_polygon(no%)
 If set_equal_dline > 1 Then
  Exit Function
 End If
'End If
End If
Exit Function
set_equal_dline_error:
set_equal_dline = 0
If set_new_data Then
last_conditions.last_cond(1).eline_no = temp_no%
For i% = 1 To temp_no%
Deline(i%).data(0).record.data1.index = Deline(0).record_.index
Next i%
End If
ElseIf Deline(no%).data(0).record.data0.condition_data.condition_no = 0 Then
End If
'***************************************************
End Function
Public Function set_equal_dline0(ByVal p1%, ByVal p2%, ByVal p3%, _
      ByVal p4%, no%, cond_ty As Byte, re As total_record_type) As Byte
Dim t_eline_data As eline_data0_type
Dim temp_record As total_record_type
Dim tn(3) As Integer
Dim i%, j%
t_eline_data.line_no(0) = line_number0(p1%, p2%, _
              t_eline_data.n(0), t_eline_data.n(1))
If t_eline_data.n(0) < t_eline_data.n(1) Then
    t_eline_data.poi(0) = p1%
    t_eline_data.poi(1) = p2%
Else
  Call exchange_two_integer(t_eline_data.n(0), t_eline_data.n(1))
    t_eline_data.poi(0) = p2%
    t_eline_data.poi(1) = p1%
End If
t_eline_data.line_no(1) = line_number0(p3%, p4%, _
              t_eline_data.n(2), t_eline_data.n(3))
If t_eline_data.n(2) < t_eline_data.n(3) Then
    t_eline_data.poi(2) = p3%
    t_eline_data.poi(3) = p4%
Else
  Call exchange_two_integer(t_eline_data.n(2), t_eline_data.n(3))
    t_eline_data.poi(2) = p4%
    t_eline_data.poi(3) = p3%
End If
If t_eline_data.line_no(0) > t_eline_data.line_no(1) Then
  Call exchange_two_integer(t_eline_data.n(0), t_eline_data.n(2))
  Call exchange_two_integer(t_eline_data.n(1), t_eline_data.n(3))
  Call exchange_two_integer(t_eline_data.poi(0), t_eline_data.poi(2))
  Call exchange_two_integer(t_eline_data.poi(1), t_eline_data.poi(3))
ElseIf t_eline_data.line_no(0) = t_eline_data.line_no(1) Then
  If t_eline_data.n(0) > t_eline_data.n(2) Then
   Call exchange_two_integer(t_eline_data.n(0), t_eline_data.n(2))
   Call exchange_two_integer(t_eline_data.n(1), t_eline_data.n(3))
   Call exchange_two_integer(t_eline_data.poi(0), t_eline_data.poi(2))
   Call exchange_two_integer(t_eline_data.poi(1), t_eline_data.poi(3))
  ElseIf t_eline_data.n(0) = t_eline_data.n(2) Then
   If t_eline_data.n(1) = t_eline_data.n(3) Then
    cond_ty = eline_
     set_equal_dline0 = 0
      Exit Function
   Else
     set_equal_dline0 = 2
      error_of_wenti = 2 '结论有错
       Exit Function
   End If
  End If
End If
If t_eline_data.line_no(0) = t_eline_data.line_no(1) And _
      t_eline_data.n(1) = t_eline_data.line_no(2) Then
  set_equal_dline0 = set_mid_point(t_eline_data.poi(0), t_eline_data.poi(1), _
       t_eline_data.poi(3), t_eline_data.n(0), t_eline_data.n(1), _
        t_eline_data.n(3), t_eline_data.line_no(0), 0, re, no%, cond_ty, 0, 0, 0)
Else
 If search_for_eline(t_eline_data, 0, no%, 0) Then
    cond_ty = eline_
     set_equal_dline0 = 1
 Else
 tn(0) = no%
Call search_for_eline(t_eline_data, 1, tn(1), 1)
Call search_for_eline(t_eline_data, 1, tn(2), 1)
Call search_for_eline(t_eline_data, 1, tn(3), 1)
temp_record.record_data = re.record_data
If last_conditions.last_cond(1).dline1_no Mod 10 = 0 Then
ReDim Preserve Deline(last_conditions.last_cond(1).dline1_no + 10) As eline_type
End If
last_conditions.last_cond(1).dline1_no = last_conditions.last_cond(1).dline1_no + 1
no% = last_conditions.last_cond(1).dline1_no
Deline(no%).data(0).data0 = t_eline_data
Deline(no%).data(0).record = temp_record.record_data
For j% = 0 To 3
For i% = last_conditions.last_cond(1).eline_no To tn(j%) + 2 Step -1
 Deline(i%).data(0).record.data1.index.i(j%) = Deline(i% - 1).data(0).record.data1.index.i(j%)
Next i%
Deline(tn(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).eline_no
Next j%
End If
End If
End Function

Function paral_line(ByVal Line1%, ByVal line2%, t As Boolean, _
                 is_draw As Boolean) As Boolean
 't　开关，决定是否延伸垂直关系
Dim i%, j%, k%
Dim l1%, l2%
l1% = Line1%
 l2% = line2%
If Line1% = line2% Then '同一直线
  paral_line = False
   Exit Function
End If
'************************************************************
  For i% = 1 To m_lin(l1%).data(0).data0.in_point(0)
   For j% = 1 To m_lin(l2%).data(0).data0.in_point(0)
    If m_lin(l1%).data(0).data0.in_point(i%) = _
        m_lin(l2%).data(0).data0.in_point(j%) Then
         '有一点相同　消线
        If l1% < l2% Then
          'If t Then
            'Call draw_line(Draw_form, m_lin(l2%).data(0).data0, condition, 0)
              '消除线的象
          'End If
           '将line2的点加到line1上
          For k% = 1 To m_lin(l2%).data(0).data0.in_point(0)
          record_0.data0.condition_data.condition_no = 0
           Call add_point_to_line(m_lin(l2%).data(0).data0.in_point(k%), _
              Line1%, 0, display, is_draw, 0)
          Next k%
           Call delete_line(l2%)
         ElseIf l1% > l2% Then
          'If t Then
           'Call draw_line(Draw_form, m_lin(l1%).data(0).data0, condition, 0)
           'End If
         For k% = 1 To m_lin(l1%).data(0).data0.in_point(0)
         record_0.data0.condition_data.condition_no = 0
           Call add_point_to_line(m_lin(l1%).data(0).data0.in_point(k%), line2%, 0, _
              display, is_draw, 0)
         Next k%
           Call delete_line(l1%)
          End If
      Exit Function
       paral_line = True
     End If
  Next j%
  Next i%
 Call set_line_in_paral(l1%, l2%, 0)
If t = True Then
'将垂直关系延伸
 For i% = 1 To m_lin(l1%).data(0).in_verti(0).line_no  '　将line确%放入lin(line1%).data(0).in_paral(i%)  的平行线族
 Call vertical_line(m_lin(l1%).data(0).in_verti(i%).line_no, line2%, False, is_draw)
 Next i%
 For i% = 1 To m_lin(l1%).data(0).in_paral(0).line_no
 Call paral_line(m_lin(l1%).data(0).in_paral(i%).line_no, l2%, False, is_draw)
 Next i%
 For i% = 1 To m_lin(l2%).data(0).in_verti(0).line_no  '　将line确%放入lin(line1%).data(0).in_paral(i%)  的平行线族
 Call vertical_line(m_lin(l2%).data(0).in_verti(i%).line_no, l1%, False, is_draw)
 Next i%
  For i% = 1 To m_lin(l2%).data(0).in_paral(0).line_no
 Call paral_line(m_lin(l2%).data(0).in_paral(i%).line_no, l1%, False, is_draw)
 Next i%
End If
paral_line = True
End Function


Public Function set_dparal(ByVal l1%, ByVal l2%, _
      re As total_record_type, no%, ByVal no_reduce As Byte, reduce As Boolean) As Byte
Dim i%, j%, k%, l%, m%, n%, o%, dn%, temp_no%
Dim arc(1) As Integer
Dim n_(2) As Integer
Dim temp_record1 As total_record_type
Dim temp_record As total_record_type
Dim ty As Boolean
Dim tl(8) As Integer
Dim tp(3) As Integer
Dim A(1) As Integer
Dim p(5) As Integer
Dim p1(2) As Integer
Dim p2(2) As Integer
Dim tn(2) As Integer
Dim level As Byte
Dim cond_ty As Byte
Dim set_new_data As Boolean
Dim d_n(2) As Integer
Dim ts$
Dim el_data0 As eline_data0_type
Dim c_data As condition_data_type
Dim lv0  As line_value_data0_type
'On Error GoTo set_dparal_error
display_inform = 0
If no% > 0 Then
 'If m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).no_reduce > 0 Or _
 '    m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).no_reduce > 0 Then
 '     Dparal(no%).record_.no_reduce = 255
 'End If
 If Dparal(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_dparal_mark0
 End If
ElseIf no% = -1 Then
display_inform = 1
ElseIf no_reduce = 255 Then
 Exit Function
End If
If no% = 0 And (l1% = 0 Or l2% = 0 Or l1% = l2%) Then
set_dparal = 0
         Exit Function
'ElseIf m_lin(l1%).data(0).no_reduce > 0 Or _
 '       m_lin(l2%).data(0).no_reduce > 0 Then
  '       Exit Function
End If
If m_lin(l1%).data(0).other_no > 0 Then
   l1% = m_lin(l1%).data(0).other_no
End If
If m_lin(l2%).data(0).other_no > 0 Then
   l2% = m_lin(l2%).data(0).other_no
End If

temp_record = re
'***************************************************************
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
'**********************************************************
If is_dparal(l1%, l2%, no%, n_(0), n_(1), n_(2), tl(0), tl(1)) Then
 If no% > 0 And run_type < 10 And run_type <> 3 Then
 level = Dparal(no%).data(0).data0.record.data0.condition_data.level
 If set_prove_type(paral_, no%, temp_record.record_data, _
      Dparal(no%).data(0).data0.record) And set_or_prove < 2 Then
  Call simple_record(paral_, no%, Dparal(no%).data(0).data0.record.data0.condition_data.level, level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
       set_dparal = 0
      Exit Function
     Else
      no_reduce = 2
       Dparal(no%).record_.no_reduce = 0
        GoTo set_dparal_mark_0
     End If
 ElseIf no_reduce > 0 Then
      GoTo set_dparal_mark0
 End If
 End If
   If set_or_prove < 2 Then
       set_dparal = 0
    Exit Function
   Else
    If display_inform = 1 Then
     set_dparal = 0
    If conclusion_data(0).ty = paral_ And conclusion_data(0).no(0) = no% Then
     prove_type = 0
    End If
     Call display_prove_inform(modify_wenti_no, display)
    Else
     Exit Function
    End If
    End If
  If no_reduce = 0 Then
   no% = 0
  End If
  Exit Function
Else
 If draw_or_prove = 1 And display_inform = 1 Then
  prove_type = 0
     Call display_prove_inform(modify_wenti_no, display)
   Exit Function
 End If
End If
'设置新数据
'*******************************************
tp(0) = is_line_line_intersect(tl(0), tl(1), 0, 0, False)
 If tp(0) > 0 Then
 temp_record.record_data = re.record_data
 set_dparal = combine_two_line(tl(0), tl(1), tp(0), temp_record.record_data, 0, 0)
  If set_dparal > 1 Then
  Exit Function
  End If
End If
If is_two_paral_same_(tl(0), tl(1), n%, tl(2), tl(3)) Then
 Call add_conditions_to_record(paral_, n%, 0, 0, temp_record.record_data.data0.condition_data)
 set_dparal = combine_two_line(tl(2), tl(3), 0, temp_record.record_data, 0, 0)
  Exit Function
End If
 temp_no% = last_conditions.last_cond(1).paral_no
 For i% = 1 To temp_no
 Dparal(i%).record_.index = Dparal(i%).data(0).data0.record.data1.index
 Next i%
 If last_conditions.last_cond(1).paral_no Mod 10 = 0 Then
 ReDim Preserve Dparal(last_conditions.last_cond(1).paral_no + 10) As paral_type
 End If
 last_conditions.last_cond(1).paral_no = last_conditions.last_cond(1).paral_no + 1
 set_new_data = True
 Dparal(last_conditions.last_cond(1).paral_no).data(0).data0 = two_line_data_0
  Dparal(last_conditions.last_cond(1).paral_no).data(0).data0.line_no(0) = tl(0)
   Dparal(last_conditions.last_cond(1).paral_no).data(0).data0.line_no(1) = tl(1)
    Dparal(last_conditions.last_cond(1).paral_no).data(0).data0.record = temp_record.record_data
     Dparal(last_conditions.last_cond(1).paral_no).record_ = temp_record.record_
      Dparal(last_conditions.last_cond(1).paral_no).reduce = reduce
      Dparal(last_conditions.last_cond(1).paral_no).record_.no_reduce = 0
       Call set_line_in_paral(Dparal(last_conditions.last_cond(1).paral_no).data(0).data0.line_no(0), _
             Dparal(last_conditions.last_cond(1).paral_no).data(0).data0.line_no(1), _
                last_conditions.last_cond(1).paral_no)
       '  Call add_paral_line_to_line(Dparal(last_conditions.last_cond(1).paral_no).data(0).data0.line_no(1), _
             Dparal(last_conditions.last_cond(1).paral_no).data(0).data0.line_no(0), _
                last_conditions.last_cond(1).paral_no)
For j% = 0 To 2
For i% = last_conditions.last_cond(1).paral_no To n_(j%) + 2 Step -1
 Dparal(i%).data(0).data0.record.data1.index.i(j%) = Dparal(i% - 1).data(0).data0.record.data1.index.i(j%)
Next i%
 Dparal(n_(j%) + 1).data(0).data0.record.data1.index.i(j%) = last_conditions.last_cond(1).paral_no
Next j%
  no% = last_conditions.last_cond(1).paral_no
If last_conditions_for_aid_no > 0 Then
 If tl(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).line_no And _
      tl(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).line_no Then
  last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
 Else
  If tl(0) > last_conditions.last_cond(1).line_no Then
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0) = tl(0) Then
    tl(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0)
   ElseIf new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1) = tl(0) Then
    tl(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1)
   End If
   If tl(2) > 0 Then
   For i% = 1 To m_lin(tl(0)).data(0).data0.in_point(0)
    If m_lin(tl(0)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(0)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_two_line(m_lin(tl(0)).data(0).data0.in_point(i%), _
                                                 tl(1), paral_, tl(2), 0)
    End If
   Next i%
  End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0) > 0 Then
   For i% = 1 To m_lin(tl(0)).data(0).data0.in_point(0)
    If m_lin(tl(0)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
         m_lin(tl(0)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_line_circle(m_lin(tl(0)).data(0).data0.in_point(i%), _
       tl(1), 1, new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0), 0)
    End If
   Next i%
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1) > 0 Then
   For i% = 1 To m_lin(tl(0)).data(0).data0.in_point(0)
    If m_lin(tl(0)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(0)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_line_circle(m_lin(tl(0)).data(0).data0.in_point(i%), _
       tl(1), 1, new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1), 0)
    End If
   Next i%
   End If
  ElseIf tl(1) > last_conditions.last_cond(1).line_no Then
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0) = tl(1) Then
    tl(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0)
   ElseIf new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1) = tl(1) Then
    tl(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1)
   End If
   If tl(2) > 0 Then
   For i% = 1 To m_lin(tl(1)).data(0).data0.in_point(0)
    If m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_two_line(m_lin(tl(1)).data(0).data0.in_point(i%), _
                                                   tl(0), paral_, tl(2), 0)
    End If
   Next i%
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0) > 0 Then
   For i% = 1 To m_lin(tl(1)).data(0).data0.in_point(0)
    If m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_line_circle(m_lin(tl(1)).data(0).data0.in_point(i%), _
       tl(0), 1, new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0), 0)
    End If
   Next i%
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1) > 0 Then
   For i% = 1 To m_lin(tl(1)).data(0).data0.in_point(0)
    If m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_line_circle(m_lin(tl(1)).data(0).data0.in_point(i%), _
       tl(0), 1, new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1), 0)
    End If
   Next i%
   End If
  End If
 End If
End If
n% = 0
Call is_distance_of_paral(0, no%, n%, 0)
If n% > 0 Then
         set_dparal = set_height_of_tixing(no%)
          If set_dparal > 1 Then
           Exit Function
          End If
End If
set_paral_aid_out:
    ts$ = set_display_paral(Dparal(no%).data(0).data0, False, 0, False)
set_dparal = set_prove_proccess(ts$, paral_, no%, Dparal(no%).data(0).data0.record.display_string)
         If set_dparal > 1 Then
           Exit Function
         End If
If no_reduce = 0 Then
 Exit Function
End If
set_dparal_mark0:
 If Dparal(no%).record_.no_reduce = 0 Then
set_dparal_mark_0:
        Dparal(no%).record_.no_reduce = 255
 If no_reduce > 0 And no_reduce < 255 Then
 no_reduce = no_reduce - 1
 End If
 If regist_data.run_type = 0 Then
        Call set_level_(Dparal(no%).record_.no_reduce, 1)
temp_record1.record_data.data0.condition_data.condition_no = 0 ' = record0
 Call add_conditions_to_record(paral_, no%, 0, 0, temp_record1.record_data.data0.condition_data)
     tl(0) = Dparal(no%).data(0).data0.line_no(0)
      tl(1) = Dparal(no%).data(0).data0.line_no(1)
'************************************************************
'平行线夹的弧等
temp_record = temp_record1
 set_dparal = set_simple_polygon_from_paral(no_reduce)
 If set_dparal > 1 Then
  Exit Function
 End If
 For i% = 2 To m_lin(tl(0)).data(0).data0.in_point(0)
  For j% = 1 To i% - 1
   For k% = 2 To m_lin(tl(1)).data(0).data0.in_point(0)
    For l% = 1 To k% - 1
If ((m_poi(m_lin(tl(0)).data(0).data0.poi(0)).data(0).data0.coordinate.X < m_poi(m_lin(tl(0)).data(0).data0.poi(1)).data(0).data0.coordinate.X - 10) _
 And (m_poi(m_lin(tl(1)).data(0).data0.poi(0)).data(0).data0.coordinate.X < m_poi(m_lin(tl(1)).data(0).data0.poi(1)).data(0).data0.coordinate.X - 10)) Or _
 (m_poi(m_lin(tl(0)).data(0).data0.poi(0)).data(0).data0.coordinate.X > m_poi(m_lin(tl(0)).data(0).data0.poi(1)).data(0).data0.coordinate.X + 10) _
 And (m_poi(m_lin(tl(1)).data(0).data0.poi(0)).data(0).data0.coordinate.X > m_poi(m_lin(tl(1)).data(0).data0.poi(1)).data(0).data0.coordinate.X + 10) Or _
(m_poi(m_lin(tl(0)).data(0).data0.poi(0)).data(0).data0.coordinate.Y < m_poi(m_lin(tl(0)).data(0).data0.poi(1)).data(0).data0.coordinate.Y - 10) _
 And (m_poi(m_lin(tl(1)).data(0).data0.poi(0)).data(0).data0.coordinate.Y < m_poi(m_lin(tl(1)).data(0).data0.poi(1)).data(0).data0.coordinate.Y - 10) Or _
(m_poi(m_lin(tl(0)).data(0).data0.poi(0)).data(0).data0.coordinate.Y > m_poi(m_lin(tl(0)).data(0).data0.poi(1)).data(0).data0.coordinate.Y + 10) _
 And (m_poi(m_lin(tl(1)).data(0).data0.poi(0)).data(0).data0.coordinate.Y > m_poi(m_lin(tl(1)).data(0).data0.poi(1)).data(0).data0.coordinate.Y + 10) Then
 temp_record.record_data.data0.theorem_no = 89
 set_dparal = set_tixing(m_lin(tl(0)).data(0).data0.in_point(i%), m_lin(tl(0)).data(0).data0.in_point(j%), _
      m_lin(tl(1)).data(0).data0.in_point(l%), m_lin(tl(1)).data(0).data0.in_point(k%), tixing_, temp_record, 0, no_reduce)
      If set_dparal > 1 Then
        Exit Function
      End If
 Else
 set_dparal = set_tixing(m_lin(tl(0)).data(0).data0.in_point(i%), m_lin(tl(0)).data(0).data0.in_point(j%), _
      m_lin(tl(1)).data(0).data0.in_point(k%), m_lin(tl(1)).data(0).data0.in_point(l%), tixing_, temp_record, 0, no_reduce)
        If set_dparal > 1 Then
        Exit Function
      End If
 End If
'*************
'平行的弦所夹的弧相等
'**************************************************
 If th_chose(124).chose = 1 Then
   temp_record.record_data.data0.condition_data.condition_no = 0
    Call add_conditions_to_record(paral_, no%, 0, 0, temp_record.record_data.data0.condition_data)
  temp_record.record_data.data0.theorem_no = 124
    If is_four_point_on_circle(m_lin(tl(0)).data(0).data0.in_point(i%), _
     m_lin(tl(0)).data(0).data0.in_point(j%), m_lin(tl(1)).data(0).data0.in_point(k%), _
       m_lin(tl(1)).data(0).data0.in_point(l%), dn%, -1000, 0, 0, 0, 0, 0, _
        0, 0, 0, 0, p4_on_C, False) Then
      If dn% > 0 Then
        temp_record.record_data.data0.condition_data.condition_no = 2
         temp_record.record_data.data0.condition_data.condition(2).ty = point4_on_circle_
          temp_record.record_data.data0.condition_data.condition(2).no = dn%
    set_dparal = set_equal_dline(m_lin(tl(0)).data(0).data0.in_point(i%), _
     m_lin(tl(1)).data(0).data0.in_point(k%), m_lin(tl(0)).data(0).data0.in_point(j%), _
      m_lin(tl(1)).data(0).data0.in_point(l%), 0, 0, 0, 0, 0, 0, 0, _
       temp_record, 0, 0, 0, 0, no_reduce, False)
      If set_dparal > 1 Then
       Exit Function
      End If
   set_dparal = set_equal_dline(m_lin(tl(0)).data(0).data0.in_point(i%), _
     m_lin(tl(1)).data(0).data0.in_point(l%), m_lin(tl(0)).data(0).data0.in_point(j%), _
      m_lin(tl(1)).data(0).data0.in_point(k%), 0, 0, 0, 0, 0, 0, 0, _
       temp_record, 0, 0, 0, 0, no_reduce, False)
       If set_dparal > 1 Then
        Exit Function
       End If
 If four_point_on_circle(dn%).data(0).circ > 0 Then
  arc(0) = arc_no(m_lin(tl(0)).data(0).data0.in_point(i%), _
         four_point_on_circle(dn%).data(0).circ, m_lin(tl(1)).data(0).data0.in_point(k%))
  arc(1) = arc_no(m_lin(tl(0)).data(0).data0.in_point(j%), _
         four_point_on_circle(dn%).data(0).circ, m_lin(tl(1)).data(0).data0.in_point(l%))
   If arc(0) > 0 And arc(1) > 0 Then
    set_dparal = set_equal_arc(arc(0), arc(1), temp_record, 0, no_reduce)
   If set_dparal > 1 Then
    Exit Function
   End If
   End If
 arc(0) = arc_no(m_lin(tl(0)).data(0).data0.in_point(i%), _
       four_point_on_circle(dn%).data(0).circ, m_lin(tl(1)).data(0).data0.in_point(l%))
 arc(1) = arc_no(m_lin(tl(0)).data(0).data0.in_point(j%), _
      four_point_on_circle(dn%).data(0).circ, m_lin(tl(1)).data(0).data0.in_point(k%))
   If arc(0) > 0 And arc(1) > 0 Then
   set_dparal = set_equal_arc(arc(0), arc(1), temp_record, 0, no_reduce)
    If set_dparal > 1 Then
     Exit Function
    End If
   End If
    End If
    End If
 End If
 '****************************************************
'***************************************************************
'相似
If th_chose(104).chose = 1 Then
    tp(0) = is_line_line_intersect( _
     line_number0(m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(i%), _
      m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(k%), 0, 0), line_number0( _
       m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(j%), _
        m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(l%), 0, 0), 0, 0, False)
   If tp(0) = 0 Then
   tp(0) = is_line_line_intersect( _
     line_number0(m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(i%), _
      m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(l%), 0, 0), line_number0( _
       m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(j%), _
        m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(k%), 0, 0), 0, 0, False)
         p1(0) = m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(i%)
         p1(1) = m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(j%)
         p2(0) = m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(l%)
         p2(1) = m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(k%)
   Else
         p1(0) = m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(i%)
         p1(1) = m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(j%)
         p2(0) = m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(k%)
         p2(1) = m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(l%)
   End If
    If tp(0) > 0 Then
     If p1(0) <> p1(1) And p2(0) <> p2(1) Then
      If tp(0) <> p1(0) And tp(0) <> p1(1) And tp(0) <> p2(0) And tp(0) <> p2(1) Then
     temp_record.record_data.data0.condition_data.condition_no = 1
      c_data.condition_no = 0
      If is_equal_dline(tp(0), p1(0), tp(0), p2(0), 0, 0, 0, 0, _
            0, 0, tn(0), -1000, 0, 0, 0, el_data0, tn(1), tn(2), cond_ty, "", c_data) Then
       Call add_conditions_to_record(cond_ty, tn(0), tn(1), tn(2), temp_record.record_data.data0.condition_data)
       Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
       temp_record.record_data.data0.theorem_no = 30
     set_dparal = set_total_equal_triangle(tp(0), p1(0), _
      p1(1), tp(0), p2(0), p2(1), temp_record, 0, no_reduce)
       If set_dparal > 1 Then
        Exit Function
       End If
      ElseIf is_equal_dline(tp(0), p1(1), tp(0), p2(1), 0, 0, 0, 0, _
            0, 0, tn(0), -1000, 0, 0, 0, el_data0, tn(1), tn(2), cond_ty, "", c_data) Then
       Call add_conditions_to_record(cond_ty, tn(0), tn(1), tn(2), temp_record.record_data.data0.condition_data)
       Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
      temp_record.record_data.data0.theorem_no = 30
      set_dparal = set_total_equal_triangle(tp(0), p1(0), p1(0), tp(0), _
        p2(0), p2(1), temp_record, 0, no_reduce)
       If set_dparal > 1 Then
        Exit Function
       End If
      ElseIf is_equal_dline(p1(1), p1(0), p2(1), p2(0), 0, 0, 0, 0, _
             0, 0, tn(0), -1000, 0, 0, 0, el_data0, tn(1), tn(2), cond_ty, "", c_data) Then
        Call add_conditions_to_record(cond_ty, tn(0), tn(1), tn(2), temp_record.record_data.data0.condition_data)
        Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
      temp_record.record_data.data0.theorem_no = 30
      set_dparal = set_total_equal_triangle(tp(0), p1(0), p1(1), tp(0), _
        p2(0), p2(1), temp_record, 0, no_reduce)
       If set_dparal > 1 Then
        Exit Function
       End If
     Else
      temp_record.record_data.data0.theorem_no = 104 '相似
      If is_three_point_on_line(tp(0), p1(0), p2(0), n_(0), -1000, 0, 0, c_data, 0, 0, 0) Then
       If n_(0) > 0 And three_point_on_line(n_(0)).data(0).record.data0.condition_data.condition_no > 1 Then
          For dn% = 1 To three_point_on_line(n_(0)).data(0).record.data0.condition_data.condition_no
           Call add_conditions_to_record(three_point_on_line(n_(0)).data(0).record.data0.condition_data.condition(dn%).ty, _
              three_point_on_line(n_(0)).data(0).record.data0.condition_data.condition(dn%).no, 0, 0, _
               temp_record.record_data.data0.condition_data)
          Next dn%
       End If
      End If
      If is_three_point_on_line(tp(0), p1(1), p2(1), n_(1), -1000, 0, 0, c_data, 0, 0, 0) Then
       If n_(1) > 0 And three_point_on_line(n_(1)).data(0).record.data0.condition_data.condition_no > 1 Then
          For dn% = 1 To three_point_on_line(n_(1)).data(0).record.data0.condition_data.condition_no
           Call add_conditions_to_record(three_point_on_line(n_(1)).data(0).record.data0.condition_data.condition(dn%).ty, _
              three_point_on_line(n_(1)).data(0).record.data0.condition_data.condition(dn%).no, 0, 0, _
               temp_record.record_data.data0.condition_data)
          Next dn%
       End If
      End If
       set_dparal = set_similar_triangle(tp(0), p1(0), p1(1), tp(0), _
        p2(0), p2(1), temp_record, 0, no_reduce, 1)
       If set_dparal > 1 Then
        Exit Function
       End If
        set_dparal = set_dpoint_pair(tp(0), p1(0), p1(0), p2(0), tp(0), _
        p1(1), p1(1), p2(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp_record, 0, _
          0, 0, 0, 0, False)
       If set_dparal > 1 Then
        Exit Function
       End If
       ' set_dparal = set_dpoint_pair(p1(0), p1(1), p2(0), p2(1), tp(0), _
        p1(0), tp(0), p2(0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp_record, 0, _
          0, 0, 0, 0)
       'If set_dparal > 1 Then
       ' Exit Function
       'End If
       ' set_dparal = set_dpoint_pair(p1(0), p1(1), p2(0), p2(1), tp(0), _
       ' p1(1), tp(0), p2(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp_record, 0, _
          0, 0, 0, 0)
       'If set_dparal > 1 Then
       ' Exit Function
       'End If
     End If
    End If
   End If
   End If
   End If
   End If
'*************************************************************************
Next l%
 Next k%
  Next j%
   Next i%
'**********************************************
'垂径定理
For i% = 1 To C_display_picture.m_circle.Count
  If m_Circ(i%).data(0).data0.center > 0 Then
    For j% = 0 To 1
      If is_inter_point_line_circle(m_lin(Dparal(no%).data(0).data0.line_no(j%)).data(0), m_Circ(i%).data(0).data0, _
             tp(0), tp(1)) = 2 Then
         For k% = last_conditions.last_cond(0).verti_no + 1 To last_conditions.last_cond(1).verti_no
          l% = Dverti(k%).data(0).record.data1.index.i(0)
           If Dverti(l%).data(0).inter_poi > 0 Then
            For m% = 0 To 1
             If is_point_in_line3(m_Circ(i%).data(0).data0.center, m_lin(Dverti(l%).data(0).line_no(m%)).data(0).data0, 0) Then
               If Dverti(l%).data(0).line_no((m% + 1) Mod 2) = Dparal(no%).data(0).data0.line_no((j% + 1) Mod 2) Then
                temp_record.record_data.data0.condition_data.condition_no = 2
                 temp_record.record_data.data0.condition_data.condition(2).ty = verti_
                  temp_record.record_data.data0.condition_data.condition(2).no = l%
                   set_dparal = set_equal_dline(Dverti(l%).data(0).inter_poi, tp(0), _
                      Dverti(l%).data(0).inter_poi, tp(1), 0, 0, 0, 0, 0, 0, False, _
                       temp_record, 0, 0, 0, 0, no_reduce, False)
                      If set_dparal > 1 Then
                       Exit Function
                      Else
                       GoTo set_paral_mark_20
                      End If
               End If
             End If
            Next m%
           End If
        Next k%
      End If
    Next j%
  End If
set_paral_mark_20:
Next i%
'平行线的性质定理,垂直于平行线的一条,也垂直于另一条
If th_chose(16).chose = 1 Then
For l% = 1 + last_conditions.last_cond(0).verti_no To last_conditions.last_cond(1).verti_no
i% = Dverti(l%).data(0).record.data1.index.i(0)
'If Dverti(i%).record_.no_reduce < 2 Then
temp_record.record_data.data0.condition_data.condition_no = 2
 temp_record.record_data.data0.theorem_no = 16
   temp_record.record_data.data0.condition_data.condition(2).ty = verti_
    temp_record.record_data.data0.condition_data.condition(2).no = i%
 For j% = 0 To 1
  For k% = 0 To 1
   If Dparal(no%).data(0).data0.line_no(j%) = Dverti(i%).data(0).line_no(k%) Then
     set_dparal = set_dverti(Dparal(no%).data(0).data0.line_no((j% + 1) Mod 2), _
        Dverti(i%).data(0).line_no((k% + 1) Mod 2), temp_record, 0, no_reduce, False) ' Then
   If set_dparal > 1 Then
    Exit Function
   End If
  End If
 Next k%
Next j%
'End If
Next l%
End If
'*****************************************
'品行于平行线的一条,也平行于另一条
For l% = 1 + last_conditions.last_cond(0).paral_no To last_conditions.last_cond(1).paral_no
i% = Dparal(l%).data(0).data0.record.data1.index.i(0)
If i% <> no% Then
  If is_two_paral_same(Dparal(no%).data(0).data0.line_no(0), Dparal(no%).data(0).data0.line_no(1), _
                     i%, 0, 0) = False Then
    temp_record.record_data.data0.condition_data.condition_no = 2
     temp_record.record_data.data0.condition_data.condition(2).ty = paral_
      temp_record.record_data.data0.condition_data.condition(2).no = i%
 set_dparal = set_eangle_from_paral_verti(Dparal(no%).data(0).data0.line_no(0), _
   Dparal(no%).data(0).data0.line_no(1), Dparal(i%).data(0).data0.line_no(0), Dparal(i%).data(0).data0.line_no(1), _
    temp_record, paral_, no_reduce)
  If set_dparal > 1 Then
   Exit Function
  End If
 For j% = 0 To 1
  For k% = 0 To 1
   '***********
   '**********
 If th_chose(7).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 7
   If Dparal(no%).data(0).data0.line_no(j%) = Dparal(i%).data(0).data0.line_no(k%) Then
       set_dparal = set_dparal(Dparal(no%).data(0).data0.line_no((j% + 1) Mod 2), _
            Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2), temp_record, 0, no_reduce, False)
       If set_dparal > 1 Then
        Exit Function
       Else
    dn% = 0
    For m% = 1 To m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(0)
     p(dn%) = m_lin(Dparal(no%).data(0).data0.line_no(0)).data(0).data0.in_point(m%)
     For n% = 1 To m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(0)
      p1(dn%) = m_lin(Dparal(no%).data(0).data0.line_no(1)).data(0).data0.in_point(n%)
      For o% = 1 To m_lin(Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2)).data(0).data0.in_point(0)
       p2(dn%) = m_lin(Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2)).data(0).data0.in_point(o%)
        If is_three_point_on_line(p(dn%), p1(dn%), p2(dn%), 0, 0, 0, 0, c_data, 0, 0, 0) = 1 Then
         If dn% = 0 Then
          dn% = 1
         ElseIf dn% = 1 Then
          set_dparal = set_dpoint_pair(p(0), p1(0), p1(0), p2(0), p(1), p1(1), p1(1), p2(1), _
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp_record, True, 0, 0, 0, 0, False)
            If set_dparal > 1 Then
             Exit Function
            End If
            GoTo set_dparal_mark5:
         End If
        End If
      Next o%
     Next n%
    Next m%
        GoTo set_dparal_mark5
       End If
   End If
  End If
  Next k%
 Next j%
set_dparal_mark5:
End If
End If
Next l%
'*******************************************************************
'内错角相等
If th_chose(11).chose = 1 Or th_chose(12).chose = 1 Or _
      th_chose(13).chose = 1 Then
For i% = 1 To m_lin(tl(0)).data(0).data0.in_point(0)
 For j% = 1 To m_lin(tl(1)).data(0).data0.in_point(0)
temp_record.record_data.data0.condition_data.condition_no = 1
 set_dparal = set_property_of_dparal(tl(0), tl(1), _
      m_lin(tl(0)).data(0).data0.in_point(i%), _
        m_lin(tl(1)).data(0).data0.in_point(j%), temp_record, 0)
         If set_dparal > 1 Then
          Exit Function
         End If
 Next j%
Next i%
End If
'End If
'中位线
set_dparal = set_paral_for_polygon(no%, no_reduce)
If th_chose(129).chose = 1 Then
For i% = 1 To last_conditions.last_cond(1).eangle_no
 For j% = 0 To 1
 If is_same_two_point(Dparal(no%).data(0).data0.line_no(0), Dparal(no%).data(0).data0.line_no(1), _
      angle(angle3_value(Deangle.av_no(i%).no).data(0).data0.angle(0)).data(0).line_no(j), _
       angle(angle3_value(Deangle.av_no(i%).no).data(0).data0.angle(1)).data(0).line_no(j)) Then
  temp_record = temp_record1
  Call add_conditions_to_record(angle3_value_, Deangle.av_no(i%).no, 0, 0, temp_record.record_data.data0.condition_data)
  temp_record.record_data.data0.theorem_no = 129
   set_dparal = set_dparal( _
     angle(angle3_value(Deangle.av_no(i%).no).data(0).data0.angle(0)).data(0).line_no((j% + 1) Mod 2), _
      angle(angle3_value(Deangle.av_no(i%).no).data(0).data0.angle(1)).data(0).line_no((j% + 1) Mod 2), _
      temp_record, 0, no_reduce, False)
    If set_dparal > 1 Then
     Exit Function
    End If
 End If
 Next j%
Next i%
End If
End If
Exit Function
set_dparal_error:
set_dparal = 0
If set_new_data Then
    last_conditions.last_cond(1).paral_no = temp_no%
     For i% = 1 To temp_no%
      Dparal(i%).data(0).data0.record.data1.index = Dparal(i%).record_.index
     Next i%
End If
'**************************************************
ElseIf Dparal(no%).data(0).data0.record.data0.condition_data.condition_no = 0 Then 'run_type=1
    '已知条件
End If
End Function
Public Function set_dverti(ByVal l1%, ByVal l2%, re As total_record_type, no%, _
           ByVal no_reduce As Byte, reduce As Boolean) As Byte
't 　表示是否要后推
Dim i%, j%, k%, l%, m%, ty%, tc%, temp_no%
Dim n_(2) As Integer
Dim tn_(1) As Integer
Dim tn(2) As Integer
Dim temp_record1 As total_record_type
Dim temp_record As total_record_type
Dim re_ As record_data_type
Dim t As Boolean
Dim set_new_data As Boolean
Dim v$
Dim last_dis_no%
Dim p_n() As Integer
Dim dis_v() As Integer
'Dim tl_(1) As Integer
Dim tp(3) As Integer
Dim tl(8) As Integer
Dim tA%
Dim ts$
Dim t_A(1) As Integer
Dim re_ty As Byte
Dim level As Byte
Dim A As angle_type
Dim l_v0 As line_value_data0_type
'On Error GoTo set_dverti_error
display_inform = 0
If no% > 0 Then
 'If Dverti(no%).record_.no_reduce = 0 Then
  '  If m_lin(Dverti(no%).data(0).line_no(0)).data(0).no_reduce > 0 Or _
        m_lin(Dverti(no%).data(0).line_no(1)).data(0).no_reduce > 0 Then
  '       Dverti(no%).record_.no_reduce = 255
   ' End If
 'End If
 If Dverti(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
 GoTo set_dverti_mark0
 End If
ElseIf no_reduce = 255 Or l1% = l2% Then
 Exit Function
'ElseIf m_lin(l1%).data(0).no_reduce > 0 Or _
 '       m_lin(l2%).data(0).no_reduce > 0 Then
' Exit Function
End If
If no% = 0 And (l1% = 0 Or l2% = 0) Then 'Or l1% = l2%) Then
 set_dverti = 0
If no = -1 Then
   Call display_prove_inform(modify_wenti_no, display)
End If
  Exit Function
End If
If m_lin(l1%).data(0).other_no > 0 Then
  l1% = m_lin(l1%).data(0).other_no
End If
If m_lin(l2%).data(0).other_no > 0 Then
  l2% = m_lin(l2%).data(0).other_no
End If
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_dverti(l1%, l2%, no%, n_(0), n_(1), n_(2), tl(0), tl(1)) Then
If no% = 0 And tl(0) = 0 And tl(1) = 0 Then
  set_dverti = 1
   Exit Function
ElseIf no% > 0 And run_type < 10 Then
 level = Dverti(no%).data(0).record.data0.condition_data.level
 If set_prove_type(verti_, no%, temp_record.record_data, _
      Dverti(no%).data(0).record) And set_or_prove < 2 Then
  Call simple_record(verti_, no%, Dverti(no%).data(0).record.data0.condition_data.level, level)
     If no_reduce = 0 Then ' Or run_type = 1 Then
      set_dverti = 0
      Exit Function
     Else
     no_reduce = 2
       GoTo set_dverti_mark_0
     End If
 End If
 End If
 If set_or_prove < 2 Then
   If no_reduce = 0 Then
   no% = 0
  End If
      set_dverti = 0
     Exit Function
 Else
  If display_inform = 1 Then
  If conclusion_data(0).ty = verti_ And conclusion_data(0).no(0) = no% Then
   prove_type = 0
  End If
   Call display_prove_inform(modify_wenti_no, display)
  Else
  Exit Function
   End If
  End If
  Exit Function
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_dverti = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
    Exit Function
   End If
End If
'**********************************************************
temp_no% = last_conditions.last_cond(1).verti_no
For i% = 1 To temp_no%
Dverti(i%).record_.index = Dverti(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).verti_no Mod 10 = 0 Then
 ReDim Preserve Dverti(last_conditions.last_cond(1).verti_no + 10) As verti_type
End If
 last_conditions.last_cond(1).verti_no = last_conditions.last_cond(1).verti_no + 1
 Dverti(last_conditions.last_cond(1).verti_no).data(0) = two_line_data_0
  Dverti(last_conditions.last_cond(1).verti_no).data(0).line_no(0) = tl(0)
   Dverti(last_conditions.last_cond(1).verti_no).data(0).line_no(1) = tl(1)
    Dverti(last_conditions.last_cond(1).verti_no).data(0).inter_poi = _
     is_line_line_intersect(tl(0), tl(1), 0, 0, False)
      Dverti(last_conditions.last_cond(1).verti_no).reduce = reduce
      Dverti(last_conditions.last_cond(1).verti_no).data(0).record = temp_record.record_data
       Dverti(last_conditions.last_cond(1).verti_no).record_ = temp_record.record_
        Dverti(last_conditions.last_cond(1).verti_no).record_.no_reduce = 0
         Call set_line_in_verti(tl(0), tl(1), last_conditions.last_cond(1).verti_no, _
                 Dverti(last_conditions.last_cond(1).verti_no).data(0).inter_poi)
 For j% = 0 To 2
 For i% = last_conditions.last_cond(1).verti_no To n_(j%) + 2 Step -1
  Dverti(i%).data(0).record.data1.index.i(j%) = Dverti(i% - 1).data(0).record.data1.index.i(j%)
 Next i%
  Dverti(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).verti_no
 Next j%
  no% = last_conditions.last_cond(1).verti_no
 If last_conditions_for_aid_no > 0 Then
  If tl(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).line_no And _
      tl(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).line_no Then
       last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
        '由辅助点引进的平行
  ElseIf tl(0) > last_conditions.last_cond(1).line_no And tl(1) <= last_conditions.last_cond(1).line_no Then
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0) = tl(0) Then
     tl(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1)
   ElseIf new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1) = tl(0) Then
     tl(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0)
   End If
   If tl(2) = 0 Then
   For i% = 1 To m_lin(tl(0)).data(0).data0.in_point(0)
    If m_lin(tl(0)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(0)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_two_line(m_lin(tl(0)).data(0).data0.in_point(i%), tl(1), verti_, tl(2), 0)
    End If
   Next i%
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0) > 0 Then
   For i% = 1 To m_lin(tl(0)).data(0).data0.in_point(0)
    If m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_line_circle(m_lin(tl(0)).data(0).data0.in_point(i%), tl(1), 0, _
           new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0), 0)
    End If
   Next i%
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1) > 0 Then
   For i% = 1 To m_lin(tl(0)).data(0).data0.in_point(0)
    If m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
         m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_line_circle(m_lin(tl(0)).data(0).data0.in_point(i%), tl(1), 0, _
           new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1), 0)
    End If
   Next i%
   End If
  ElseIf tl(1) > last_conditions.last_cond(1).line_no And tl(0) <= last_conditions.last_cond(1).line_no Then
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0) = tl(1) Then
     tl(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1)
   ElseIf new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1) = tl(1) Then
     tl(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0)
   End If
   If tl(2) = 0 Then
   For i% = 1 To m_lin(tl(1)).data(0).data0.in_point(0)
    If m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_two_line(m_lin(tl(1)).data(0).data0.in_point(i%), tl(0), verti_, tl(2), 0)
    End If
   Next i%
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0) > 0 Then
   For i% = 1 To m_lin(tl(1)).data(0).data0.in_point(0)
    If m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_line_circle(m_lin(tl(1)).data(0).data0.in_point(i%), tl(0), 0, _
           new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0), 0)
    End If
   Next i%
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1) > 0 Then
   For i% = 1 To m_lin(tl(1)).data(0).data0.in_point(0)
    If m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) And _
        m_lin(tl(1)).data(0).data0.in_point(i%) <> new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
     Call set_add_aid_point_for_line_circle(m_lin(tl(1)).data(0).data0.in_point(i%), tl(0), 0, _
           new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1), 0)
    End If
   Next i%
   End If
  End If
  End If
  '****************
  last_dis_no% = 0
  i% = 0
  j% = 0
  Call is_distance_of_paral(i%, j%, no%, 0)
   If i% > 0 Then
  set_dverti = set_height_of_tixing(j%)
  If set_dverti > 1 Then
   Exit Function
  End If
  End If
  '****************
ts$ = set_display_verti(Dverti(no%).data(0), False, False)
set_dverti = set_prove_proccess(ts$, verti_, no%, Dverti(no%).data(0).record.display_string)
  If set_dverti > 1 Then
   Exit Function
  End If
set_dverti = 1
If no_reduce = 0 Then
 Exit Function
End If
set_dverti_mark0:
If Dverti(no%).record_.no_reduce = 0 Then
set_dverti_mark_0:
If regist_data.run_type = 0 Then
     Dverti(no%).record_.no_reduce = 255
 If no_reduce > 0 And no_reduce < 255 Then
  no_reduce = no_reduce - 1
 End If
      Call set_level_(Dverti(no%).record_.no_reduce, 1)
       temp_record.record_data.data0.condition_data.condition_no = 1
       temp_record.record_data.data0.condition_data.condition(1).ty = verti_
       temp_record.record_data.data0.condition_data.condition(1).no = no%
       set_dverti = set_property_of_dverti(Dverti(no%).data(0).line_no(0), Dverti(no%).data(0).line_no(1), _
              no%, temp_record)
        If set_dverti > 1 Then
        Exit Function
        End If
set_dverti_error:
set_dverti = 0
If set_new_data Then
last_conditions.last_cond(1).verti_no = temp_no%
For i% = 1 To temp_no%
Dverti(i%).data(0).record.data1.index = Dverti(i%).record_.index
Next i%
End If
End If
ElseIf Dverti(no%).data(0).record.data0.condition_data.condition_no = 0 Then
       temp_record.record_data.data0.condition_data.condition_no = 1
       temp_record.record_data.data0.condition_data.condition(1).ty = verti_
       temp_record.record_data.data0.condition_data.condition(1).no = no%
        set_dverti = set_verti_for_run_type_1(Dverti(no%).data(0).line_no(0), Dverti(no%).data(0).line_no(1), _
                                              temp_record)
        If set_dverti > 1 Then
           Exit Function
        End If
End If
End Function
Public Function set_New_point(ByVal p%, re As total_record_type, _
         ByVal l1%, ByVal l2%, ByVal n1%, ByVal n2%, _
         ByVal c1%, ByVal c2%, no_reduce As Byte, is_no_initial As Byte) As Byte
Dim i%, j%, k%, l%, m%, n%, no%, tn%, bra%
'Dim tp_n(1) As Integer
Dim ty As Boolean
Dim tp(1) As Integer
Dim t_n(1) As Integer
Dim tn_(1) As Integer
Dim tl(1) As Integer
Dim t_A As total_angle_data_type
Dim A(3) As Integer
Dim temp_record As total_record_type
'Dim re1 As record_type
Dim triA As triangle_data0_type
Dim triA0 As triangle_data0_type
'On Error GoTo set_new_point_error
If no_reduce = 255 Then
 Exit Function
End If
'******************************************
'set_new_line
'******************************************
're.record_data.data1.aid_condition = 0
temp_record.record_data = re.record_data
'temp_record.record_data.data1.aid_condition = 0
For i% = 1 To last_conditions.last_cond(1).point_no ' 设置三角形
l% = line_number0(i%, p%, tn_(0), tn_(1))
Next i%
For i% = 2 To last_conditions.last_cond(1).point_no
 If i% <> p% Then
  For j% = 1 To i% - 1
   If j% <> p% Then
    triA = triA0
      Call set_triangle(p%, i%, j%, triA, 0, 0, 0, 0, 0, _
        temp_record, no_reduce)
   End If
  Next j%
 End If
Next i%
'If l1% > 0 And l2% > 0 Then
'Call set_point_depend_element(p%, line_, l1%, line_, l2%)
'ElseIf l1% > 0 And c1% > 0 Then
'Call set_point_depend_element(p%, line_, l1%, circle_, l2%)
'ElseIf c1% > 0 And c2% > 0 Then
'ElseIf l1% > 0 Then
'ElseIf c1% > 0 Then
'End If
'Call set_point_generate_by_line(p%, l1%, l2%)
'Call set_point_generate_by_circle(p%, c1%, c2%)
If l1% > 0 Then
 'Call set_element_branch(point_, p%,  m_lin(l1%).data(0).branch)
 If m_lin(l1%).data(0).data0.in_point(0) > 2 Then
 For i% = 2 To m_lin(l1%).data(0).data0.in_point(0)
  If m_lin(l1%).data(0).data0.in_point(i%) <> p% Then
   For j% = 1 To i% - 1
    If m_lin(l1%).data(0).data0.in_point(j%) <> p% Then
     set_New_point = set_three_point_on_line(m_lin(l1%).data(0).data0.in_point(i%), _
      m_lin(l1%).data(0).data0.in_point(j%), p%, temp_record, 0, no_reduce, is_no_initial)
       If set_New_point > 1 Then
        Exit Function
       End If
    End If
   Next j%
  End If
 Next i%
 End If
End If
If l2% > 0 Then
 'bra% = min_positive_number(m_lin(l2%).data(0).branch, m_poi(p%).data(0).branch)
  'If bra% <> m_lin(l2%).data(0).branch Or bra% <> m_poi(p%).data(0).branch Then
   '  Call connect_two_branch(m_lin(l2%).data(0).branch, bra%)
    ' Call connect_two_branch(m_poi(p%).data(0).branch, bra%)
  'End If
If m_lin(l2%).data(0).data0.in_point(0) > 2 Then
 For i% = 2 To m_lin(l2%).data(0).data0.in_point(0)
 If m_lin(l2%).data(0).data0.in_point(i%) <> p% Then
   For j% = 1 To i% - 1
    If m_lin(l2%).data(0).data0.in_point(j%) <> p% Then
     set_New_point = set_three_point_on_line(m_lin(l2%).data(0).data0.in_point(i%), _
      m_lin(l2%).data(0).data0.in_point(j%), p%, temp_record, 0, no_reduce, is_no_initial)
       If set_New_point > 1 Then
        Exit Function
       End If
    End If
   Next j%
  End If
 Next i%
 End If
End If
If l1% > 0 And l2% > 0 Then
   If is_dverti(l1%, l2%, tn%, 0, 0, 0, 0, 0) Then
    Dverti(tn%).data(0).inter_poi = is_line_line_intersect( _
      l1%, l2%, 0, 0, False)
      If Dverti(tn%).data(0).inter_poi > 0 Then
       temp_record.record_data.data0.condition_data.condition_no = 1
        temp_record.record_data.data0.condition_data.condition(1).ty = verti_
         temp_record.record_data.data0.condition_data.condition(1).no = tn%
          temp_record.record_data.data0.theorem_no = 0
           A(0) = Abs(angle_number(m_lin(Dverti(tn%).data(0).line_no(0)).data(0).data0.poi(0), _
                  Dverti(tn%).data(0).inter_poi, _
                   m_lin(Dverti(tn%).data(0).line_no(1)).data(0).data0.poi(0), 0, 0))
           A(1) = Abs(angle_number(m_lin(Dverti(tn%).data(0).line_no(0)).data(0).data0.poi(0), _
                  Dverti(tn%).data(0).inter_poi, _
                   m_lin(Dverti(tn%).data(0).line_no(1)).data(0).data0.poi(1), 0, 0))
           A(2) = Abs(angle_number(m_lin(Dverti(tn%).data(0).line_no(0)).data(0).data0.poi(1), _
                  Dverti(tn%).data(0).inter_poi, _
                   m_lin(Dverti(tn%).data(0).line_no(0)).data(0).data0.poi(0), 0, 0))
           A(3) = Abs(angle_number(m_lin(Dverti(tn%).data(0).line_no(0)).data(0).data0.poi(1), _
                  Dverti(tn%).data(0).inter_poi, _
                   m_lin(Dverti(tn%).data(0).line_no(1)).data(0).data0.poi(0), 0, 0))
           If A(0) > 0 Then
            set_New_point = set_angle_value(A(0), "90", temp_record, 0, 0, False)
           End If
           If A(1) > 0 Then
            set_New_point = set_angle_value(A(1), "90", temp_record, 0, 0, False)
           End If
           If A(2) > 0 Then
            set_New_point = set_angle_value(A(2), "90", temp_record, 0, 0, False)
           End If
           If A(3) > 0 Then
            set_New_point = set_angle_value(A(3), "90", temp_record, 0, 0, False)
           End If
      End If
   End If
End If
If c1% > 0 Then
         input_record0 = temp_record.record_data.data0
          set_New_point = add_point_to_m_circle(p%, c1%, temp_record, True)
         If set_New_point > 1 Then
          Exit Function
         End If
End If
If c2% > 0 Then
         input_record0 = temp_record.record_data.data0
          set_New_point = add_point_to_m_circle(p%, c2%, temp_record, True)
         If set_New_point > 1 Then
          Exit Function
         End If
End If
'Call set_point_generate_by_circle(p%, c1%, c2%)
'poi(p%).data(0).g_cirlc(1) = c2%
'**************
If l1% > 0 And c1% > 0 And th_chose(129).chose = 1 Then
    If is_point_in_line3(m_Circ(c1%).data(0).data0.center, m_lin(l1%).data(0).data0, 0) Then
     For i% = 1 To m_Circ(c1%).data(0).data0.in_point(0)
      If m_Circ(c1%).data(0).data0.in_point(i%) <> p% Then
       If is_point_in_line3(m_Circ(c1%).data(0).data0.in_point(i%), m_lin(l1%).data(0).data0, 0) Then
         For j% = 1 To m_Circ(c1%).data(0).data0.in_point(0)
          If j% <> i% And m_Circ(c1%).data(0).data0.in_point(j%) <> p% Then
           A(0) = angle_number(p%, m_Circ(c1%).data(0).data0.in_point(j%), _
             m_Circ(c1%).data(0).data0.in_point(i%), 0, 0)
              If A(0) < 0 Then
               temp_record.record_data = re.record_data
                temp_record.record_data.data0.theorem_no = 129
                 set_New_point = set_three_angle_value(Abs(A(0)), _
                   0, 0, "1", "0", "0", "90", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
                    If set_New_point > 1 Then
                     Exit Function
                    End If
                  GoTo set_new_point_mark1
              End If
           End If
           Next j%
       End If
      End If
     Next i%
    End If
End If
set_new_point_mark1:
If l1% > 0 And l2% > 0 Then
 For i% = 1 To m_lin(l1%).data(0).data0.in_point(0)
  If p% <> m_lin(l1%).data(0).data0.in_point(i%) Then
   For j% = i% + 1 To m_lin(l1%).data(0).data0.in_point(0)
    If p% <> m_lin(l1%).data(0).data0.in_point(j%) Then
     For k% = 1 To m_lin(l2%).data(0).data0.in_point(0)
      If p% <> m_lin(l2%).data(0).data0.in_point(k%) Then
        For l% = k% + 1 To m_lin(l2%).data(0).data0.in_point(0)
         If p% <> m_lin(l2%).data(0).data0.in_point(l%) Then
          If is_four_point_on_circle(m_lin(l1%).data(0).data0.in_point(i%), _
            m_lin(l1%).data(0).data0.in_point(j%), m_lin(l2%).data(0).data0.in_point(k%), _
              m_lin(l2%).data(0).data0.in_point(l%), tn%, -1000, 0, 0, 0, 0, 0, _
               0, 0, 0, 0, p4_on_C, False) Then
    temp_record.record_data = re.record_data
     temp_record.record_data.data0.theorem_no = 143
     Call add_conditions_to_record(point4_on_circle_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
     set_New_point = set_dpoint_pair(p%, m_lin(l1%).data(0).data0.in_point(i%), _
        p%, m_lin(l2%).data(0).data0.in_point(k%), p%, m_lin(l2%).data(0).data0.in_point(l%), _
          p%, m_lin(l1%).data(0).data0.in_point(j%), 0, 0, 0, 0, 0, 0, _
           0, 0, 0, 0, 0, 0, 0, temp_record, True, 0, 0, 0, no_reduce, False)
      If set_New_point > 1 Then
       Exit Function
      End If
           End If
          End If
         Next l%
       End If
      Next k%
     End If
    Next j%
    End If
   Next i%
For n% = 1 + last_conditions.last_cond(0).paral_no To last_conditions.last_cond(1).paral_no
i% = Dparal(n%).data(0).data0.record.data1.index.i(0)
tl(0) = l1%
 tl(1) = l2%
  For j% = 0 To 1
   For k% = 0 To 1
    If tl(j%) = Dparal(i%).data(0).data0.line_no(k%) Then
     For l% = 1 To m_lin(Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2)).data(0).data0.in_point(0)
      temp_record.record_data = re.record_data
       Call add_conditions_to_record(paral_, i%, 0, 0, temp_record.record_data.data0.condition_data)
        set_New_point = set_property_of_dparal(Dparal(i%).data(0).data0.line_no(k%), _
         Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2), _
          p%, m_lin(Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2)).data(0).data0.in_point(l%), temp_record, no_reduce)
      If set_New_point > 1 Then
        Exit Function
      End If
    Next l%
   tp(0) = is_line_line_intersect(Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2), _
              tl((j% + 1) Mod 2), 0, 0, False)
   If tp(0) > 0 Then
    For l% = 1 To m_lin(Dparal(i%).data(0).data0.line_no(k%)).data(0).data0.in_point(0)
     For m% = 1 To m_lin(Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2)).data(0).data0.in_point(0)
      If m_lin(Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2)).data(0).data0.in_point(m%) <> tp(0) Then
       tp(1) = is_line_line_intersect(line_number0( _
         m_lin(Dparal(i%).data(0).data0.line_no(k%)).data(0).data0.in_point(l%), _
          m_lin(Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2)).data(0).data0.in_point(m%), 0, 0), _
           tl((j% + 1) Mod 2), 0, 0, False)
           If tp(1) > 0 Then
     temp_record.record_data = re.record_data
          Call add_conditions_to_record(paral_, i%, 0, 0, temp_record.record_data.data0.condition_data)
        set_New_point = set_similar_triangle( _
          tp(1), m_lin(Dparal(i%).data(0).data0.line_no(k%)).data(0).data0.in_point(l%), _
           m_lin(Dparal(i%).data(0).data0.line_no((k% + 1) Mod 2)).data(0).data0.in_point(m%), _
            tp(1), p%, tp(0), temp_record, 0, no_reduce, is_no_initial)
      If set_New_point > 1 Then
        Exit Function
      End If
      End If
      End If
     Next m%
    Next l%
   End If
   End If
 Next k%
 Next j%
Next n%
End If
temp_record.record_data = re.record_data
If c1% > 0 And c2% > 0 Then
  set_New_point = combine_circle_with_circle(c2%, no_reduce)
   If set_New_point > 1 Then
    Exit Function
   End If
End If
set_New_point = conclusion_from_new_point(p%, temp_record, _
                    l1%, l2%, n1%, n2%, c1%, c2%, _
                      no_reduce)
      Exit Function
set_new_point_error:
set_New_point = 0
End Function
Public Function set_parallelogram0(ByVal poly4_no%, _
  re As total_record_type, no%, n_ As Integer, ByVal no_reduce As Byte, ty As Byte) As Byte
Dim i%
Dim cond_ty As Byte
Dim temp_record As total_record_type
Dim ts$
temp_record = re
If ty = 1 Then
 If is_parallelogram0(poly4_no%, no%, n_, cond_ty) Then
  Exit Function
 End If
End If
If last_conditions.last_cond(1).parallelogram_no Mod 10 = 0 Then
  ReDim Preserve Dparallelogram(last_conditions.last_cond(1).parallelogram_no + 10) _
      As parallelogram_type
End If
last_conditions.last_cond(1).parallelogram_no = last_conditions.last_cond(1).parallelogram_no + 1
   no% = last_conditions.last_cond(1).parallelogram_no
   Dparallelogram(last_conditions.last_cond(1).parallelogram_no).data(0) = dpolygon4_data_0
   Dparallelogram(last_conditions.last_cond(1).parallelogram_no).data(0).polygon4_no = poly4_no%
   Dparallelogram(last_conditions.last_cond(1).parallelogram_no).data(0).record = temp_record.record_data
   Dparallelogram(last_conditions.last_cond(1).parallelogram_no).record_ = temp_record.record_
   If Dpolygon4(poly4_no%).data(0).condition.no > 0 Then
    Call add_conditions_to_record(Dpolygon4(poly4_no%).data(0).condition.ty, _
            Dpolygon4(poly4_no%).data(0).condition.no, 0, 0, _
              temp_record.record_data.data0.condition_data)
   End If
      Dparallelogram(last_conditions.last_cond(1).parallelogram_no).data(0).record = temp_record.record_data
      Dparallelogram(last_conditions.last_cond(1).parallelogram_no).record_ = temp_record.record_
      Dparallelogram(last_conditions.last_cond(1).parallelogram_no).record_.no_reduce = 0
 ' For j% = 0 To 3
  For i% = last_conditions.last_cond(1).parallelogram_no To n_ + 2 Step -1
  Dparallelogram(i%).data(0).record.data1.index.i(0) = _
   Dparallelogram(i% - 1).data(0).record.data1.index.i(0)
  Next i%
  Dparallelogram(n_ + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).parallelogram_no
  'Next j%
  Dpolygon4(poly4_no%).data(0).ty = parallelogram_
  Dpolygon4(poly4_no%).data(0).no = no%
  If last_conditions_for_aid_no > 0 Then
    If Dpolygon4(poly4_no%).data(0).poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        Dpolygon4(poly4_no%).data(0).poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
         Dpolygon4(poly4_no%).data(0).poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
          Dpolygon4(poly4_no%).data(0).poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
         last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
     End If
  End If
  ts$ = LoadResString_from_inpcond(-11, set_display_polygon4(Dpolygon4(poly4_no%).data(0), 0, False, 1, 0))
        set_parallelogram0 = set_prove_proccess(ts$, parallelogram_, no%, Dparallelogram(no%).data(0).record.display_string)

End Function

Public Function set_parallelogram(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, _
  re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
Dim i%, j%, p%, tn%, A%, temp_no%
Dim n_  As Integer
Dim tl(5) As Integer
Dim tp(3) As Integer
Dim n(1) As Integer
Dim dn(2) As Integer
Dim ty As Boolean
Dim set_new_data As Boolean
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim re_ As record_data_type
Dim no_reduce1 As Boolean
Dim para(1) As String
Dim c_data As condition_data_type
Dim ts$
Dim poly4_no%
Dim level As Byte
'On Error GoTo set_parallelogram_error
display_inform = 0
If no% < 1 Then
If line_number0(p1%, p2%, 0, 0) = line_number0(p3%, p4%, 0, 0) Then
 Exit Function
End If
End If
If no% > 0 Then
 If Dparallelogram(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_parallelogram_mark0
 End If
ElseIf no% = -1 Then
display_inform = 1
ElseIf no_reduce = 255 Then
 Exit Function
End If
If th_chose(73).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 73
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(p4%, p1%, p1%, p2%, 0, 0, 0, 0, 0, 0, _
     dn(0), -1000, 0, 0, 0, eline_data0, _
           dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
  temp_record = re
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
    no_reduce1 = True
     Call set_level(temp_record.record_data.data0.condition_data)
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(p1%, p2%, p2%, p3%, 0, 0, 0, 0, 0, 0, _
           dn(0), -1000, 0, 0, 0, _
       eline_data0, dn(1), dn(2), cond_type, "", _
  record_0.data0.condition_data) Then
  temp_record1.record_data = re.record_data
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
     Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
      no_reduce1 = True
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(p2%, p3%, p3%, p4%, 0, 0, 0, 0, 0, 0, _
      dn(0), -1000, 0, 0, 0, _
       eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
  temp_record1.record_data = re.record_data
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
       no_reduce1 = True
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(p3%, p4%, p4%, p1%, 0, 0, 0, 0, 0, 0, _
     dn(0), -1000, 0, 0, 0, _
       eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
  temp_record1.record_data = re.record_data
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
    no_reduce1 = True
End If
 If temp_record.record_data.data0.condition_data.condition_no > re.record_data.data0.condition_data.condition_no Then
set_parallelogram = set_rhombus(p1%, p2%, p3%, p4%, _
  temp_record, 0, no_reduce)
 'If set_parallelogram > 1 Then
  Exit Function
 'End If
End If
End If
poly4_no% = polygon4_number(p1%, p2%, p3%, p4%, 0)
If poly4_no% = 0 Then
 Exit Function
End If
If th_chose(67).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 67
temp_record.record_data.data0.condition_data.condition_no = 0
 temp_record1.record_data.data0.condition_data.condition_no = 0
'A% = angle_number(p3%, p4%, p1%, 0, 0)
For i% = 0 To 3
If angle(Dpolygon4(poly4_no%).data(0).angle(i%)).data(0).value = "90" Then
 temp_record.record_data = re.record_data
  Call set_level(temp_record.record_data.data0.condition_data)
  Call add_conditions_to_record(angle3_value_, _
     angle(Dpolygon4(poly4_no%).data(0).angle(i%)).data(0).value_no, 0, 0, temp_record.record_data.data0.condition_data)
  set_parallelogram = set_long_squre0(poly4_no%, temp_record, no%, 0, 1)
   Exit Function
End If
Next i%
End If
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_parallelogram0(poly4_no%, no%, n_, cond_type) Then
 If run_type < 10 And tn% > 0 And cond_type = parallelogram_ Then
 level = Dparallelogram(no%).data(0).record.data0.condition_data.level
 If set_prove_type(parallelogram_, no%, temp_record.record_data, _
       Dparallelogram(no%).data(0).record) And set_or_prove < 2 Then
   Call simple_record(parallelogram_, no%, Dparallelogram(no%).data(0).record.data0.condition_data.level, _
                       level)
   If no_reduce = 0 Then 'Or run_type <= 1 Then
   Exit Function
   Else
       no_reduce = 0
         GoTo set_parallelogram_mark0
   End If
 End If
 End If
  If set_or_prove < 2 Then
       set_parallelogram = 0
        Exit Function
  Else
   If display_inform = 1 Then
   If conclusion_data(0).ty = parallelogram_ And conclusion_data(0).no(0) = no% Then
    prove_type = 4
     event_statue = complete_prove
   End If
   Call display_prove_inform(modify_wenti_no, display)
   Else
   Exit Function
   End If
 End If
Exit Function
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_parallelogram = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
    Exit Function
   End If
End If
temp_no% = last_conditions.last_cond(1).parallelogram_no
For i% = 1 To temp_no%
Dparallelogram(i%).record_.index = Dparallelogram(i%).data(0).record.data1.index
Next i%
set_new_data = True
        set_parallelogram = set_parallelogram0(poly4_no%, temp_record, no%, n_, 0, 0)
        If set_parallelogram > 1 Then
         Exit Function
        End If
  If no_reduce = 0 Then
     Exit Function
  End If
set_parallelogram_mark0:
If regist_data.run_type = 0 Then
If Dparallelogram(no%).record_.no_reduce = 0 Then
     Dparallelogram(no%).record_.no_reduce = 255
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
      Call set_level_(Dparallelogram(no%).record_.no_reduce, 1)
set_parallelogram = set_property_of_parallelogram(no%, no_reduce)
If set_parallelogram > 1 Then
 Exit Function
End If
End If
Exit Function
set_parallelogram_error:
set_parallelogram = 0
If set_new_data Then
 last_conditions.last_cond(1).parallelogram_no = temp_no%
For i% = 1 To temp_no%
 Dparallelogram(i%).data(0).record.data1.index = Dparallelogram(i%).record_.index
Next i%
End If
ElseIf Dparallelogram(no%).data(0).record.data0.condition_data.condition_no = 0 Then 'run_type=1
temp_record.record_data.data0.condition_data.condition_no = 1
temp_record.record_data.data0.condition_data.condition(1).ty = parallelogram_
temp_record.record_data.data0.condition_data.condition(1).no = no%
    n(0) = vector_number(Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(0), _
             Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(1), "")
    n(1) = vector_number(Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(3), _
             Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(2), "")
    Call set_item0(n(0), -10, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          para(0), 0, c_data, 0, dn(0), 0, 0, c_data, False) '0310
    Call set_item0(n(1), -10, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          para(1), 0, c_data, 0, dn(1), 0, 0, c_data, False) '0310
    set_parallelogram = set_general_string(dn(0), dn(1), 0, 0, para(0), _
           time_string("-1", para(1), True, False), _
            "0", "0", "0", 0, 0, 0, temp_record, 0, 0)
              If set_parallelogram > 1 Then
                  Exit Function
              End If
    n(0) = vector_number(Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(1), _
             Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(2), "")
    n(1) = vector_number(Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(0), _
             Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(3), "")
    Call set_item0(n(0), -10, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          para(0), 0, c_data, 0, dn(0), 0, 0, c_data, False) '0310
    Call set_item0(n(1), -10, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          para(1), 0, c_data, 0, dn(1), 0, 0, c_data, False) '0310
    set_parallelogram = set_general_string(dn(0), dn(1), 0, 0, para(0), _
           time_string("-1", para(1), True, False), _
            "0", "0", "0", 0, 0, 0, temp_record, 0, 0)
              If set_parallelogram > 1 Then
                  Exit Function
              End If
End If
End Function
Public Function set_dpoint_pair(ByVal p1%, ByVal p2%, ByVal p3%, _
    ByVal p4%, ByVal p5%, ByVal p6%, ByVal p7%, ByVal p8%, _
     ByVal in1%, ByVal in2%, ByVal in3%, ByVal in4%, ByVal in5%, _
      ByVal in6%, ByVal in7%, ByVal in8%, ByVal il1%, ByVal il2%, _
       ByVal il3%, ByVal il4%, ByVal display_type As Byte, _
        re As total_record_type, reduce_type As Boolean, no%, _
         ByVal similar_triangle_no%, cond_type As Byte, _
          ByVal no_reduce As Byte, reduce As Boolean) As Byte
                 'num1, mun2 可能是零表示不知比值
Dim n%, con_no%, temp_no%
Dim dp As point_pair_data0_type
Dim dp_ As point_pair_data0_type
Dim n_(7) As Integer
Dim A(1) As Integer
Dim tp(7) As Integer
Dim num1 As String
Dim num2 As String
Dim is_reduce As Boolean
Dim level As Byte
Dim ty As Boolean
Dim ty1 As Boolean
Dim ty2 As Boolean
Dim set_new_data As Boolean
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim i%, j%, k%, l%, m%, tt%, dn1%, dn2%, dn3%, dn4%, dn5%, dn6%
Dim t As Byte
Dim con_y(1) As Byte
Dim con_ty(1) As Byte
'On Error GoTo set_dpoint_pair_error
display_inform = 0
cond_type = 0
If no% > 0 Then
  If Ddpoint_pair(no%).record_.no_reduce > 2 Then
   Exit Function
  Else
   GoTo set_dpoint_pair_mark0
  End If
ElseIf no% = -1 Then
 display_inform = 1
ElseIf no% = 0 And p1% = 0 Then
 Exit Function
ElseIf no_reduce = 255 Then
 Exit Function
End If

temp_record = re
'temp_record.display_type = display_type
'******************************************************************
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
'*******************************************
If is_point_pair(p1%, p2%, p3%, p4%, p5%, p6%, p7%, p8%, in1%, _
    in2%, in3%, in4%, in5%, in6%, in7%, in8%, il1%, il2%, il3%, _
    il4%, no%, n_(0), n_(1), n_(2), n_(3), n_(4), n_(5), _
     dp, t, dn1%, dn2%, con_ty(0), con_ty(1), dn3%, dn4%, _
      dn5%, dn6%, num1, num2, temp_record.record_data) Then
 Call set_level(temp_record.record_data.data0.condition_data)
 If no% > 0 And run_type < 10 Then
  cond_type = dpoint_pair_
  level = Ddpoint_pair(no%).data(0).record.data0.condition_data.level
  Ddpoint_pair(no%).similar_triangle_no = similar_triangle_no%
    If set_prove_type(dpoint_pair_, no%, temp_record.record_data, _
      Ddpoint_pair(no%).data(0).record) And set_or_prove < 2 Then
     Call simple_record(dpoint_pair_, no%, Ddpoint_pair(no%).data(0).record.data0.condition_data.level, _
      level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
      set_dpoint_pair = 0
       Exit Function
     Else
      no_reduce = 2
        GoTo set_dpoint_pair_mark_0
     End If
    End If
     If set_or_prove < 2 Then
       set_dpoint_pair = 0
        Exit Function
     Else
      If display_inform = 1 Then
       If conclusion_data(0).ty = dpoint_pair_ And conclusion_data(0).no(0) = no% Then
         prove_type = 4
         event_statue = complete_prove
       End If
         Call display_prove_inform(modify_wenti_no, display)
      Else
        If no_reduce = 0 Then
         no% = 0
        End If
       Exit Function
      End If
     End If
    End If
   Exit Function '不完整，没包含其他
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_dpoint_pair = 0
    prove_type = 0
         Call display_prove_inform(modify_wenti_no, display)
        Exit Function
 End If
End If
If t > 0 And t < 9 Then
  temp_record = re
'******************************
For i% = 0 To last_conclusion - 1
  If conclusion_data(i%).ty = dpoint_pair_ And conclusion_data(i%).no(0) = 0 Then
      If con_dpoint_pair(i%).data(0).poi(0) = dp.poi(0) And _
          con_dpoint_pair(i%).data(0).poi(1) = dp.poi(1) And _
            con_dpoint_pair(i%).data(0).poi(2) = dp.poi(2) And _
             con_dpoint_pair(i%).data(0).poi(3) = dp.poi(3) And _
              con_dpoint_pair(i%).data(0).poi(4) = dp.poi(4) And _
                con_dpoint_pair(i%).data(0).poi(5) = dp.poi(5) And _
                  con_dpoint_pair(i%).data(0).poi(6) = dp.poi(6) And _
                    con_dpoint_pair(i%).data(0).poi(7) = dp.poi(7) Then
          GoTo set_dpoint_para_mark10
       End If
  End If
Next i%
If t = 1 Then
   temp_record1 = temp_record
  Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
    set_dpoint_pair = set_Drelation(dp.poi(4), dp.poi(5), dp.poi(6), dp.poi(7), _
       dp.n(4), dp.n(5), dp.n(6), dp.n(7), dp.line_no(2), dp.line_no(3), _
        num1, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
     Exit Function
 ElseIf t = 2 Then
    temp_record1 = temp_record 'condition_no = con_no%
  Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
    set_dpoint_pair = set_Drelation(dp.poi(0), dp.poi(1), _
      dp.poi(2), dp.poi(3), dp.n(0), dp.n(1), dp.n(2), dp.n(3), dp.line_no(0), _
       dp.line_no(1), num1, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
          Exit Function
  ElseIf t = 3 Then
      temp_record1 = temp_record 'condition_no = con_no%
  Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
    set_dpoint_pair = set_Drelation(dp.poi(2), dp.poi(3), dp.poi(6), dp.poi(7), _
       dp.n(2), dp.n(3), dp.n(6), dp.n(7), dp.line_no(1), dp.line_no(3), _
         num1, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
         Exit Function
 ElseIf t = 4 Then
    temp_record1 = temp_record '.condition_data.condition_no = con_no%
  Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
    set_dpoint_pair = set_Drelation(dp.poi(0), dp.poi(1), dp.poi(4), dp.poi(5), _
       dp.n(0), dp.n(1), dp.n(4), dp.n(5), dp.line_no(0), dp.line_no(2), _
        num1, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
         Exit Function
  ElseIf t = 5 Then
    temp_record1 = temp_record
   Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
    set_dpoint_pair = set_Drelation(dp.poi(4), dp.poi(5), dp.poi(6), dp.poi(7), _
       dp.n(4), dp.n(5), dp.n(6), dp.n(7), dp.line_no(2), dp.line_no(3), _
        num1, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
     If set_dpoint_pair > 1 Then
      Exit Function
     End If
   temp_record1 = temp_record 'condition_no = con_no%
  Call add_conditions_to_record(con_ty(1), dn2%, dn5%, dn6%, temp_record1.record_data.data0.condition_data)
      set_dpoint_pair = set_Drelation(dp.poi(2), dp.poi(3), dp.poi(6), dp.poi(7), _
         dp.n(2), dp.n(3), dp.n(6), dp.n(7), dp.line_no(1), dp.line_no(3), _
          num2, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
          Exit Function
 ElseIf t = 6 Then
    temp_record1 = temp_record '.condition_data.condition_no = con_no%
  Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
     set_dpoint_pair = set_Drelation(dp.poi(4), dp.poi(5), dp.poi(6), dp.poi(7), _
        dp.n(4), dp.n(5), dp.n(6), dp.n(7), dp.line_no(2), dp.line_no(3), _
         num1, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
          If set_dpoint_pair > 1 Then
           Exit Function
          End If
    temp_record1 = temp_record '.condition_data.condition_no = con_no%
   Call add_conditions_to_record(con_ty(1), dn2%, dn5%, dn6%, temp_record1.record_data.data0.condition_data)
    set_dpoint_pair = set_Drelation(dp.poi(0), dp.poi(1), dp.poi(4), dp.poi(5), _
         dp.n(0), dp.n(1), dp.n(4), dp.n(5), dp.line_no(0), dp.line_no(2), _
          num2, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
           Exit Function
 ElseIf t = 7 Then
    temp_record1 = temp_record 'condition_no = con_no%
 Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
    set_dpoint_pair = set_Drelation(dp.poi(0), dp.poi(1), dp.poi(2), dp.poi(3), _
          dp.n(0), dp.n(1), dp.n(2), dp.n(3), dp.line_no(0), dp.line_no(1), _
           num1, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
          If set_dpoint_pair > 1 Then
           Exit Function
          End If
   temp_record1 = temp_record '.condition_data.condition_no = con_no%
     Call add_conditions_to_record(con_ty(1), dn2%, dn5%, dn6%, temp_record1.record_data.data0.condition_data)
   set_dpoint_pair = set_Drelation(dp.poi(2), dp.poi(3), dp.poi(6), dp.poi(7), _
        dp.n(2), dp.n(3), dp.n(6), dp.n(7), dp.line_no(1), dp.line_no(3), _
         num2, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
         Exit Function
 ElseIf t = 8 Then
    temp_record1 = temp_record '.condition_data.condition_no = con_no%
  Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
     set_dpoint_pair = set_Drelation(dp.poi(0), dp.poi(1), dp.poi(2), dp.poi(3), _
        dp.n(0), dp.n(1), dp.n(2), dp.n(3), dp.line_no(0), dp.line_no(1), _
         num1, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
         If set_dpoint_pair > 1 Then
           Exit Function
          End If
    temp_record1 = temp_record
     Call add_conditions_to_record(con_ty(1), dn2%, dn5%, dn6%, temp_record1.record_data.data0.condition_data)
    set_dpoint_pair = set_Drelation(dp.poi(0), dp.poi(1), dp.poi(4), dp.poi(5), _
        dp.n(0), dp.n(1), dp.n(4), dp.n(5), dp.line_no(0), dp.line_no(2), _
         num2, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
         Exit Function
   ElseIf t = 9 Then
    temp_record1 = temp_record '.condition_data.condition_no = con_no%
  Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
     set_dpoint_pair = set_Drelation(dp.poi(0), dp.poi(1), dp.poi(2), dp.poi(3), _
        dp.n(0), dp.n(1), dp.n(2), dp.n(3), dp.line_no(0), dp.line_no(1), _
         num1, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
         If set_dpoint_pair > 1 Then
           Exit Function
          End If
    temp_record1 = temp_record
     Call add_conditions_to_record(con_ty(0), dn1%, dn3%, dn4%, temp_record1.record_data.data0.condition_data)
    set_dpoint_pair = set_Drelation(dp.poi(4), dp.poi(5), dp.poi(6), dp.poi(7), _
        dp.n(4), dp.n(5), dp.n(6), dp.n(7), dp.line_no(2), dp.line_no(3), _
         num2, temp_record1, 0, cond_type, 0, 0, no_reduce, is_reduce)
         Exit Function
    End If
End If
'************************************
If dp.poi(0) = dp.poi(6) And dp.poi(1) = dp.poi(7) And _
        dp.poi(2) = dp.poi(4) And dp.poi(3) = dp.poi(5) Then
set_dpoint_pair = set_equal_dline(dp.poi(0), dp.poi(1), _
    dp.poi(2), dp.poi(3), dp.n(0), dp.n(1), dp.n(2), dp.n(3), _
     dp.line_no(0), dp.line_no(1), 0, temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
     Exit Function
End If
set_dpoint_para_mark10:
Call set_level(temp_record.record_data.data0.condition_data)
temp_no% = last_conditions.last_cond(1).dpoint_pair_no
For i% = 1 To temp_no%
Ddpoint_pair(i%).record_.index = Ddpoint_pair(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).dpoint_pair_no Mod 10 = 0 Then
ReDim Preserve Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no + 10) As Dpoint_pair_type
End If
last_conditions.last_cond(1).dpoint_pair_no = last_conditions.last_cond(1).dpoint_pair_no + 1
set_new_data = True
Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no).data(0) = dpoint_pair_data_0
   Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no).data(0).data0 = dp
   Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no).similar_triangle_no = similar_triangle_no%
   Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no).data(0).record = temp_record.record_data
    Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no).record_ = temp_record.record_
    Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no).record_.no_reduce = 0
    Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no).reduce = reduce
   Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no).data(0).record.data1.display_type = display_type
  For j% = 0 To 5
  For i% = last_conditions.last_cond(1).dpoint_pair_no To n_(j%) + 2 Step -1
   Ddpoint_pair(i%).data(0).record.data1.index.i(j%) = Ddpoint_pair(i% - 1).data(0).record.data1.index.i(j%)
  Next i%
   Ddpoint_pair(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).dpoint_pair_no
  Next j%
    no% = last_conditions.last_cond(1).dpoint_pair_no
     cond_type = dpoint_pair_
  If last_conditions_for_aid_no > 0 Then
   If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
   If dp.poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      dp.poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      dp.poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      dp.poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      dp.poi(4) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      dp.poi(5) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      dp.poi(6) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      dp.poi(7) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
     last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  End If
  End If
  End If
  num1 = set_display_point_pair(Ddpoint_pair(no%).data(0).data0, Ddpoint_pair(no%).data(0).record, False, False)
 set_dpoint_pair = set_prove_proccess(num1, dpoint_pair_, no%, Ddpoint_pair(no%).data(0).record.display_string)
   If set_dpoint_pair > 1 Then
     Exit Function
    End If
If no_reduce = 0 Then
Exit Function
End If
set_dpoint_pair_mark0:
If Ddpoint_pair(no%).record_.no_reduce = 0 Or _
     Ddpoint_pair(no%).record_.no_reduce = 2 Or _
      Ddpoint_pair(no%).record_.no_reduce = 4 Then
set_dpoint_pair_mark_0:
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
  dp = Ddpoint_pair(no%).data(0).data0
  temp_record.record_data.data0.condition_data.condition_no = 0 'record0
  Call add_conditions_to_record(dpoint_pair_, no%, 0, 0, temp_record.record_data.data0.condition_data)
 Call set_level_(Ddpoint_pair(no%).record_.no_reduce, 1)
 set_dpoint_pair = set_property_of_dpoint_pair( _
  dp, no%, Ddpoint_pair(no%).similar_triangle_no, _
   temp_record, no_reduce)
 If set_dpoint_pair > 1 Then
  Exit Function
 End If
End If
'*******
'此处公共点是中点
'*************************************************************
set_dpoint_pair_mark1:
set_dpoint_pair_mark5:
If Ddpoint_pair(no%).record_.no_reduce < 2 Then
'If Ddpoint_pair(no%).data(0).record.data0.level < 10 Then
    Call set_level_(Ddpoint_pair(no%).record_.no_reduce, 2)
set_dpoint_pair = combine_dpoint_pair_with_mid_point(no%, 0, no_reduce)
If set_dpoint_pair > 1 Then
 Exit Function
End If
set_dpoint_pair = combine_dpoint_pair_with_line_value(no%, 0, no_reduce)
If set_dpoint_pair > 1 Then
 Exit Function
End If
set_dpoint_pair = combine_dpoint_pair_with_eline(no%, 0, no_reduce)
If set_dpoint_pair > 1 Then
 Exit Function
End If
 set_dpoint_pair = combine_dpoint_pair_with_relation(no%, 0, no_reduce)
If set_dpoint_pair > 1 Then
 Exit Function
End If
set_dpoint_pair = combine_dpoint_pair_with_dpoint_pair(no%, no_reduce)
If set_dpoint_pair > 1 Then
 Exit Function
End If
set_dpoint_pair = combine_dpoint_pair_with_item(no%, no_reduce)
End If
Exit Function
set_dpoint_pair_error:
set_dpoint_pair = 0
If set_new_data Then
 last_conditions.last_cond(1).dpoint_pair_no = temp_no%
 For i% = 1 To temp_no%
  Ddpoint_pair(i%).data(0).record.data1.index = Ddpoint_pair(i%).record_.index
 Next i%
End If
'End If
End Function

Public Function set_display_string(conclusion_or_inform As Boolean, ty As Byte, _
                      ge_or_tree As Byte, dis_ty As Byte, is_depend As Boolean) As Boolean
Dim t_condition_tree_no%
t_condition_tree_no% = condition_tree_tail
If t_condition_tree_no% > 0 Then
Do
Call set_display_string0(condition_tree(t_condition_tree_no%).condition.ty, _
                 condition_tree(t_condition_tree_no%).condition.no, _
                  t_condition_tree_no%, condition_tree(t_condition_tree_no%).conclusion_no, _
                      conclusion_or_inform, True, 0, ge_or_tree, dis_ty, True)
      t_condition_tree_no% = condition_tree(t_condition_tree_no%).pre_no
Loop Until t_condition_tree_no% = 0
C_display_wenti.prove_complete
End If
Wenti_form.VScroll1.max = max((C_display_wenti.m_last_input_wenti_no - 20) * 2, 100)
set_display_string = True
End Function
Public Function set_three_point_on_line(ByVal p1%, ByVal p2%, ByVal p3%, _
   re As total_record_type, no%, ByVal no_reduce As Byte, ByVal is_no_initial As Byte) As Byte
Dim tp(2) As Integer 'is_no_initial=0'已知条件,=1,推出条件
Dim tn(2) As Integer
Dim i%, t_y%, n%, j%, k%, temp_no%
Dim n_(2) As Integer
Dim temp_record  As total_record_type
Dim ty As Boolean
Dim ty_(2) As Boolean
Dim set_new_data As Boolean
Dim ts$
Dim lv As line_value_data0_type
Dim level As Byte
display_inform = 0
If no% > 0 Then
 If three_point_on_line(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_three_point_on_line_mark0
 End If
ElseIf no% = -1 Then
display_inform = 1
ElseIf no_reduce = 255 Then
 Exit Function
End If
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data) '推理深度
If level > 30 Then
 Exit Function
End If
tp(0) = p1%
tp(1) = p2%
tp(2) = p3%
'****************************************************************************************************************************
If is_three_point_on_line(p1%, p2%, p3%, no%, n_(0), n_(1), n_(2), _
      temp_record.record_data.data0.condition_data, tp(0), tp(1), tp(2)) = False Then '判断是否三点共线（是）
If no% > 0 And run_type < 10 And run_type <> 3 Then
 level = three_point_on_line(no%).data(0).record.data0.condition_data.level
 If set_prove_type(point3_on_line_, no%, temp_record.record_data, _
   three_point_on_line(no%).data(0).record) And set_or_prove < 2 Then
     Call simple_record(point3_on_line_, no%, three_point_on_line(no%).data(0).record.data0.condition_data.level, _
        level)
    If no_reduce = 0 Then 'Or run_type <= 1 Then
     set_three_point_on_line = 0
     Exit Function
    Else
     no_reduce = 0
 '     three_point_on_line(no%).record_.no_reduce = 0
       GoTo set_three_point_on_line_mark_0
    End If
  End If
End If
'**********************************************************************************************************
If last_conditions.last_cond(1).three_point_on_line_no Mod 10 = 0 Then
ReDim Preserve three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no + 10) _
                 As three_point_on_line_type
End If

last_conditions.last_cond(1).three_point_on_line_no = last_conditions.last_cond(1).three_point_on_line_no + 1
set_new_data = True
three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0) = three_point_on_line_data_0
    For i% = 0 To 2
      three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0).poi(i%) = tp(i%)
    Next i%
      'three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0).line_no = l%
 three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0).record = temp_record.record_data
 three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).record_ = temp_record.record_
 three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).record_.no_reduce = 0
 three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0).is_no_initial = is_no_initial
For j% = 0 To 2
For i% = last_conditions.last_cond(1).three_point_on_line_no To n_(j%) + 2 Step -1
three_point_on_line(i%).data(0).record.data1.index.i(j%) = _
    three_point_on_line(i% - 1).data(0).record.data1.index.i(j%)
Next i%
three_point_on_line(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).three_point_on_line_no
Next j%
no% = last_conditions.last_cond(1).three_point_on_line_no
Exit Function
  If set_or_prove < 2 Then
       set_three_point_on_line = 0
        Exit Function
  Else
   If display_inform = 1 Then
    If conclusion_data(0).ty = point3_on_line_ And conclusion_data(0).no(0) = no% Then
     prove_type = 4
                   event_statue = complete_prove
    End If
       Call display_prove_inform(modify_wenti_no, display)

   Else
    Exit Function
   End If
 End If
  Exit Function
  '***************************************************************************************
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_three_point_on_line = 0
    'If re.condition_data.condition_no = 255 Then
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
  'End If
    Exit Function
   End If
 End If
If no% = -1 Then
 t_y% = -2
Else
 t_y% = 0
End If
'temp_no% = last_conditions.last_cond(1).three_point_on_line_no
'For i% = 1 To temp_no%
'three_point_on_line(i%).record_.index = three_point_on_line(i%).data(0).record.data1.index
'Next i%
'If last_conditions.last_cond(1).three_point_on_line_no Mod 10 = 0 Then
'ReDim Preserve three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no + 10) _
                 As three_point_on_line_type
'End If
'last_conditions.last_cond(1).three_point_on_line_no = last_conditions.last_cond(1).three_point_on_line_no + 1
'set_new_data = True
'three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0) = three_point_on_line_data_0
'    For i% = 0 To 2
'      three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0).poi(i%) = tp(i%)
'    Next i%
      'three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0).line_no = l%
' three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0).record = temp_record.record_data
' three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).record_ = temp_record.record_
' three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).record_.no_reduce = 0
' three_point_on_line(last_conditions.last_cond(1).three_point_on_line_no).data(0).is_no_initial = is_no_initial
'For j% = 0 To 2
'For i% = last_conditions.last_cond(1).three_point_on_line_no To n_(j%) + 2 Step -1
'three_point_on_line(i%).data(0).record.data1.index.i(j%) = _
'    three_point_on_line(i% - 1).data(0).record.data1.index.i(j%)
'Next i%
'three_point_on_line(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).three_point_on_line_no
'Next j%
'no% = last_conditions.last_cond(1).three_point_on_line_no
'******************************************************************************************************************
 If last_conditions_for_aid_no > 0 Then
  If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
   If tp(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       tp(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        tp(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
    last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
   End If
  End If
 End If
  ts$ = LoadResString_from_inpcond(24, "\\0\\" + m_poi(tp(0)).data(0).data0.name + _
                           "\\1\\" + m_poi(tp(1)).data(0).data0.name + _
                           "\\2\\" + m_poi(tp(2)).data(0).data0.name)
         set_three_point_on_line = set_prove_proccess(ts$, point3_on_line_, no%, three_point_on_line(no%).data(0).record.display_string)
         If set_three_point_on_line > 1 Then
        Exit Function
        End If
  If no_reduce = 0 Then 'If draw_or_prove = 0 And re.condition_data.condition_no = 0 Then
   Exit Function
  End If
set_three_point_on_line_mark0:
If regist_data.run_type = 0 Then
If three_point_on_line(no%).record_.no_reduce = 0 Then
set_three_point_on_line_mark_0:
     three_point_on_line(no%).record_.no_reduce = 255
    Call set_level_(three_point_on_line(no%).record_.no_reduce, 1)
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
  temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
  Call add_conditions_to_record(point3_on_line_, no%, 0, 0, temp_record.record_data.data0.condition_data)
     For i% = 0 To 2
      tp(i%) = three_point_on_line(no%).data(0).poi(i%) = tp(i%)
    Next i%
'***************************************************************
If three_point_on_line(no%).data(0).record.data0.condition_data.condition_no > 0 Then
   ty_(0) = is_line_value(three_point_on_line(no%).data(0).poi(0), three_point_on_line(no%).data(0).poi(1), _
        0, 0, 0, "", n_(0), -1000, 0, 0, 0, lv)
   ty_(1) = is_line_value(three_point_on_line(no%).data(0).poi(1), three_point_on_line(no%).data(0).poi(2), _
        0, 0, 0, "", n_(1), -1000, 0, 0, 0, lv)
   ty_(2) = is_line_value(three_point_on_line(no%).data(0).poi(0), three_point_on_line(no%).data(0).poi(2), _
        0, 0, 0, "", n_(2), -1000, 0, 0, 0, lv)
  temp_record.record_data.data0.theorem_no = 1
  temp_record.record_data.data0.condition_data.condition_no = 0
  If ty_(0) And ty_(1) And ty_(2) = False Then
   Call add_conditions_to_record(line_value_, n_(0), n_(1), 0, temp_record.record_data.data0.condition_data)
   set_three_point_on_line = set_line_value(three_point_on_line(no%).data(0).poi(0), _
       three_point_on_line(no%).data(0).poi(2), add_string(line_value(n_(0)).data(0).data0.value, _
         line_value(n_(1)).data(0).data0.value, True, False), 0, 0, 0, _
           temp_record, 0, 0, False)
          If set_three_point_on_line > 0 Then
             Exit Function
          End If
  ElseIf ty_(0) And ty_(1) = False And ty_(2) Then
   Call add_conditions_to_record(line_value_, n_(0), n_(2), 0, temp_record.record_data.data0.condition_data)
   set_three_point_on_line = set_line_value(three_point_on_line(no%).data(0).poi(1), _
       three_point_on_line(no%).data(0).poi(2), minus_string(line_value(n_(2)).data(0).data0.value, _
         line_value(n_(0)).data(0).data0.value, True, False), 0, 0, 0, _
           temp_record, 0, 0, False)
          If set_three_point_on_line > 0 Then
             Exit Function
          End If
  ElseIf ty_(0) = False And ty_(1) And ty_(2) Then
   Call add_conditions_to_record(line_value_, n_(2), n_(1), 0, temp_record.record_data.data0.condition_data)
   set_three_point_on_line = set_line_value(three_point_on_line(no%).data(0).poi(0), _
       three_point_on_line(no%).data(0).poi(1), minus_string(line_value(n_(2)).data(0).data0.value, _
         line_value(n_(1)).data(0).data0.value, True, False), 0, 0, 0, _
           temp_record, 0, 0, False)
          If set_three_point_on_line > 0 Then
             Exit Function
          End If
  End If
End If
For i% = 1 To last_conditions.last_cond(1).three_point_on_line_no
If i% <> no% Then
temp_record.record_data.data0.condition_data.condition_no = 2
 temp_record.record_data.data0.theorem_no = 1
 temp_record.record_data.data0.condition_data.condition(2).ty = point3_on_line_
  temp_record.record_data.data0.condition_data.condition(2).no = i%
  For j% = 0 To 1
   For k% = 0 To 1
If three_point_on_line(i%).data(0).poi(j%) = _
    three_point_on_line(no%).data(0).poi(k%) And _
 three_point_on_line(i%).data(0).poi((j% + 1) Mod 3) = _
   three_point_on_line(no%).data(0).poi((k% + 1) Mod 3) Then
    If three_point_on_line(i%).data(0).is_no_initial = 1 Or three_point_on_line(i%).data(0).is_no_initial = 1 Then
    is_no_initial = 1
    Else
    is_no_initial = 0
    End If
     set_three_point_on_line = set_three_point_on_line(three_point_on_line(i%).data(0).poi(j%), _
     three_point_on_line(i%).data(0).poi((j% + 1) Mod 3), _
      three_point_on_line(no%).data(0).poi((k% + 2) Mod 3), temp_record, 0, no_reduce, is_no_initial)
  If set_three_point_on_line > 1 Then
     Exit Function
  End If
 set_three_point_on_line = set_three_point_on_line(three_point_on_line(no%).data(0).poi(k%), _
   three_point_on_line(no%).data(0).poi((k% + 1) Mod 3), _
    three_point_on_line(i%).data(0).poi((j% + 2) Mod 3), temp_record, 0, no_reduce, is_no_initial)
 If set_three_point_on_line > 1 Then
     Exit Function
 End If
End If
   Next k%
  Next j%
  End If
Next i%
 End If
 Exit Function
set_three_point_on_line_error:
set_three_point_on_line = 0
If set_new_data Then
last_conditions.last_cond(1).three_point_on_line_no = temp_no%
For i% = 1 To temp_no%
 three_point_on_line(i%).data(0).record.data1.index = _
  three_point_on_line(i%).record_.index
Next i%
End If
ElseIf three_point_on_line(i%).data(0).record.data0.condition_data.condition_no = 0 Then 'type=1
End If
End Function
Public Function set_four_point_on_circle(ByVal p1%, ByVal p2%, _
  ByVal p3%, ByVal p4%, ByVal c%, _
    re As total_record_type, no%, ByVal no_reduce As Byte) As Integer
'ty搜　等角,c% 圆号
Dim i%, j%, k%, l%, m%, tc%, n%, p%, temp_no%
Dim it(1) As Integer
Dim arc(1) As Integer
Dim n_(5) As Integer
Dim last0 As Integer
Dim dn(2) As Integer
Dim tp(5) As Integer
Dim tp1(2) As Integer
Dim tp2(2) As Integer
Dim tl(1) As Integer
Dim tn(7) As Integer
Dim cond_ty As Byte
Dim ty As Boolean
Dim set_new_data As Boolean
Dim ts$
Dim A(2) As Integer
Dim dis&
Dim temp_record(1) As total_record_type
Dim level As Byte
'On Error GoTo set_four_point_on_circle_error
If no_reduce = 255 Then
 Exit Function
End If
display_inform = 0
If no% > 0 Then
 If four_point_on_circle(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_four_point_on_circle_mark0
 End If
ElseIf no% = -1 Then
display_inform = 1
End If
temp_record(0).record_data = re.record_data
level = set_level(temp_record(0).record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_four_point_on_circle(p1%, p2%, p3%, p4%, no%, n_(0), n_(1), n_(2), n_(3), _
  n_(4), n_(5), tp(0), tp(1), tp(2), tp(3), p4_on_C, True) Then '判断是否是已知数据
If no% > 0 And run_type < 10 Then
level = four_point_on_circle(no%).data(0).record.data0.condition_data.level
If set_prove_type(point4_on_circle_, no%, temp_record(0).record_data, _
     four_point_on_circle(no%).data(0).record) And set_or_prove < 2 Then
    Call simple_record(point4_on_circle_, no%, _
        four_point_on_circle(no%).data(0).record.data0.condition_data.level, level)
    If no_reduce = 0 Then 'Or run_type = 1 Then
      Exit Function
    Else
     no_reduce = 2
  '    four_point_on_circle(no%).record_.no_reduce = 0
       GoTo set_four_point_on_circle_mark_0
    End If
End If
  If set_or_prove < 2 Then
  If no_reduce = 0 Then
   no% = 0
  End If
       set_four_point_on_circle = 0
  Exit Function
  Else
   If display_inform = 1 Then
   Else
   Exit Function
   End If
  End If
 End If
   Exit Function
 Else '新记录
 If set_or_prove = 2 And display_inform = 1 Then
  set_four_point_on_circle = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
 Exit Function
   End If
  End If
temp_no% = last_conditions.last_cond(1).four_point_on_circle_no
For i% = 1 To temp_no%
four_point_on_circle(i%).record_.index = four_point_on_circle(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).four_point_on_circle_no Mod 10 = 0 Then
   ReDim Preserve four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no + 10) _
      As four_point_on_circle_type
End If
 last_conditions.last_cond(1).four_point_on_circle_no = last_conditions.last_cond(1).four_point_on_circle_no + 1
 set_new_data = True
  four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0) = p4_on_C
 If c% > 0 Then
  four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0).circ = c%
 Else
   four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0).circ = _
    set_circle_from_four_point(tp(0), tp(1), tp(2), tp(3))
  'Call add_point_to_circle_(tp(3), _
   '  four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0).circ)
 End If
 four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0).record = temp_record(0).record_data
 four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).record_ = temp_record(0).record_
 four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).record_.no_reduce = 0
 For j% = 0 To 5
 For i% = last_conditions.last_cond(1).four_point_on_circle_no To n_(j%) + 2 Step -1
  four_point_on_circle(i%).data(0).record.data1.index.i(j%) = _
   four_point_on_circle(i% - 1).data(0).record.data1.index.i(j%)
 Next i%
 four_point_on_circle(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).four_point_on_circle_no
 Next j%
 no% = last_conditions.last_cond(1).four_point_on_circle_no
 If last_conditions_for_aid_no > 0 Then
  If tp(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      tp(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       tp(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        tp(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
     last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  ElseIf four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0).circ > C_display_picture.m_circle.Count Then
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0) > 0 Then
    Call set_add_aid_point_for_line_circle(0, new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(0), _
            1, four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0).circ, 0)
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1) > 0 Then
    Call set_add_aid_point_for_line_circle(0, new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_line(1), _
            1, four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0).circ, 0)
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0) > 0 Then
        Call set_add_aid_point_for_two_circle(new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(0), _
            four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0).circ, 0)
   End If
   If new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1) > 0 Then
        Call set_add_aid_point_for_two_circle(new_point(last_conditions.last_cond(1).new_point_no).data(0).add_to_circle(1), _
            four_point_on_circle(last_conditions.last_cond(1).four_point_on_circle_no).data(0).circ, 0)
   End If
  End If
End If
Call set_four_point_on_circle0(tp(0), tp(1), tp(2), tp(3), 0, re)
Call set_four_point_on_circle0(tp(0), tp(3), tp(2), tp(1), 0, re)
Call set_four_point_on_circle0(tp(0), tp(1), tp(3), tp(2), 0, re)
Call set_four_point_on_circle0(tp(1), tp(0), tp(3), tp(2), 0, re)
Call set_four_point_on_circle0(tp(1), tp(0), tp(2), tp(3), 0, re)
Call set_four_point_on_circle0(tp(2), tp(0), tp(1), tp(3), 0, re)

  ts$ = LoadResString_from_inpcond(23, "\\0\\" + m_poi(tp(0)).data(0).data0.name + _
                            "\\1\\" + m_poi(tp(1)).data(0).data0.name + _
                            "\\2\\" + m_poi(tp(2)).data(0).data0.name + _
                            "\\3\\" + m_poi(tp(3)).data(0).data0.name)
     set_four_point_on_circle = set_prove_proccess(ts$, point4_on_circle_, no%, four_point_on_circle(no%).data(0).record.display_string)
    If set_four_point_on_circle > 1 Then
     Exit Function
    End If
If no_reduce = 0 Then
 Exit Function
End If
set_four_point_on_circle_mark0:
If four_point_on_circle(no%).record_.no_reduce = 0 Then
set_four_point_on_circle_mark_0:
     four_point_on_circle(no%).record_.no_reduce = 255
  last0 = C_display_picture.m_circle.Count
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
'  set_four_point_on_circle = add_point_from_paral_and_circle(0, no%)
'  If set_four_point_on_circle > 1 Then
'     Exit Function
'  End If
       Call set_level_(four_point_on_circle(no%).record_.no_reduce, 1)
 temp_record(0).record_data.data0.condition_data.condition_no = 0 ' record0
  If four_point_on_circle(no%).data(0).record.data0.condition_data.condition_no > 0 Or _
       four_point_on_circle(no%).record_.display_no <> 0 Then
   Call add_conditions_to_record(point4_on_circle_, _
      no%, 0, 0, temp_record(0).record_data.data0.condition_data)
  Else
   'n% = 0
   'For i% = 0 To 3
   'n% = max(n%, wenti_no_from_point(four_point_on_circle(no%).data(0).poi(i%)))
   'Next i%
    '  temp_record(0).record_data.data0.condition_data.condition_no = 1
    '  temp_record(0).record_data.data0.condition_data.condition(1).ty = 255
    '  temp_record(0).record_data.data0.condition_data.condition(1).no = n%
  End If
     For i% = 0 To 3
     tp(i%) = four_point_on_circle(no%).data(0).poi(i%)
     Next i%
     c% = four_point_on_circle(no%).data(0).circ
'*************************************************************
'　同弧上的圆周角相等
'*****************
If is_squre(four_point_on_circle(no%).data(0).poi(0), four_point_on_circle(no%).data(0).poi(1), _
     four_point_on_circle(no%).data(0).poi(2), four_point_on_circle(no%).data(0).poi(3), n%, -1000, 0) Then
      If is_squre_length(n%, 0) Then
       Dsqure(n%).data(0).four_point_on_circle_no = no%
       set_four_point_on_circle = set_squre_length(n%)
        If set_four_point_on_circle > 1 Then
           Exit Function
        End If
      End If
      set_four_point_on_circle = set_similar_triangle_for_squre(n%)
        If set_four_point_on_circle > 1 Then
           Exit Function
        End If
End If
If th_chose(131).chose = 1 Then
      temp_record(1) = temp_record(0)
       temp_record(1).record_data.data0.theorem_no = 131
        set_four_point_on_circle = _
         set_three_angle_value(four_point_on_circle(no%).data(0).angle(0), _
             four_point_on_circle(no%).data(0).angle(2), 0, "1", "1", "0", "180", _
           0, temp_record(1), 0, 0, 0, no_reduce, 0, 0, False)
           If set_four_point_on_circle > 1 Then
            Exit Function
           End If
set_four_point_on_circle = _
         set_three_angle_value(four_point_on_circle(no%).data(0).angle(1), _
             four_point_on_circle(no%).data(0).angle(3), 0, "1", "1", "0", "180", _
              0, temp_record(1), 0, 0, 0, no_reduce, 0, 0, False)
           If set_four_point_on_circle > 1 Then
            Exit Function
           End If
End If
If th_chose(134).chose = 1 Then
       temp_record(1).record_data.data0.theorem_no = 134
 A(0) = angle_number(tp(1), tp(2), tp(0), 0, 0)  ' A(0))
  A(1) = angle_number(tp(1), tp(3), tp(0), 0, 0) ', A(1))
    set_four_point_on_circle = _
     set_three_angle_value(A(0), A(1), 0, "1", "-1", "0", "0", _
       0, temp_record(1), 0, 0, 0, no_reduce, 0, 0, False)
    If set_four_point_on_circle > 1 Then
     Exit Function
    End If
 A(0) = angle_number(tp(2), tp(3), tp(1), 0, 0)    ', A(0))
  A(1) = angle_number(tp(2), tp(0), tp(1), 0, 0)   ', A(1))
   set_four_point_on_circle = _
     set_three_angle_value(A(0), A(1), 0, "1", "-1", "0", "0", _
       0, temp_record(1), 0, 0, 0, no_reduce, 0, 0, False)
    If set_four_point_on_circle > 1 Then
     Exit Function
    End If
 A(0) = angle_number(tp(3), tp(0), tp(2), 0, 0)  ', A(0))
  A(1) = angle_number(tp(3), tp(1), tp(2), 0, 0) ', A(1))
   set_four_point_on_circle = _
     set_three_angle_value(A(0), A(1), 0, "1", "-1", "0", "0", _
       0, temp_record(1), 0, 0, 0, no_reduce, 0, 0, False)
    If set_four_point_on_circle > 1 Then
     Exit Function
    End If
 A(0) = angle_number(tp(0), tp(1), tp(3), 0, 0)  ', A(0))
  A(1) = angle_number(tp(0), tp(2), tp(3), 0, 0) ', A(1))
    set_four_point_on_circle = _
     set_three_angle_value(A(0), A(1), 0, "1", "-1", "0", "0", _
       0, temp_record(1), 0, 0, 0, no_reduce, 0, 0, False)
    If set_four_point_on_circle > 1 Then
     Exit Function
    End If
 End If
'***********************
'***********************
'弦等->弧等
'**********************************************************
If th_chose(126).chose = 1 Then
 temp_record(1).record_data.data0.theorem_no = 126
  temp_record(1).record_data.data0.condition_data.condition_no = 1
 If c% > 0 Then
  If m_Circ(c%).data(0).data0.name <> "" Then
 If is_equal_dline(tp(0), tp(1), tp(2), tp(3), _
       0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, _
         dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
     arc(0) = arc_no(tp(0), c%, tp(1))
     arc(1) = arc_no(tp(2), c%, tp(3))
      If arc(0) > 0 And arc(1) > 0 Then
       Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record(1).record_data.data0.condition_data)
       set_four_point_on_circle = set_equal_arc(arc(0), arc(1), temp_record(1), 0, no_reduce)
          If set_four_point_on_circle > 1 Then
           Exit Function
          End If
      End If
 ElseIf is_equal_dline(tp(0), tp(2), tp(1), tp(3), _
      0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, _
        dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
     arc(0) = arc_no(tp(0), c%, tp(2))
     arc(1) = arc_no(tp(1), c%, tp(3))
    If arc(0) > 0 And arc(1) > 0 Then
     Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record(1).record_data.data0.condition_data)
     set_four_point_on_circle = set_equal_arc(arc(0), arc(1), temp_record(1), 0, no_reduce)
        If set_four_point_on_circle > 1 Then
         Exit Function
        End If
    End If
  ElseIf is_equal_dline(tp(0), tp(3), tp(2), tp(1), _
       0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, _
         dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
   arc(0) = arc_no(tp(0), c%, tp(3))
   arc(1) = arc_no(tp(2), c%, tp(1))
   If arc(0) > 0 And arc(1) > 0 Then
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record(1).record_data.data0.condition_data)
    set_four_point_on_circle = set_equal_arc(arc(0), arc(1), temp_record(1), 0, no_reduce)
       If set_four_point_on_circle > 1 Then
        Exit Function
       End If
   End If
 End If
End If
End If
End If
'**********************************************************
'圆幂定理
'****************************************************************
If th_chose(143).chose = 1 Then
 temp_record(1) = temp_record(0)
  temp_record(1).record_data.data0.theorem_no = 143
' 相交弦定理
   tl(0) = line_number0(tp(0), tp(1), n_(0), n_(1))
    tl(1) = line_number0(tp(2), tp(3), n_(2), n_(3))
If tl(0) > 0 And tl(1) > 0 Then
     tp1(0) = is_line_line_intersect(tl(0), tl(1), _
       n_(4), n_(5), False)
If tp1(0) > 0 Then
'If set_or_prove = 2 Then
set_four_point_on_circle = set_dpoint_pair( _
      tp1(0), tp(0), tp1(0), tp(2), tp1(0), tp(3), tp1(0), tp(1), _
       n_(4), n_(0), n_(5), n_(2), n_(5), n_(3), n_(4), n_(1), _
        tl(0), tl(1), tl(1), tl(0), 1, temp_record(1), True, 0, 0, 0, 0, False)
   If set_four_point_on_circle > 1 Then
    Exit Function
   End If
End If
'********************************************************************************************
 temp_record(1) = temp_record(0)
If is_dparal(tl(0), tl(1), n%, -1000, 0, 0, 0, 0) Then
 Call add_conditions_to_record(paral_, n%, 0, 0, temp_record(1).record_data.data0.condition_data)
 set_four_point_on_circle = set_equal_dline(tp(0), tp(3), tp(1), tp(2), 0, 0, _
    0, 0, 0, 0, True, temp_record(1), 0, 0, 0, 0, 0, False) '平行弦所夹的弧相等
 If set_four_point_on_circle > 1 Then
   Exit Function
 End If
 
ElseIf is_equal_dline(tp(0), tp(3), tp(1), tp(2), 0, 0, 0, _
    0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
     cond_ty, "", record_0.data0.condition_data) Then
  'Call distance_point_to_line(m_poi(tp(0)).data(0).data0.coordinate, m_poi(tp(2)).data(0).data0.coordinate, _
        paral_, m_poi(tp(2)).data(0).data0.coordinate, m_poi(tp(2)).data(0).data0.coordinate, dis(0), pointapi0)
  'Call distance_point_to_line(m_poi(tp(1)).data(0).data0.coordinate, m_poi(tp(2)).data(0).data0.coordinate, _
        paral_, m_poi(tp(2)).data(0).data0.coordinate, m_poi(tp(2)).data(0).data0.coordinate, dis(1), pointapi0)
   Call add_record_to_record(record_0.data0.condition_data, temp_record(1).record_data.data0.condition_data)
 'temp_record(1).record_data.data0.condition_data.condition_no = 0
 'If dis(0) * dis(1) > 0 Then
 set_four_point_on_circle = set_dparal(tl(0), tl(1), temp_record(1), 0, 0, False) '等弧所夹的弦平行
 'Else
  'set_four_point_on_circle = set_dparal(line_number0(tp(0), tp(2), n_(0), n_(1)), _
     line_number0(tp(1), tp(3), n_(2), n_(3)), temp_record(1), 0, 0, False) '等弧所夹的弦平行等

 'End If
 If set_four_point_on_circle > 1 Then
   Exit Function
 End If
End If
End If
'**************************************************************************
   tl(0) = line_number0(tp(0), tp(2), n_(0), n_(1))
    tl(1) = line_number0(tp(1), tp(3), n_(2), n_(3))
     temp_record(1) = temp_record(0)
If tl(0) > 0 And tl(1) > 0 Then
     tp1(0) = is_line_line_intersect(tl(0), tl(1), _
      n_(4), n_(5), False)
If tp1(0) > 0 Then
set_four_point_on_circle = set_dpoint_pair( _
      tp1(0), tp(0), tp1(0), tp(1), tp1(0), tp(3), tp1(0), tp(2), _
       n_(4), n_(0), n_(5), n_(2), n_(5), n_(3), n_(4), n_(1), _
        tl(0), tl(1), tl(1), tl(0), 1, temp_record(1), True, 0, 0, 0, 0, False)
   If set_four_point_on_circle > 1 Then
    Exit Function
   End If
End If
End If
'**************************************************************************
   tl(0) = line_number0(tp(0), tp(3), n_(0), n_(1))
    tl(1) = line_number0(tp(1), tp(2), n_(2), n_(3))
If tl(0) > 0 And tl(1) > 0 Then
     tp1(0) = is_line_line_intersect(tl(0), tl(1), _
       n_(4), n_(5), False)
If tp1(0) > 0 Then
set_four_point_on_circle = set_dpoint_pair( _
      tp1(0), tp(0), tp1(0), tp(1), tp1(0), tp(2), tp1(0), tp(3), _
       n_(4), n_(0), n_(5), n_(2), n_(5), n_(3), n_(4), n_(1), _
        tl(0), tl(1), tl(1), tl(0), 1, temp_record(1), True, 0, 0, 0, 0, False)
   If set_four_point_on_circle > 1 Then
    Exit Function
   End If
End If
temp_record(1) = temp_record(0)
If is_dparal(tl(0), tl(1), n%, -1000, 0, 0, 0, 0) Then
 Call add_conditions_to_record(paral_, n%, 0, 0, temp_record(1).record_data.data0.condition_data)
 set_four_point_on_circle = set_equal_dline(tp(0), tp(1), tp(3), tp(2), 0, 0, _
    0, 0, 0, 0, True, temp_record(1), 0, 0, 0, 0, 0, False)
 If set_four_point_on_circle > 1 Then
   Exit Function
 End If
ElseIf is_equal_dline(tp(0), tp(1), tp(3), tp(2), 0, 0, 0, _
    0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
     cond_ty, "", record_0.data0.condition_data) Then
 Call add_conditions_to_record(cond_ty, dn(0), dn(1), dn(2), temp_record(1).record_data.data0.condition_data)
 set_four_point_on_circle = set_dparal(tl(0), tl(1), temp_record(1), 0, 0, False)
 If set_four_point_on_circle > 1 Then
   Exit Function
 End If
 End If
End If
End If
End If
If four_point_on_circle(no%).record_.no_reduce < 2 Then
 set_four_point_on_circle = _
  combine_point4_on_circle_with_point4_on_circle(no%, no_reduce)
   If set_four_point_on_circle > 1 Then
    Exit Function
   End If
If four_point_on_circle(no%).record_.no_reduce < 2 Then
  four_point_on_circle(no%).record_.no_reduce = _
     four_point_on_circle(no%).record_.no_reduce + 2
End If
End If
Exit Function
set_four_point_on_circle_error:
set_four_point_on_circle = 0
If set_new_data Then
last_conditions.last_cond(1).four_point_on_circle_no = temp_no%
For i% = 1 To temp_no%
four_point_on_circle(i%).data(0).record.data1.index = _
     four_point_on_circle(i%).record_.index
Next i%
End If
End Function
Private Function set_display_string_no_(ByVal condition_tree_no%, _
           concl_or_cond As Byte, is_remove As Byte) As Boolean
'**********************************************************
'设置显示的编号
'输入条件类型和条件号，由条件的记录推出后续的显示,ty_=0 第一次
'is_remove=1 ,
'*************************************************************
Dim i%, j%, k%, dn%
Dim re As total_record_type
Dim re1 As total_record_type
Dim re0 As total_record_type
Dim is_same_theorem As Byte
Dim is_remove_ As Byte
 If condition_tree(condition_tree_no%).condition.no = 0 Then  '无记录
    condition_tree(condition_tree(condition_tree_no%).pre_no).next_no = _
              condition_tree(condition_tree_no%).next_no
    condition_tree(condition_tree(condition_tree_no%).next_no).pre_no = _
              condition_tree(condition_tree_no%).pre_no
  Exit Function
 End If
 re.record_data.data0.condition_data = condition_tree(condition_tree_no%).conditions.data
'*******************************************************************
set_display_string_no_mark0:
If condition_tree(condition_tree_no%).condition.ty = general_string_ Then '处理有结论推出的记录
 If general_string(condition_tree(condition_tree_no%).condition.no).record_.conclusion_no > 0 Then '是结论形式
  If re.record_data.data0.condition_data.condition_no > 1 And re.record_data.data0.condition_data.condition_no < 200 Then '正常记录
      If re.record_data.data0.condition_data.condition(re.record_data.data0.condition_data.condition_no).ty = general_string_ Then '最后一条记录是
       If general_string( _
             re.record_data.data0.condition_data.condition( _
                re.record_data.data0.condition_data.condition_no).no).record_.conclusion_no > 0 Then
        general_string(re.record_data.data0.condition_data.condition(re.record_data.data0.condition_data.condition_no).no).data(0).value_ = _
            time_string(general_string(condition_tree(condition_tree_no%).condition.no).data(0).value_, _
               general_string(condition_tree(condition_tree_no%).condition.no).data(0).trans_para, True, False) '计算值
        concl_or_cond = 0
       Else
       concl_or_cond = 1
       End If
     Else
       concl_or_cond = 1
     End If
  Else
    concl_or_cond = 1
  End If
 Else
  concl_or_cond = 0
 End If
End If
'*******************************************************************
'插入新记录
If re.record_.display_no < 0 Then '已知条件
   If concl_or_cond > 0 Then '是结论
     display_no = display_no + 1 '添加新的显示记录
      ReDim Preserve display_string(display_no) As display_string_type
       display_string(display_no).display_record_type = condition_tree(condition_tree_no%).condition.ty
          display_string(display_no).display_record_no = condition_tree(condition_tree_no%).condition.no
'           display_string(display_no).aid_string_no = aid_no%
            display_string(display_no).conclusion_or_condition = concl_or_cond
             display_string(display_no).condition_data = re.record_data.data0.condition_data
              display_string(display_no).reduce_level = re.record_data.data0.condition_data.level
   End If
    Exit Function
End If
For i% = 1 To display_no
If (display_string(i%).display_record_no = condition_tree(condition_tree_no%).condition.no And _
    display_string(i%).display_record_type = condition_tree(condition_tree_no%).condition.ty) Then 'Or _
    (display_string(i%).aid_string_no = aid_no% And _
      aid_no% > 0) Then
If display_string(i%).conclusion_or_condition > 0 Then
 concl_or_cond = display_string(i%).conclusion_or_condition
End If
   For k% = i% To display_no - 1
    display_string(k%) = _
      display_string(k% + 1)
   Next k%
 display_string(display_no).display_record_no = condition_tree(condition_tree_no%).condition.no
  display_string(display_no).display_record_type = condition_tree(condition_tree_no%).condition.ty
'   display_string(display_no).aid_string_no = 0
    display_string(display_no).reduce_level = re.record_data.data0.condition_data.level
     display_string(display_no).condition_data = re.record_data.data0.condition_data
      display_string(display_no).conclusion_or_condition = concl_or_cond
       Exit Function
End If
Next i%
If event_statue = get_inform Or re.record_.display_no = 0 Then
display_no = display_no + 1
ReDim Preserve display_string(display_no) As display_string_type
 'For i% = display_no - 1 To 1 Step -1
  'If display_string(display_no).aid_string_no = 0 Then
   'GoTo set_display_string_no_mark10
  'End If
 'Next i%
'set_display_string_no_mark10:
 'For j% = display_no - 1 To i% + 1 Step -1
  'display_string(j% + 1) = display_string(j%)
 'Next j%
display_string(display_no).display_record_type = condition_tree(condition_tree_no%).condition.ty
 display_string(display_no).display_record_no = condition_tree(condition_tree_no%).condition.no
  'display_string(display_no).aid_string_no = aid_no%
   display_string(display_no).condition_data = re.record_data.data0.condition_data
   display_string(display_no).conclusion_or_condition = concl_or_cond
    display_string(display_no).reduce_level = re.record_data.data0.condition_data.level
End If
'找出相应的记录'
'**********************************************************************
'记录的记录
 'End If
 End Function
Public Function set_display_string_no(conc_ty As Integer, ByVal conc_no%, _
                                   concl_or_cond As Integer, is_remove As Byte) As Boolean
Dim i%
Erase condition_tree
last_condition_tree = 0
ReDim Preserve condition_tree(0) As condition_tree_type
condition_tree(0).next_no = 1
If conc_ty > 0 And conc_no% > 0 Then
Call set_condition_tree(conc_ty, conc_no%, concl_or_cond, is_remove)
Else
For i% = 0 To last_conclusion - 1
Call set_condition_tree(conclusion_data(i%).ty, conclusion_data(i%).no(0), i% + 1, is_remove)
Next i%
End If
 Call set_display_string_no_(1, _
            condition_tree(1).conclusion_no, 0)
 i% = condition_tree(0).next_no
 Do
 Call set_display_string_no_(i%, _
           condition_tree(i%).conclusion_no, is_remove)
 i% = condition_tree(i%).next_no
Loop Until i% = 0
End Function

Public Function set_property_of_right_angle(ByVal no%, ByVal reduce As Boolean) As Byte
Dim i%, j%, k%, l%, tn%, tn1%
Dim dn(2) As Integer
'Dim tA(1) As Integer
Dim tp(4) As Integer
Dim A As Integer
Dim ty As Byte
Dim value As String
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
Dim tA(3) As Integer
'Dim s As String
Dim t_A As temp_triangle_type
'On Error GoTo set_property_of_right_angle_error
A = angle3_value(no%).data(0).data0.angle(0)
temp_record.record_data.data0.condition_data.condition_no = 1
temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_
temp_record.record_data.data0.condition_data.condition(1).no = no%
For i% = 1 To m_poi(angle(A).data(0).poi(1)).data(0).in_line(0)
 l% = m_poi(angle(A).data(0).poi(1)).data(0).in_line(i%)
tA(0) = angle_number(m_lin(l%).data(0).data0.poi(0), angle(A).data(0).poi(1), _
       angle(A).data(0).poi(0), 0, 0)
tA(1) = angle_number(angle(A).data(0).poi(2), _
         angle(A).data(0).poi(1), m_lin(l%).data(0).data0.poi(1), 0, 0)
If tA(0) > 0 And tA(1) > 0 Then
set_property_of_right_angle = set_three_angle_value(tA(0), 0, tA(1), "1", "1", "0", "90", _
      0, temp_record, 0, 0, 0, 0, 0, 1, False)
     If set_property_of_right_angle > 1 Then
      Exit Function
     End If
Else
tA(0) = angle_number(m_lin(l%).data(0).data0.poi(1), angle(A).data(0).poi(1), _
       angle(A).data(0).poi(0), 0, 0)
tA(1) = angle_number(angle(A).data(0).poi(2), _
         angle(A).data(0).poi(1), _
           m_lin(l%).data(0).data0.poi(0), 0, 0)
If tA(0) > 0 And tA(1) > 0 Then
set_property_of_right_angle = set_three_angle_value(tA(0), tA(1), 0, "1", "1", "0", "90", _
       0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_property_of_right_angle > 1 Then
      Exit Function
     End If
End If
End If
Next i%
set_property_of_right_angle = set_simple_polygon_from_right_angle(A%, no%, 0)
If set_property_of_right_angle > 1 Then
Exit Function
End If
temp_record.record_data.data0.theorem_no = 0
set_property_of_right_angle = set_dverti(angle(A).data(0).line_no(0), angle(A).data(0).line_no(1), _
  temp_record, 0, 0, False)
  If set_property_of_right_angle > 1 Then
   Exit Function
  End If
'补角
temp_record.record_data.data0.theorem_no = 0
For i% = 0 To 1
 For j% = 0 To 1
  tA(0) = Abs(angle_number(m_lin(angle(A).data(0).line_no(0)).data(0).data0.poi(i%), _
           angle(A).data(0).poi(1), m_lin(angle(A).data(0).line_no(1)).data(0).data0.poi(j%), 0, 0))
   If tA(0) > 0 And tA(0) <> A Then
     set_property_of_right_angle = set_angle_value(tA(0), "90", temp_record, 0, 0, False)
     If set_property_of_right_angle >= 1 Then
      Exit Function
     End If
   End If
  Next j%
Next i%
'angle_value(no%).data(0).data0.value = "90"
If th_chose(5).chose = 1 Then

'********************************************
'******************************************************************
Call set_temp_triangle_from_angle(A, 0, t_A, False)
For i% = 1 To t_A.last_T
If th_chose(129).chose = 1 Then
 For j% = 1 To C_display_picture.m_circle.Count
  If m_poi(m_Circ(j%).data(0).data0.center).data(0).data0.visible = 0 And m_Circ(j%).data(0).data0.center > 0 Then
   l% = 0
   For k% = 1 To m_Circ(j%).data(0).data0.in_point(0)
    If m_Circ(j%).data(0).data0.in_point(k%) = t_A.data(i%).poi(0) Or _
        m_Circ(j%).data(0).data0.in_point(k%) = t_A.data(i%).poi(1) Or _
         m_Circ(j%).data(0).data0.in_point(k%) = t_A.data(i%).poi(2) Then
    l% = l% + 1
    If l% = 3 Then
     temp_record.record_data.data0.theorem_no = 129
    set_property_of_right_angle = _
     set_three_point_on_line(t_A.data(i%).poi(1), t_A.data(i%).poi(2), _
        m_Circ(j%).data(0).data0.center, temp_record, 0, 0, 1)
      If set_property_of_right_angle > 1 Then
       Exit Function
      End If
    End If
    End If
    Next k%
    End If
   Next j%
End If
If th_chose(20).chose = 1 Then
temp_record.record_data.data0.theorem_no = 20
temp_record.record_data.data0.condition_data.condition_no = 1
    set_property_of_right_angle = _
      set_three_angle_value(t_A.data(i%).angle(1), t_A.data(i%).angle(2), 0, _
      "1", "1", "0", "90", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
      If set_property_of_right_angle > 1 Then
       Exit Function
      End If
End If
If is_line_value(t_A.data(i%).poi(0), t_A.data(i%).poi(1), 0, 0, 0, "", dn(0), _
       -1000, 0, 0, 0, line_value_data0) = 1 And _
 is_line_value(t_A.data(i%).poi(0), t_A.data(i%).poi(2), 0, 0, 0, "", dn(1), _
        -1000, 0, 0, 0, line_value_data0) = 1 Then
If area_of_triangle_conclusion = 1 Then
End If
value = ""
If is_angle_value(t_A.data(i%).angle(1), value, "", tn%, temp_record1.data0.condition_data) And _
       is_angle_value(t_A.data(i%).angle(2), "", "", 0, record_0.data0.condition_data) = False Then
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_
     temp_record.record_data.data0.condition_data.condition(1).no = no%
    Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
    set_property_of_right_angle = _
     set_angle_value(t_A.data(i%).angle(2), minus_string("90", _
      value, True, False), temp_record, 0, 0, False)
     If set_property_of_right_angle > 1 Then
      Exit Function
     End If
  If value = "45" Then
   set_property_of_right_angle = set_equal_dline(t_A.data(i%).poi(1), _
    t_A.data(i%).poi(0), t_A.data(i%).poi(0), _
           t_A.data(i%).poi(2), 0, 0, 0, 0, 0, 0, 0, _
            temp_record, 0, 0, 0, 0, 0, False)
     If set_property_of_right_angle > 1 Then
      Exit Function
     End If
   End If
Else
 value = ""
 If is_angle_value(t_A.data(i%).angle(2), value, "", tn%, temp_record1.data0.condition_data) And _
       is_angle_value(t_A.data(i%).angle(1), "", "", 0, record_0.data0.condition_data) = False Then
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_
     temp_record.record_data.data0.condition_data.condition(1).no = no%
     Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
    set_property_of_right_angle = _
     set_angle_value(t_A.data(i%).angle(1), minus_string("90", _
      value, True, False), temp_record, 0, 0, False)
    If set_property_of_right_angle > 1 Then
     Exit Function
    End If
If value = "45" Then
'等腰直角三角形
set_property_of_right_angle = set_equal_dline(t_A.data(i%).poi(1), _
   t_A.data(i%).poi(0), t_A.data(i%).poi(0), _
      t_A.data(i%).poi(2), 0, 0, 0, 0, 0, 0, 0, _
       temp_record, 0, 0, 0, 0, 0, False)
      If set_property_of_right_angle > 1 Then
       Exit Function
      End If
End If
End If
End If
End If
'直角三角形斜边上的中线
For l% = 1 + last_conditions.last_cond(0).mid_point_no To last_conditions.last_cond(1).mid_point_no
k% = Dmid_point(l%).data(0).record.data1.index.i(0)
If is_same_two_point(t_A.data(i%).poi(1), _
 t_A.data(i%).poi(2), Dmid_point(k%).data(0).data0.poi(0), _
  Dmid_point(k%).data(0).data0.poi(2)) Then
   temp_record.record_data.data0.condition_data.condition_no = 2
    temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
     temp_record.record_data.data0.condition_data.condition(2).no = k%
   tA(0) = angle_number(t_A.data(i%).poi(1), _
    t_A.data(i%).poi(0), Dmid_point(k%).data(0).data0.poi(1), 0, 0)
   tA(2) = angle_number(t_A.data(i%).poi(2), _
    t_A.data(i%).poi(0), Dmid_point(k%).data(0).data0.poi(1), 0, 0)
  temp_record.record_data.data0.theorem_no = 44
  set_property_of_right_angle = set_equal_dline(t_A.data(i%).poi(1), _
    Dmid_point(k%).data(0).data0.poi(1), t_A.data(i%).poi(0), _
     Dmid_point(k%).data(0).data0.poi(1), 0, 0, 0, 0, 0, 0, 0, _
      temp_record, 0, 0, 0, 0, 0, False)
     If set_property_of_right_angle > 1 Then
      Exit Function
     End If
   set_property_of_right_angle = set_equal_dline(t_A.data(i%).poi(2), _
     Dmid_point(k%).data(0).data0.poi(1), t_A.data(i%).poi(0), _
      Dmid_point(k%).data(0).data0.poi(1), 0, 0, 0, 0, 0, 0, 0, _
       temp_record, 0, 0, 0, 0, 0, False)
     If set_property_of_right_angle > 1 Then
      Exit Function
     End If
   set_property_of_right_angle = set_Drelation(t_A.data(i%).poi(1), _
    t_A.data(i%).poi(2), t_A.data(i%).poi(0), _
     Dmid_point(k%).data(0).data0.poi(1), 0, 0, 0, 0, 0, 0, _
      "2", temp_record, 0, 0, 0, 0, 0, False)
     If set_property_of_right_angle > 1 Then
      Exit Function
     End If
     If tA(0) <> 0 And tA(1) <> 0 Then
    set_property_of_right_angle = _
     set_three_angle_value(Abs(tA(0)), t_A.data(i%).angle(1), 0, "1", "-1", "0", "0", _
           0, temp_record, 0, 0, 0, 0, 0, 0, False)
    If set_property_of_right_angle > 1 Then
     Exit Function
    End If
    End If
    If tA(2) <> 0 And tA(3) <> 0 Then
    set_property_of_right_angle = _
     set_three_angle_value(Abs(tA(2)), t_A.data(i%).angle(2), 0, _
      "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
    If set_property_of_right_angle > 1 Then
     Exit Function
    End If
    End If
End If
  Next l%
'特殊角的直角三角形
For j% = 0 To 1
value = ""
 If is_angle_value(t_A.data(i%).angle(j% + 1), value, "", dn(0), temp_record1.data0.condition_data) Then
   temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_
     temp_record.record_data.data0.condition_data.condition(1).no = no%
  Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
   'temp_record.record_data.data0.condition_data.condition(2).ty = angle3_value_
    'temp_record.record_data.data0.condition_data.condition(2).no = dn(0)
     'temp_record.record_data.data0.condition_data.condition_no = 2
 If value = "30" Then
   set_property_of_right_angle = set_angle_value(t_A.data(i%).angle(1 + ((j% + 1) Mod 2)), _
      "60", temp_record, 0, 0, False)
       If set_property_of_right_angle > 1 Then
        Exit Function
       End If
   set_property_of_right_angle = set_Drelation(t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(0), _
      t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
        0, 0, 0, 0, 0, 0, "'3/2", temp_record, 0, 0, 0, 0, 0, False)
       If set_property_of_right_angle > 1 Then
        Exit Function
       End If
   set_property_of_right_angle = set_Drelation(t_A.data(i%).poi(0), _
             t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
            t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
              0, 0, 0, 0, 0, 0, "1/2", temp_record, 0, 0, 0, 0, 0, False)
      If set_property_of_right_angle > 1 Then
       Exit Function
      End If
   set_property_of_right_angle = set_Drelation(t_A.data(i%).poi(0), t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
         t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(0), _
           0, 0, 0, 0, 0, 0, "'3/3", temp_record, 0, 0, 0, 0, 0, False)
      If set_property_of_right_angle > 1 Then
       Exit Function
      End If
ElseIf value = "45" Then
    set_property_of_right_angle = set_angle_value(t_A.data(i%).angle(1 + ((j% + 1) Mod 2)), _
      "45", temp_record, 0, 0, False)
    If set_property_of_right_angle > 1 Then
     Exit Function
    End If
    set_property_of_right_angle = set_equal_dline(t_A.data(i%).poi(1), t_A.data(i%).poi(0), _
      t_A.data(i%).poi(2), t_A.data(i%).poi(0), 0, 0, 0, 0, 0, 0, 0, _
       temp_record, 0, 0, 0, 0, 0, False)
      If set_property_of_right_angle > 1 Then
       Exit Function
      End If
   set_property_of_right_angle = set_Drelation(t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(0), _
      t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
       0, 0, 0, 0, 0, 0, "'2/2", temp_record, 0, 0, 0, 0, 0, False)
       If set_property_of_right_angle > 1 Then
        Exit Function
       End If
   set_property_of_right_angle = set_Drelation(t_A.data(i%).poi(0), _
             t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
            t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
               0, 0, 0, 0, 0, 0, "'2/2", temp_record, 0, 0, 0, 0, 0, False)
      If set_property_of_right_angle > 1 Then
       Exit Function
      End If
ElseIf value = "60" Then
    Call set_angle_value(t_A.data(i%).angle(1 + ((j% + 1) Mod 2)), _
      "30", temp_record, 0, 0, False)
   set_property_of_right_angle = set_Drelation(t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(0), _
      t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
        0, 0, 0, 0, 0, 0, "1/2", temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_right_angle > 1 Then
         Exit Function
        End If
   set_property_of_right_angle = set_Drelation(t_A.data(i%).poi(0), _
             t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
            t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
               0, 0, 0, 0, 0, 0, "'3/2", temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_right_angle > 1 Then
         Exit Function
        End If
   set_property_of_right_angle = set_Drelation(t_A.data(i%).poi(0), t_A.data(i%).poi(1 + ((j% + 1) Mod 2)), _
         t_A.data(i%).poi(j% + 1), t_A.data(i%).poi(0), _
           0, 0, 0, 0, 0, 0, "'3", temp_record, 0, 0, 0, 0, 0, False)
           If set_property_of_right_angle > 1 Then
            Exit Function
           End If
   End If
   
 End If
Next j%

Next i%
End If
'************************************************************
'共线和=180
For i% = 1 To last_conditions.last_cond(1).angle_value_no   '_angle_value
tn% = angle_value.av_no(i%).no
If angle3_value(tn%).data(0).data0.value = "90" And tn% <> no% Then
   temp_record.record_data.data0.condition_data.condition_no = 2
     temp_record.record_data.data0.condition_data.condition(2).ty = angle3_value_
      temp_record.record_data.data0.condition_data.condition(2).no = i%
set_property_of_right_angle = set_property_of_two_angle_value( _
    angle3_value(no%).data(0).data0.angle(0), angle3_value(tn%).data(0).data0.angle(0), "1", "1", _
     "180", temp_record, True, 0)
     If set_property_of_right_angle > 1 Then
      Exit Function
     End If
     Call combine_two_angle(angle3_value(no%).data(0).data0.angle(0), _
          angle3_value(tn%).data(0).data0.angle(0), 0, tA(1), 0, 0, tA(2), tA(0), ty, 0, 1)
 set_property_of_right_angle = set_property_of_eangle(ty, angle3_value(no%).data(0).data0.angle(0), _
   angle3_value(tn%).data(0).data0.angle(0), tA(0), tA(1), tA(2), 0, temp_record, 0)
     If set_property_of_right_angle > 1 Then
      Exit Function
     End If
For j% = 1 To last_conditions.last_cond(1).eangle_no
 tn1% = Deangle.av_no(j%).no
 If angle3_value(tn1%).record_.no_reduce < 2 Then
   temp_record.record_data.data0.condition_data.condition_no = 2
Call add_conditions_to_record(angle3_value_, tn1%, 0, 0, temp_record.record_data.data0.condition_data)
set_property_of_right_angle = set_different_of_two_eangle(ty, angle3_value(tn1%).data(0).data0.ty_(0), _
      angle3_value(tn%).data(0).data0.angle(0), angle3_value(no%).data(0).data0.angle(0), tA(0), _
       angle3_value(tn1%).data(0).data0.angle(0), angle3_value(tn1%).data(0).data0.angle(1), _
        angle3_value(tn1%).data(0).data0.angle_(3), temp_record, 0)
  If set_property_of_right_angle > 1 Then
   Exit Function
  End If
  End If
 Next j%
 '*********************
If angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).poi(1) = _
     angle(angle3_value(no%).data(0).data0.angle(0)).data(0).poi(1) Then
 For j% = 0 To 1
  For k% = 0 To 1
  If angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(j%) = _
       angle(angle3_value(no%).data(0).data0.angle(0)).data(0).line_no(k%) And _
         angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no((j% + 1) Mod 2) <> _
           angle(angle3_value(no%).data(0).data0.angle(0)).data(0).line_no((k% + 1) Mod 2) Then
   temp_record.record_data.data0.condition_data.condition_no = 2
  set_property_of_right_angle = combine_two_line(angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no((j% + 1) Mod 2), _
         angle(angle3_value(no%).data(0).data0.angle(0)).data(0).line_no((k% + 1) Mod 2), _
            angle(angle3_value(no%).data(0).data0.angle(0)).data(0).poi(1), temp_record.record_data, 0, 0)
    If set_property_of_right_angle > 2 Then
     Exit Function
    End If
   '共线
  End If
  Next k%
 Next j%
 End If
 End If
set_right_angle_mark1:
Next i%
Exit Function
set_property_of_right_angle_error:
set_property_of_right_angle = 0
End Function

Public Function set_total_equal_triangle(ByVal p1%, ByVal p2%, ByVal p3%, _
                        ByVal p4%, ByVal p5%, ByVal p6%, re As total_record_type, _
                         no%, ByVal no_reduce As Byte) As Byte
Dim i%, p%, d%, tn%
Dim temp_record As total_record_type
Dim triA(1) As Integer
Dim dir(1) As Integer
Dim ts$
If no_reduce = 255 Then
 Exit Function
End If
If no% = 0 Then
triA(0) = triangle_number(p1%, p2%, p3%, 0, 0, 0, _
              0, 0, 0, dir(0))
triA(1) = triangle_number(p4%, p5%, p6%, 0, 0, 0, _
              0, 0, 0, dir(1))
End If
If triA(0) > 0 And triA(1) > 0 Then
set_total_equal_triangle = set_total_equal_triangle0(triA(0), triA(1), _
       dir(0), dir(1), re, no%, no_reduce)
 If set_total_equal_triangle > 1 Then
  Exit Function
 End If
 End If
End Function

Public Function set_total_equal_triangle_from_eangle(ByVal A1%, _
                      ByVal A2%, re As total_record_type, ByVal p%, _
                       ByVal l1%, ByVal l2%, ByVal n1%, ByVal n2%, _
                        ByVal no_reduce As Byte, ByVal is_no_initial As Byte) As Byte
'p%,ty=1 jiao.加辅助点 新点
Dim j%, k%, tn%, l%, same_angle_no%
Dim ty As Byte
Dim arc(1) As Integer
Dim tn1(2) As Integer
Dim tn2(2) As Integer
Dim dn(6) As Integer
Dim con_ty(1) As Byte
Dim t_condition_data  As condition_data_type
Dim t_condition_data_(1) As condition_data_type
Dim triA(1) As temp_triangle_type
Dim triA_(1) As temp_triangle_data_type
Dim temp_record As total_record_type
Dim temp_record0 As total_record_type
Dim temp_record1 As total_record_type
Dim is_right_angle As Boolean
Dim is_value_180 As Boolean
Dim total_equal As Byte
Dim dp As point_pair_data0_type
Dim total_equal_type_S(2) As Byte
Dim total_equal_type_A(2) As Byte
 If no_reduce > 0 And no_reduce < 255 Then
 no_reduce = no_reduce - 1
 End If
'temp_record.record_data.data0.condition_data.condition_no = con_no%
If re.record_data.data0.condition_data.condition_no = 2 And re.record_data.data0.condition_data.condition(1).ty = angle3_value_ And _
    re.record_data.data0.condition_data.condition(2).ty = angle3_value_ Then
  If angle3_value(re.record_data.data0.condition_data.condition(1).no).data(0).data0.value = "90" And angle3_value( _
      re.record_data.data0.condition_data.condition(2).no).data(0).data0.value = "90" Then
   is_right_angle = True
   End If
   End If
If angle(A1%).data(0).value = "90" And angle(A2%).data(0).value = "90" Then
 total_equal_type_A(0) = 2
Else
 total_equal_type_A(0) = 1
End If
triA(0).last_T = 0
triA(1).last_T = 0
Call set_temp_triangle_from_angle(A1%, p%, triA(0), True)
Call set_temp_triangle_from_angle(A2%, p%, triA(1), False)
For j% = 1 To triA(0).last_T
 triA_(0) = triA(0).data(j%)
  triA_(1) = triA(0).data(j%)
   Call exchange_two_integer(triA_(1).angle(1), triA_(1).angle(2))
    Call exchange_two_integer(triA_(1).poi(1), triA_(1).poi(2))
     triA_(1).direction = -triA_(1).direction
      Call exchange_two_integer(triA_(1).l_v(1), triA_(1).l_v(2))
  For l% = 0 To 1
   For k% = 1 To triA(1).last_T
 total_equal_type_S(1) = 0
 total_equal_type_S(2) = 0
 total_equal_type_A(0) = 0
 total_equal_type_A(1) = 0
 total_equal_type_A(2) = 0
If p% = 0 Or triA_(l%).is_contain_p Or _
     triA(1).data(k%).is_contain_p Then
If triangle(triA_(l%).no).epolygon_no > 0 And _
       triangle(triA(1).data(k%).no).epolygon_no > 0 Then
   If triangle(triA_(l%).no).epolygon_no <> _
         triangle(triA(1).data(k%).no).epolygon_no And _
          epolygon(triangle(triA(1).data(k%).no).epolygon_no).data(0).p.total_v = _
            epolygon(triangle(triA_(l%).no).epolygon_no).data(0).p.total_v Then
     If read_three_point_from_epolygon(triA(1).data(k%).poi, _
          epolygon(triangle(triA(1).data(k%).no).epolygon_no).data(0), tn1) Then
     If read_three_point_from_epolygon(triA_(l%).poi, _
          epolygon(triangle(triA_(l%).no).epolygon_no).data(0), tn2) Then
           tn1(0) = different_of_vitex(tn1(0), tn1(1), epolygon(triangle(triA(1).data(k%).no).epolygon_no).data(0).p.total_v)
           'tn1(1) = different_of_vitex(tn1(1), tn1(2), epolygon(triangle(triA(1).data(k%).no).epolygon_no).data(0).p.total_v)
           dn(0) = different_of_vitex(tn2(0), tn2(1), epolygon(triangle(triA_(l%).no).epolygon_no).data(0).p.total_v)
           'dn(1) = different_of_vitex(tn2(1), tn2(2), epolygon(triangle(triA_(l%).no).epolygon_no).data(0).p.total_v)
           dn(2) = different_of_vitex(tn2(1), tn2(0), epolygon(triangle(triA_(l%).no).epolygon_no).data(0).p.total_v)
           'dn(3) = different_of_vitex(tn2(2), tn2(1), epolygon(triangle(triA_(l%).no).epolygon_no).data(0).p.total_v)
     If tn1(0) = dn(0) Or tn1(0) = dn(2) Then
   temp_record.record_data.data0.condition_data.condition_no = 2
    temp_record.record_data.data0.condition_data.condition(1).ty = epolygon_
     temp_record.record_data.data0.condition_data.condition(2).ty = epolygon_
      temp_record.record_data.data0.condition_data.condition(1).no = triangle(triA_(l%).no).epolygon_no
       temp_record.record_data.data0.condition_data.condition(2).no = triangle(triA(1).data(k%).no).epolygon_no
    If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(1), _
        triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), _
            0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, _
             dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then '邻边
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
     set_total_equal_triangle_from_eangle = _
       set_total_equal_triangle0(triA_(l%).no, triA(1).data(k%).no, _
     triA_(l%).direction, triA(1).data(k%).direction, temp_record, 0, no_reduce)
     If set_total_equal_triangle_from_eangle > 1 Then
      Exit Function
     End If
    ElseIf is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(2), _
        triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), _
            0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, _
             dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then '邻边
           total_equal_type_S(1) = 1
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
     set_total_equal_triangle_from_eangle = _
       set_total_equal_triangle0(triA_(l%).no, triA(1).data(k%).no, _
     triA_(l%).direction, triA(1).data(k%).direction, temp_record, 0, no_reduce)
     If set_total_equal_triangle_from_eangle > 1 Then
      Exit Function
     End If
   ElseIf is_equal_dline(triA_(l%).poi(2), triA_(l%).poi(1), _
        triA(1).data(k%).poi(2), triA(1).data(k%).poi(1), _
          0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, _
             dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
      total_equal_type_S(0) = 1
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
     set_total_equal_triangle_from_eangle = _
       set_total_equal_triangle0(triA_(l%).no, triA(1).data(k%).no, _
     triA_(l%).direction, triA(1).data(k%).direction, temp_record, 0, no_reduce)
     If set_total_equal_triangle_from_eangle > 1 Then
      Exit Function
     End If
   End If
   End If
   End If
   End If
   End If
Else
 If p% > 0 Then
   If triA_(l%).poi(1) <> p% And triA_(l%).poi(2) <> p% And _
    triA(1).data(k%).poi(1) <> p% And triA(1).data(k%).poi(2) <> p% Then
     '新增点
     GoTo set_total_equal_triangle_from_eangle_mark2
   End If
  End If
'temp_record.record_data.data0.condition_data.condition_no = 0
'等角对等弧
'If triA_(l%).no = triA(1).data(k%).no And triA_(l%).no > 0 And _
 '    TH_CHOSE(40).chose = 1 Then
 ' temp_record = re
 '  temp_record.record_data.data0.theorem_no = 40
 'If triA(1).data(k%).poi(1) = triA_(l%).poi(0) Then
  ' set_total_equal_triangle_from_eangle = _
    set_equal_dline(triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), _
     triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, _
      0, temp_record, 0, 0, 0, 0, no_reduce)
   '  If set_total_equal_triangle_from_eangle > 1 Then
   '   Exit Function
   '  End If
 'ElseIf triA(1).data(k%).poi(2) = triA_(l%).poi(0) Then
  ' temp_record = re
  ' set_total_equal_triangle_from_eangle = _
    set_equal_dline(triA(1).data(k%).poi(1), triA(1).data(k%).poi(0), _
     triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, _
      0, temp_record, 0, 0, 0, 0, no_reduce)
   '  If set_total_equal_triangle_from_eangle > 1 Then
   '   Exit Function
   '  End If
 'Else
 ' GoTo set_total_equal_triangle_from_eangle_mark2
 'End If
'End If
'**************************************************************
   total_equal = 0
    temp_record.record_data.data0.condition_data.condition_no = 0
     record_0.data0.condition_data.condition_no = 0
   If finish_prove = 1 Then
    If is_total_equal_Triangle(triA_(l%).no, triA(1).data(k%).no, _
     triA_(l%).direction, triA(1).data(k%).direction, 0, -1000, 0, _
       0, two_triangle0, record_0, 0) Then
      GoTo set_total_equal_triangle_from_eangle_mark2
    End If
   End If
   same_angle_no% = 0
   If triA_(l%).angle(1) = triA(1).data(k%).angle(1) Then
    same_angle_no% = 1
   ElseIf triA_(l%).angle(2) = triA(1).data(k%).angle(2) Then
    same_angle_no% = 2
   End If
   If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(1), _
        triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), _
           0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, _
             dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
     '一邻边等
              total_equal_type_S(2) = 1
    '(A,0,0,0,0,S)
       temp_record0 = re
       Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record0.record_data.data0.condition_data)
       Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), t_condition_data_(1))
       record_0.data0.condition_data.condition_no = 0
       If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(2), _
         triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, _
          dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
           cond_type, "", record_0.data0.condition_data) And _
             th_chose(28).chose = 1 Then
              total_equal_type_S(1) = 0
        '两边一角
               temp_record1 = temp_record0
                temp_record1.record_data.data0.theorem_no = 28
             Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), _
               temp_record1.record_data.data0.condition_data)
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark3
       Else
       If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
         End If
        total_equal = 1
       End If
       End If
 '*****************
       If is_right_angle And _
         is_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
          triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, _
           dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
            cond_type, "", record_0.data0.condition_data) And _
              th_chose(32).chose = 1 Then
               total_equal_type_S(0) = 1
           temp_record1 = temp_record0
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), _
         temp_record1.record_data.data0.condition_data)
        temp_record1.record_data.data0.theorem_no = 32
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark3
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = 1
       End If
        End If
  '**********************************
     If is_equal_angle(triA_(l%).angle(1), _
       triA(1).data(k%).angle(1), dn(0), dn(1)) And th_chose(30).chose = 1 Then
        If angle(triA_(l%).angle(1)).data(0).value = "90" Then
        total_equal_type_A(1) = 2
        Else
        total_equal_type_A(1) = 1
        End If
           temp_record1 = temp_record0
      Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, _
            temp_record1.record_data.data0.condition_data)
        temp_record1.record_data.data0.theorem_no = 30
        If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark3
       Else
       If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = 1
       End If
      End If
   '******************************
             temp_record1 = temp_record0
      If (is_equal_angle(triA_(l%).angle(2), _
       triA(1).data(k%).angle(2), dn(0), dn(1))) Or same_angle_no% = 2 And th_chose(29).chose = 1 Then
        If same_angle_no <> 2 Then
        If angle(triA_(l%).angle(2)).data(0).value = "90" Then
        total_equal_type_A(2) = 2
        Else
        total_equal_type_A(2) = 1
        End If
      Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
        temp_record1.record_data.data0.theorem_no = 29
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark3
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = 1
       End If
      Else 'If run_type > 4 Then 'ASA
       t_condition_data.condition_no = 0
       't_condition_data(1).condition_no = 0 't_condition_data_(1)
       If is_two_angle_value_180(triA_(l%).angle(2), triA(1).data(k%).angle(2), t_condition_data, _
             is_value_180) Then
        total_equal_type_A(2) = 2
        If triA_(l%).poi(1) <> triA(1).data(k%).poi(1) Or _
            triA_(l%).poi(2) <> triA(1).data(k%).poi(2) Then
        If is_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
         triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
        If is_value_180 Then
         'If is_same_two_point(triA_(l%).poi(1), triA_(l%).poi(2), _
          ' triA(1).data(k%).poi(1), triA(1).data(k%).poi(2)) = False Then
           '  temp_record1.record_data.data0.theorem_no = 40
            '  set_total_equal_triangle_from_eangle = set_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
                triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, temp_record1, _
                 0, 0, 0, 0, 0)
             '     If set_total_equal_triangle_from_eangle > 1 Then
              '     Exit Function
              '    End If
         'End If
        'Else
      temp_record1 = re
      temp_record1.record_data.data0.theorem_no = 30
      Call add_record_to_record(t_condition_data_(1), temp_record1.record_data.data0.condition_data)
       tn% = 0
        set_total_equal_triangle_from_eangle = _
         set_pseudo_total_equal_triangle(triA_(l%), triA(1).data(k%), 1, 2, 1, 2, tn%, _
          temp_record1.record_data.data0, t_condition_data)
         pseudo_total_equal_triangle(tn%).data(0).ty = 0
        If set_total_equal_triangle_from_eangle > 1 Then
         Exit Function
        End If
        End If
         'temp_record1.record_data.data0.theorem_no = 24
       '  temp_record1.record_data.data0.condition_data.condition_no = 1
       ''  temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
       '  temp_record1.record_data.data0.condition_data.condition(1).no = tn%
       ' set_total_equal_triangle_from_eangle = set_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
           triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
       '     If set_total_equal_triangle_from_eangle > 1 Then
       '      Exit Function
       '     End If
        End If
        GoTo set_total_equal_triangle_from_eangle_mark10
        End If
       End If
       End If
      End If
      End If
  '%%%%%%%%%%%%%%%%%%
   If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(2), _
        triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), _
          0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, _
             dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then '邻边
             total_equal_type_S(1) = 1
        temp_record0 = re
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record0.record_data.data0.condition_data)
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), t_condition_data_(1))
       If is_right_angle And _
         is_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
          triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, _
           dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
            cond_type, "", record_0.data0.condition_data) And _
              th_chose(32).chose = 1 Then
              total_equal_type_S(0) = 1
           temp_record1 = temp_record0
         Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
          temp_record1.record_data.data0.theorem_no = 32
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark3
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = 1
       End If
     End If
     '*********
           temp_record1 = temp_record0
     If (is_equal_angle(triA_(l%).angle(1), _
       triA(1).data(k%).angle(1), dn(0), dn(1)) Or same_angle_no% = 1) And th_chose(30).chose = 1 Then
        If same_angle_no% <> 1 Then
        If angle(triA_(l%).angle(1)).data(0).value = "90" Then
         total_equal_type_A(1) = 2
        Else
         total_equal_type_A(1) = 1
        End If
         Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
          temp_record1.record_data.data0.theorem_no = 30
        If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark3
       Else
       If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = 1
       End If
     Else 'If run_type > 4 Then
     t_condition_data.condition_no = 0
     't_condition_data(1).condition_no = 0 ' = t_condition_data_(1)
      If is_two_angle_value_180(triA_(l%).angle(1), triA(1).data(k%).angle(1), t_condition_data, is_value_180) Then
       total_equal_type_A(1) = 2
       If triA_(l%).poi(1) <> triA(1).data(k%).poi(1) Or _
            triA_(l%).poi(2) <> triA(1).data(k%).poi(2) Then
        If is_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
         triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
         If is_value_180 Then
         ' If is_same_two_point(triA_(l%).poi(1), triA_(l%).poi(2), _
               triA(1).data(k%).poi(1), triA(1).data(k%).poi(2)) = False Then
         'temp_record1.record_data.data0.theorem_no = 40
          ' set_total_equal_triangle_from_eangle = set_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
           triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
           ' If set_total_equal_triangle_from_eangle > 1 Then
            '  Exit Function
           ' End If
          'End If
         Else
         temp_record1 = re
         temp_record1.record_data.data0.theorem_no = 30
         Call add_record_to_record(t_condition_data_(1), temp_record1.record_data.data0.condition_data)
         tn% = 0
        set_total_equal_triangle_from_eangle = _
          set_pseudo_total_equal_triangle(triA_(l%), triA(1).data(k%), 2, 1, 1, 2, tn%, _
           temp_record1.record_data.data0, t_condition_data)
         pseudo_total_equal_triangle(tn%).data(0).ty = 0
            If set_total_equal_triangle_from_eangle > 1 Then
              Exit Function
            End If
        End If
'         temp_record1.record_data.data0.theorem_no = 24
'         temp_record1.record_data.data0.condition_data.condition_no = 1
'         temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
'         temp_record1.record_data.data0.condition_data.condition(1).no = tn%
        End If
          GoTo set_total_equal_triangle_from_eangle_mark10
        End If
       End If
      End If
     End If
     '********
     If (is_equal_angle(triA_(l%).angle(2), _
       triA(1).data(k%).angle(2), dn(0), dn(1)) Or same_angle_no% = 2) And th_chose(29).chose = 1 Then '两角相等
        If same_angle_no% <> 2 Then
        If angle(triA_(l%).angle(2)).data(0).value = "90" Then
         total_equal_type_A(2) = 2
        Else
         total_equal_type_A(2) = 1
        End If
           temp_record1 = temp_record0
         Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
          temp_record1.record_data.data0.theorem_no = 29
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark2
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        End If
        total_equal = 1
       End If
     End If
     End If
'%%%%%%
  If is_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
        triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, dn(0), -1000, _
         0, 0, 0, eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then '对边相等
         total_equal_type_S(0) = 1
        temp_record0 = re
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record0.record_data.data0.condition_data)
      'Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), t_condition_data(1))
     '*********
           temp_record1 = temp_record0
     If (is_equal_angle(triA_(l%).angle(1), _
       triA(1).data(k%).angle(1), dn(0), dn(1)) Or same_angle_no = 1) And th_chose(30).chose = 1 Then
       If same_angle_no% <> 1 Then
         Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
          temp_record1.record_data.data0.theorem_no = 30
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark2
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
      End If
        total_equal = 1
       End If
   Else 'If run_type > 4 Then
    t_condition_data.condition_no = 0
    't_condition_data(1) = t_condition_data_(1)
    If is_two_angle_value_180(triA_(l%).angle(1), triA(1).data(k%).angle(1), t_condition_data, is_value_180) Then
    total_equal_type_A(1) = 2
      If triA_(l%).poi(0) <> triA(1).data(k%).poi(0) Or _
            triA_(l%).poi(2) <> triA(1).data(k%).poi(2) Then
       If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(2), _
         triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
        If is_value_180 Then
        'If is_same_two_point(triA_(l%).poi(0), triA_(l%).poi(2), _
                triA(1).data(k%).poi(0), triA(1).data(k%).poi(2)) = False Then
        'temp_record1.record_data.data0.theorem_no = 40
         ' set_total_equal_triangle_from_eangle = set_equal_dline(triA_(l%).poi(0), triA_(l%).poi(2), _
            triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
          '    If set_total_equal_triangle_from_eangle > 1 Then
           '    Exit Function
           '   End If
       'Else
        temp_record1 = re
        temp_record1.record_data.data0.theorem_no = 30
        tn% = 0
        set_total_equal_triangle_from_eangle = _
           set_pseudo_total_equal_triangle(triA_(l%), triA(1).data(k%), 2, 1, 0, 2, tn%, _
           temp_record1.record_data.data0, t_condition_data)
         pseudo_total_equal_triangle(tn%).data(0).ty = 1
              If set_total_equal_triangle_from_eangle > 1 Then
               Exit Function
              End If
        'End If
'         temp_record1.record_data.data0.theorem_no = 24
'         temp_record1.record_data.data0.condition_data.condition_no = 1
'         temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
'         temp_record1.record_data.data0.condition_data.condition(1).no = tn%
'       set_total_equal_triangle_from_eangle = set_equal_dline(triA_(l%).poi(0), triA_(l%).poi(2), _
'           triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
'             If set_total_equal_triangle_from_eangle > 1 Then
'              Exit Function
'             End If
         GoTo set_total_equal_triangle_from_eangle_mark10
       End If
      End If
      End If
     End If
     '********
           temp_record1 = temp_record0
     If (is_equal_angle(triA_(l%).angle(2), _
       triA(1).data(k%).angle(2), dn(0), dn(1)) Or same_angle_no% = 2) And th_chose(30).chose = 1 Then
       If same_angle_no% <> 2 Then
        If angle(triA_(l%).angle(2)).data(0).value = "90" Then
         total_equal_type_A(2) = 2
        Else
         total_equal_type_A(2) = 1
        End If
         Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
          temp_record1.record_data.data0.theorem_no = 30
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark2
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
       End If
        total_equal = 1
       End If
    Else 'If run_type > 4 Then
     t_condition_data.condition_no = 0
     't_condition_data(1).condition_no = 0
     If is_two_angle_value_180(triA_(l%).angle(2), triA(1).data(k%).angle(2), t_condition_data, is_value_180) Then
      total_equal_type_A(2) = 2
       If triA_(l%).poi(1) <> triA(1).data(k%).poi(1) Or _
            triA_(l%).poi(0) <> triA(1).data(k%).poi(0) Then
        If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(1), _
         triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
        If is_value_180 Then
         'If is_same_two_point(triA_(l%).poi(0), triA_(l%).poi(1), _
            triA(1).data(k%).poi(0), triA(1).data(k%).poi(1)) = False Then
          '  temp_record1.record_data.data0.theorem_no = 40
           '  set_total_equal_triangle_from_eangle = set_equal_dline(triA_(l%).poi(0), triA_(l%).poi(1), _
             triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
            ' If set_total_equal_triangle_from_eangle > 1 Then
            '   Exit Function
            ' End If
         'End If
        'Else
        temp_record1.record_data.data0.theorem_no = 30
        tn% = 0
        set_total_equal_triangle_from_eangle = _
          set_pseudo_total_equal_triangle(triA_(l%), triA(1).data(k%), 1, 2, 0, 1, tn%, _
           temp_record1.record_data.data0, t_condition_data)
         pseudo_total_equal_triangle(tn%).data(0).ty = 1
             If set_total_equal_triangle_from_eangle > 1 Then
               Exit Function
             End If
        End If
        End If
'         temp_record1.record_data.data0.theorem_no = 24
'         temp_record1.record_data.data0.condition_data.condition_no = 1
'         temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
'         temp_record1.record_data.data0.condition_data.condition(1).no = tn%
'         set_total_equal_triangle_from_eangle = set_equal_dline(triA_(l%).poi(0), triA_(l%).poi(1), _
           triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
'            If set_total_equal_triangle_from_eangle > 1 Then
'              Exit Function
'            End If
        GoTo set_total_equal_triangle_from_eangle_mark10
       End If
     End If
    End If
   End If
     End If
'**************
  If total_equal = 1 Then
set_total_equal_triangle_from_eangle_mark3:
     set_total_equal_triangle_from_eangle = _
         set_total_equal_triangle0(triA_(l%).no, triA(1).data(k%).no, _
       triA_(l%).direction, triA(1).data(k%).direction, temp_record, 0, no_reduce)
     If set_total_equal_triangle_from_eangle > 1 Then
      Exit Function
     End If
         GoTo set_total_equal_triangle_from_eangle_mark2
  End If
set_total_equal_triangle_from_eangle_similar:
If is_similar_triangle0(triA_(l%).no, triA(1).data(k%).no, _
     triA_(l%).direction, triA(1).data(k%).direction, 0, _
      -1000, 0, 0, two_triangle0, record_0, ty, 0) Then
      If ty = similar_triangle_ Then
        GoTo set_total_equal_triangle_from_eangle_mark2
      Else
        GoTo set_total_equal_triangle_from_eangle_mark10
      End If
End If
 total_equal = 0
  temp_record.record_data.data0.condition_data.condition_no = 0
   record_0.data0.condition_data.condition_no = 0 ' record0
       temp_record1 = re
 If (is_equal_angle(triA_(l%).angle(1), _
       triA(1).data(k%).angle(1), dn(0), dn(1)) Or same_angle_no% = 1) And th_chose(105).chose = 1 Then
         If same_angle_no% <> 1 Then
         Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
         temp_record1.record_data.data0.theorem_no = 105
        If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark4
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
       End If
        total_equal = 2
       End If
  Else 'If run_type > 4 Then
   If is_two_angle_value_180(triA_(l%).angle(1), triA(1).data(k%).angle(1), t_condition_data, 0) Then
    total_equal_type_A(1) = 2
    If is_point_pair(triA_(l%).poi(0), triA_(l%).poi(2), _
         triA_(l%).poi(1), triA_(l%).poi(2), triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), _
          triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, 0, 0, dp, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", record_0) = False Then  '未推出比例
      If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) And ( _
               angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) Or _
                angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0)) And _
         angle(triA_(l%).angle(1)).data(0).poi(1) = angle(triA(1).data(k%).angle(1)).data(0).poi(1) And ( _
               angle(triA_(l%).angle(1)).data(0).line_no(0) = angle(triA(1).data(k%).angle(1)).data(0).line_no(1) Or _
                angle(triA_(l%).angle(1)).data(0).line_no(1) = angle(triA(1).data(k%).angle(1)).data(0).line_no(0)) Then
         temp_record1.record_data.data0.theorem_no = 113
        'set_total_equal_triangle_from_eangle = set_dpoint_pair(triA_(l%).poi(0), triA_(l%).poi(2), _
         triA_(l%).poi(1), triA_(l%).poi(2), triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), _
          triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp_record1, True, 0, _
           0, 0, 0)
         '   If set_total_equal_triangle_from_eangle > 1 Then
         '    Exit Function
         '   End If
      Else
       temp_record1.record_data.data0.theorem_no = 105
'         temp_record1.record_data.data0.theorem_no = 102
'         temp_record1.record_data.data0.condition_data.condition_no = 1
'         temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_similar_triangle_
'         temp_record1.record_data.data0.condition_data.condition(1).no = tn%
      End If
       temp_record1.record_data.data0.condition_data = re.record_data.data0.condition_data
       tn% = 0
        Call set_pseudo_similar_triangle(triA_(l%), triA(1).data(k%), 2, 1, 0, 2, tn%, _
           temp_record1, t_condition_data)
        GoTo set_total_equal_triangle_from_eangle_mark10
    End If
   End If
  End If
  '(AAS)
                  temp_record1 = re
  If (is_equal_angle(triA_(l%).angle(2), triA(1).data(k%).angle(2), dn(0), _
       dn(1)) Or same_angle_no% = 2) And th_chose(105).chose = 1 Then
       If same_angle_no% <> 2 Then
         Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
        temp_record1.record_data.data0.theorem_no = 105
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark4
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
       End If
        total_equal = 2
       End If
Else 'If run_type > 4 Then
t_condition_data.condition_no = 0
 If is_two_angle_value_180(triA_(l%).angle(2), triA(1).data(k%).angle(2), t_condition_data, 0) Then
    total_equal_type_A(2) = 2
   If is_point_pair(triA_(l%).poi(0), triA_(l%).poi(1), _
         triA_(l%).poi(1), triA_(l%).poi(2), triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), _
          triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, 0, 0, dp, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", record_0) = False Then
      If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) And ( _
               angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) Or _
                angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0)) And _
         angle(triA_(l%).angle(2)).data(0).poi(1) = angle(triA(1).data(k%).angle(2)).data(0).poi(1) And ( _
               angle(triA_(l%).angle(2)).data(0).line_no(0) = angle(triA(1).data(k%).angle(2)).data(0).line_no(1) Or _
                angle(triA_(l%).angle(2)).data(0).line_no(1) = angle(triA(1).data(k%).angle(2)).data(0).line_no(0)) Then
         temp_record1.record_data.data0.theorem_no = 113
       ' set_total_equal_triangle_from_eangle = set_dpoint_pair(triA_(l%).poi(0), triA_(l%).poi(1), _
          triA_(l%).poi(1), triA_(l%).poi(2), triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), _
          triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp_record1, True, 0, _
           0, 0, 0)
        '    If set_total_equal_triangle_from_eangle > 1 Then
        '     Exit Function
        '    End If
      Else
       temp_record1.record_data.data0.theorem_no = 105
'         temp_record1.record_data.data0.theorem_no = 102
'         temp_record1.record_data.data0.condition_data.condition_no = 1
'         temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_similar_triangle_
'         temp_record1.record_data.data0.condition_data.condition(1).no = tn%
      End If
       tn% = 0
       temp_record1.record_data.data0.condition_data = re.record_data.data0.condition_data
        Call set_pseudo_similar_triangle(triA_(l%), triA(1).data(k%), 1, 2, 0, 1, tn%, _
           temp_record1, t_condition_data)
       GoTo set_total_equal_triangle_from_eangle_mark10
 End If
 End If
End If
 If is_point_pair(triA_(l%).poi(0), triA_(l%).poi(1), _
   triA_(l%).poi(0), triA_(l%).poi(2), triA(1).data(k%).poi(0), _
    triA(1).data(k%).poi(1), triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), _
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, _
      0, 0, 0, dp_data0, cond_type, dn(1), dn(2), _
       con_ty(0), con_ty(1), dn(3), dn(4), dn(5), dn(6), "", "", record_0) Then
      temp_record1 = re
       Call set_record_for_point_pair(temp_record1.record_data, cond_type, con_ty(0), con_ty(1), _
        dn(0), dn(1), dn(2), dn(3), dn(4), dn(5), dn(6))
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark4
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = 2
       End If
 End If
 If is_point_pair(triA_(l%).poi(0), triA_(l%).poi(1), _
   triA_(l%).poi(1), triA_(l%).poi(2), triA(1).data(k%).poi(0), _
    triA(1).data(k%).poi(1), triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), _
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, _
       0, 0, 0, dp_data0, cond_type, dn(1), dn(2), _
       con_ty(0), con_ty(1), dn(3), dn(4), dn(5), dn(6), "", "", _
        record_0) And is_right_angle Then
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark4
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = 2
       End If
 End If
 If is_point_pair(triA_(l%).poi(0), triA_(l%).poi(2), _
   triA_(l%).poi(1), triA_(l%).poi(2), triA(1).data(k%).poi(0), _
    triA(1).data(k%).poi(2), triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), _
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _
      dn(0), -1000, 0, 0, 0, 0, 0, dp_data0, _
       cond_type, dn(1), dn(2), _
        con_ty(0), con_ty(1), dn(3), dn(4), dn(5), dn(6), "", "", _
        record_0) And is_right_angle Then
       If finish_prove = 1 Then
        temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eangle_mark4
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = 2
       End If
 End If
 If total_equal = 2 Then
set_total_equal_triangle_from_eangle_mark4:
     set_total_equal_triangle_from_eangle = _
       set_similar_triangle0(triA_(l%).no, triA(1).data(k%).no, _
     triA_(l%).direction, triA(1).data(k%).direction, temp_record, 0, no_reduce, is_no_initial)
     If set_total_equal_triangle_from_eangle > 1 Then
      Exit Function
     End If
 End If
set_total_equal_triangle_from_eangle_mark2:
End If
End If
set_total_equal_triangle_from_eangle_mark10:
Call set_aid_point_data(triA_(l%), triA(1).data(k%), total_equal_type_S(), total_equal_type_A())
   Next k%
   Next l%
  Next j%
End Function
Public Function set_total_equal_triangle0(ByVal triA1%, ByVal triA2%, _
   direction1 As Integer, direction2 As Integer, re As total_record_type, no%, _
      ByVal no_reduce As Byte) As Byte
Dim i%, j%, d%, tn%, temp_no%
Dim n_(2) As Integer
Dim tp1(2) As Integer
Dim tp2(2) As Integer
Dim A1(2) As Integer
Dim A2(2) As Integer
Dim di(1) As Integer
Dim dn(5) As Integer
Dim triA(1) As Integer
Dim ty(5) As Byte
Dim level As Byte
Dim temp_record As total_record_type
Dim t_triA As two_triangle_type
Dim ts$
Dim set_new_data As Boolean
'On Error GoTo set_total_equal_triangle0_error
If triangle(triA1%).epolygon_no > 0 And triangle(triA2%).epolygon_no = _
     triangle(triA1%).epolygon_no Then
      Exit Function
End If
If no% > 0 Then
 If Dtotal_equal_triangle(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_total_equal_triangle0_mark0
 End If
Else
If triA1% = 0 Or triA2% = 0 Or triA1% = triA2% Then
 Exit Function
ElseIf triangle(triA(0)).data(0).no_reduce > 0 Or _
        triangle(triA(1)).data(0).no_reduce > 0 Then
 Exit Function
End If
End If
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
 End If
If is_total_equal_Triangle(triA1%, triA2%, direction1, direction2, _
         no%, n_(0), n_(1), n_(2), t_triA, temp_record.record_data, 0) Then
 If no% > 0 And run_type < 10 Then
 level = Dtotal_equal_triangle(no%).data(0).record.data0.condition_data.level
 If set_prove_type(total_equal_triangle_, no%, temp_record.record_data, _
   Dtotal_equal_triangle(no%).data(0).record) And set_or_prove < 2 Then
    Call simple_record(total_equal_triangle_, no%, Dtotal_equal_triangle(no%).data(0).record.data0.condition_data.level, _
        level)
    If no_reduce = 0 Then 'Or run_type <= 1 Then
     set_total_equal_triangle0 = 0
     Exit Function
    Else
     no_reduce = 0
'      Dtotal_equal_triangle(no%).record_.no_reduce = 0
       GoTo set_total_equal_triangle0_mark_0
    End If
  End If
End If
  If set_or_prove < 2 Then
       set_total_equal_triangle0 = 0
        Exit Function
  Else
   If display_inform = 1 Then
    If conclusion_data(0).ty = total_equal_triangle_ And conclusion_data(0).no(0) = no% Then
     prove_type = 4
      event_statue = complete_prove
    End If
       Call display_prove_inform(modify_wenti_no, display)
   Else
    Exit Function
   End If
 End If
  Exit Function
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_total_equal_triangle0 = 0
    'If re.data0.condition_data.condition_no = 255 Then
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
  'End If
    Exit Function
   End If
End If
If set_or_prove < 2 Then
If no% < 0 Then
 Dsimilar_triangle(-no%).record_.no_reduce = 7
End If
temp_no% = last_conditions.last_cond(1).total_equal_triangle_no
For i% = 1 To temp_no%
Dtotal_equal_triangle(i%).record_.index = Dtotal_equal_triangle(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).total_equal_triangle_no Mod 10 = 0 Then
ReDim Preserve Dtotal_equal_triangle(last_conditions.last_cond(1).total_equal_triangle_no + 10) _
            As total_equal_triangle_type
End If
last_conditions.last_cond(1).total_equal_triangle_no = last_conditions.last_cond(1).total_equal_triangle_no + 1
set_new_data = True
no% = last_conditions.last_cond(1).total_equal_triangle_no
 Dtotal_equal_triangle(no%).data(0) = t_triA
 '加入辅助点信息
 If triangle(t_triA.triangle(0)).data(0).condition.no > 0 Then
 Call add_conditions_to_record(triangle(t_triA.triangle(0)).data(0).condition.ty, _
        triangle(t_triA.triangle(0)).data(0).condition.no, 0, 0, temp_record.record_data.data0.condition_data)
 End If
 If triangle(t_triA.triangle(1)).data(0).condition.no > 0 Then
 Call add_conditions_to_record(triangle(t_triA.triangle(1)).data(0).condition.ty, _
        triangle(t_triA.triangle(1)).data(0).condition.no, 0, 0, temp_record.record_data.data0.condition_data)
 End If
 Dtotal_equal_triangle(no%).data(0).record = temp_record.record_data
 Dtotal_equal_triangle(no%).record_ = temp_record.record_
 Dtotal_equal_triangle(no%).record_.no_reduce = 0
 For i% = 0 To 2
  For j% = last_conditions.last_cond(1).total_equal_triangle_no To n_(i%) + 2 Step -1
   Dtotal_equal_triangle(j%).data(0).record.data1.index.i(i%) = _
    Dtotal_equal_triangle(j% - 1).data(0).record.data1.index.i(i%)
  Next j%
   Dtotal_equal_triangle(n_(i%) + 1).data(0).record.data1.index.i(i%) = _
      last_conditions.last_cond(1).total_equal_triangle_no
 Next i%
 If last_conditions_for_aid_no > 0 Then
If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
 If t_triA.triangle(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).triangle_no And _
     t_triA.triangle(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).triangle_no Then
  last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
 End If
End If
End If
  ts$ = set_display_total_equal_triangle(Dtotal_equal_triangle(no%).data(0), False, False)
    set_total_equal_triangle0 = set_prove_proccess(ts$, total_equal_triangle_, no%, Dtotal_equal_triangle(no%).data(0).record.display_string)
 If set_total_equal_triangle0 > 1 Then
  Exit Function
 End If
  If no_reduce = 0 Then
   Exit Function
  End If
End If
set_total_equal_triangle0_mark0:
If Dtotal_equal_triangle(no%).record_.no_reduce = 0 Then
set_total_equal_triangle0_mark_0:
      Dtotal_equal_triangle(no%).record_.no_reduce = 255
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
      Call set_level_(Dtotal_equal_triangle(no%).record_.no_reduce, 1)
  temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
  Call add_conditions_to_record(total_equal_triangle_, _
           no%, 0, 0, temp_record.record_data.data0.condition_data)
If th_chose(24).chose = 1 Or th_chose(25).chose = 1 Or _
     th_chose(26).chose = 1 Or th_chose(27).chose = 1 Then
For i% = 0 To 2
tp1(i%) = triangle(Dtotal_equal_triangle(no%).data(0).triangle(0)).data(0).poi(i%)
 A1(i%) = triangle(Dtotal_equal_triangle(no%).data(0).triangle(0)).data(0).angle(i%)
Next i%
Call read_triangle_element(Dtotal_equal_triangle(no%).data(0).triangle(1), _
       Dtotal_equal_triangle(no%).data(0).direction, tp2(0), _
          tp2(1), tp2(2), A2(0), A2(1), A2(2), 0, 0, 0, 0, 0, 0)
For i% = 0 To 5
 dn(i%) = 0
Next i%

For i% = 0 To 2
If th_chose(24).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 24
   set_total_equal_triangle0 = set_equal_dline(tp1(i%), tp1((i% + 1) Mod 3), _
     tp2(i%), tp2((i% + 1) Mod 3), 0, 0, 0, 0, 0, 0, _
      0, temp_record, dn(i%), ty(i%), 0, 0, no_reduce, False)
    If set_total_equal_triangle0 > 1 Then
     Exit Function
    End If
End If
If th_chose(25).chose = 1 Then
temp_record.record_data.data0.theorem_no = 25
   set_total_equal_triangle0 = set_three_angle_value(A1(i%), A2(i%), _
    0, "1", "-1", "0", "0", 0, temp_record, dn(i% + 3), 0, 0, no_reduce, 0, 0, False)
     If set_total_equal_triangle0 > 1 Then
     Exit Function
    End If
End If
Next i%
temp_record.record_data.data0.theorem_no = 0
If tp1(0) = tp2(0) And tp1(1) = tp2(1) Then
set_total_equal_triangle0 = set_dverti(line_number0(tp1(0), tp1(1), 0, 0), _
 line_number0(tp1(2), tp2(2), 0, 0), temp_record, 0, no_reduce, False)
If set_total_equal_triangle0 > 1 Then
 Exit Function
End If
ElseIf tp1(2) = tp2(2) And tp1(1) = tp2(1) Then
set_total_equal_triangle0 = set_dverti(line_number0(tp1(2), tp1(1), 0, 0), _
 line_number0(tp1(0), tp2(0), 0, 0), temp_record, 0, no_reduce, False)
If set_total_equal_triangle0 > 1 Then
 Exit Function
End If
ElseIf tp1(0) = tp2(0) And tp1(2) = tp2(2) Then
set_total_equal_triangle0 = set_dverti(line_number0(tp1(0), tp1(2), 0, 0), _
 line_number0(tp1(1), tp2(1), 0, 0), temp_record, 0, no_reduce, False)
If set_total_equal_triangle0 > 1 Then
 Exit Function
End If
End If
If area_of_triangle_conclusion = 1 Then
If is_area_of_triangle(Dtotal_equal_triangle(no%).data(0).triangle(0), tn%) Then
 temp_record.record_data.data0.condition_data.condition_no = 2
  temp_record.record_data.data0.condition_data.condition(1).ty = total_equal_triangle_
   temp_record.record_data.data0.condition_data.condition(2).ty = area_of_element_
    temp_record.record_data.data0.condition_data.condition(1).no = no%
     temp_record.record_data.data0.condition_data.condition(2).no = tn%
 set_total_equal_triangle0 = set_area_of_triangle(Dtotal_equal_triangle(no%).data(0).triangle(1), _
    area_of_element(tn%).data(0).value, temp_record, 0, no_reduce)
 If set_total_equal_triangle0 > 1 Then
  Exit Function
 End If
 GoTo set_total_equal_triangle0_mark10
 End If
If is_area_of_triangle(Dtotal_equal_triangle(no%).data(0).triangle(1), tn%) Then
 temp_record.record_data.data0.condition_data.condition_no = 2
  temp_record.record_data.data0.condition_data.condition(1).ty = total_equal_triangle_
   temp_record.record_data.data0.condition_data.condition(2).ty = area_of_element_
    temp_record.record_data.data0.condition_data.condition(1).no = no%
     temp_record.record_data.data0.condition_data.condition(2).no = tn%
 set_total_equal_triangle0 = set_area_of_triangle( _
     Dtotal_equal_triangle(no%).data(0).triangle(0), _
       area_of_element(tn%).data(0).value, temp_record, 0, no_reduce)
 If set_total_equal_triangle0 > 1 Then
  Exit Function
 End If
 GoTo set_total_equal_triangle0_mark10
 End If
End If
set_total_equal_triangle0_mark10:
End If
End If
Exit Function
set_total_equal_triangle0_error:
set_total_equal_triangle0 = 0
If set_new_data Then
last_conditions.last_cond(1).total_equal_triangle_no = temp_no%
For i% = 1 To temp_no%
Dtotal_equal_triangle(i%).data(0).record.data1.index = _
   Dtotal_equal_triangle(i%).record_.index
Next i%
End If
End Function

Public Function set_angle(ByVal p1%, ByVal p2%, ByVal p3%, A As angle_data_type, degree As String) As Integer
Dim i%, l%
Dim tp1%, tp2%
'Dim p(2) As Integer
Dim n(3) As Integer
Dim tl(1) As Integer
Dim X(1), Y(1) As Long
Dim jud As Long
'On Error GoTo set_angle_error
tl(0) = line_number0(p1%, p2%, n(0), n(1), False)
tl(1) = line_number0(p3%, p2%, n(2), n(3), False)
If tl(0) = 0 Or p2% = 0 Or tl(1) = 0 Then
          set_angle = 0
   Exit Function
ElseIf tl(0) > 0 And tl(1) > 0 Then
   If run_statue > 1 And run_statue < 5 Then
      If n(0) > n(1) Then
         n(0) = n(0) - 1
      End If
      If n(2) > n(3) Then
      n(2) = n(2) - 1
      End If
    End If
ElseIf run_type < 10 And (m_poi(p1%).data(0).parent.co_degree < 0 Or m_poi(p2%).data(0).parent.co_degree < 0 Or _
        m_poi(p3%).data(0).parent.co_degree < 0) Then
   set_angle = 0
    Exit Function
ElseIf is_three_coline(p1%, p2%, p3%, l%, n(0), n(1), n(2)) Then
 If (n(0) > n(1) And n(1) > n(2)) Or (n(0) < n(1) And n(1) < n(2)) Then
 degree = "180" '平角
 Else
 degree = "0" '零角
 End If
  set_angle = 0
   Exit Function
ElseIf read_line1(m_poi(p1%).data(0).data0.coordinate, m_poi(p3%).data(0).data0.coordinate, _
   m_poi(p2%).data(0).data0.coordinate, t_coord, 0, 0, 6, False) Then
   If line_number0(p1%, p2%, n(0), n(1)) = 0 Then
     set_angle = 0
      Exit Function
   End If
   tp1% = p1%
   tp2% = p2%
   If n(0) > n(1) Then
    Call exchange_two_integer(tp1%, tp2%)
   End If
   'If compare_two_point(tp2%, p3%, tp1%, p3%, 6) = 1 And compare_two_point(tp1%, tp2%, tp1%, p3%, 6) = 1 Then
   '  '可能是平角
   '   set_angle = 0
   '    Exit Function
   'End If
End If
' A.poi(0) = p1%
  A.poi(1) = p2%
'   A.poi(2) = p3%
X(0) = m_poi(p1%).data(0).data0.coordinate.X - m_poi(p2%).data(0).data0.coordinate.X
X(1) = m_poi(p3%).data(0).data0.coordinate.X - m_poi(p2%).data(0).data0.coordinate.X
Y(0) = m_poi(p1%).data(0).data0.coordinate.Y - m_poi(p2%).data(0).data0.coordinate.Y
Y(1) = m_poi(p3%).data(0).data0.coordinate.Y - m_poi(p2%).data(0).data0.coordinate.Y
jud = X(0) * Y(1) - X(1) * Y(0)
If jud < 0 Then
set_angle = -1
 A.poi(0) = p3%
  A.poi(2) = p1%
ElseIf jud > 0 Then
 set_angle = 1
  A.poi(0) = p1%
   A.poi(2) = p3%
Else
 set_angle = 0
Exit Function
End If
A.line_no(0) = line_number0(A.poi(0), A.poi(1), n(0), n(1))
 A.line_no(1) = line_number0(A.poi(1), A.poi(2), n(2), n(3))
   If A.line_no(0) = A.line_no(1) Or A.line_no(0) = 0 Or A.line_no(1) = 0 Then
    set_angle = 0
     If (n(0) < n(1) And n(2) < n(3)) Or (n(0) > n(1) And n(2) > n(3)) Then
      degree = "180"
     Else
      degree = "0"
     End If
      Exit Function
    Else '  End If
     If n(0) > n(1) Then
         'p(0) = lin(A.line_no(0)).poi(1)
      A.te(0) = 1
     Else
         'p(0) = lin(A.line_no(0)).poi(0)
      A.te(0) = 0
     End If
     If n(2) < n(3) Then
         'p(2) = lin(A.line_no(1)).poi(1)
       A.te(1) = 1
     Else
         'p(2) = lin(A.line_no(1)).poi(0)
       A.te(1) = 0
     End If
  degree = 1000
 End If
 Exit Function
set_angle_error:
 set_angle = 0
End Function




Public Function set_mid_point(ByVal p1%, ByVal p2%, ByVal p3%, _
                 ByVal in1%, ByVal in2%, ByVal in3%, ByVal il%, _
                   ByVal is_no_simple As Byte, re As total_record_type, no%, _
                    cond_type As Byte, no1%, no2%, ByVal no_reduce As Byte) As Byte
Dim i%, j%, k%, t_n%, l%, tp%, temp_no%
Dim n_(6) As Integer
Dim ty As Boolean
Dim n(1) As Integer
Dim tl(2) As Integer
Dim tn(7) As Integer
Dim tA(3) As Integer
Dim tri As triangle_type
Dim num_string As String
Dim md As mid_point_data0_type
Dim t_A As temp_triangle_type
Dim temp_record As total_record_type
Dim con_no%
Dim level As Byte
Dim set_new_data As Boolean
Dim ts$
Dim dr As relation_data0_type
'On Error GoTo set_mid_point_error
If no% > 0 Then
 If Dmid_point(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_mid_point_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
ElseIf no_reduce = 255 Then
 Exit Function
End If
If (p1% = 0 Or p3% = 0 Or p1 = p3%) And no% = 0 Then
 Exit Function
End If
display_inform = 0
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_no_simple = 1 Then
 n_(0) = -5000
End If
If is_mid_point(p1%, p2%, p3%, in1%, in2%, in3%, il%, no%, _
    n_(0), n_(1), n_(2), n_(3), n_(4), n_(5), n_(6), _
     md, num_string, cond_type, no1%, no2%, temp_record.record_data.data0.condition_data) Then
Call set_level(temp_record.record_data.data0.condition_data)
If run_type < 10 And no% > 0 And cond_type = midpoint_ Then
level = Dmid_point(no%).data(0).record.data0.condition_data.level
If set_prove_type(midpoint_, no%, temp_record.record_data, _
     Dmid_point(no%).data(0).record) And set_or_prove < 2 Then
      Call simple_record(midpoint_, no%, Dmid_point(no%).data(0).record.data0.condition_data.level, _
           level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
      set_mid_point = 0
      Exit Function
     Else
     no_reduce = 0
'      Dmid_point(no%).record_.no_reduce = 0
      GoTo set_mid_point_mark0
     End If
End If
'设置证明类型
End If
If set_or_prove < 2 Then
       set_mid_point = 0
        Exit Function
Else
 If display_inform = 1 Then
  If conclusion_data(0).ty = midpoint_ And conclusion_data(0).no(0) = no% Then
   prove_type = 4
    event_statue = complete_prove
  End If
    Call display_prove_inform(modify_wenti_no, display)
  Else
   Exit Function
 End If
End If
Exit Function
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_mid_point = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
  Exit Function
 End If
 dr.line_no(0) = md.line_no
 dr.line_no(1) = md.line_no
 dr.poi(0) = md.poi(0)
 dr.poi(1) = md.poi(1)
 dr.poi(2) = md.poi(1)
 dr.poi(3) = md.poi(2)
 dr.n(0) = md.n(0)
 dr.n(1) = md.n(1)
 dr.n(2) = md.n(1)
 dr.n(3) = md.n(2)
 If search_for_relation(dr, 0, 0, 0) Then
  error_of_wenti = 1
   set_mid_point = 2
   Exit Function
 End If
End If
'If set_or_prove <2 Then
If cond_type = line_value_ Then
 set_mid_point = set_line_value(md.poi(0), _
    md.poi(1), num_string, _
     0, 0, 0, temp_record, 0, no_reduce, False)
  Exit Function
End If
If is_no_simple = 1 Then
last_conditions.last_cond(0).mid_point_no = last_conditions.last_cond(0).mid_point_no + 1
End If
temp_no% = last_conditions.last_cond(1).mid_point_no
For i% = 1 To temp_no%
 Dmid_point(i%).record_.index = Dmid_point(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).mid_point_no Mod 10 = 0 Then
  ReDim Preserve Dmid_point(last_conditions.last_cond(1).mid_point_no + 10) As mid_point_type
End If
last_conditions.last_cond(1).mid_point_no = last_conditions.last_cond(1).mid_point_no + 1
set_new_data = True
   Dmid_point(last_conditions.last_cond(1).mid_point_no).data(0).data0 = md
    Dmid_point(last_conditions.last_cond(1).mid_point_no).data(0).record = temp_record.record_data
     Dmid_point(last_conditions.last_cond(1).mid_point_no).record_ = temp_record.record_
      Dmid_point(last_conditions.last_cond(1).mid_point_no).record_.no_reduce = 0
 If is_no_simple = 1 Then
   Dmid_point(last_conditions.last_cond(1).mid_point_no).record_.no_reduce = 255
   For i% = last_conditions.last_cond(1).mid_point_no To n_(0) + 2 Step -1
    Dmid_point(i%).data(0).record.data1.index.i(0) = Dmid_point(i% - 1).data(0).record.data1.index.i(0)
   Next i%
    Dmid_point(n_(j%) + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).mid_point_no
   For j% = 1 To 2
    For i% = last_conditions.last_cond(1).mid_point_no To 2 Step -1
     Dmid_point(i%).data(0).record.data1.index.i(j%) = Dmid_point(i% - 1).data(0).record.data1.index.i(j%)
    Next i%
     Dmid_point(1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).mid_point_no
   Next j%
 Else
 For j% = 0 To 2
 For i% = last_conditions.last_cond(1).mid_point_no To n_(j%) + 2 Step -1
 Dmid_point(i%).data(0).record.data1.index.i(j%) = Dmid_point(i% - 1).data(0).record.data1.index.i(j%)
 Next i%
 Dmid_point(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).mid_point_no
 Next j%
 End If
 no% = last_conditions.last_cond(1).mid_point_no
 cond_type = midpoint_
 If last_conditions_for_aid_no > 0 Then
  If md.poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      md.poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       md.poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
        last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  Else
   If md.poi(0) = new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) Or _
       md.poi(0) = new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
      md.poi(0) = 0
   ElseIf md.poi(1) = new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) Or _
           md.poi(1) = new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
      md.poi(1) = 0
   ElseIf md.poi(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(0) Or _
           md.poi(2) = new_point(last_conditions.last_cond(1).new_point_no).data(0).poi(1) Then
      md.poi(2) = 0
   End If
   Call set_add_aid_point_for_mid_point(md.poi(0), md.poi(1), md.poi(2))
  End If
 End If
For i% = 1 To last_conditions.last_cond(1).tixing_no
 If is_same_two_point(Dtixing(i%).data(0).poi(1), Dtixing(i%).data(0).poi(2), _
        Dmid_point(no%).data(0).data0.poi(0), Dmid_point(no%).data(0).data0.poi(2)) Then
 If Dtixing(i%).data(0).mid_point_no(0).no = 0 Then
        Dtixing(i%).data(0).mid_poi(0) = Dmid_point(no%).data(0).data0.poi(1)
        Dtixing(i%).data(0).mid_point_no(0).ty = midpoint_
        Dtixing(i%).data(0).mid_point_no(0).no = no%
 Else
        Dtixing(i%).data(0).mid_poi(1) = Dmid_point(no%).data(0).data0.poi(1)
        Dtixing(i%).data(0).mid_point_no(2).ty = midpoint_
        Dtixing(i%).data(0).mid_point_no(2).no = no%
 End If
 ElseIf is_same_two_point(Dtixing(i%).data(0).poi(3), Dtixing(i%).data(0).poi(0), _
        Dmid_point(no%).data(0).data0.poi(0), Dmid_point(no%).data(0).data0.poi(2)) Then
 If Dtixing(i%).data(0).mid_point_no(0).no = 0 Then
        Dtixing(i%).data(0).mid_poi(0) = Dmid_point(no%).data(0).data0.poi(1)
        Dtixing(i%).data(0).mid_point_no(0).ty = midpoint_
        Dtixing(i%).data(0).mid_point_no(0).no = no%
 Else
        Dtixing(i%).data(0).mid_poi(1) = Dmid_point(no%).data(0).data0.poi(1)
        Dtixing(i%).data(0).mid_point_no(2).ty = midpoint_
        Dtixing(i%).data(0).mid_point_no(2).no = no%
 End If
End If
Next i%
ts$ = set_display_mid_point(Dmid_point(no%), 0, False, False)
set_mid_point = set_prove_proccess(ts$, midpoint_, no%, Dmid_point(no%).data(0).record.display_string)
  If set_mid_point > 1 Then
     Exit Function
   End If
   If ty = 15 Then
   t_n% = m_circle_number(1, 0, pointapi0, Dmid_point(no%).data(0).data0.poi(0), _
                    Dmid_point(no%).data(0).data0.poi(1), 0, 0, 0, 0, _
                     1, 1, condition, condition_color, False)
   If t_n% > 0 Then
      If m_Circ(t_n%).data(0).data0.center <> Dmid_point(no%).data(0).data0.poi(2) Then
        tn(0) = t_n%
        tn(1) = Dmid_point(no%).data(0).data0.line_no
        Call C_wait_for_aid_point.set_wait_for_aid_point(aid_point_for_circle1, tn(), 2)
      End If
   End If
   End If
If no_reduce = 0 Then
 Exit Function
 End If
'**************************************
set_mid_point_mark0:
If regist_data.run_type = 0 Then
If Dmid_point(no%).record_.no_reduce = 0 Or _
    Dmid_point(no%).record_.no_reduce = 2 Or _
     Dmid_point(no%).record_.no_reduce = 4 Then
   If no_reduce > 0 And no_reduce < 255 Then
    no_reduce = no_reduce - 1
   End If
   Call set_level_(Dmid_point(no%).record_.no_reduce, 1)
   temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.condition_data.condition(1).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(1).no = no%
    set_mid_point = set_property_of_mid_point(Dmid_point(no%).data(0).data0.poi(0), Dmid_point(no%).data(0).data0.poi(1), _
           Dmid_point(no%).data(0).data0.poi(2), Dmid_point(no%).data(0).data0.n(0), Dmid_point(no%).data(0).data0.n(1), _
            Dmid_point(no%).data(0).data0.n(2), Dmid_point(no%).data(0).data0.line_no, temp_record, 0, 0)
    If set_mid_point > 1 Then
     Exit Function
    End If
End If
If Dmid_point(no%).record_.no_reduce < 2 Then
    Call set_level_(Dmid_point(no%).record_.no_reduce, 2)
set_mid_point = set_mid_point_for_polygon(no, no_reduce)
  If set_mid_point > 1 Then
   Exit Function
  End If
set_mid_point = combine_mid_point_with_item(no%, no_reduce)
  If set_mid_point > 1 Then
   Exit Function
  End If
set_mid_point = combine_midpoint_with_midpoint(no%, no_reduce)
  If set_mid_point > 1 Then
   Exit Function
  End If
set_mid_point = combine_mid_point_with_eline(no%, 0, no_reduce)
  If set_mid_point > 1 Then
   Exit Function
  End If
set_mid_point = combine_mid_point_with_relation(no%, 0, no_reduce)
  If set_mid_point > 1 Then
   Exit Function
  End If
set_mid_point = combine_mid_point_with_dpoint_pair(no%, 0, no_reduce)
  If set_mid_point > 1 Then
   Exit Function
  End If
set_mid_point = combine_mid_point_with_two_line(no%, 0, no_reduce)
  If set_mid_point > 1 Then
   Exit Function
  End If
set_mid_point = combine_mid_point_with_three_line(no%, 0, no_reduce) ' no_reduce)
  If set_mid_point > 1 Then
   Exit Function
  End If
 set_mid_point = combine_mid_point_with_line_value(no%, 0, no_reduce)
  If set_mid_point > 1 Then
   Exit Function
  End If
 End If
Exit Function
set_mid_point_error:
set_mid_point = 0
If set_new_data Then
last_conditions.last_cond(1).mid_point_no = temp_no%
For i% = 1 To temp_no%
 Dmid_point(i%).data(0).record.data1.index = _
   Dmid_point(i%).record_.index
Next i%
End If
ElseIf Dmid_point(no%).data(0).record.data0.condition_data.condition_no = 0 Then 'run_ty=1
   Dim lv As V_line_value_data0_type
   Dim Vu As String
   temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.condition_data.condition(1).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(1).no = no%
    If is_V_line_value(Dmid_point(no%).data(0).data0.poi(0), Dmid_point(no%).data(0).data0.poi(2), _
         0, 0, 0, Vu, t_n%, -1000, 0, 0, 0, lv, False) Then
         Call add_conditions_to_record(V_line_value_, t_n%, 0, 0, _
                  temp_record.record_data.data0.condition_data)
          set_mid_point = set_V_line_value(Dmid_point(no%).data(0).data0.poi(0), _
                Dmid_point(no%).data(0).data0.poi(1), 0, 0, 0, _
                  divide_string(Vu, "2", True, False), temp_record, 0, False)
              If set_mid_point > 1 Then
                 Exit Function
              End If
          set_mid_point = set_V_line_value(Dmid_point(no%).data(0).data0.poi(1), _
               Dmid_point(no%).data(0).data0.poi(2), 0, 0, 0, _
                  divide_string(lv.value, "2", True, False), temp_record, 0, False)
              If set_mid_point > 1 Then
                 Exit Function
              End If
    ElseIf is_V_line_value(Dmid_point(no%).data(0).data0.poi(0), Dmid_point(no%).data(0).data0.poi(1), _
         0, 0, 0, Vu, t_n%, -1000, 0, 0, 0, lv, False) Then
         Call add_conditions_to_record(V_line_value_, t_n%, 0, 0, _
                  temp_record.record_data.data0.condition_data)
          set_mid_point = set_V_line_value(Dmid_point(no%).data(0).data0.poi(1), _
                Dmid_point(no%).data(0).data0.poi(2), 0, 0, 0, _
                   Vu, temp_record, 0, False)
              If set_mid_point > 1 Then
                 Exit Function
              End If
          set_mid_point = set_V_line_value(Dmid_point(no%).data(0).data0.poi(0), _
               Dmid_point(no%).data(0).data0.poi(2), 0, 0, 0, _
                  time_string(lv.value, "2", True, False), temp_record, 0, False)
              If set_mid_point > 1 Then
                 Exit Function
              End If
    ElseIf is_V_line_value(Dmid_point(no%).data(0).data0.poi(1), Dmid_point(no%).data(0).data0.poi(2), _
         0, 0, 0, Vu, t_n%, 0, 0, 0, 0, lv, False) Then
            Call add_conditions_to_record(V_line_value_, t_n%, 0, 0, _
                  temp_record.record_data.data0.condition_data)
        set_mid_point = set_V_line_value(Dmid_point(no%).data(0).data0.poi(0), _
                Dmid_point(no%).data(0).data0.poi(1), 0, 0, 0, _
                   Vu, temp_record, 0, False)
              If set_mid_point > 1 Then
                 Exit Function
              End If
          set_mid_point = set_V_line_value(Dmid_point(no%).data(0).data0.poi(0), _
               Dmid_point(no%).data(0).data0.poi(2), 0, 0, 0, _
                  time_string(lv.value, "2", True, False), temp_record, 0, False)
              If set_mid_point > 1 Then
                 Exit Function
              End If
   Else
    End If
End If
'Call call_theorem(0)
'**********************************************************************
    End Function
Public Function set_mid_point0(ByVal p1%, ByVal p2%, ByVal p3%, _
                 ByVal in1%, ByVal in2%, ByVal in3%, ByVal il%, _
                   re As total_record_type, no%, cond_ty As Byte) As Byte
Dim t_mid_point As mid_point_data0_type
Dim temp_record As total_record_type
Dim tn(2) As Integer
Dim i%, j%
If il% = 0 Then
il% = line_number0(p1%, p3%, in1%, in3%)
If is_point_in_line3(p2%, m_lin(il%).data(0).data0, in2%) Then
 If in1% > in3% Then
  Call exchange_two_integer(p1%, p3%)
  Call exchange_two_integer(in1%, in3%)
 End If
Else
no% = 0
set_mid_point0 = 1
 Exit Function
End If
End If
t_mid_point.poi(0) = p1%
t_mid_point.poi(1) = p2%
t_mid_point.poi(2) = p3%
t_mid_point.n(0) = in1%
t_mid_point.n(1) = in2%
t_mid_point.n(2) = in3%
t_mid_point.line_no = il%
If search_for_mid_point(t_mid_point, 0, no%, 0) Then
 cond_ty = midpoint_
  set_mid_point0 = 1
   Exit Function
Else
tn(0) = no%
Call search_for_mid_point(t_mid_point, 1, tn(1), 1)
Call search_for_mid_point(t_mid_point, 2, tn(2), 1)
temp_record = re
If last_conditions.last_cond(1).mid_point_no Mod 10 = 0 Then
ReDim Preserve Dmid_point(last_conditions.last_cond(1).mid_point_no + 10) As mid_point_type
End If
last_conditions.last_cond(1).mid_point_no = last_conditions.last_cond(1).mid_point_no + 1
no% = last_conditions.last_cond(1).mid_point_no
Dmid_point(no%).data(0).data0 = t_mid_point
Dmid_point(no%).data(0).record = temp_record.record_data
cond_ty = midpoint_
 For j% = 0 To 2
 For i% = last_conditions.last_cond(1).mid_point_no To tn(j%) + 2 Step -1
 Dmid_point(i%).data(0).record.data1.index.i(j%) = Dmid_point(i% - 1).data(0).record.data1.index.i(j%)
 Next i%
 Dmid_point(tn(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).mid_point_no
 Next j%
End If
End Function

Public Function set_squ_sum(ByVal p1%, ByVal p2%, ByVal p3%, _
          ByVal p4%, ByVal para1$, ByVal para2$, ByVal value$, _
           re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim it(1) As Integer
Dim c_data As condition_data_type
Dim para(1) As String
 If InStr(1, para1$, "F", 0) > 0 Or InStr(1, para2$, "F", 0) > 0 Or _
     InStr(1, value$, "F", 0) > 0 Then
  Exit Function
 End If
     set_squ_sum = set_item0(p1%, p2%, p1%, p2%, "*", 0, 0, 0, 0, 0, 0, _
               "1", "1", "1", "", para(0), 0, record_data0.data0.condition_data, 0, _
                 it(0), 0, 0, c_data, False) '0310
         If set_squ_sum > 1 Then
            Exit Function
         End If
     set_squ_sum = set_item0(p3%, p4%, p3%, p4%, "*", 0, 0, 0, 0, 0, 0, _
               "1", "1", "1", "", para(1), 0, record_data0.data0.condition_data, 0, _
                 it(1), 0, 0, c_data, False) '0310
         If set_squ_sum > 1 Then
            Exit Function
         End If
        set_squ_sum = set_general_string(it(0), it(1), 0, 0, _
              time_string(para(0), para1$, True, False), _
                time_string(para(1), para2$, True, False), _
                   "0", "0", value$, 0, 0, 0, re, 0, no_reduce)
            If set_squ_sum > 1 Then
             Exit Function
            End If
End Function
Public Function set_similar_triangle0(ByVal triA1%, ByVal triA2%, _
  ByVal direction1 As Integer, ByVal direction2 As Integer, _
    re As total_record_type, no%, ByVal no_reduce As Byte, _
       is_no_initial As Byte) As Byte
Dim i%, j%, d%, tn%, t_n%, temp_no%
Dim n_(2) As Integer
Dim triA(1) As Integer
Dim tp1(2) As Integer
Dim tp2(2) As Integer
Dim A1(2) As Integer
Dim A2(2) As Integer
Dim tl1(2) As Integer
Dim tl2(2) As Integer
Dim tn1(2, 1) As Integer
Dim tn2(2, 1) As Integer
Dim dn(5) As Integer
Dim level As Byte
Dim ty_ As Byte
Dim tv As String
Dim set_new_data As Boolean
Dim ts$
Dim rA$
Dim ep(1) As epolygon_data_type
Dim t_triA As two_triangle_type
Dim ty(2) As Byte
Dim temp_record As total_record_type
Dim re1 As total_record_type
Dim t_area_data(1) As condition_type
Dim t_out_area_data(2) As condition_type
'On Error GoTo set_similar_triangle0_error
If no_reduce = 255 Then
 Exit Function
End If
If triangle(triA1%).epolygon_no > 0 And triangle(triA2%).epolygon_no = _
     triangle(triA1%).epolygon_no Then
      Exit Function
End If
If th_chose(20).chose = 0 Then
 Exit Function
End If
If no% > 0 Then
  If Dsimilar_triangle(no%).record_.no_reduce = 255 Then
   Exit Function
  Else
   GoTo set_similar_triangle0_mark0
  End If
Else
If triA1% = 0 Or triA2% = 0 Or triA1% = triA2% Then
 Exit Function
ElseIf triangle(triA1%).data(0).no_reduce > 0 Or _
        triangle(triA2%).data(0).no_reduce > 0 Then
 Exit Function
End If
End If
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_similar_triangle0(triA1%, triA2%, direction1%, _
 direction2%, no%, n_(0), n_(1), n_(2), t_triA, temp_record.record_data, 0, 0) Then
If no% > 0 And run_type < 10 Then
level = Dsimilar_triangle(no%).data(0).record.data0.condition_data.level
Call set_prove_type(similar_triangle_, no%, temp_record.record_data, _
   Dsimilar_triangle(no%).data(0).record)
    Call simple_record(similar_triangle_, no%, Dsimilar_triangle(no%).data(0).record.data0.condition_data.level, _
        level)
    If no_reduce = 0 Then 'Or run_type = 1 Then
    set_similar_triangle0 = 0
     Exit Function
    Else
     no_reduce = 0
'      Dsimilar_triangle(no%).record_.no_reduce = 0
       GoTo set_similar_triangle0_mark_0
    End If
End If
  If set_or_prove < 2 Then
       set_similar_triangle0 = 0
   End If
  Exit Function
Else
 If set_or_prove = 2 Then
  set_similar_triangle0 = 0
    Exit Function
   End If
  End If
 If set_or_prove < 2 Then
 temp_no = last_conditions.last_cond(1).similar_triangle_no
 For i% = 1 To temp_no%
 Dsimilar_triangle(i%).record_.index = Dsimilar_triangle(i%).data(0).record.data1.index
 Next i%
 If last_conditions.last_cond(1).similar_triangle_no Mod 10 = 0 Then
 ReDim Preserve Dsimilar_triangle(last_conditions.last_cond(1).similar_triangle_no + 10) _
          As similar_triangle_type
 End If
 last_conditions.last_cond(1).similar_triangle_no = last_conditions.last_cond(1).similar_triangle_no + 1
 set_new_data = True
 Dsimilar_triangle(last_conditions.last_cond(1).similar_triangle_no).data(0) = t_triA
  If triangle(t_triA.triangle(0)).data(0).condition.no > 0 Then
 Call add_conditions_to_record(triangle(t_triA.triangle(0)).data(0).condition.ty, _
        triangle(t_triA.triangle(0)).data(0).condition.no, 0, 0, temp_record.record_data.data0.condition_data)
 End If
 If triangle(t_triA.triangle(1)).data(0).condition.no > 0 Then
 Call add_conditions_to_record(triangle(t_triA.triangle(1)).data(0).condition.ty, _
        triangle(t_triA.triangle(1)).data(0).condition.no, 0, 0, temp_record.record_data.data0.condition_data)
 End If
 Dsimilar_triangle(last_conditions.last_cond(1).similar_triangle_no).data(0).record = temp_record.record_data
     Dsimilar_triangle(last_conditions.last_cond(1).similar_triangle_no).record_ = temp_record.record_
     Dsimilar_triangle(last_conditions.last_cond(1).similar_triangle_no).record_.no_reduce = 0
     set_similar_triangle0 = 1
ElseIf set_or_prove = 2 Then
 Dsimilar_triangle(last_conditions.last_cond(1).similar_triangle_no).data(0).record.data1.is_proved = 1
End If
For j% = 0 To 1
For i% = last_conditions.last_cond(1).similar_triangle_no To n_(j%) + 2 Step -1
Dsimilar_triangle(i%).data(0).record.data1.index.i(j%) = _
   Dsimilar_triangle(i% - 1).data(0).record.data1.index.i(j%)
Next i%
Dsimilar_triangle(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).similar_triangle_no
Next j%
no% = last_conditions.last_cond(1).similar_triangle_no
If last_conditions_for_aid_no > 0 Then
If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
 If t_triA.triangle(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).triangle_no And _
    t_triA.triangle(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).triangle_no Then
  last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
 End If
End If
End If
        ts$ = set_display_similar_triangle(Dsimilar_triangle(no%).data(0), _
             False, False)
 set_similar_triangle0 = set_prove_proccess(ts$, similar_triangle_, no%, Dsimilar_triangle(no%).data(0).record.display_string)
  If set_similar_triangle0 > 1 Then
  Exit Function
 End If
 If no_reduce = 0 Then
 Exit Function
 End If
set_similar_triangle0_mark0:
If Dsimilar_triangle(no%).record_.no_reduce = 0 Then
      Dsimilar_triangle(no%).record_.no_reduce = 255
set_similar_triangle0_mark_0:
 If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
  ep(0).p.total_v = 3
  ep(0).p.v(0) = triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).poi(0)
  ep(0).p.v(1) = triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).poi(1)
  ep(0).p.v(2) = triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).poi(2)
  ep(1).p.total_v = 3
  ep(1).p.v(0) = triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(0)
  ep(1).p.v(1) = triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(1)
  ep(1).p.v(2) = triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(2)
  temp_record.record_data.data0.condition_data.condition_no = 1
  temp_record.record_data.data0.condition_data.condition(1).ty = similar_triangle_
  temp_record.record_data.data0.condition_data.condition(1).no = no%
  tn% = 0
  If is_epolygon(ep(0).p, tn%, ep(0)) Then
   temp_record.record_data.data0.condition_data.condition_no = 2
   temp_record.record_data.data0.condition_data.condition(2).ty = epolygon_
   temp_record.record_data.data0.condition_data.condition(2).no = tn%
   set_similar_triangle0 = set_Epolygon(ep(1).p, temp_record, 0, 0, is_no_initial, 0, False)
   If set_similar_triangle0 > 1 Then
    Exit Function
   End If
  ElseIf is_epolygon(ep(1).p, tn%, ep(1)) Then
   temp_record.record_data.data0.condition_data.condition_no = 2
   temp_record.record_data.data0.condition_data.condition(2).ty = epolygon_
   temp_record.record_data.data0.condition_data.condition(2).no = tn%
   set_similar_triangle0 = set_Epolygon(ep(0).p, temp_record, 0, 0, is_no_initial, 0, False)
   If set_similar_triangle0 > 1 Then
    Exit Function
   End If
  End If
  t_triA.triangle(0) = Dsimilar_triangle(no%).data(0).triangle(0)
  t_triA.triangle(1) = Dsimilar_triangle(no%).data(0).triangle(1)
  t_triA.direction = -4
  Call search_for_similar_triangle(t_triA, 1, n_(0), 1, 0)
  t_triA.direction = 4
  Call search_for_similar_triangle(t_triA, 1, n_(1), 1, 0)
      Call set_level_(Dsimilar_triangle(no%).record_.no_reduce, 1)
       Call add_conditions_to_record(similar_triangle_, no%, 0, 0, re1.record_data.data0.condition_data)
For i% = 0 To 2
 tp1(i%) = triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).poi(i%)
 A1(i%) = triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).angle(i%)
Next i%
 Call read_triangle_element(Dsimilar_triangle(no%).data(0).triangle(1), _
       Dsimilar_triangle(no%).data(0).direction, tp2(0), tp2(1), tp2(2), _
        A2(0), A2(1), A2(2), 0, 0, 0, 0, 0, 0)
If th_chose(102).chose = 1 Then
  temp_record = re1
  temp_record.record_data.data0.theorem_no = 102
For i% = 0 To 2
   set_similar_triangle0 = set_three_angle_value(A1(i%), A2(i%), 0, _
    "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
  If set_similar_triangle0 > 1 Then
   Exit Function
  End If
  set_similar_triangle0 = set_dpoint_pair(tp1(i%), tp1((i% + 1) Mod 3), tp1((i% + 1) Mod 3), _
        tp1((i% + 2) Mod 3), tp2(i%), tp2((i% + 1) Mod 3), tp2((i% + 1) Mod 3), _
          tp2((i% + 2) Mod 3), 0, 0, 0, 0, 0, 0, 0, 0, 0, _
           0, 0, 0, 0, temp_record, False, 0, 0, 0, no_reduce, False)
  If set_similar_triangle0 > 1 Then
   Exit Function
  End If
Next i%
End If
t_area_data(0).ty = triangle_
t_area_data(1).ty = triangle_
t_area_data(0).no = Dsimilar_triangle(no%).data(0).triangle(0)
t_area_data(1).no = Dsimilar_triangle(no%).data(0).triangle(1)
If is_area_relation(t_area_data(0), t_area_data(1), tv, tn%, -1000, 0, 0, _
       t_out_area_data(0), t_out_area_data(1), t_out_area_data(2), "", ty_, n_(0), n_(1)) Then
 temp_record = re1
 If ty_ = area_relation_ Then
 Call add_conditions_to_record(area_relation_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
 ElseIf ty_ = area_of_element_ Then
 Call add_conditions_to_record(area_of_element_, n_(0), n_(1), _
                            0, temp_record.record_data.data0.condition_data)
 End If
       If triA(0) = Dsimilar_triangle(no%).data(0).triangle(0) Then
        tv = sqr_string(tv, True, False)
        set_similar_triangle0 = set_Drelation(tp1(0), tp1(1), tp2(0), tp2(1), 0, 0, 0, 0, _
             0, 0, tv, temp_record, 0, 0, 0, 0, 0, False)
               If set_similar_triangle0 > 1 Then
                Exit Function
               End If
        set_similar_triangle0 = set_Drelation(tp1(2), tp1(1), tp2(2), tp2(1), 0, 0, 0, 0, _
             0, 0, tv, temp_record, 0, 0, 0, 0, 0, False)
               If set_similar_triangle0 > 1 Then
                Exit Function
               End If
        set_similar_triangle0 = set_Drelation(tp1(0), tp1(2), tp2(0), tp2(2), 0, 0, 0, 0, _
             0, 0, tv, temp_record, 0, 0, 0, 0, 0, False)
               If set_similar_triangle0 > 1 Then
                Exit Function
               End If
       Else
        tv = sqr_string(tv, True, False)
        tv = divide_string("1", tv, True, False)
        set_similar_triangle0 = set_Drelation(tp1(0), tp1(1), tp2(0), tp2(1), 0, 0, 0, 0, _
             0, 0, tv, temp_record, 0, 0, 0, 0, 0, False)
               If set_similar_triangle0 > 1 Then
                Exit Function
               End If
        set_similar_triangle0 = set_Drelation(tp1(2), tp1(1), tp2(2), tp2(1), 0, 0, 0, 0, _
             0, 0, tv, temp_record, 0, 0, 0, 0, 0, False)
               If set_similar_triangle0 > 1 Then
                Exit Function
               End If
        set_similar_triangle0 = set_Drelation(tp1(0), tp1(2), tp2(0), tp2(2), 0, 0, 0, 0, _
             0, 0, tv, temp_record, 0, 0, 0, 0, 0, False)
               If set_similar_triangle0 > 1 Then
                Exit Function
               End If
       End If
End If
re1.record_data.data0.condition_data.condition_no = 0
If read_ratio_of_similar_triangle(no%, rA$, tp1(0), tp1(1), tp1(2), tp2(0), tp2(1), tp2(2), re1.record_data) Then
If th_chose(111).chose = 1 Then
 If triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).length_of_sides_value <> "" Then
   If triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).length_of_sides_value = "" Then
    temp_record.record_data.data0.condition_data.condition_no = 1 ' = re
     temp_record.record_data.data0.condition_data.condition(1).ty = similar_triangle_
      temp_record.record_data.data0.condition_data.condition(1).no = no%
       Call add_record_to_record(re1.record_data.data0.condition_data, _
        temp_record.record_data.data0.condition_data)
       Call add_record_to_record(triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).length_of_sides, _
         temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 111
       set_similar_triangle0 = set_three_line_value( _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(0), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(1), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(1), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(2), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(2), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(0), _
        0, 0, 0, 0, 0, 0, 0, 0, 0, "1", "1", "1", divide_string( _
           triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).length_of_sides_value, _
             rA$, True, False), temp_record, 0, 0, 0)
     If set_similar_triangle0 > 1 Then
        Exit Function
     End If
   End If
ElseIf triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).length_of_sides_value <> "" Then
   If triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).length_of_sides_value = "" Then
    temp_record.record_data.data0.condition_data.condition_no = 1 ' = re
     temp_record.record_data.data0.condition_data.condition(1).ty = similar_triangle_
      temp_record.record_data.data0.condition_data.condition(1).no = no%
       Call add_record_to_record(re1.record_data.data0.condition_data, _
        temp_record.record_data.data0.condition_data)
       Call add_record_to_record(triangle(Dsimilar_triangle(no%).data(0).triangle(0)).data(0).length_of_sides, _
         temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 111
     set_similar_triangle0 = set_three_line_value( _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(0), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(1), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(1), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(2), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(2), _
        triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).poi(0), _
        0, 0, 0, 0, 0, 0, 0, 0, 0, "1", "1", "1", time_string(rA$, _
           triangle(Dsimilar_triangle(no%).data(0).triangle(1)).data(0).length_of_sides_value, _
             True, False), temp_record, 0, 0, 0)
     If set_similar_triangle0 > 1 Then
        Exit Function
     End If
   End If
End If
End If
If area_of_triangle_conclusion = 1 And th_chose(112).chose = 1 Then
 If is_area_of_triangle(Dsimilar_triangle(no%).data(0).triangle(0), tn%) Then
  If is_area_of_triangle(Dsimilar_triangle(no%).data(0).triangle(1), t_n%) = False Then
    temp_record.record_data.data0.condition_data.condition_no = 1 ' = re
     temp_record.record_data.data0.condition_data.condition(1).ty = similar_triangle_
      temp_record.record_data.data0.condition_data.condition(1).no = no%
       Call add_record_to_record(re1.record_data.data0.condition_data, _
        temp_record.record_data.data0.condition_data)
       Call add_conditions_to_record(area_of_element_, tn%, 0, 0, _
          temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 112
    set_similar_triangle0 = set_area_of_triangle( _
      Dsimilar_triangle(no%).data(0).triangle(1), _
       divide_string(area_of_element(tn%).data(0).value, time_string(rA$, rA$, False, False), _
            True, False), _
        temp_record, 0, no_reduce)
       If set_similar_triangle0 > 1 Then
        Exit Function
       End If
  End If
 ElseIf is_area_of_triangle(Dsimilar_triangle(no%).data(0).triangle(1), tn%) Then
  If is_area_of_triangle(Dsimilar_triangle(no%).data(0).triangle(0), t_n%) = False Then
    temp_record.record_data.data0.condition_data.condition_no = 1 ' = re
     temp_record.record_data.data0.condition_data.condition(1).ty = similar_triangle_
      temp_record.record_data.data0.condition_data.condition(1).no = no%
       Call add_record_to_record(re1.record_data.data0.condition_data, _
        temp_record.record_data.data0.condition_data)
       Call add_conditions_to_record(area_of_element_, tn%, 0, 0, _
         temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 112
   set_similar_triangle0 = set_area_of_triangle( _
     Dsimilar_triangle(no%).data(0).triangle(0), _
      time_string(area_of_element(tn%).data(0).value, time_string(rA$, rA$, False, False), _
         True, False), temp_record, 0, no_reduce)
      If set_similar_triangle0 > 1 Then
       Exit Function
      End If
  End If
 End If
 End If
 End If
'**********
End If
Exit Function
set_similar_triangle0_error:
set_similar_triangle0 = 0
If set_new_data Then
last_conditions.last_cond(1).similar_triangle_no = temp_no%
For i% = 1 To temp_no%
Dsimilar_triangle(i%).data(0).record.data1.index = Dsimilar_triangle(i%).record_.index
Next i%
End If
Exit Function
End Function
Public Function set_similar_triangle(ByVal p1%, ByVal p2%, ByVal p3%, _
 ByVal p4%, ByVal p5%, ByVal p6%, re As total_record_type, no%, ByVal _
  no_reduce As Byte, ByVal is_no_initial As Byte) As Byte
Dim i%, p%, j%, l1%, l2%, t_n%, con_no%, d%
Dim temp_record As total_record_type
Dim ty As Boolean
Dim tn(7) As Integer
Dim tn0(2) As Integer
Dim tn1(2) As Integer
Dim tp1(2) As Integer
Dim tp2(2) As Integer
Dim A1(2) As Integer
Dim A2(2) As Integer
Dim triA(1) As Integer
Dim dir(1) As Integer
Dim tl(3) As Integer
Dim con_ty As Byte
If no_reduce = 255 Then
 Exit Function
End If
If no% = 0 Then
triA(0) = triangle_number(p1%, p2%, p3%, 0, 0, 0, _
          0, 0, 0, dir(0))
triA(1) = triangle_number(p4%, p5%, p6%, 0, 0, 0, _
          0, 0, 0, dir(1))
End If
If triA(0) > 0 And triA(1) > 0 Then
set_similar_triangle = set_similar_triangle0(triA(0), triA(1), dir(0), dir(1), _
   re, no%, no_reduce, is_no_initial)
 If set_similar_triangle > 1 Then
  Exit Function
 End If
 End If
End Function

Public Function set_triangle(ByVal p1%, ByVal p2%, ByVal p3%, _
   triA As triangle_data0_type, no%, A1%, A2%, A3%, _
    direction As Integer, re As total_record_type, _
     ByVal no_reduce As Byte) As Byte
'direction 表示判 p1%,p2%,p3%与 tp(0),tp(1),tp(2)相互关系
Dim i%, j%, p%, l%, n%, temp_no%
Dim n_(4) As Integer
Dim tn(5) As Integer
Dim tp(3) As Integer
Dim dn(2) As Integer
Dim ty As Byte
Dim set_new_data As Boolean
Dim s$
Dim tA3 As angle3_value_data0_type
Dim A(3) As Integer
Dim temp_record As total_record_type
'************************************************************
'共线，不能设置三角形
'**********************************************************
'On Error GoTo set_triangle_error
If no% > 0 Then
 GoTo set_triangle_mark0
End If
'************************************************
'排序,相对标准三角形中的点对应原三角形的点
'***************************************************
If p1% > 0 And p2% > 0 And p3% > 0 Then
 If set_triangle_(p1%, p2%, p3%, triA, direction) = 0 Then
  set_triangle = 0
   Exit Function
 End If
'Else
 'direction = 1
End If
'***************************************************************
'判断是否是已有的三角形
'****************************************************************
If search_for_triangle(triA, 0, no%, 0) Then
        set_triangle = 0
    Call read_triangle_element(no%, direction, 0, 0, 0, A1%, A2%, A3%, _
          0, 0, 0, 0, 0, 0)
         Exit Function
Else
set_triangle_mark0:
tn(0) = no%
Call search_for_triangle(triA, 1, tn(1), 1)
Call search_for_triangle(triA, 2, tn(2), 1)
End If
  '******************************************************************
 '设置新三角形
 '********************************************************************
If re.record_data.data0.condition_data.condition_no > 0 Then
triA.condition = re.record_data.data0.condition_data.condition(1)
End If
triA.right_angle_no = -1
For i% = 0 To 2
n_(0) = i%
 n_(1) = (i% + 1) Mod 3
  n_(2) = (i% + 2) Mod 3
If is_line_value(triA.poi(n_(0)), triA.poi(n_(1)), 0, 0, 0, "", _
        triA.line_value(n_(2)), -1000, _
    0, 0, 0, line_value_data0) = 0 Then
     triA.line_value(n_(2)) = 0
End If
'Call is_angle_value(triA.angle(n_(0)), "", triA.angle_value(n_(0)))
Call get_midpoint(triA.poi(n_(1)), 0, triA.poi(n_(2)), 0, 0, 0, 0, _
                   triA.midpoint_no(n_(0)))
If triA.midpoint_no(n_(0)) > 0 Then
   triA.mid_point_line(n_(0)) = line_number0( _
     Dmid_point(triA.midpoint_no(n_(0))).data(0).data0.poi(1), _
      triA.poi(n_(0)), 0, 0)
End If
If is_relation(triA.poi(n_(1)), triA.poi(n_(0)), triA.poi(n_(0)), _
           triA.poi(n_(2)), 0, 0, 0, 0, 0, 0, s$, dn(0), -1000, _
             0, 0, 0, relation_data0, dn(1), dn(2), _
               ty, record_0.data0.condition_data, 0) Then
    If dn(0) > 0 Then
     triA.relation_no(n_(0), 0).ty = ty
      triA.relation_no(n_(0), 0).no = dn(0)
     triA.relation_no(n_(0), 1).ty = 0
      'tra.relation_no(n_(0), 1).no = dn(2)
   Else
     triA.relation_no(n_(0), 0).ty = ty
      triA.relation_no(n_(0), 0).no = dn(1)
     triA.relation_no(n_(0), 1).ty = ty
      triA.relation_no(n_(0), 1).no = dn(2)
    End If
     triA.re_value(n_(0)) = s$ '后/前
End If
tA3.angle(3) = triA.angle(n_(0))
tA3.angle(0) = -1
Call search_for_three_angle_value(tA3, 3, n_(3), 1) '5.7原3
tA3.angle(0) = 30000
Call search_for_three_angle_value(tA3, 3, n_(4), 1) '5.7
For j% = n_(3) + 1 To n_(4)
 n% = angle3_value(j%).data(0).record.data1.index.i(3)
  If angle3_value(n%).data(0).data0.para(0) = "1" And _
      (angle3_value(n%).data(0).data0.para(1) = "-1" Or _
        angle3_value(n%).data(0).data0.para(1) = "@1") And _
       angle3_value(n%).data(0).data0.para(2) = "0" And _
        angle3_value(n%).data(0).data0.value = "0" Then
    If angle(angle3_value(n%).data(0).data0.angle(0)).data(0).line_no(0) = _
        angle(angle3_value(n%).data(0).data0.angle(1)).data(0).line_no(1) And _
       angle(angle3_value(n%).data(0).data0.angle(0)).data(0).te(0) = _
        angle(angle3_value(n%).data(0).data0.angle(1)).data(0).te(1) And _
         angle(angle3_value(n%).data(0).data0.angle(0)).data(0).line_no(1) = _
          angle(angle3_value(n%).data(0).data0.angle_(3)).data(0).line_no(0) And _
         angle(angle3_value(n%).data(0).data0.angle(0)).data(0).te(1) = _
          angle(angle3_value(n%).data(0).data0.angle_(3)).data(0).te(0) And _
         angle(angle3_value(n%).data(0).data0.angle(1)).data(0).line_no(0) = _
          angle(angle3_value(n%).data(0).data0.angle_(3)).data(0).line_no(1) And _
         angle(angle3_value(n%).data(0).data0.angle(1)).data(0).te(0) = _
          angle(angle3_value(n%).data(0).data0.angle_(3)).data(0).te(1) Then
        triA.eangle_line(n_(0)) = _
          angle(angle3_value(n%).data(0).data0.angle(0)).data(0).line_no(0)
    ElseIf angle(angle3_value(n%).data(0).data0.angle(1)).data(0).line_no(0) = _
        angle(angle3_value(n%).data(0).data0.angle(0)).data(0).line_no(1) And _
        angle(angle3_value(n%).data(0).data0.angle(1)).data(0).te(0) = _
        angle(angle3_value(n%).data(0).data0.angle(0)).data(0).te(1) And _
         angle(angle3_value(n%).data(0).data0.angle(1)).data(0).line_no(1) = _
          angle(angle3_value(n%).data(0).data0.angle_(3)).data(0).line_no(0) And _
         angle(angle3_value(n%).data(0).data0.angle(1)).data(0).te(1) = _
          angle(angle3_value(n%).data(0).data0.angle_(3)).data(0).te(0) And _
         angle(angle3_value(n%).data(0).data0.angle(0)).data(0).line_no(0) = _
          angle(angle3_value(n%).data(0).data0.angle_(3)).data(0).line_no(1) And _
         angle(angle3_value(n%).data(0).data0.angle(0)).data(0).te(0) = _
          angle(angle3_value(n%).data(0).data0.angle_(3)).data(0).te(1) Then
        triA.eangle_line(n_(0)) = _
          angle(angle3_value(n%).data(0).data0.angle(1)).data(0).line_no(0)
    End If
    triA.eangle_no(n_(0), 0).no = n%
    End If
Next j%
For j% = 1 To last_conditions.last_cond(1).verti_no
 l% = line_number0(triA.poi(n_(1)), triA.poi(n_(2)), 0, 0)
 If Dverti(j%).data(0).line_no(0) = l% Then
  If is_point_in_line3(triA.poi(n_(0)), m_lin(Dverti(j%).data(0).line_no(1)).data(0).data0, 0) Then
   triA.verti_line(n_(0)) = Dverti(j%).data(0).line_no(1)
    triA.verti_no(n_(0)) = j%
  End If
 ElseIf Dverti(j%).data(0).line_no(1) = l% Then
  If is_point_in_line3(triA.poi(n_(0)), m_lin(Dverti(j%).data(0).line_no(0)).data(0).data0, 0) Then
   triA.verti_line(n_(0)) = Dverti(j%).data(0).line_no(0)
    triA.verti_no(n_(0)) = j%
  End If
 End If
Next j%
Next i%
For i% = 0 To 2
n_(0) = i%
 n_(1) = (i% + 1) Mod 3
  n_(2) = (i% + 2) Mod 3
   If th_chose(162).chose = 1 Then
   If triA.eangle_line(n_(0)) > 0 And triA.eangle_line(n_(1)) > 0 Then
       If th_chose(162).chose = 1 Then
        p% = is_line_line_intersect(triA.eangle_line(n_(0)), _
             triA.eangle_line(n_(1)), 0, 0, False)
        If triA.inner_center = 0 And p% > 0 Then
           triA.inner_center = p%
        End If
        If triA.inner_center > 0 And triA.eangle_line(n_(2)) = 0 Then
         A(0) = Abs(angle_number(triA.poi(n_(0)), triA.poi(n_(2)), _
              triA.inner_center, 0, 0))
         A(1) = Abs(angle_number(triA.poi(n_(1)), triA.poi(n_(2)), _
              triA.inner_center, 0, 0))
         temp_record.record_data.data0.condition_data.condition_no = 0
          Call add_conditions_to_record(angle3_value_, triA.eangle_no(n_(0), 0).no, _
                 triA.eangle_no(n_(0), 1).no, 0, temp_record.record_data.data0.condition_data)
          Call add_conditions_to_record(angle3_value_, triA.eangle_no(n_(1), 0).no, _
                 triA.eangle_no(n_(1), 1).no, 0, temp_record.record_data.data0.condition_data)
          temp_record.record_data.data0.theorem_no = 162
           Call set_three_angle_value(A(0), A(1), 0, "1", "-1", "0", "0", _
             0, temp_record, triA.eangle_no(n_(2), 0).no, triA.eangle_no(n_(2), 1).no, 0, 0, 0, 0, False)
           If angle(A(0)).data(0).line_no(0) = angle(A(1)).data(0).line_no(1) Then
            triA.eangle_line(n_(2)) = angle(A(0)).data(0).line_no(0)
           ElseIf angle(A(0)).data(0).line_no(1) = angle(A(1)).data(0).line_no(0) Then
            triA.eangle_line(n_(2)) = angle(A(0)).data(0).line_no(1)
           End If
       End If
    End If
   End If
   End If
   If th_chose(160).chose = 1 Then
   If triA.mid_point_line(n_(0)) > 0 And triA.mid_point_line(n_(1)) > 0 Then
    If th_chose(160).chose = 1 Then
    p% = is_line_line_intersect(triA.mid_point_line(n_(0)), _
            triA.mid_point_line(n_(1)), 0, 0, False)
     If triA.center = 0 And p% > 0 Then
      triA.center = p%
     End If
     If triA.center > 0 And triA.midpoint_no(n_(2)) = 0 Then
       l% = line_number0(triA.poi(n_(2)), triA.center, 0, 0)
       p% = is_line_line_intersect(l%, line_number0( _
          triA.poi(n_(0)), triA.poi(n_(1)), 0, 0), 0, 0, False)
       If p% > 0 Then
        temp_record.record_data.data0.condition_data.condition_no = 2
         temp_record.record_data.data0.condition_data.condition(1).ty = midpoint_
          temp_record.record_data.data0.condition_data.condition(1).no = triA.midpoint_no(n_(0))
         temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
          temp_record.record_data.data0.condition_data.condition(2).no = triA.midpoint_no(n_(1))
           temp_record.record_data.data0.theorem_no = 160
        Call set_mid_point(triA.poi(n_(0)), p%, triA.poi(n_(1)), _
         0, 0, 0, triA.midpoint_no(n_(2)), 0, temp_record, 0, 0, 0, 0, 0)
          triA.mid_point_line(n_(2)) = l%
       End If
      End If
     End If
   End If
   End If
   If th_chose(161).chose = 1 Then
   If triA.verti_line(n_(0)) > 0 And triA.verti_line(n_(1)) > 0 Then
    If th_chose(161).chose = 1 Then
    p% = is_line_line_intersect(triA.verti_line(n_(0)), _
             triA.verti_line(n_(1)), 0, 0, False)
     If triA.verti_center = 0 And p% > 0 Then
      triA.verti_center = p%
     End If
     If triA.verti_center > 0 And triA.verti_line(n_(2)) = 0 And _
         triA.verti_center <> triA.poi(0) And triA.verti_center <> triA.poi(1) And _
            triA.verti_center <> triA.poi(2) Then
       triA.verti_line(n_(2)) = _
         line_number0(triA.poi(n_(2)), triA.verti_center, 0, 0)
        temp_record.record_data.data0.condition_data.condition_no = 2
         temp_record.record_data.data0.condition_data.condition(1).ty = verti_
          temp_record.record_data.data0.condition_data.condition(1).no = triA.verti_no(n_(0))
         temp_record.record_data.data0.condition_data.condition(2).ty = verti_
          temp_record.record_data.data0.condition_data.condition(2).no = triA.verti_no(n_(1))
           temp_record.record_data.data0.theorem_no = 161
        Call set_dverti(triA.verti_line(n_(2)), _
         line_number0(triA.poi(n_(0)), triA.poi(n_(1)), _
          0, 0), temp_record, triA.verti_no(n_(2)), 0, False)
    End If
    End If
   End If
   End If
Next i%
temp_no% = last_conditions.last_cond(1).triangle_no
For i% = 1 To temp_no%
triangle(i%).index = triangle(i%).data(0).index
Next i%
If last_conditions.last_cond(1).triangle_no Mod 10 = 0 Then
    ReDim Preserve triangle(last_conditions.last_cond(1).triangle_no + 10) As triangle_type
End If
 last_conditions.last_cond(1).triangle_no = last_conditions.last_cond(1).triangle_no + 1
 set_new_data = True
      triangle(last_conditions.last_cond(1).triangle_no).data(0) = triA
      'triangle(last_triangle).record = record_0
Call read_triangle_element(last_conditions.last_cond(1).triangle_no, direction, 0, 0, 0, _
           A1%, A2%, A3%, 0, 0, 0, 0, 0, 0)
For j% = 0 To 5
For i% = last_conditions.last_cond(1).triangle_no To tn(j%) + 2 Step -1
 triangle(i%).data(0).index.i(j%) = triangle(i% - 1).data(0).index.i(j%)
Next i%
triangle(tn(j%) + 1).data(0).index.i(j%) = last_conditions.last_cond(1).triangle_no
Next j%
no% = last_conditions.last_cond(1).triangle_no
triangle_data0 = triangle(no%).data(0)
set_triangle = solve_triangle(no%, triangle_data0, -1, -1, -1, -1, _
     -1, -1, -1, -1, -1, -1, 0, no_reduce, False)
If set_triangle > 1 Then
 Exit Function
End If
 set_triangle = 1
 If no_reduce > 0 And no_reduce < 255 Then
 no_reduce = no_reduce - 1
 End If
For i% = 0 To 2
A(i%) = triangle(no%).data(0).angle(i%)
tp(i%) = triangle(no%).data(0).poi(i%)
Next i%
temp_record = re
'   外角
temp_record.record_data.data0.theorem_no = 22
'For i% = 0 To 2
'l% = line_number0(tp(i%), tp((i% + 1) Mod 3), tn(0), tn(1))
' If tn(0) > tn(1) Then
  'call exchange_two_integer(tn(0), tn(1))
 '  A(3) = angle_number(Lin(l%).data(0).data0.poi(0), Lin(l%).data(0).data0.in_point(tn(1)), _
    tp((i% + 2) Mod 3), 0)
 'If A(3) <> 0 Then
 ' Call set_three_angle_value(Abs(A(3)), _
      Abs(A(i%)), Abs(A((i% + 2) Mod 3)), "1", _
       "-1", "-1", "0", 0, temp_record, 0, 0, 0, False)
 'End If
  '  A(3) = angle_number(Lin(l%).data(0).data0.poi(1), Lin(l%).data(0).data0.in_point(tn(0)), _
       tp((i% + 2) Mod 3), 0)
' If A(3) <> 0 Then
'     Call set_three_angle_value(Abs(A(3)), _
      Abs(A((i% + 1) Mod 3)), Abs(A((i% + 2) Mod 3)), "1", _
       "-1", "-1", "0", 0, temp_record, 0, 0, 0, False)
' End If
'Else
' A(3) = angle_number(Lin(l%).data(0).data0.poi(0), Lin(l%).data(0).data0.in_point(tn(0)), _
    tp((i% + 2) Mod 3), 0)
' If A(3) <> 0 Then
'  Call set_three_angle_value(Abs(A(3)), _
      Abs(A((i% + 1) Mod 3)), Abs(A((i% + 2) Mod 3)), "1", _
       "-1", "-1", "0", 0, temp_record, 0, 0, 0, False)
' End If
'    A(3) = angle_number(Lin(l%).data(0).data0.poi(1), Lin(l%).data(0).data0.in_point(tn(1)), _
      tp((i% + 2) Mod 3), 0)
' If A(3) <> 0 Then
'  Call set_three_angle_value(Abs(A(3)), _
      Abs(A(i%)), Abs(A((i% + 2) Mod 3)), "1", _
       "-1", "-1", "0", 0, temp_record, 0, 0, 0, False)
' End If
' End If
'Next i%
Exit Function
set_triangle_error:
set_triangle = 0
If set_new_data Then
last_conditions.last_cond(1).triangle_no = temp_no%
For i% = 1 To temp_no%
triangle(i%).data(0).index = triangle(i%).index
Next i%
End If
End Function

Public Function set_direction(ByVal re1%, ByVal re2%) As Integer
Dim tn1(2) As Integer
Dim tn2(2) As Integer
Dim i%, tp%
If re1% = re2% Then
 set_direction = 1
ElseIf re1% = 1 Then
 set_direction = re2%
ElseIf re1% = -1 Then
 set_direction = -re2%
ElseIf re1% = 2 Then
 If re2% = 1 Then
  set_direction = 3
 ElseIf re2% = -1 Then
  set_direction = -2
 ElseIf re2% = -2 Then
  set_direction = -3
 ElseIf re2% = 3 Then
  set_direction = 2
 ElseIf re2% = -3 Then
  set_direction = -1
 End If
ElseIf re1% = -2 Then
 If re2% = 1 Then
  set_direction = -2
 ElseIf re2% = -1 Then
  set_direction = 3
 ElseIf re2% = 2 Then
  set_direction = -3
 ElseIf re2% = 3 Then
  set_direction = -1
 ElseIf re2% = -3 Then
  set_direction = 2
 End If
ElseIf re1% = 3 Then
 If re2% = 1 Then
  set_direction = 2
 ElseIf re2% = -1 Then
  set_direction = -3
 ElseIf re2% = 2 Then
  set_direction = 3
 ElseIf re2% = -2 Then
  set_direction = -1
 ElseIf re2% = -3 Then
  set_direction = -2
 End If
ElseIf re1% = -3 Then
  If re2% = 1 Then
   set_direction = -3
  ElseIf re2% = -1 Then
   set_direction = 2
  ElseIf re2% = 2 Then
   set_direction = -1
  ElseIf re2% = -2 Then
   set_direction = 3
  ElseIf re2% = 3 Then
  set_direction = -2
 End If
End If
End Function

Public Sub direction0(re1%, n1%, n2%, n3%)
'标准－》实际
If re1% = 1 Then
n1% = 0
 n2% = 1
  n3% = 2
ElseIf re1% = 2 Then
n1% = 1
 n2% = 2
  n3% = 0
ElseIf re1% = 3 Then
n1% = 2
 n2% = 0
  n3% = 1
ElseIf re1% = -1 Then
n1% = 0
 n2% = 2
  n3% = 1
ElseIf re1% = -2 Then
n1% = 1
 n2% = 0
  n3% = 2
ElseIf re1% = -3 Then
n1% = 2
 n2% = 1
  n3% = 0
End If
End Sub

Public Sub direction_1(re%, n1%, n2%, n3%)
'实际－》标准
If re% = 1 Then
n1% = 0
 n2% = 1
  n3% = 2
ElseIf re% = 2 Then
n1% = 2
 n2% = 0
  n3% = 1
ElseIf re% = 3 Then
n1% = 1
 n2% = 2
  n3% = 0
ElseIf re% = -1 Then
n1% = 0
 n2% = 2
  n3% = 1
ElseIf re% = -2 Then
n1% = 1
 n2% = 0
  n3% = 2
ElseIf re% = -3 Then
n1% = 2
 n2% = 1
  n3% = 0
End If

End Sub

Public Function Dmax(ByVal X%, ByVal Y%) As Integer
If X% < Y% Then
Dmax = Y%
Else
Dmax = X%
End If
End Function

Public Function Dmin(ByVal X%, ByVal Y%) As Integer
If X% < Y% Then
Dmin = X%
Else
Dmin = Y%
End If
End Function

Public Function set_level(re As condition_data_type) As Byte
Dim i%
Dim n%
Dim l, m As Byte
Dim temp_record As total_record_type
re.level = 0
Call add_conditions_to_record(0, 0, 0, 0, re)
If re.condition_no = 0 Or _
     re.condition_no > 8 Then
re.level = 1
 Exit Function
Else
 n% = re.condition_no
End If
l = 0
For i% = 1 To n%
If re.condition(i%).no > 0 Then
Call record_no(re.condition(i%).ty, re.condition(i%).no, temp_record, _
        False, 0, 0)
 If l < temp_record.record_data.data0.condition_data.level Then
  l = temp_record.record_data.data0.condition_data.level
 End If
End If
Next i%
re.level = l + 1 '(l + 1) Mod 256
set_level = re.level
End Function

Public Sub set_dangle(ByVal A%, no%)
Dim i%
 For i% = 1 To last_conditions.last_cond(1).dangle_no
  If Dangle(i%).data(0).angle = A Then
   no% = i%
    Exit Sub
  End If
 Next i%
 If last_conditions.last_cond(1).dangle_no Mod 10 = 0 Then
      ReDim Preserve Dangle(last_conditions.last_cond(1).dangle_no + 10) As Dangle_type
 End If
   last_conditions.last_cond(1).dangle_no = last_conditions.last_cond(1).dangle_no + 1
     no% = last_conditions.last_cond(1).dangle_no
      Dangle(last_conditions.last_cond(1).dangle_no).data(0) = Dangle_data_0
        Dangle(last_conditions.last_cond(1).dangle_no).data(0).angle = A

End Sub
Public Function set_dline1(ByVal p1%, ByVal p2%, no%) _
       As Boolean
Dim i%
Dim tp(1) As Integer
If p1% < p2% Then
tp(0) = p1%
 tp(1) = p2%
ElseIf p1% > p2% Then
tp(0) = p2%
 tp(1) = p1%
Else
no% = 0
Exit Function
End If
For i% = 1 To last_conditions.last_cond(1).dline1_no
If Dline1(i%).data(0).poi(0) = tp(0) And _
 Dline1(i%).data(0).poi(1) = tp(0) Then
  no% = i%
   Exit Function
 End If
Next i%
If last_conditions.last_cond(1).dline1_no Mod 10 = 0 Then
ReDim Preserve Dline1(last_conditions.last_cond(1).dline1_no + 10) As Dline1_type
End If
last_conditions.last_cond(1).dline1_no = last_conditions.last_cond(1).dline1_no + 1
 no% = last_conditions.last_cond(1).dline1_no
Dline1(no%).data(0) = Dline1_data_0
 Dline1(no%).data(0).poi(0) = tp(0)
  Dline1(no%).data(0).poi(1) = tp(1)
   set_dline1 = True

End Function
Public Sub read_triangle_element(ByVal triA%, _
    ByVal derection As Integer, p1%, p2%, p3%, A1%, A2%, A3%, _
     lv1%, lv2%, lv3%, n1%, n2%, n3%)
If derection = 1 Then
p1% = triangle(triA%).data(0).poi(0)
p2% = triangle(triA%).data(0).poi(1)
p3% = triangle(triA%).data(0).poi(2)
A1% = triangle(triA%).data(0).angle(0)
A2% = triangle(triA%).data(0).angle(1)
A3% = triangle(triA%).data(0).angle(2)
lv1% = max(lv1%, triangle(triA%).data(0).line_value(0))
lv2% = max(lv2%, triangle(triA%).data(0).line_value(1))
lv3% = max(lv3%, triangle(triA%).data(0).line_value(2))
n1% = 0
n2% = 1
n3% = 2
ElseIf derection = -1 Then
p1% = triangle(triA%).data(0).poi(0)
p2% = triangle(triA%).data(0).poi(2)
p3% = triangle(triA%).data(0).poi(1)
A1% = triangle(triA%).data(0).angle(0)
A2% = triangle(triA%).data(0).angle(2)
A3% = triangle(triA%).data(0).angle(1)
lv1% = max(lv1%, triangle(triA%).data(0).line_value(0))
lv2% = max(lv2%, triangle(triA%).data(0).line_value(2))
lv3% = max(lv3%, triangle(triA%).data(0).line_value(1))
n1% = 0
n2% = 2
n3% = 1
ElseIf derection = 2 Then
p1% = triangle(triA%).data(0).poi(1)
p2% = triangle(triA%).data(0).poi(2)
p3% = triangle(triA%).data(0).poi(0)
A1% = triangle(triA%).data(0).angle(1)
A2% = triangle(triA%).data(0).angle(2)
A3% = triangle(triA%).data(0).angle(0)
lv1% = max(lv1%, triangle(triA%).data(0).line_value(1))
lv2% = max(lv2%, triangle(triA%).data(0).line_value(2))
lv3% = max(lv3%, triangle(triA%).data(0).line_value(0))
n1% = 1
n2% = 2
n3% = 0
ElseIf derection = -2 Then
p1% = triangle(triA%).data(0).poi(1)
p2% = triangle(triA%).data(0).poi(0)
p3% = triangle(triA%).data(0).poi(2)
A1% = triangle(triA%).data(0).angle(1)
A2% = triangle(triA%).data(0).angle(0)
A3% = triangle(triA%).data(0).angle(2)
lv1% = max(lv1%, triangle(triA%).data(0).line_value(1))
lv2% = max(lv2%, triangle(triA%).data(0).line_value(0))
lv3% = max(lv3%, triangle(triA%).data(0).line_value(2))
n1% = 1
n2% = 0
n3% = 2
ElseIf derection = 3 Then
p1% = triangle(triA%).data(0).poi(2)
p2% = triangle(triA%).data(0).poi(0)
p3% = triangle(triA%).data(0).poi(1)
A1% = triangle(triA%).data(0).angle(2)
A2% = triangle(triA%).data(0).angle(0)
A3% = triangle(triA%).data(0).angle(1)
lv1% = max(lv1%, triangle(triA%).data(0).line_value(2))
lv2% = max(lv2%, triangle(triA%).data(0).line_value(0))
lv3% = max(lv3%, triangle(triA%).data(0).line_value(1))
n1% = 2
n2% = 0
n3% = 1
ElseIf derection = -3 Then
p1% = triangle(triA%).data(0).poi(2)
p2% = triangle(triA%).data(0).poi(1)
p3% = triangle(triA%).data(0).poi(0)
A1% = triangle(triA%).data(0).angle(2)
A2% = triangle(triA%).data(0).angle(1)
A3% = triangle(triA%).data(0).angle(0)
lv1% = max(lv1%, triangle(triA%).data(0).line_value(2))
lv2% = max(lv2%, triangle(triA%).data(0).line_value(1))
lv3% = max(lv3%, triangle(triA%).data(0).line_value(0))
n1% = 2
n2% = 1
n3% = 0
End If
End Sub

Public Function set_dparal0(ByVal p1%, ByVal p2%, ByVal p3%, _
   ByVal p4%, re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim tl1%, tl2%
tl1% = line_number0(p1%, p2%, 0, 0)
 tl2% = line_number0(p3%, p4%, 0, 0)
  If tl1% = tl2% Or tl1% = 0 Or tl2% = 0 Then
   set_dparal0 = False
  Exit Function
  End If
 set_dparal0 = set_dparal(tl1%, tl2%, re, 0, no_reduce, False)
End Function

Public Sub index1_(ind1%, ind2%, out1%, out2%, out3%)
'ind1%/out1%=out2%/out3%
If ind1% = 0 Or ind1% = 3 Then
If ind2% = 0 Then
out1% = 1
 out2% = 2
Else
out1% = 2
 out2% = 1
End If
If ind1% = 0 Then
 out3% = 3
Else
 out3% = 0
End If
ElseIf ind1% = 1 Or ind1% = 2 Then
If ind2% = 0 Then
out1% = 0
 out2% = 3
Else
out1% = 3
 out2% = 0
End If
If ind1% = 1 Then
out3% = 2
Else
out3% = 1
End If
End If
End Sub


Public Sub set_verti_center()
Dim i%
For i% = 1 To last_conditions.last_cond(0).triangle_no
 Call find_verti_center(i%, False)
Next i%
End Sub

Public Function set_angle_value(ByVal A%, ByVal v As String, _
   re As total_record_type, no%, ByVal no_reduce As Byte, is_reduce As Boolean) As Byte
'On Error GoTo set_angle_value_error
  If InStr(1, v, "F", 0) > 0 Then
    Exit Function
  ElseIf A% > 0 Then
     set_angle_value = set_three_angle_value(A%, 0, 0, "1", "0", "0", v, _
       0, re, no%, 0, 0, no_reduce, 0, 0, is_reduce)
  End If
   Exit Function
set_angle_value_error:
set_angle_value = 0
End Function

Public Function set_line_value(ByVal p1%, ByVal p2%, ByVal v As String, _
           ByVal in1%, ByVal in2%, ByVal il%, _
            re As total_record_type, no%, ByVal no_reduce As Byte, is_reduce As Boolean) As Byte
Dim i%, j%, tn%, triA%, temp_no%
Dim n_(3) As Integer
Dim n(1) As Integer
Dim tp(3) As Integer
Dim tl As Integer
Dim tA(1) As Integer
Dim ty As Byte
Dim lv As line_value_data0_type
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim ts$
Dim l As Single
Dim level As Byte
Dim set_new_data As Boolean
Dim tri_f As tri_function_data_type
'On Error GoTo set_line_value_error
If no% > 0 Then
 If line_value(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_line_value_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
ElseIf v = "" Then
 Exit Function
ElseIf InStr(1, v, "F", 0) > 0 Then
 Exit Function
'设置item0 , p1%...p4%>0 线段item0,p2%=-1 sin,p2%=-2 cos,p2%=-3 tan ,p2%=-4 tan ,p2%=-5,area,
' p2%=- 6  < ;p2%=-7,item0
ElseIf p2% = -1 Then
 set_line_value = set_tri_function(p2%, v, "", "", "", 0, re, False, tri_f, 0)
       Exit Function
ElseIf p2% = -2 Then
 set_line_value = set_tri_function(p2%, "", v, "", "", 0, re, False, tri_f, 0)
       Exit Function
ElseIf p2% = -3 Then
 set_line_value = set_tri_function(p2%, "", "", v, "", 0, re, False, tri_f, 0)
       Exit Function
ElseIf p2% = -4 Then
 set_line_value = set_tri_function(p2%, "", "", "", v, 0, re, False, tri_f, 0)
       Exit Function
ElseIf p2% = -5 Then
ElseIf p2% = -6 Then

ElseIf p2% = -10 Then
 set_line_value = set_V_line_value(Dtwo_point_line(p1%).data(0).v_poi(0), _
      Dtwo_point_line(p1%).data(0).v_poi(1), 0, 0, 0, v, re, 0, False)
       Exit Function
End If
If (p1% = p2% And no% = 0) Or no_reduce = 255 Then
Exit Function
End If
display_inform = 0
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
Exit Function
End If
ty = is_line_value(p1%, p2%, in1%, in2%, il%, v, no%, n_(0), n_(1), _
     n_(2), n_(3), lv)
If ty > 1 Then
   set_line_value = ty
    Exit Function
ElseIf ty = 1 Then
If no% > 0 And run_type <= 10 And run_type <> 3 Then
 temp_record1 = temp_record
  For i% = 1 To line_value(no%).data(0).record.data0.condition_data.condition_no
   If line_value(no%).data(0).record.data0.condition_data.condition(i%).ty = pseudo_total_equal_triangle_ Then
     If is_condition_in_record_(line_value_, no%, temp_record1.record_data) = 0 Then
        If temp_record.record_data.data0.condition_data.level < line_value(no%).data(0).record.data0.condition_data.level Then
          pseudo_total_equal_triangle(line_value(no%).data(0).record.data0.condition_data.condition(i).no). _
            data(0).is_set = 1
           line_value(no%).record_ = temp_record.record_
           line_value(no%).data(0).record = temp_record.record_data
            Exit Function
        End If
     End If
   ElseIf line_value(no%).data(0).record.data0.condition_data.condition(i%).ty = pseudo_similar_triangle_ Then
     If is_condition_in_record_(line_value(no%).data(0).record.data0.condition_data.condition(i).ty, _
         line_value(no%).data(0).record.data0.condition_data.condition(1).no, temp_record1.record_data) = 0 Then
          If temp_record.record_data.data0.condition_data.level < line_value(no%).data(0).record.data0.condition_data.level Then
           pseudo_similar_triangle(line_value(no%).data(0).record.data0.condition_data.condition(i).no). _
            data(0).is_set = 1
             line_value(no%).record_ = temp_record.record_
              line_value(no%).data(0).record = temp_record.record_data
           Exit Function
          End If
     End If
  End If
  Next i%
If line_value(no%).data(0).data0.value_ <> lv.value_ Then
  If is_sqr_in_string(line_value(no%).data(0).data0.value_) = False And _
        is_sqr_in_string(lv.value_) = False Then
    set_line_value = set_string_value_(line_value(no%).data(0).data0.value_, _
                       lv.value_, line_value_, no%, temp_record1.record_data, no_reduce)
     If set_line_value > 1 Then
      Exit Function
     End If
  Else
    set_line_value = set_string_value_(line_value(no%).data(0).data0.squar_value, _
                       lv.squar_value, line_value_, no%, temp_record1.record_data, no_reduce)
     If set_line_value > 1 Then
      Exit Function
     End If
  End If
End If
level = line_value(no%).data(0).record.data0.condition_data.level
If line_value(no%).data(0).data0.value <> "x" Or _
 line_value(no%).data(0).record.data0.condition_data.condition_no > 0 Then
If set_prove_type(line_value_, no%, temp_record.record_data, _
   line_value(no%).data(0).record) And _
    set_or_prove < 2 Then
    Call simple_record(line_value_, no%, _
         line_value(no%).data(0).record.data0.condition_data.level, level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
      Exit Function
     Else
      no_reduce = 0
        GoTo set_line_value_mark0
     End If
End If
End If
End If
If set_or_prove < 2 Then
  If no_reduce = 0 Then
   no% = 0
  End If
      set_line_value = 0
        Exit Function
Else
 If display_inform = 1 Then
  If conclusion_data(0).ty = line_value_ And conclusion_data(0).no(0) = no% Then
   prove_type = 4
        event_statue = complete_prove
  End If
   Call display_prove_inform(modify_wenti_no, display)
 Else
 Exit Function
  End If
 End If
 Exit Function
Else
 If set_or_prove = 2 And display_inform = 1 Then
  prove_type = 0
  set_line_value = 0
     Call display_prove_inform(modify_wenti_no, display)

    Exit Function
   End If
End If
temp_no% = last_conditions.last_cond(1).line_value_no
For i% = 1 To temp_no%
line_value(i%).record_.index = line_value(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).line_value_no Mod 10 = 0 Then
ReDim Preserve line_value(last_conditions.last_cond(1).line_value_no + 10) As line_value_type
End If
last_conditions.last_cond(1).line_value_no = last_conditions.last_cond(1).line_value_no + 1
set_new_data = True
line_value(last_conditions.last_cond(1).line_value_no).data(0).data0 = lv
line_value(last_conditions.last_cond(1).line_value_no).data(0).data0.value_ = lv.value
line_value(last_conditions.last_cond(1).line_value_no).data(0).data0.squar_value = _
               time_string(lv.value, lv.value, True, False)
line_value(last_conditions.last_cond(1).line_value_no).data(0).record = temp_record.record_data
line_value(last_conditions.last_cond(1).line_value_no).record_ = temp_record.record_
line_value(last_conditions.last_cond(1).line_value_no).record_.no_reduce = 0
For j% = 0 To 3
For i% = last_conditions.last_cond(1).line_value_no To n_(j%) + 2 Step -1
line_value(i%).data(0).record.data1.index.i(j%) = _
 line_value(i% - 1).data(0).record.data1.index.i(j%)
Next i%
line_value(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).line_value_no
Next j%
no% = last_conditions.last_cond(1).line_value_no
'line_value(no%).data(0).data0.squar_value = time_string( _
      line_value(no%).data(0).data0.value, line_value(no%).data(0).data0.value, True, False)
If last_conditions_for_aid_no > 0 Then
 If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
  If lv.poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       lv.poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
   last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  End If
 End If
End If
 l = distance_of_two_POINTAPI(m_poi(p1%).data(0).data0.coordinate, m_poi(p2%).data(0).data0.coordinate)
'If Ratio_for_measure.Ratio_for_measure > 0 Then
  'm_poi(p2%)..data(0)..data0.'
'Else
'  Ratio_for_measure.Ratio_for_measure = l / val(lv.value)
'End If
 ts$ = set_display_line_value(line_value(last_conditions.last_cond(1).line_value_no), False, 1)
    set_line_value = set_prove_proccess(ts$, line_value_, no%, line_value(no%).data(0).record.display_string)
    If set_line_value > 1 Then
      Exit Function
    Else
     set_line_value = 1
    End If
    If line_value(no%).data(0).data0.value = "0" Then
     temp_record.record_data.data0.condition_data.condition_no = 1
     temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
     temp_record.record_data.data0.condition_data.condition(1).no = no%
     temp_record.record_data.data0.theorem_no = 0
     set_line_value = combine_two_point(line_value(no%).data(0).data0.poi(0), _
         line_value(no%).data(0).data0.poi(1), 0, temp_record)
      If set_line_value > 1 Then
       Exit Function
      End If
   End If
If no_reduce = 0 Then
 Exit Function
End If
set_line_value_mark0:
If line_value(no%).record_.no_reduce = 0 Or _
    line_value(no%).record_.no_reduce = 2 Or _
     line_value(no%).record_.no_reduce = 4 Then
      Call set_level_(line_value(no%).record_.no_reduce, 1)
set_line_value = set_line_value_for_epolygon(no%)
If set_line_value > 1 Then
  Exit Function
End If
set_line_value = set_property_of_line_value(no%, no_reduce)
If set_line_value > 1 Then
  Exit Function
End If
'等量替换
End If
set_line_value_combine:
If line_value(no%).record_.no_reduce < 5 Then
'If line_value(no%).data(0).record.data0.level <= 10 Then
  set_line_value = combine_line_value_with_line_value(no%, no_reduce)
  If set_line_value > 1 Then
   Exit Function
  End If
  set_line_value = combine_line_value_with_mid_point(no%, 0, no_reduce)
  If set_line_value > 1 Then
   Exit Function
  End If
  set_line_value = combine_line_value_with_relation(no%, 0, no_reduce)
   If set_line_value > 1 Then
    Exit Function
   End If
set_line_value = combine_line_value_with_dpoint_pair(no%, 0, no_reduce)
If set_line_value > 1 Then
 Exit Function
End If
  set_line_value = combine_line_value_with_eline(no%, 0, no_reduce)
  If set_line_value > 1 Then
   Exit Function
  End If
set_line_value = combine_line_value_with_item(no%, no_reduce) ', 1, last_item0)
If set_line_value > 1 Then
 Exit Function
End If
   set_line_value = combine_line_value_with_three_line(no%, 0, no_reduce)
  If set_line_value > 1 Then
   Exit Function
  End If
set_line_value = combine_line_value_with_two_line(no%, 0, no_reduce)
  If set_line_value > 1 Then
   Exit Function
  End If
set_line_value = combine_line_value_with_length_of_polygon(no%)
  If set_line_value > 1 Then
   Exit Function
  End If
If line_value(no%).record_.no_reduce < 2 Then
line_value(no%).record_.no_reduce = _
 line_value(no%).record_.no_reduce + 2
End If
End If
Exit Function
set_line_value_error:
set_line_value = 0
If set_new_data Then
last_conditions.last_cond(1).line_value_no = temp_no%
For i% = 1 To temp_no%
line_value(i%).record_.index = line_value(i%).data(0).record.data1.index
Next i%
End If
End Function


Public Function max_b(ByVal t1 As Boolean, ByVal t2 As Boolean) As Boolean
 If t1 Or t2 Then
  max_b = True
 Else
  max_b = False
 End If
End Function
Public Function sin_(ByVal s As String, ty As Byte) As String
Dim v!
Dim A!
Dim p%
If InStr(1, s, "F", 0) > 0 Or s = "" Then
 sin_ = "F"
  Exit Function
End If
ty = 0
If s = "0" Or s = "180" Then
 sin_ = "0"
ElseIf (s = "15" Or s = "165") Then
 sin_ = "('6@'2)/4"
ElseIf s = "30" Or s = "150" Then
sin_ = "1/2"
ElseIf s = "45" Or s = "135" Then
sin_ = "'2/2"
ElseIf s = "60" Or s = "120" Then
sin_ = "'3/2"
ElseIf (s = "75" Or s = "105") Then
sin_ = "('6#'2)/4"
ElseIf s = "90" Then
sin_ = "1"
ElseIf th_chose(-5).chose = 1 Then
 ty = 1
  v! = val_(value_string(s))
    A! = Sin(v! * 3.1415 / 180)
     sin_ = Trim(str(A!))
Else
 ty = 2
     sin_ = "F"
End If
End Function
Public Function tan_(ByVal s As String, ty As Byte) As String
Dim v!
Dim A!
Dim p%
If s = "" Or InStr(1, s, "F", 0) > 0 Then
 tan_ = "F"
  Exit Function
End If
ty = 0
If s = "0" Then
 tan_ = "0"
ElseIf s = "30" Then
 tan_ = "'3/3"
ElseIf s = "45" Then
 tan_ = "1"
ElseIf s = "60" Then
 tan_ = "'3"
ElseIf s = "90" Then
 'tan_ = "F"
 ty = 255
ElseIf s = "120" Then
 tan_ = "-'3"
ElseIf s = "135" Then
 tan_ = "-1"
ElseIf s = "150" Then
 tan_ = "-'3/3"
ElseIf s = "180" Then
 tan_ = "0"
ElseIf th_chose(-5).chose = 1 Then
 ty = 1
p% = InStr(1, s, "/", 0)
  v! = val_(value_string(s))
   If v! <> 0 Then
    A! = Tan(v! * 3.1415 / 180)
     tan_ = Trim(str(A!))
   Else
    tan_ = "F"
   End If
Else
ty = 2
tan_ = "F"
End If
End Function

Public Function set_three_angle_value(ByVal A1%, ByVal A2%, ByVal A3%, _
    ByVal s1 As String, ByVal S2 As String, ByVal s3 As String, _
     ByVal v As String, ByVal is_no_simple As Byte, re As total_record_type, _
      no%, no1%, no2%, ByVal no_reduce As Byte, t_y As Byte, _
        no_new As Byte, reduce As Boolean) As Byte
'no_reduce=0 设置 =1 推导,no_reduce1=true  一般的几何性质 不做相互推理
'no%新数据,no1%,no2%,已有数据
Dim i%, j%, tn%, temp_no%
Dim tA(2) As Integer
Dim n_(7) As Integer
Dim A3_v As angle3_value_data0_type
Dim t_s$
Dim re1 As total_record_type
Dim level As Byte
Dim ty As Byte
Dim set_new_data As Boolean
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
'On Error GoTo set_three_angle_value_error
If no_reduce = 255 Or InStr(1, s1, "F", 0) > 0 Or _
        InStr(1, S2, "F", 0) > 0 Or InStr(1, s3, "F", 0) > 0 _
         Or InStr(1, v, "F", 0) > 0 Or A1% < 0 Or A2% < 0 Or A3% < 0 Then '系数和数值不是标准字符串，三个角都是负值，退出
 Exit Function
ElseIf no% = 0 And A1% = 0 And A2% = 0 And A3% = 0 Then
 set_three_angle_value = 0
  Exit Function
ElseIf A1% > 0 And angle(A1%).data(0).no_reduce > 0 Then
  Exit Function
ElseIf A2% > 0 And angle(A2%).data(0).no_reduce > 0 Then
  Exit Function
ElseIf A3% > 0 And angle(A3%).data(0).no_reduce > 0 Then
  Exit Function
ElseIf no% = 0 And ((s1 <> "0" And A1% = 0) Or (S2 <> "0" And A2% = 0) Or (s3 <> "0" And A3% = 0)) Then
 Exit Function
End If
'****************************
re1 = re
display_inform = 0
If no% > 0 Then
 If angle3_value(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_three_angle_value_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
End If
If v = "0" Then
If A3% = 0 Then
  If s1 = "1" And (S2 = "-1" Or S2 = "@1") Then
   If A1% = A2% Then
       Exit Function
   Else
   If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) Then '共顶角
    If angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) And _
        angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0) Then '两边分别是同一直线,则互相垂直
     set_three_angle_value = set_dverti(angle(A1%).data(0).line_no(0), angle(A1%).data(0).line_no(1), _
       re, 0, no_reduce, False)
         Exit Function
    ElseIf angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(0) Then '同边相同,则是同角或对顶角
     If angle(A1%).data(0).line_no(1) <> angle(A2%).data(0).line_no(1) Then
      set_three_angle_value = combine_two_line(angle(A1%).data(0).line_no(1), _
       angle(A2%).data(0).line_no(1), angle(A1%).data(0).poi(1), re.record_data, no_reduce, 1)
        Exit Function
     End If
    ElseIf angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(1) Then
     If angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(0) Then
      set_three_angle_value = combine_two_line(angle(A1%).data(0).line_no(0), _
       angle(A2%).data(0).line_no(0), angle(A1%).data(0).poi(1), re.record_data, no_reduce, 1)
        Exit Function
     End If
   End If
   End If
 End If
End If
End If
End If
'Call set_level(re1)
temp_record = re
If is_no_simple = 1 Then
n_(0) = -2000
End If
If A1% > 0 Then
 If angle(A1%).data(0).other_no > 0 Then
  A1% = angle(A1%).data(0).other_no
 End If
End If
If A2% > 0 Then
 If angle(A2%).data(0).other_no > 0 Then
  A2% = angle(A2%).data(0).other_no
 End If
End If
If A3% > 0 Then
 If angle(A3%).data(0).other_no > 0 Then
  A3% = angle(A3%).data(0).other_no
 End If
End If
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_three_angle_value(A1%, A2%, A3%, s1, S2, s3, v, v, no%, no1%, no2%, _
     n_(0), n_(1), n_(2), n_(3), n_(4), n_(5), n_(6), n_(7), _
      A3_v, temp_record.record_data.data0.condition_data, t_y) Then
  If no% > 0 Then
  If A2% = 0 Then
   If angle(A1%).data(0).value_no = 0 Then
    If angle3_value(no%).data(0).data0.angle(0) = A1% Then
     angle(A1%).data(0).value_no = no%
     angle(A1%).data(0).value = divide_string(v, s1, True, False)
      Exit Function
    Else
    A3_v.angle(0) = A1%
    A3_v.angle(1) = 0
    A3_v.angle(2) = 0
    A3_v.para(0) = "1"
    A3_v.para(1) = "0"
    A3_v.para(2) = "0"
    A3_v.value = divide_string(v, s1, True, False)
    Call search_for_three_angle_value(A3_v, 0, n_(0), 1)
    Call search_for_three_angle_value(A3_v, 1, n_(1), 1)
    Call search_for_three_angle_value(A3_v, 2, n_(2), 1)
    Call search_for_three_angle_value(A3_v, 3, n_(3), 1)
    Call search_for_three_angle_value(A3_v, 4, n_(4), 1)
    Call search_for_three_angle_value(A3_v, 5, n_(5), 1)
    Call search_for_three_angle_value(A3_v, 6, n_(6), 1)
    Call search_for_three_angle_value(A3_v, 7, n_(7), 1)
    temp_record = re
    GoTo set_three_angle_value_mark12
    End If
   End If
  End If
temp_record1.record_data = re.record_data
'Call add_conditions_to_record(angle3_value_, no%, 0, 0, _
           temp_record1.record_data.data0.condition_data)
set_three_angle_value = set_string_value_(angle3_value(no%).data(0).data0.value, _
                        A3_v.value, angle3_value_, no%, temp_record1.record_data, no_reduce)
If set_three_angle_value > 1 Then
 Exit Function
End If
   Call set_level(temp_record.record_data.data0.condition_data)
   If run_type < 10 Then
   level = angle3_value(no%).data(0).record.data0.condition_data.level
    If set_prove_type(angle3_value_, no%, temp_record.record_data, _
         angle3_value(no%).data(0).record) Then
     Call simple_record(angle3_value_, no%, angle3_value(no%).data(0).record.data0.condition_data.level, level)
      If no_reduce = 0 Then ' Or run_type <= 1 Then
       set_three_angle_value = 0
      Exit Function
      Else
       no_reduce = 0
          GoTo set_three_angle_value_mark0
      End If
     End If
    End If
    Exit Function
  End If
   Exit Function
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_three_angle_value = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
    Exit Function
   End If
End If
If InStr(1, A3_v.para(0), "F", 0) Or InStr(1, A3_v.para(1), "F", 0) > 0 Or _
     InStr(1, A3_v.para(2), "F", 0) Or InStr(1, A3_v.value, "F", 0) > 0 Then '重复
 Exit Function
ElseIf is_uselly_para_for_angle Then
   If is_uselly_para(A3_v.para(0)) = False Or is_uselly_para(A3_v.para(1)) = False Or _
         is_uselly_para(A3_v.para(2)) = False Then
     If temp_record.record_data.data0.condition_data.condition_no = 0 Then
         is_uselly_para_for_angle = False
     Else
         Exit Function
     End If
   End If
End If
If t_y = 1 Then
 If A3_v.para(2) <> "0" And no_reduce > 0 Then
  If temp_record.record_data.data0.condition_data.condition_no < 3 Then
   set_three_angle_value = combine_three_angle_with_three_angle0( _
      A3_v, temp_record.record_data)
       Exit Function
  Else
      Exit Function
  End If
 End If
End If
If A3_v.para(1) = "0" And (A3_v.value = "0" Or _
          A3_v.value = "180") Then
  set_three_angle_value = combine_two_line( _
    angle(A3_v.angle(0)).data(0).line_no(0), _
     angle(A3_v.angle(0)).data(0).line_no(1), _
      angle(A3_v.angle(0)).data(0).poi(1), temp_record.record_data, 0, 1)
  Exit Function
End If
set_three_angle_value_mark12:
Call set_level(temp_record.record_data.data0.condition_data)
If is_no_simple = 1 Then
 last_conditions.last_cond(0).angle3_value_no = last_conditions.last_cond(0).angle3_value_no + 1
End If
 temp_no% = last_conditions.last_cond(1).angle3_value_no
For i% = 1 To temp_no%
 angle3_value(i%).record_.index = angle3_value(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).angle3_value_no Mod 10 = 0 Then
  ReDim Preserve angle3_value(last_conditions.last_cond(1).angle3_value_no + 10) As angle3_value_type
End If
last_conditions.last_cond(1).angle3_value_no = last_conditions.last_cond(1).angle3_value_no + 1
set_new_data = True
For i% = 0 To 2
 If A3_v.angle(i%) > 0 Then
   Call add_record_to_record(angle(A3_v.angle(i%)).data(0).cond_data, _
                        temp_record.record_data.data0.condition_data)
 End If
Next i%
    angle3_value(last_conditions.last_cond(1).angle3_value_no).data(0).data0 = A3_v
     angle3_value(last_conditions.last_cond(1).angle3_value_no).data(0).record = temp_record.record_data
      angle3_value(last_conditions.last_cond(1).angle3_value_no).record_ = temp_record.record_
       angle3_value(last_conditions.last_cond(1).angle3_value_no).record_.no_reduce = 0
        angle3_value(last_conditions.last_cond(1).angle3_value_no).reduce = reduce
 'If is_no_simple = 1 Then
 'angle3_value(last_conditions.last_cond(1).angle3_value_no).record_.no_reduce = 255
 'For i% = last_conditions.last_cond(1).angle3_value_no To n_(0) + 2 Step -1
 ' angle3_value(i%).data(0).record.data1.index.i(0) = _
    angle3_value(i% - 1).data(0).record.data1.index.i(0)
 'Next i%
 ' angle3_value(n_(j%) + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).angle3_value_no
 'For j% = 1 To 7
' For i% = last_conditions.last_cond(1).angle3_value_no To 2 Step -1
 ' angle3_value(i%).data(0).record.data1.index.i(j%) = angle3_value(i% - 1).data(0).record.data1.index.i(j%)
 'Next i%
 ' angle3_value(1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).angle3_value_no
 'Next j%
 'Else
 For j% = 0 To 7
 For i% = last_conditions.last_cond(1).angle3_value_no To n_(j%) + 2 Step -1
  angle3_value(i%).data(0).record.data1.index.i(j%) = angle3_value(i% - 1).data(0).record.data1.index.i(j%)
 Next i%
  angle3_value(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).angle3_value_no
 Next j%
 'End If
 no% = last_conditions.last_cond(1).angle3_value_no
 If run_type >= 10 And last_conditions_for_aid_no Then
   If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
    If A3_v.angle(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).angle_no And _
         A3_v.angle(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).angle_no And _
           A3_v.angle(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).angle_no Then
       last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
    End If
   End If
  End If
'***********************************************************************************************************
If A3_v.para(0) <> "0" And A3_v.para(1) <> "0" And A3_v.para(2) <> "0" Then
ElseIf A3_v.para(0) <> "0" And A3_v.para(1) <> "0" Then
ElseIf A3_v.para(0) <> "0" Then
  If A3_v.value = "90" Then
  Else
  End If
End If
 If A3_v.para(1) = "0" Then
  '建立角值的index
  Call search_for_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0), n_(0), 1, 1)
   angle(angle3_value(no%).data(0).data0.angle(0)).data(0).value = angle3_value(no%).data(0).data0.value
    angle(angle3_value(no%).data(0).data0.angle(0)).data(0).value_no = no%
  Call search_for_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0), n_(1), 1, 1)
  If n_(0) < n_(1) Then
   For j% = n_(0) + 1 To n_(1) - 1
    angle(j%).data(0).index(1) = angle(j% + 1).data(0).index(1)
   Next j%
    angle(n_(1)).data(0).index(1) = angle3_value(no%).data(0).data0.angle(0)
  ElseIf n_(0) > n_(1) Then
   For j% = n_(0) + 1 To n_(1) + 2 Step -1
    angle(j%).data(0).index(1) = angle(j% - 1).data(0).index(1)
   Next j%
    angle(n_(0) + 1).data(0).index(1) = angle3_value(no%).data(0).data0.angle(0)
  End If
 End If
 t_s$ = set_display_three_angle_value(angle3_value(no%).data(0), False, 1, False)
  set_three_angle_value = set_prove_proccess(t_s$, angle3_value_, no%, angle3_value(no%).data(0).record.display_string)
   If set_three_angle_value > 1 Then
    Exit Function
   End If
  If no_new = 0 Then
         angle3_value(no%).data(0).data0.reduce = True
  End If
If A3_v.para(1) = "0" Then
If last_conditions.last_cond(1).angle_value_no Mod 10 = 0 Then
   ReDim Preserve angle_value.av_no(last_conditions.last_cond(1).angle_value_no + 10) As Av_no_type
End If
  last_conditions.last_cond(1).angle_value_no = last_conditions.last_cond(1).angle_value_no + 1
    angle_value.av_no(last_conditions.last_cond(1).angle_value_no).no = no%
     angle3_value(no%).data(0).data0.type = angle_value_
  If A3_v.value = "90" Then
  If last_conditions.last_cond(1).angle_value_90_no Mod 10 = 0 Then
    ReDim Preserve angle_value_90.av_no(last_conditions.last_cond(1).angle_value_90_no + 10) As Av_no_type
  End If
   last_conditions.last_cond(1).angle_value_90_no = last_conditions.last_cond(1).angle_value_90_no + 1
     angle_value_90.av_no(last_conditions.last_cond(1).angle_value_90_no).no = no%
  End If
  T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).value_no = no%
    If angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no_ = 0 Or _
       angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no_ = 2 Then
     If T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).value = "" Then
     T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).value = _
           angle3_value(no%).data(0).data0.value
      T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).record_for_value = _
             angle3_value(no%).data(0).record.data0
     End If
  Else
     If T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).value = "" Then
      T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).value = _
           minus_string("180", angle3_value(no%).data(0).data0.value, True, False)
      T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).record_for_value = _
             angle3_value(no%).data(0).record.data0
     End If
  End If
    T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).inter_point = _
            angle(angle3_value(no%).data(0).data0.angle(0)).data(0).poi(1)
    Call draw_verti_mark(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no)
  '设置对顶角,互补角
  For i% = 0 To 3
   If i% <> angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no_ Then
    If T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).angle_no(i%).no > 0 Then
     angle(T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).angle_no(i%).no).data(0).value_no = _
         angle(angle3_value(no%).data(0).data0.angle(0)).data(0).value_no
    If i% = 0 Or i% = 2 Then
     If angle(T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0). _
              angle_no(i%).no).data(0).value = "" Then
     angle(T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).angle_no(i%).no).data(0).value = _
         T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).value
     End If
    Else
     If angle(T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0). _
              angle_no(i%).no).data(0).value = "" Then
     angle(T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).angle_no(i%).no).data(0).value = _
         minus_string("180", T_angle(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).total_no).data(0).value, True, False)
     End If
    End If
    End If
   End If
  Next i%
ElseIf A3_v.para(2) = "0" Then
     If A3_v.para(0) = "1" And A3_v.para(1) = "1" Then
       If A3_v.value = "90" Then '两角互余
        If last_conditions.last_cond(1).two_angle_value_90_no Mod 10 = 0 Then
          ReDim Preserve two_angle_value_90.av_no(last_conditions.last_cond(1).two_angle_value_90_no + 10) As Av_no_type
        End If
         last_conditions.last_cond(1).two_angle_value_90_no = last_conditions.last_cond(1).two_angle_value_90_no + 1
         two_angle_value_90.av_no(last_conditions.last_cond(1).two_angle_value_90_no).no = no%
       ElseIf A3_v.value = "180" Then '两角互补
        If last_conditions.last_cond(1).two_angle_value_180_no Mod 10 = 0 Then
         ReDim Preserve two_angle_value_180.av_no(last_conditions.last_cond(1).two_angle_value_180_no + 10) As Av_no_type
        End If
         last_conditions.last_cond(1).two_angle_value_180_no = last_conditions.last_cond(1).two_angle_value_180_no + 1
         two_angle_value_180.av_no(last_conditions.last_cond(1).two_angle_value_180_no).no = no%
       Else
        If last_conditions.last_cond(1).two_angle_value_no Mod 10 = 0 Then
          ReDim Preserve Two_angle_value.av_no(last_conditions.last_cond(1).two_angle_value_no + 10) As Av_no_type
        End If
         last_conditions.last_cond(1).two_angle_value_no = last_conditions.last_cond(1).two_angle_value_no + 1
          Two_angle_value.av_no(last_conditions.last_cond(1).two_angle_value_no).no = no%
       End If
     ElseIf A3_v.para(0) = "1" And (A3_v.para(1) = "-1" Or A3_v.para(1) = "@1") Then
       If A3_v.value = "0" Then  '两角相等
     '*****************************************************************************************************************
        If last_conditions.last_cond(1).eangle_no Mod 10 = 0 Then
          ReDim Preserve Deangle.av_no(last_conditions.last_cond(1).eangle_no + 10) As Av_no_type
         End If
   last_conditions.last_cond(1).eangle_no = last_conditions.last_cond(1).eangle_no + 1
      Deangle.av_no(last_conditions.last_cond(1).eangle_no).no = no%
       If angle3_value(no%).data(0).data0.ty(0) = 3 And _
          angle(angle3_value(no%).data(0).data0.angle(0)).data(0).poi(1) = _
              angle(angle3_value(no%).data(0).data0.angle(1)).data(0).poi(1) Then
          If angle(angle3_value(no%).data(0).data0.angle(0)).data(0).line_no(1) = _
              angle(angle3_value(no%).data(0).data0.angle(1)).data(0).line_no(0) Then
           Call set_line_eangle_no(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).line_no(1), _
                   no%)
          Else
           Call set_line_eangle_no(angle(angle3_value(no%).data(0).data0.angle(0)).data(0).line_no(0), _
                   no%)
          End If
       End If
       angle3_value(no%).data(0).data0.type = eangle_
     '**************************************************************************************************************
     ElseIf A3_v.value <> "0" Then '两角比
        If last_conditions.last_cond(1).angle_relation_no Mod 10 = 0 Then
          ReDim Preserve angle_relation.av_no(last_conditions.last_cond(1).angle_relation_no + 10) As Av_no_type
        End If
         last_conditions.last_cond(1).angle_relation_no = last_conditions.last_cond(1).angle_relation_no + 1
          angle_relation.av_no(last_conditions.last_cond(1).angle_relation_no).no = no%
          angle3_value(no%).data(0).data0.type = angle_relation_
     End If
   End If
 If A3_v.value <> "0" Then
 ElseIf A3_v.value = "0" Then
  If A3_v.para(0) = "1" And (A3_v.para(1) = "-1" Or A3_v.para(1) = "@1") Then
   Else
   If last_conditions.last_cond(1).angle_relation_no Mod 10 = 0 Then
     ReDim Preserve angle_relation.av_no(last_conditions.last_cond(1).angle_relation_no + 10) As Av_no_type
   End If
   last_conditions.last_cond(1).angle_relation_no = last_conditions.last_cond(1).angle_relation_no + 1
      angle_relation.av_no(last_conditions.last_cond(1).angle_relation_no).no = no%
       angle3_value(no%).data(0).data0.type = angle_relation_
   End If
 Else
  If A3_v.para(0) = "1" And (A3_v.para(1) = "1" Or _
         A3_v.para(1) = "-1" Or A3_v.para(1) = "@1") Then
   If A3_v.para(1) = "1" Then
    If A3_v.value = "90" Then
    ElseIf A3_v.value = "180" Then
    If last_conditions.last_cond(1).two_angle_value_180_no Mod 10 = 0 Then
       ReDim Preserve two_angle_value_180.av_no(last_conditions.last_cond(1).two_angle_value_180_no + 10) As Av_no_type
    End If
     last_conditions.last_cond(1).two_angle_value_180_no = last_conditions.last_cond(1).two_angle_value_180_no + 1
        two_angle_value_180.av_no(last_conditions.last_cond(1).two_angle_value_180_no).no = no%
    End If
    If last_conditions.last_cond(1).two_angle_value_sum_no Mod 10 = 0 Then
      ReDim Preserve two_angle_value_sum.av_no(last_conditions.last_cond(1).two_angle_value_sum_no + 10) As Av_no_type
    End If
     last_conditions.last_cond(1).two_angle_value_sum_no = last_conditions.last_cond(1).two_angle_value_sum_no + 1
       two_angle_value_sum.av_no(last_conditions.last_cond(1).two_angle_value_sum_no).no = no%
   End If
  End If
 End If
Else
   If A3_v.para(0) = "1" And A3_v.para(1) = "1" And A3_v.para(2) = "1" Then
   If last_conditions.last_cond(1).three_angle_value_sum_no Mod 10 = 0 Then
      ReDim Preserve three_angle_value_sum.av_no(last_conditions.last_cond(1).three_angle_value_sum_no + 10) As Av_no_type
   End If
     last_conditions.last_cond(1).three_angle_value_sum_no = last_conditions.last_cond(1).three_angle_value_sum_no + 1
       three_angle_value_sum.av_no(last_conditions.last_cond(1).three_angle_value_sum_no).no = no%
   End If
End If
  If no_reduce = 0 Then 'If draw_or_prove = 0 And re.data0.condition_data.condition_no = 0 Then
   Exit Function
  End If
'*********
set_three_angle_value_mark0:
If regist_data.run_type = 0 Then
If angle3_value(no%).record_.no_reduce = 0 Or _
    angle3_value(no%).record_.no_reduce = 2 Or _
     angle3_value(no%).record_.no_reduce = 4 Then
    Call set_level_(angle3_value(no%).record_.no_reduce, 1)
A3_v = angle3_value(no%).data(0).data0
temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
Call add_conditions_to_record(angle3_value_, no%, 0, 0, temp_record.record_data.data0.condition_data)
If A3_v.value <> "0" Then
 If A3_v.para(1) = "0" Then
  set_three_angle_value = set_property_of_angle_value(A3_v.angle(0), _
        A3_v.value, temp_record, 0, 0)
         If set_three_angle_value > 1 Then
          Exit Function
         End If
        temp_record.record_data.data0.condition_data.condition_no = 2
         temp_record.record_data.data0.condition_data.condition(2).ty = angle3_value_
 ElseIf A3_v.para(2) = "0" Then
     set_three_angle_value = set_angle_value_for_triangle_from_two_angle_value(no%)
       'set_three_angle_value = combine_two_angle_value_for_triangle(no%)
        If set_three_angle_value > 1 Then
         'Exit Function
        End If
   If A3_v.para(0) = "1" _
         And A3_v.para(1) = "1" Then
   set_three_angle_value = set_property_of_two_angle_value( _
    A3_v.angle(0), A3_v.angle(1), _
      A3_v.para(0), A3_v.para(1), _
       A3_v.value, temp_record, False, no_reduce)
       If set_three_angle_value > 1 Then
        Exit Function
       End If
   ElseIf A3_v.value = "180" Then
    If A3_v.para(0) = "1" And A3_v.para(1) = "2" Then
      If ty = 15 Or ty = 16 Then
       set_three_angle_value = set_property_of_eangle(0, A3_v.angle(1), n_(1), 0, 0, 0, 0, temp_record, 0)
        If set_three_angle_value > 1 Then
         Exit Function
        End If
     End If
   ElseIf A3_v.para(0) = "2" _
         And A3_v.para(1) = "1" Then
     If ty = 15 Or ty = 16 Then
      set_three_angle_value = set_property_of_eangle(0, A3_v.angle(0), n_(1), 0, 0, 0, 0, temp_record, 0)
       If set_three_angle_value > 1 Then
        Exit Function
       End If
     End If
    End If
   End If
 End If
Else
 If A3_v.para(2) = "0" Then
      ' set_three_angle_value = combine_two_angle_value_for_triangle(no%)
       ' If set_three_angle_value > 1 Then
        ' Exit Function
        'End If
 If A3_v.para(0) = "1" And (A3_v.para(1) = "-1" Or A3_v.para(1) = "@1") Then
   set_three_angle_value = combine_eangle_with_item0(no%, no_reduce)
      If set_three_angle_value > 1 Then
       Exit Function
      End If
   Call combine_two_angle(A3_v.angle(0), A3_v.angle(1), 0, tA(0), tA(2), 0, tA(1), 0, ty, 0, 1)
   If ty = 15 Then
     If angle(tA(2)).data(0).value <> "" Then
      temp_record.record_data.data0.condition_data.condition_no = 0
      Call add_conditions_to_record(angle3_value_, no%, angle(tA(2)).data(0).value_no, 0, _
              temp_record.record_data.data0.condition_data)
      temp_record.record_data.data0.theorem_no = 1
       t_s$ = minus_string("180", angle(tA(2)).data(0).value, True, False)
        t_s$ = divide_string(t_s$, "2", True, False)
      set_three_angle_value = set_angle_value(tA(0), t_s$, temp_record, 0, 0, False)
       If set_three_angle_value > 1 Then
        Exit Function
       End If
      set_three_angle_value = set_angle_value(tA(1), t_s$, temp_record, 0, 0, False)
       If set_three_angle_value > 1 Then
        Exit Function
       End If
     End If
   End If
   set_three_angle_value = set_property_of_eangle(A3_v.ty_(0), A3_v.angle(0), _
     A3_v.angle(1), A3_v.angle_(3), tA(0), tA(1), tA(2), temp_record, 0)
      If set_three_angle_value > 1 Then
       Exit Function
      End If
  End If
 Else
 End If
End If
End If
set_three_angle_value_combine:
 If angle3_value(no%).record_.no_reduce < 2 And angle3_value(no%).data(0).data0.reduce = True Then
  'If angle3_value(no%).data(0).record.data0.level < 4 Then
     Call set_level_(angle3_value(no%).record_.no_reduce, 2)
    'If angle3_value(no%).data(0).data0.type = angle_value_ Or _
      angle3_value(no%).data(0).data0.type = eangle_ Or _
       angle3_value(no%).data(0).data0.type = angle_relation_ Or _
        angle3_value(no%).data(0).data0.type = two_angle_value_sum_ Then
   'no_reduce = 0
   set_three_angle_value = combine_three_angle_with_three_angle(no%, no_reduce)
   If set_three_angle_value > 1 Then
    Exit Function
   End If
   set_three_angle_value = combine_angle3_value_with_item(no%)
   If set_three_angle_value > 1 Then
    Exit Function
   End If
 End If
 Exit Function
set_three_angle_value_error:
set_three_angle_value = 0
If set_new_data Then
last_conditions.last_cond(1).angle3_value_no = temp_no%
For i% = 1 To temp_no%
angle3_value(i%).data(0).record.data1.index = _
   angle3_value(i%).record_.index
Next i%
End If
ElseIf angle3_value(no%).data(0).record.data0.condition_data.condition_no = 0 Then 'run_type=1
End If
End Function

Public Sub prove_by_hand(no%) 'wenti_no%
Dim i%
Dim A(1) As Integer
Dim ty As Boolean
Dim tn%, dn%, tn1%
Dim ty1 As Byte
Dim ty2 As Byte
Dim ty3 As Boolean
Dim n(7) As Integer
Dim tl(7) As Integer
Dim v As String
Dim con_ty(1) As Byte
Dim temp_record As total_record_type
Dim s$
Dim c_data As condition_data_type
For i% = 0 To 50
If C_display_wenti.m_condition(no%, i%) <> empty_char Then
 Call C_display_wenti.set_m_point_no(no%, _
        point_number(C_display_wenti.m_condition(no%, i%)), i%, True)
End If
Next i%
Select Case C_display_wenti.m_no(no%)
Case -30
record_0.data0.condition_data.condition_no = 0 ' record0
ty1 = is_three_point_on_line(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), tn%, -1000, _
   0, 0, record_0.data0.condition_data, 0, 0, 0)
If ty1 > 0 Then
 If three_point_on_line(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 1 Then
   ty3 = set_three_point_on_line(C_display_wenti.m_point_no(no%, 0), _
   C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
    temp_record, 0, 0, 0)
  ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If
Case 26
ty = is_mid_point(C_display_wenti.m_point_no(no%, 1), _
  C_display_wenti.m_point_no(no%, 0), C_display_wenti.m_point_no(no%, 2), _
   0, 0, 0, 0, tn%, -1000, 0, 0, 0, 0, 0, 0, Dmid_point_data0, _
     "", con_ty(0), tn1%, 0, c_data)
If ty Then
If con_ty(0) = midpoint_ Then
 If Dmid_point(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf Dmid_point(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf Dmid_point(tn%).data(0).record.data1.is_proved = 1 Then
 ty3 = set_mid_point(C_display_wenti.m_point_no(no%, 1), _
  C_display_wenti.m_point_no(no%, 0), C_display_wenti.m_point_no(no%, 2), _
   0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0)
  ty2 = 2
 Else
  ty2 = 1
 End If
 End If
Else
ty2 = 0
End If
 
  

Case 32
record_0.data0.condition_data.condition_no = 0 'record0
ty = is_point_pair(C_display_wenti.m_point_no(no%, 0), C_display_wenti.m_point_no(no%, 1), _
         C_display_wenti.m_point_no(no%, 2), C_display_wenti.m_point_no(no%, 3), _
          C_display_wenti.m_point_no(no%, 4), C_display_wenti.m_point_no(no%, 5), _
           C_display_wenti.m_point_no(no%, 6), C_display_wenti.m_point_no(no%, 7), _
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _
             tn%, -1000, 0, 0, 0, 0, 0, dp_data0, ty1, 0, 0, _
               con_ty(0), con_ty(1), 0, 0, 0, 0, "", "", record_0)
If ty And tn% > 0 Then
 If Ddpoint_pair(tn%).data(0).record.data1.is_proved = 3 Then
   ty2 = 4
 ElseIf Ddpoint_pair(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf Ddpoint_pair(tn%).data(0).record.data1.is_proved = 1 Then
  ty3 = set_dpoint_pair(C_display_wenti.m_point_no(no%, 0), _
   C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
    C_display_wenti.m_point_no(no%, 3), C_display_wenti.m_point_no(no%, 4), _
      C_display_wenti.m_point_no(no%, 5), C_display_wenti.m_point_no(no%, 6), _
       C_display_wenti.m_point_no(no%, 7), 0, 0, 0, 0, 0, 0, 0, _
        0, 0, 0, 0, 0, 0, temp_record, True, 0, 0, 0, 0, False)
 ' Ddpoint_pair(tn%).data(0).record.is_proved = 2
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If
tl(0) = line_number0(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), 0, 0)
tl(1) = line_number0(C_display_wenti.m_point_no(no%, 2), _
 C_display_wenti.m_point_no(no%, 3), 0, 0)
 
Case -33
ty = is_dverti(tl(0), tl(1), tn%, -1000, 0, 0, 0, 0)
If ty Then
 If Dverti(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf Dverti(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf Dverti(tn%).data(0).record.data1.is_proved = 1 Then
 ty3 = set_dverti(tl(0), tl(1), temp_record, 0, 0, False)
 ' Dverti(tn%).data(0).record.is_proved = 2
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If
Case -32
tl(0) = line_number0(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), 0, 0)
tl(1) = line_number0(C_display_wenti.m_point_no(no%, 2), _
 C_display_wenti.m_point_no(no%, 3), 0, 0)

ty = is_dparal(tl(0), tl(1), tn%, -1000, 0, 0, 0, 0)
If ty Then
 If Dparal(tn%).data(0).data0.record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf Dparal(tn%).data(0).data0.record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf Dparal(tn%).data(0).data0.record.data1.is_proved = 1 Then
 ty3 = set_dparal(tl(0), tl(1), temp_record, 0, 0, False)
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If

Case -1
record_0.data0.condition_data.condition_no = 0 ' record0
ty = is_equal_dline(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
  C_display_wenti.m_point_no(no%, 3), 0, 0, 0, 0, 0, 0, tn%, -1000, 0, 0, 0, _
     eline_data0, 0, 0, 0, "", record_0.data0.condition_data)
If ty And tn% > 0 Then
 If Deline(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf Deline(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf Deline(tn%).data(0).record.data1.is_proved = 1 Then
  ty3 = set_equal_dline(C_display_wenti.m_point_no(no%, 0), _
   C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
    C_display_wenti.m_point_no(no%, 3), 0, 0, 0, 0, 0, 0, 0, _
     temp_record, 0, 0, 0, 0, 0, False)
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If
  
Case -6
dn% = 2
v = ""
While C_display_wenti.m_condition(no%, dn%) > empty_char
v = v + C_display_wenti.m_condition(no%, dn%)
dn% = dn% + 1
Wend


ty = is_line_value(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), 0, 0, 0, v, tn%, -1000, 0, 0, 0, _
       line_value_data0)
If ty = 1 And line_value(tn%).data(0).data0.value = v Then
 If line_value(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf line_value(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf line_value(tn%).data(0).record.data1.is_proved = 1 Then
 ty3 = set_line_value(C_display_wenti.m_point_no(no%, 0), _
  C_display_wenti.m_point_no(no%, 1), v, 0, 0, 0, temp_record, 0, 0, False)
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If


Case -7
dn% = 4
v = ""
While C_display_wenti.m_condition(no%, dn%) > empty_char
v = v + C_display_wenti.m_condition(no%, dn%)
dn% = dn% + 1
Wend
record_0.data0.condition_data.condition_no = 0 ' record0
ty = is_relation(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
  C_display_wenti.m_point_no(no%, 3), 0, 0, 0, 0, 0, 0, "", tn%, -1000, _
   0, 0, 0, relation_data0, 0, 0, cond_type, record0.data0.condition_data, 0)
If ty And tn% > 0 And _
   Drelation(tn%).data(0).data0.value = v Then
 If Drelation(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf Drelation(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf Drelation(tn%).data(0).record.data1.is_proved = 1 Then
  ty3 = set_Drelation(C_display_wenti.m_point_no(no%, 0), _
   C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
    C_display_wenti.m_point_no(no%, 3), 0, 0, 0, 0, 0, 0, v, temp_record, _
     0, 0, 0, 0, 0, False)
 ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If

Case -34
dn% = 4
v = ""
While C_display_wenti.m_condition(no%, dn%) > empty_char
v = v + C_display_wenti.m_condition(no%, dn%)
dn% = dn% + 1
Wend

'ty = is_two_line_value(c_display_wenti.m_point_no(no%,0), _
 c_display_wenti.m_point_no(no%,1), c_display_wenti.m_point_no(no%,2), tn%)
If ty Then
 If three_point_on_line(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 1 Then
  three_point_on_line(tn%).data(0).record.data1.is_proved = 2
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If

Case -35
record_0.data0.condition_data.condition_no = 0 ' record0
ty1 = is_three_point_on_line(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), tn%, _
  -1000, 0, 0, record_0.data0.condition_data, 0, 0, 0)
If ty1 > 0 Then
 If three_point_on_line(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4

 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 1 Then
  three_point_on_line(tn%).data(0).record.data1.is_proved = 2
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If

Case 23
ty = is_four_point_on_circle(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
  C_display_wenti.m_point_no(no%, 3), tn%, -1000, 0, 0, 0, 0, 0, 0, _
    0, 0, 0, p4_on_C, False)
If ty Then
 If four_point_on_circle(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf four_point_on_circle(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf four_point_on_circle(tn%).data(0).record.data1.is_proved = 1 Then
 
 ty3 = set_four_point_on_circle(C_display_wenti.m_point_no(no%, 0), _
  C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
   C_display_wenti.m_point_no(no%, 3), 0, temp_record, 0, 0)
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If

Case 33
ty = is_similar_triangle(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
  C_display_wenti.m_point_no(no%, 3), C_display_wenti.m_point_no(no%, 4), _
   C_display_wenti.m_point_no(no%, 5), tn%, -1000, 0, 0, _
     two_triangle0, record_0, 0)
If ty Then
If tn% > 0 Then
If Dsimilar_triangle(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf Dsimilar_triangle(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf Dsimilar_triangle(tn%).data(0).record.data1.is_proved = 1 Then
ty = set_similar_triangle(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
  C_display_wenti.m_point_no(no%, 3), C_display_wenti.m_point_no(no%, 4), _
   C_display_wenti.m_point_no(no%, 5), temp_record, 0, 0, 1)
  Dsimilar_triangle(tn%).data(0).record.data1.is_proved = 2
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If
ElseIf tn% < 0 Then
If Dtotal_equal_triangle(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf Dtotal_equal_triangle(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf Dtotal_equal_triangle(tn%).data(0).record.data1.is_proved = 1 Then
ty = set_total_equal_triangle(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
  C_display_wenti.m_point_no(no%, 3), C_display_wenti.m_point_no(no%, 4), _
   C_display_wenti.m_point_no(no%, 5), temp_record, 0, 0)
  Dtotal_equal_triangle(tn%).data(0).record.data1.is_proved = 2
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If


Case 34
ty = is_total_equal_triangle1(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
  C_display_wenti.m_point_no(no%, 3), C_display_wenti.m_point_no(no%, 4), _
   C_display_wenti.m_point_no(no%, 5), tn%, -1000, 0, 0, _
    two_triangle0, record_0, 0)
If ty Then
 If Dtotal_equal_triangle(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf Dtotal_equal_triangle(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf Dtotal_equal_triangle(tn%).data(0).record.data1.is_proved = 1 Then
 ty = set_total_equal_triangle(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), _
  C_display_wenti.m_point_no(no%, 3), C_display_wenti.m_point_no(no%, 4), _
   C_display_wenti.m_point_no(no%, 5), temp_record, 0, 0)
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If

Case -5
dn% = 3
v = ""
While C_display_wenti.m_condition(no%, dn%) > empty_char
v = v + C_display_wenti.m_condition(no%, dn%)
dn% = dn% + 1
Wend
A(0) = angle_number(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), 0, 0)
If is_angle_value(Abs(A(0)), angle3_value(tn%).data(0).data0.value, _
          angle3_value(tn%).data(0).data0.value_, tn%, record_0.data0.condition_data) Then
'If ty And angle3_value(tn%).data(0).data0.value = v Then
 If angle3_value(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf angle3_value(tn%).data(0).record.data1.is_proved = 2 Then
  ty2 = 3
 ElseIf angle3_value(tn%).data(0).record.data1.is_proved = 1 Then
  angle3_value(tn%).data(0).record.data1.is_proved = 2
   ty3 = set_angle_value(Abs(A(0)), v, temp_record, 0, 0, False)
    ty2 = 2
 Else
  ty2 = 1
 End If
Else
 
End If

Case -4
A(0) = angle_number(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), 0, 0)
A(1) = angle_number(C_display_wenti.m_point_no(no%, 3), _
 C_display_wenti.m_point_no(no%, 4), C_display_wenti.m_point_no(no%, 5), 0, 0)

ty = is_equal_angle(Abs(A(0)), Abs(A(1)), tn%, 0)
If ty And tn% > 0 Then
 If angle3_value(tn%).data(0).record.data1.is_proved = 3 Then
  
 ElseIf angle3_value(tn%).data(0).record.data1.is_proved = 2 Then
  
 ElseIf angle3_value(tn%).data(0).record.data1.is_proved = 1 Then
ty = set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, _
   "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 5, 0, 0, False)
   
 Else
  
 End If
Else
 ty2 = 0
End If

Case -38
record_0.data0.condition_data.condition_no = 0 'record0
ty1 = is_three_point_on_line(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), tn%, _
  -1000, 0, 0, record_0.data0.condition_data, 0, 0, 0)
If ty1 > 0 Then
 If three_point_on_line(tn%).data(0).record.data1.is_proved = 3 Then
  ty2 = 4
 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 2 Then
  
 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 1 Then
  three_point_on_line(tn%).data(0).record.data1.is_proved = 2
   
 Else
  
 End If
Else
 ty2 = 0
End If

Case -39
record_0.data0.condition_data.condition_no = 0 'record0
ty1 = is_three_point_on_line(C_display_wenti.m_point_no(no%, 0), _
 C_display_wenti.m_point_no(no%, 1), C_display_wenti.m_point_no(no%, 2), tn%, _
   -1000, 0, 0, record_0.data0.condition_data, 0, 0, 0)
If ty > 0 Then
 If three_point_on_line(tn%).data(0).record.data1.is_proved = 3 Then
   ty2 = 4
 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 2 Then
  
 ElseIf three_point_on_line(tn%).data(0).record.data1.is_proved = 1 Then
  three_point_on_line(tn%).data(0).record.data1.is_proved = 2
   ty2 = 2
 Else
  ty2 = 1
 End If
Else
 ty2 = 0
End If

End Select
If ty2 = 0 Then
s$ = LoadResString_(1880, "")
ElseIf ty2 = 1 Then
s$ = LoadResString_(1885, "")
ElseIf ty2 = 2 Then
s$ = LoadResString_(1890, "")
ElseIf ty2 = 3 Then
s$ = LoadResString_(1695, "")
ElseIf ty2 = 4 Then
If problem_type = False Then
s$ = LoadResString_(1700, "") + "!"
End If
End If
        Wenti_form.CurrentY = 20 * (no% + 4)
Wenti_form.Picture1.Print s$
If ty2 < 4 Then

  While next_step_of_profe = False 'wait_for_draw_point
     DoEvents
      Wend
ElseIf ty2 = 4 Then
Exit Sub
End If
If ty2 <> 2 Then
'     Call C_display_wenti.display_m_input_condi(Wenti_form.Picture1, 0, _
        wenti_no, wenti_no + 3, 0, 0)
For i% = 0 To 50
Call C_display_wenti.set_m_condition(no%, empty_char, i%)
Call C_display_wenti.set_m_point_no(no%, 0, i%, False)
Next i%
End If
        Wenti_form.Picture1.CurrentY = 20 * (no% + 4)
         Wenti_form.Picture1.CurrentX = 60
          Call SetTextColor(Wenti_form.Picture1.hdc, QBColor(15))
Wenti_form.Picture1.Print s$
End Sub


Public Function set_arc_value(ByVal Ar%, ByVal v As String, _
 re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
Dim i%, j%, k%, l%, m%, n%, deg%, tn%, temp_no%
Dim tA(3) As Integer
Dim s(3) As Integer
Dim la(3) As Integer
Dim st(3) As Integer
Dim tp(3) As Integer
Dim tl(3) As Integer
Dim level As Byte
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim ty As Boolean
Dim set_new_data As Boolean
Dim prove_type As Byte
Dim str As String
'On Error GoTo set_arc_value_error
'If poi(p1%).data(0).no_reduce = True Or poi(p2%).data(0).no_reduce = True Or no_reduce = 255 Then
' Exit Function
'End If
If InStr(1, v, "F", 0) > 0 Then
 Exit Function
End If
Call simple_string(v)
display_inform = 0
If no% > 0 Then
 If arc_value(no%).record_.no_reduce > 2 Then
  Exit Function
 Else
  GoTo set_arc_value_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
End If
'************************************************************
temp_record.record_data = re.record_data
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_arc_value(Ar%, v, no%) Then
 If no% > 0 And run_type < 10 Then
 temp_record1.record_data = re.record_data
  'Call add_conditions_to_record(arc_value_, no%, 0, 0, _
           temp_record1.record_data.data0.condition_data)
  set_arc_value = set_string_value_(arc_value(no%).data(0).value, _
                       v, arc_value_, no%, temp_record1.record_data, no_reduce)
If set_arc_value > 1 Then
 Exit Function
End If
 level = arc_value(no%).data(0).record.data0.condition_data.level
 If set_prove_type(arc_value_, no%, temp_record.record_data, _
     arc_value(no%).data(0).record) Then
     Call simple_record(arc_value_, no%, arc_value(no%).data(0).record.data0.condition_data.level, level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
      set_arc_value = 0
      Exit Function
     Else
      no_reduce = 2
        GoTo set_arc_value_mark_0
     End If
 End If
 End If
 If set_or_prove < 2 Then
  If no_reduce = 0 Then
   no% = 0
  End If
       set_arc_value = 0
        Exit Function
  Else
   If display_inform = 1 Then
    If conclusion_data(0).ty = arc_value_ And conclusion_data(0).no(0) = no% Then
   prove_type = 4
    event_statue = complete_prove
  End If
   Call display_prove_inform(modify_wenti_no, display)
    Else
   Exit Function
   End If
   End If
   Exit Function
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_arc_value = 0
  'If re.condition_data.condition_no = 255 Then
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
  'End If
    Exit Function
   End If
End If
 '***************************************************
 temp_no% = last_conditions.last_cond(1).arc_value_no
 For i% = 1 To temp_no%
 arc_value(i%).record_.index = arc_value(i%).data(0).record.data1.index
 Next i%
 If last_conditions.last_cond(1).arc_value_no Mod 10 = 0 Then
   ReDim Preserve arc_value(last_conditions.last_cond(1).arc_value_no + 10) As arc_value_type
 End If
 last_conditions.last_cond(1).arc_value_no = last_conditions.last_cond(1).arc_value_no + 1
 set_new_data = True
    arc_value(last_conditions.last_cond(1).arc_value_no).data(0) = arc_value_data_0
    arc_value(last_conditions.last_cond(1).arc_value_no).data(0).arc = Ar%
      arc_value(last_conditions.last_cond(1).arc_value_no).data(0).value = v
       arc_value(last_conditions.last_cond(1).arc_value_no).data(0).record = temp_record.record_data
        arc_value(last_conditions.last_cond(1).arc_value_no).record_ = re.record_
         arc_value(last_conditions.last_cond(1).arc_value_no).record_.no_reduce = 0
 For i% = last_conditions.last_cond(1).arc_value_no To no% + 2 Step -1
 arc_value(i%).data(0).record.data1.index.i(0) = arc_value(i% - 1).data(0).record.data1.index.i(0)
 Next i%
 arc_value(no% + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).arc_value_no
  no% = last_conditions.last_cond(1).arc_value_no
 If last_conditions_for_aid_no > 0 Then
  If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
   If tp(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       tp(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
    last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
   End If
  End If
 End If
set_arc_value = set_prove_proccess(LoadResString_(1550, "\\1\\" + _
          m_poi(tp(0)).data(0).data0.name + m_poi(tp(1)).data(0).data0.name + "\\2\\" + display_string_(v, 0)), _
            arc_value_, no%, arc_value(no%).data(0).record.display_string)
        If set_arc_value > 1 Then
             Exit Function
        End If
If no_reduce = 0 Then
 Exit Function
End If
set_arc_value_mark0:
'************************************************************
If arc_value(no%).record_.no_reduce = 0 Then
set_arc_value_mark_0:
       arc_value(no%).record_.no_reduce = 255
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
       Call set_level_(arc_value(no%).record_.no_reduce, 1)
temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
 Call add_conditions_to_record(arc_value_, no%, 0, 0, temp_record.record_data.data0.condition_data)
      temp_record.record_data.data0.theorem_no = 1
'****************************************************************
If th_chose(126).chose = 1 Then
     temp_record.record_data.data0.theorem_no = 126
    set_arc_value = set_angle_value(Abs(angle_number( _
       arc(arc_value(no%).data(0).arc).data(0).poi(0), _
        m_Circ(arc(arc_value(no%).data(0).arc).data(0).cir).data(0).data0.center, _
         arc(arc_value(no%).data(0).arc).data(0).poi(1), 0, 0)), _
          v, temp_record, 0, no_reduce, False)
    If set_arc_value > 1 Then
     Exit Function
    End If
End If
For i% = 1 To last_conditions.last_cond(1).arc_value_no
 If i% <> no% And arc_value(i%).data(0).value = v And _
      arc(arc_value(i%).data(0).arc).data(0).cir = arc(arc_value(no%).data(0).arc).data(0).cir Then
  temp_record.record_data.data0.condition_data.condition_no = 2
   temp_record.record_data.data0.condition_data.condition(2).ty = arc_value_
    temp_record.record_data.data0.condition_data.condition(2).no = i%
     temp_record.record_data.data0.theorem_no = 1
 set_arc_value = set_equal_arc(arc_value(no%).data(0).arc, arc_value(i%).data(0).arc, _
       temp_record, 0, no_reduce)
 If set_arc_value > 1 Then
         Exit Function
 End If
End If
Next i%
End If
Exit Function
set_arc_value_error:
set_arc_value = 0
If set_new_data Then
last_conditions.last_cond(1).arc_value_no = temp_no%
For i% = 1 To temp_no%
arc_value(i%).data(0).record.data1.index = arc_value(i%).record_.index
Next i%
End If
set_arc_value = combine_equal_arc_with_arc_value(0, no%)
End Function

Public Function set_equal_arc(ByVal arc1%, ByVal arc2%, _
    re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
Dim i%, j%
Dim n_(1) As Integer
Dim tAr(1) As Integer
Dim tp1(2) As Integer
Dim tp2(2) As Integer
Dim t(1) As Byte
Dim p(1) As Long
Dim A(1) As Integer
Dim prove_type As Byte
Dim ts$
Dim dn(2) As Integer
Dim level As Byte
Dim cond_ty As Byte
Dim ty As Boolean
Dim dr_data As relation_data0_type
Dim c_data As condition_data_type
Dim temp_record As total_record_type
If no_reduce = 255 Then
 Exit Function
End If
display_inform = 0
If no% = 0 And (arc1% = 0 Or arc2% = 0 Or arc1% = arc2%) Then
 Exit Function
ElseIf no% > 0 Then
 If equal_arc(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_equal_arc_mark0
 End If
ElseIf no% = -1 Then
display_inform = 1
End If
'*************************************
Call set_level(re.record_data.data0.condition_data)
If is_equal_arc(arc1%, arc2%, tAr(0), tAr(1), _
    no%, n_(0), n_(1)) Then
 If no% > 0 And run_type < 10 Then
 level = set_level(equal_arc(no%).data(0).record.data0.condition_data)
  If set_prove_type(equal_arc_, no%, re.record_data, _
       equal_arc(no%).data(0).record) And set_or_prove < 2 Then
     Call simple_record(equal_arc_, no%, equal_arc(no%).data(0).record.data0.condition_data.level, level)
     If no_reduce = 0 Then 'Or run_type = 1 Then
      set_equal_arc = 0
      Exit Function
     Else
      no_reduce = 2
        GoTo set_equal_arc_mark_0
     End If
  End If
  End If
  If set_or_prove < 2 Then
  If no_reduce = 0 Then
   no% = 0
  End If
       set_equal_arc = 0
   Exit Function
  Else
   If display_inform = 1 Then
    If conclusion_data(0).ty = equal_arc_ And conclusion_data(0).no(0) = no% Then
     prove_type = 4
     event_statue = complete_prove
   End If
       Call display_prove_inform(modify_wenti_no, display)
  Else
   Exit Function
   End If
  End If
Exit Function
Else
  If set_or_prove = 2 Then
   set_equal_arc = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
    Exit Function
  End If
End If
 
'If set_or_prove = 0 Then
If last_conditions.last_cond(1).equal_arc_no Mod 10 = 0 Then
ReDim Preserve equal_arc(last_conditions.last_cond(1).equal_arc_no + 10) As equal_arc_type
End If
last_conditions.last_cond(1).equal_arc_no = last_conditions.last_cond(1).equal_arc_no + 1
equal_arc(last_conditions.last_cond(1).equal_arc_no).data(0) = equal_arc_data_0
equal_arc(last_conditions.last_cond(1).equal_arc_no).data(0).arc(0) = tAr(0)
equal_arc(last_conditions.last_cond(1).equal_arc_no).data(0).arc(1) = tAr(1)
equal_arc(last_conditions.last_cond(1).equal_arc_no).data(0).record = re.record_data
equal_arc(last_conditions.last_cond(1).equal_arc_no).record_ = re.record_
equal_arc(last_conditions.last_cond(1).equal_arc_no).record_.no_reduce = 0
For j% = 0 To 1
For i% = last_conditions.last_cond(1).equal_arc_no To n_(j%) + 2 Step -1
 equal_arc(i%).data(0).record.data1.index.i(j%) = equal_arc(i% - 1).data(0).record.data1.index.i(j%)
Next i%
 equal_arc(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).equal_arc_no
Next j%
  no% = last_conditions.last_cond(1).equal_arc_no
If last_conditions_for_aid_no > 0 Then
 If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
  If tAr(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).arc_no And _
      tAr(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).arc_no Then
   last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  End If
 End If
End If
ts$ = LoadResString_from_inpcond(-24, "\\0\\" + m_poi(arc(tAr(0)).data(0).poi(0)).data(0).data0.name + _
         "\\1\\" + m_poi(arc(tAr(0)).data(0).poi(1)).data(0).data0.name + _
          "\\2\\" + m_poi(arc(tAr(1)).data(0).poi(0)).data(0).data0.name + _
           "\\3\\" + m_poi(arc(tAr(1)).data(0).poi(1)).data(0).data0.name)
set_equal_arc = set_prove_proccess(ts$, equal_arc_, no%, equal_arc(no%).data(0).record.display_string)
If set_equal_arc > 1 Then
  Exit Function
End If
If no_reduce = 0 Then
 Exit Function
End If
set_equal_arc_mark0:
If equal_arc(no%).record_.no_reduce = 0 Then
set_equal_arc_mark_0:
         equal_arc(no%).record_.no_reduce = 255
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
       Call set_level_(equal_arc(no%).record_.no_reduce, 1)
temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.condition_data.condition(1).ty = equal_arc_
  temp_record.record_data.data0.condition_data.condition(1).no = no%
If arc(equal_arc(no%).data(0).arc(0)).data(0).cir <> arc(equal_arc(no%).data(0).arc(1)).data(0).cir And _
    arc(equal_arc(no%).data(0).arc(0)).data(0).cir > 0 And arc(equal_arc(no%).data(0).arc(1)).data(0).cir > 0 Then
 If m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.center > 0 And _
      m_Circ(arc(equal_arc(no%).data(0).arc(1)).data(0).cir).data(0).data0.center > 0 Then
  If is_relation(m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.center, _
                  m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(1), _
                   m_Circ(arc(equal_arc(no%).data(0).arc(1)).data(0).cir).data(0).data0.center, _
                    m_Circ(arc(equal_arc(no%).data(0).arc(1)).data(0).cir).data(0).data0.in_point(1), _
                     0, 0, 0, 0, 0, 0, ts$, dn(0), -1000, 0, 0, 0, dr_data, dn(1), dn(1), cond_ty, _
                       c_data, 0) Then
    Call add_conditions_to_record(cond_ty, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
     set_equal_arc = set_angle_relation(Abs(angle_number(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0), _
            m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.center, _
              arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1), "", 0)), _
                Abs(angle_number(arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0), _
            m_Circ(arc(equal_arc(no%).data(0).arc(1)).data(0).cir).data(0).data0.center, _
                arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1), "", 0)), "1", ts$, _
                   temp_record, 0, 0, False)
             If set_equal_arc > 1 Then
                Exit Function
             End If
  End If
 End If
Else
If th_chose(123).chose = 1 Then '垂径定理三,平分弦(弧)的直径垂直弦
  tp1(1) = m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.center
  If tp1(1) > 0 Then
  If arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0) = arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0) Then
   tp1(0) = arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0)
   tp2(0) = arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1)
   tp2(1) = arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1)
  ElseIf arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0) = arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1) Then
   tp1(0) = arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0)
   tp2(0) = arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1)
   tp2(1) = arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0)
  ElseIf arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1) = arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0) Then
   tp1(0) = arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1)
   tp2(0) = arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0)
   tp2(1) = arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1)
  ElseIf arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1) = arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1) Then
   tp1(0) = arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1)
   tp2(0) = arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0)
   tp2(1) = arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0)
  Else
   GoTo set_equal_arc_mark10
  End If
  temp_record.record_data.data0.theorem_no = 123
  set_equal_arc = set_dverti(line_number0(tp1(0), tp1(1), 0, 0), _
        line_number0(tp2(0), tp2(1), 0, 0), temp_record, 0, no_reduce, False)
  If set_equal_arc > 1 Then
   Exit Function
  End If
set_equal_arc_mark10:
End If
End If
If th_chose(123).chose = 1 Then
If arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0) <> arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1) And _
   arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1) <> arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0) Then
    Call add_conditions_to_record(equal_arc_, no%, 0, 0, temp_record.record_data.data0.condition_data)
     temp_record.record_data.data0.theorem_no = 123
      tAr(0) = angle_number(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1), _
                 arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1), _
                  arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0), "", 0)
      tAr(1) = angle_number(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1), _
                 arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0), _
                  arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0), "", 0)
      If (tAr(0) > 0 And tAr(1) > 0) Or (tAr(0) < 0 And tAr(1) < 0) Then
      set_equal_arc = set_dparal(line_number0(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0), _
          arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1), 0, 0), line_number0( _
           arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1), arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0), _
            0, 0), temp_record, 0, 0, False)
             If set_equal_arc > 1 Then
                Exit Function
             End If
      ElseIf (tAr(0) > 0 And tAr(1) < 0) Or (tAr(0) < 0 And tAr(1) > 0) Then
      set_equal_arc = set_dparal(line_number0(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0), _
          arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0), 0, 0), line_number0( _
           arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1), arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1), _
            0, 0), temp_record, 0, 0, False)
             If set_equal_arc > 1 Then
                Exit Function
             End If
      End If
End If
End If
If th_chose(24).chose = 1 Then
temp_record.record_data.data0.theorem_no = 95
set_equal_arc = _
  set_equal_dline(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0), _
    arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1), _
     arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0), _
      arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1), _
       0, 0, 0, 0, 0, 0, 0, temp_record, 0, _
        0, 0, 0, no_reduce, False)
If set_equal_arc > 1 Then
 Exit Function
End If
'End If
If arc(equal_arc(no%).data(0).arc(0)).data(0).cir = arc(equal_arc(no%).data(0).arc(1)).data(0).cir And _
    th_chose(126).chose = 1 Then
    temp_record.record_data.data0.theorem_no = 126
 A(0) = Abs(angle_number(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0), _
  m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.center, _
   arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1), 0, 0))
  A(1) = Abs(angle_number(arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0), _
  m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.center, _
   arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1), 0, 0))
If A(0) > 0 And A(1) > 0 Then
set_equal_arc = _
  set_three_angle_value(A(0), A(1), 0, "1", "-1", "0", "0", _
     0, temp_record, 0, 0, 0, 5, 0, 0, False)
 If set_equal_arc > 1 Then
 Exit Function
 End If
End If
End If
temp_record.record_data.data0.theorem_no = 80
For i% = 1 To m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(0)
  If m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(i%) <> _
       arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0) And _
        m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(i%) <> _
         arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1) And _
          m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(i%) <> _
           arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1) And _
            m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(i%) <> _
             arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1) Then
 For j% = 1 To m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(0)
  If m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(j%) <> _
       arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0) And _
        m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(j%) <> _
         arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1) And _
          m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(j%) <> _
           arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1) And _
            m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(j%) <> _
             arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1) Then
  p(0) = P_diffrence(m_poi(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0)).data(0).data0.coordinate, _
                      m_poi(m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(i%)).data(0).data0.coordinate, _
                       m_poi(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1)).data(0).data0.coordinate)
  p(1) = P_diffrence(m_poi(arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0)).data(0).data0.coordinate, _
                      m_poi(m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(j%)).data(0).data0.coordinate, _
                       m_poi(arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1)).data(0).data0.coordinate)
 If (p(0) > 0 And p(1) > 0) Or (p(0) < 0 And p(1) < 0) Then
  A(0) = Abs(angle_number(arc(equal_arc(no%).data(0).arc(0)).data(0).poi(0), _
  m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(i%), _
   arc(equal_arc(no%).data(0).arc(0)).data(0).poi(1), 0, 0))
   A(1) = Abs(angle_number(arc(equal_arc(no%).data(0).arc(1)).data(0).poi(0), _
  m_Circ(arc(equal_arc(no%).data(0).arc(0)).data(0).cir).data(0).data0.in_point(j%), _
   arc(equal_arc(no%).data(0).arc(1)).data(0).poi(1), 0, 0))
If A(0) > 0 And A(1) > 0 Then
 set_equal_arc = _
  set_three_angle_value(A(0), A(1), 0, "1", "-1", "0", "0", _
       0, temp_record, 0, 0, 0, 5, 0, 0, False)
 If set_equal_arc > 1 Then
 Exit Function
 End If
End If
End If
End If
Next j%
End If
Next i%
End If
'temp_record.record_data.data0.theorem_no = 1
'For i% = 1 To last_conditions.last_cond(1).equal_arc_no
 'If i% <> no% Then
  'temp_record.record_data.data0.condition_data.condition_no = 2
   'temp_record.record_data.data0.condition_data.condition(2).ty = equal_arc_
    'temp_record.record_data.data0.condition_data.condition(2).no = i%
  'If equal_arc(i%).data(0).arc(0) = equal_arc(no%).data(0).arc(0) Then
  ' set_equal_arc = set_equal_arc( _
   ' equal_arc(i%).data(0).arc(1), equal_arc(no%).data(0).arc(1), _
   '   temp_record, 0, no_reduce)
   'If set_equal_arc > 1 Then
   '   Exit Function
   'End If
  'ElseIf equal_arc(i%).data(0).arc(0) = equal_arc(no%).data(0).arc(1) Then
   ' set_equal_arc = set_equal_arc( _
    '' equal_arc(i%).data(0).arc(1), _
      'equal_arc(no%).data(0).arc(0), _
       'temp_record, 0, no_reduce)
   'If set_equal_arc > 1 Then
    '  Exit Function
   'End If
  'ElseIf equal_arc(i%).data(0).arc(1) = equal_arc(no%).data(0).arc(0) Then
   ' set_equal_arc = _
    ' set_equal_arc(equal_arc(i%).data(0).arc(0), _
     ' equal_arc(no%).data(0).arc(1), temp_record, 0, no_reduce)
     'If set_equal_arc > 1 Then
      'Exit Function
    'End If
 'ElseIf equal_arc(i%).data(0).arc(1) = equal_arc(no%).data(0).arc(1) Then
 '   set_equal_arc = _
  ''  set_equal_arc(equal_arc(i%).data(0).arc(0), _
  '   equal_arc(no%).data(0).arc(0), temp_record, 0, no_reduce)
  '  If set_equal_arc > 1 Then
  '    Exit Function
  ' End If
'Else'有强制条件不能判定圆心的位置
 'End If
'set_equal_arc_mark3:
' End If
' Next i%
End If
End If
set_equal_arc = combine_two_equal_arc(no%)
If set_equal_arc > 1 Then
  Exit Function
End If
set_equal_arc = combine_equal_arc_with_arc_value(no%, 0)
End Function
Public Function set_tangent_line(ByVal l%, ByVal p1%, ByVal c1%, _
      ByVal p2%, ByVal c2%, _
        re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
Dim i%, j%, k%, m%, tl%, dn%, o%, temp_no%
Dim n_(1) As Integer
Dim prove_type As Byte
Dim A(1) As Integer
Dim it(1) As Integer
Dim p_d(2) As Long
Dim tp(6) As Integer
Dim con_no%
Dim ts As String
Dim level As Byte
Dim ty As Byte
Dim data_no As condition_type
Dim set_new_data As Boolean
Dim tan_l As tangent_line_data_type
Dim temp_record As total_record_type
'On Error GoTo set_tangent_line_error
Exit Function ''''************************************************************
If no_reduce = 255 Then
 Exit Function
End If
display_inform = 0
If no% > 0 Then
  If tangent_line(no%).record_.no_reduce = 255 Then
   Exit Function
  Else
   GoTo set_tangent_line_mark0
  End If
ElseIf no% = -1 Then
display_inform = 1
End If
temp_record = re
If set_level(re.record_data.data0.condition_data) > 30 Then
Exit Function
End If
ty = is_tangent_line(l%, p1%, depend_condition(circle_, c1%), p2%, depend_condition(circle_, c2%), tan_l, no%, n_(0), _
               n_(1), temp_record.record_data)
If ty = 2 Then
If no% > 0 And run_type < 10 Then
If tangent_line(no%).record_.display_no < 0 Then
   If tangent_line(no%).data(0).poi(0) = tangent_line(no%).data(0).poi(1) Then '公切线
    If temp_record.record_.display_no < _
                          tangent_line(no%).record_.display_no Then
        Call C_display_wenti.set_m_depend_no(-tangent_line(no%).record_.display_no)
        tangent_line(no%).record_ = temp_record.record_
    End If
   End If
End If
level = tangent_line(no%).data(0).record.data0.condition_data.level
If set_prove_type(tangent_line_, no%, re.record_data, _
     tangent_line(no%).data(0).record) And set_or_prove < 2 Then
 Call simple_record(tangent_line_, no%, tangent_line(no%).data(0).record.data0.condition_data.level, _
         level)
       If no_reduce < 2 Then 'Or run_type <= 1 Then
        set_tangent_line = 0
        Exit Function
       Else
        no_reduce = 0
          GoTo set_tangent_line_mark_0
       End If
End If
'设置证明类型
End If
If set_or_prove < 2 Then
       set_tangent_line = 0
       Exit Function
Else
 If display_inform = 1 Then
  If conclusion_data(0).ty = midpoint_ And conclusion_data(0).no(0) = no% Then
   prove_type = 4
    event_statue = complete_prove
  End If
    Call display_prove_inform(modify_wenti_no, display)
 Else
 Exit Function
 End If
End If
Exit Function
ElseIf ty = 1 Then
 GoTo set_tangent_line_mark0:
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_tangent_line = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
  'End If
  Exit Function
 End If
End If
temp_no% = last_conditions.last_cond(1).tangent_line_no
For i% = 1 To temp_no%
tangent_line(i%).data(1) = tangent_line(i%).data(0)
Next i%
If last_conditions.last_cond(1).tangent_line_no Mod 10 = 0 Then
ReDim Preserve tangent_line(last_conditions.last_cond(1).tangent_line_no + 10) As tangent_line_type
End If
last_conditions.last_cond(1).tangent_line_no = last_conditions.last_cond(1).tangent_line_no + 1
set_new_data = True
no% = last_conditions.last_cond(1).tangent_line_no
tangent_line(last_conditions.last_cond(1).tangent_line_no).data(0) = tan_l
   tangent_line(last_conditions.last_cond(1).tangent_line_no).data(0).record = re.record_data
    tangent_line(last_conditions.last_cond(1).tangent_line_no).record_ = re.record_
     tangent_line(last_conditions.last_cond(1).tangent_line_no).record_.no_reduce = 0
For j% = 0 To 1
For i% = last_conditions.last_cond(1).tangent_line_no To n_(j%) + 2 Step -1
tangent_line(i%).data(0).record.data1.index.i(j%) = _
  tangent_line(i% - 1).data(0).record.data1.index.i(j%)
Next i%
tangent_line(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).tangent_line_no
Next j%
   If last_conditions_for_aid_no > 0 Then
    If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
     If m_Circ(c1%).data(0).data0.center <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
           p1% <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
          p2% <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
       If c2% > 0 Then
        If m_Circ(c2%).data(0).data0.center <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
         last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
        End If
       End If
       End If
    End If
   End If
   If c2% = 0 Then
   ts = LoadResString_(1475, "\\1\\" + m_poi(m_lin(l%).data(0).data0.poi(0)).data(0).data0.name + _
                                      m_poi(m_lin(l%).data(0).data0.poi(1)).data(0).data0.name + _
                             "\\2\\" + m_poi(m_Circ(c1%).data(0).data0.center).data(0).data0.name)
   Else
   ts = LoadResString_(1480, "\\1\\" + m_poi(m_lin(l%).data(0).data0.poi(0)).data(0).data0.name + _
                                     m_poi(m_lin(l%).data(0).data0.poi(1)).data(0).data0.name + _
                             "\\2\\" + m_poi(m_Circ(c1%).data(0).data0.center).data(0).data0.name + _
                             "\\3\\" + m_poi(m_Circ(c2%).data(0).data0.center).data(0).data0.name)
   A(0) = angle_number(tangent_line(no%).data(0).poi(0), _
         m_Circ(tangent_line(no%).data(0).ele(0).no).data(0).data0.center, _
           tangent_line(no%).data(0).poi(1), 0, 0)
   A(1) = angle_number(tangent_line(no%).data(0).poi(0), _
         m_Circ(tangent_line(no%).data(0).ele(1).no).data(0).data0.center, _
           tangent_line(no%).data(0).poi(1), 0, 0)
     If (A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0) Then
      tangent_line(no%).in_out_tangent = 1
     Else
      tangent_line(no%).in_out_tangent = 2
     End If
   End If
data_no.ty = tangent_line_
data_no.no = no%
Call add_t_circle_to_line(tangent_line(no%).data(0).ele(0).no, tangent_line(no%).data(0).line_no, _
                 tangent_line(no%).data(0).poi(0), data_no)
Call add_t_circle_to_line(tangent_line(no%).data(0).ele(1).no, tangent_line(no%).data(0).line_no, _
                 tangent_line(no%).data(0).poi(1), data_no)
Call add_t_line_to_circlc(tangent_line(no%).data(0).line_no, tangent_line(no%).data(0).ele(0).no, _
                 tangent_line(no%).data(0).poi(0), data_no)
Call add_t_line_to_circlc(tangent_line(no%).data(0).line_no, tangent_line(no%).data(0).ele(1).no, _
                 tangent_line(no%).data(0).poi(1), data_no)
 set_tangent_line = set_prove_proccess(ts, tangent_line_, no%, tangent_line(no%).data(0).record.display_string)
 If set_tangent_line > 1 Then
   Exit Function
 End If
set_tangent_line = 1
 If no_reduce = 0 Then 'draw_or_prove = 0 And re.data0.condition_data.condition_no = 0 Then
  Exit Function
 End If
set_tangent_line_mark0:
If regist_data.run_type = 0 Then
If tangent_line(no%).record_.no_reduce = 0 Then
set_tangent_line_mark_0:
     tangent_line(no%).record_.no_reduce = 255
If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
       Call set_level_(tangent_line(no%).record_.no_reduce, 1)
temp_record.record_data.data0.condition_data.condition_no = 1
temp_record.record_data.data0.condition_data.condition(1).ty = tangent_line_
 temp_record.record_data.data0.condition_data.condition(1).no = no%
 '
 'If m_Circ(tangent_line(no%).data(0).circ(0)).data(0).data0.center > 0 Then
 'set_tangent_line = set_dverti(line_number0( _
        m_Circ(tangent_line(no%).data(0).circ(0)).data(0).data0.center, _
         tangent_line(no%).data(0).poi(0), 0, 0, True), _
          tangent_line(no%).data(0).line_no, temp_record, 0, no_reduce, False)
 '       If set_tangent_line > 1 Then
 '        Exit Function
 '      End If
 'End If
 'If tangent_line(no%).data(0).circ(1) > 0 Then
 '   If m_Circ(tangent_line(no%).data(0).circ(1)).data(0).data0.center > 0 Then
 'set_tangent_line = set_dverti(line_number0( _
        m_Circ(tangent_line(no%).data(0).circ(1)).data(0).data0.center, _
         tangent_line(no%).data(0).poi(1), 0, 0, True), _
          tangent_line(no%).data(0).line_no, temp_record, 0, no_reduce, False)
 '       If set_tangent_line > 1 Then
 '        Exit Function
 '      End If
 '  End If
 'End If
 If tangent_line(no%).data(0).ele(0).no > 0 And tangent_line(no%).data(0).ele(1).no > 0 Then '两圆的公切线
    If tangent_line(no%).data(0).ele(0).ty = circle_ And tangent_line(no%).data(0).ele(1).ty = circle_ Then
       If m_Circ(tangent_line(no%).data(0).ele(0).no).data(0).data0.center > 0 And _
           m_Circ(tangent_line(no%).data(0).ele(1).no).data(0).data0.center > 0 Then '
    set_tangent_line = set_dparal(line_number0( _
        m_Circ(tangent_line(no%).data(0).ele(0).no).data(0).data0.center, _
         tangent_line(no%).data(0).poi(0), 0, 0), _
       line_number0(m_Circ(tangent_line(no%).data(0).ele(1).no).data(0).data0.center, _
         tangent_line(no%).data(0).poi(1), 0, 0), temp_record, 0, no_reduce, False)
        If set_tangent_line > 1 Then
         Exit Function
       End If
    ElseIf tangent_line(no%).data(0).ele(0).ty = circle_ And tangent_line(no%).data(0).ele(1).ty = point_ Then
    ' set_tangent_line = set_vertical(line_number0( _
        m_Circ(tangent_line(no%).data(0).ele(0).no).data(0).data0.center, _
         tangent_line(no%).data(0).poi(0), 0, 0), tangent_line(no%).data(0).line_no, temp_record, 0, no_reduce, False)

    End If
  End If
 End If
 For o% = 1 + last_conditions.last_cond(0).tangent_line_no To last_conditions.last_cond(1).tangent_line_no
 i% = tangent_line(o%).data(0).record.data1.index.i(0)
 If i% > no% Then
    temp_record.record_data.data0.condition_data.condition_no = 2
     temp_record.record_data.data0.condition_data.condition(2).ty = tangent_line_
      temp_record.record_data.data0.condition_data.condition(2).no = i%

   If is_same_two_point(tangent_line(no%).data(0).ele(0).no, tangent_line(no%).data(0).ele(1).no, _
       tangent_line(i%).data(0).ele(0).no, tangent_line(i%).data(0).ele(1).no) Then
        tp(0) = tangent_line(no%).data(0).poi(0)
         tp(1) = tangent_line(i%).data(0).poi(0)
        tp(2) = tangent_line(no%).data(0).poi(1)
         tp(3) = tangent_line(i%).data(0).poi(1)
        tp(6) = is_line_line_intersect(tangent_line(no%).data(0).line_no, _
                  tangent_line(i%).data(0).line_no, 0, 0, False)
     If tp(6) > 0 Then '
      If tangent_line(no%).data(0).ele(0).no = tangent_line(i%).data(0).ele(0).no Then
        set_tangent_line = set_equal_dline(tp(6), tangent_line(no%).data(0).poi(0), _
         tp(6), tangent_line(i%).data(0).poi(0), 0, 0, 0, 0, 0, 0, _
          0, temp_record, 0, 0, 0, 0, no_reduce, False)
         If set_tangent_line > 1 Then
          Exit Function
         End If
       End If
       If tangent_line(no%).data(0).ele(0).no = tangent_line(i%).data(0).ele(1).no Then
        set_tangent_line = set_equal_dline(tp(6), tangent_line(no%).data(0).poi(0), _
        tp(6), tangent_line(i%).data(0).poi(1), 0, 0, 0, 0, 0, 0, _
          0, temp_record, 0, 0, 0, 0, no_reduce, False)
         If set_tangent_line > 1 Then
          Exit Function
         End If
        End If
       If tangent_line(no%).data(0).ele(1).no = tangent_line(i%).data(0).ele(0).no Then
        set_tangent_line = set_equal_dline(tp(6), tangent_line(no%).data(0).poi(1), _
        tp(6), tangent_line(i%).data(0).poi(0), 0, 0, 0, 0, 0, 0, _
          0, temp_record, 0, 0, 0, 0, no_reduce, False)
         If set_tangent_line > 1 Then
          Exit Function
         End If
        End If
       If tangent_line(no%).data(0).ele(1).no = tangent_line(i%).data(0).ele(1).no And _
             tangent_line(no%).data(0).ele(1).no > 0 Then
         set_tangent_line = set_equal_dline(tp(6), tangent_line(no%).data(0).poi(1), _
        tp(6), tangent_line(i%).data(0).poi(1), 0, 0, 0, 0, 0, 0, _
          0, temp_record, 0, 0, 0, 0, no_reduce, False)
         If set_tangent_line > 1 Then
          Exit Function
         End If
                If tangent_line(no%).in_out_tangent = _
           tangent_line(i%).in_out_tangent Then
       set_tangent_line = set_equal_dline(tangent_line(no%).data(0).poi(0), _
        tangent_line(no%).data(0).poi(1), tangent_line(i%).data(0).poi(0), _
         tangent_line(i%).data(0).poi(1), 0, 0, 0, 0, 0, 0, _
          0, temp_record, 0, 0, 0, 0, no_reduce, False)
         If set_tangent_line > 1 Then
          Exit Function
         End If
       set_tangent_line = set_dparal(line_number0(tp(0), tp(1), 0, 0), _
         line_number0(tp(2), tp(3), 0, 0), temp_record, 0, no_reduce, False)
         If set_tangent_line > 1 Then
          Exit Function
         End If
     If is_two_circles_inter_two_point(tangent_line(no%).data(0).ele(0).no, _
         tangent_line(no%).data(0).ele(1).no, tp(4), tp(5)) Then
      set_tangent_line = set_dparal(line_number0(tp(0), tp(1), 0, 0), _
       line_number0(tp(4), tp(5), 0, 0), temp_record, 0, no_reduce, False)
       If set_tangent_line > 1 Then
        Exit Function
       End If
      set_tangent_line = set_dparal(line_number0(tp(4), tp(5), 0, 0), _
       line_number0(tp(2), tp(3), 0, 0), temp_record, 0, no_reduce, False)
       If set_tangent_line > 1 Then
        Exit Function
       End If
     End If
     End If
        End If
     End If
    End If
   ElseIf tangent_line(no%).data(0).ele(0).no = _
                  tangent_line(i%).data(0).ele(1).no Then
        tp(6) = is_line_line_intersect(tangent_line(no%).data(0).line_no, _
                  tangent_line(i%).data(0).line_no, 0, 0, False)
     If tp(6) > 0 Then
      set_tangent_line = set_equal_dline(tp(6), tangent_line(no%).data(0).poi(0), _
        tp(6), tangent_line(i%).data(0).poi(1), 0, 0, 0, 0, 0, 0, _
          0, temp_record, 0, 0, 0, 0, no_reduce, False)
         If set_tangent_line > 1 Then
          Exit Function
         End If
     End If
   ElseIf tangent_line(no%).data(0).ele(1).no = _
                  tangent_line(i%).data(0).ele(0).no Then
           tp(6) = is_line_line_intersect(tangent_line(no%).data(0).line_no, _
                      tangent_line(i%).data(0).line_no, 0, 0, False)
     If tp(6) > 0 Then
      set_tangent_line = set_equal_dline(tp(6), tangent_line(no%).data(0).poi(1), _
        tp(6), tangent_line(i%).data(0).poi(0), 0, 0, 0, 0, 0, 0, _
          0, temp_record, 0, 0, 0, 0, no_reduce, False)
         If set_tangent_line > 1 Then
          Exit Function
         End If
     End If
End If
 Next o%
 For k% = 0 To 1
 If tangent_line(no%).data(0).ele(k%).no And tangent_line(no%).data(0).ele(k%).ty = circle_ > 0 And _
 m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.center > 0 Then
 set_tangent_line = set_dverti(tangent_line(no%).data(0).line_no, _
       line_number0(m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.center, _
         tangent_line(no%).data(0).poi(k%), 0, 0), temp_record, 0, no_reduce, False)
    If set_tangent_line = 2 Then
     Exit Function
    End If
 End If
For i% = 2 To m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(0)
 For j% = 1 To i% - 1
 ' For l% = 0 To 1
 If th_chose(141).chose = 1 Then
  temp_record.record_data.data0.theorem_no = 141
   If m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%) <> tangent_line(no%).data(0).poi(k%) And _
    m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%) <> tangent_line(no%).data(0).poi(k%) Then
 '玄切角
   A(0) = angle_number(m_lin(tangent_line(no%).data(0).line_no).data(0).data0.poi(0), _
             tangent_line(no%).data(0).poi(k%), _
              m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%), 0, 0)
   A(1) = angle_number(tangent_line(no%).data(0).poi(k%), _
            m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%), _
              m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%), 0, 0)
   If (A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0) Then
    set_tangent_line = _
    set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "-1", "0", "0", _
              0, temp_record, 0, 0, 0, 5, 0, 0, False)
    If set_tangent_line > 1 Then
     Exit Function
    End If
   ElseIf (A(0) > 0 And A(1) < 0) Or (A(0) < 0 And A(1) > 0) Then
    set_tangent_line = _
     set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "1", "0", "180", _
               0, temp_record, 0, 0, 0, 5, 0, 0, False)
    If set_tangent_line > 1 Then
     Exit Function
    End If
   End If
 '********
   A(0) = angle_number(m_lin(tangent_line(no%).data(0).line_no).data(0).data0.poi(0), _
             tangent_line(no%).data(0).poi(k%), _
              m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%), 0, 0)
   A(1) = angle_number(tangent_line(no%).data(0).poi(k%), _
            m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%), _
              m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%), 0, 0)
   If (A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0) Then
    set_tangent_line = _
    set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "-1", "0", "0", _
              0, temp_record, 0, 0, 0, 5, 0, 0, False)
    If set_tangent_line > 1 Then
     Exit Function
    End If
   ElseIf (A(0) > 0 And A(1) < 0) Or (A(0) < 0 And A(1) > 0) Then
    set_tangent_line = _
    set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "1", "0", "180", _
              0, temp_record, 0, 0, 0, 5, 0, 0, False)
    If set_tangent_line > 1 Then
     Exit Function
    End If
  End If
   '***********
   '************
    A(0) = angle_number(m_lin(tangent_line(no%).data(0).line_no).data(0).data0.poi(1), _
             tangent_line(no%).data(0).poi(k%), _
              m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%), 0, 0)
    A(1) = angle_number(tangent_line(no%).data(0).poi(k%), _
               m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%), _
                m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%), 0, 0)
   If (A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0) Then
    set_tangent_line = _
    set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "-1", "0", "0", _
              0, temp_record, 0, 0, 0, 5, 0, 0, False)
    If set_tangent_line > 1 Then
     Exit Function
    End If
   ElseIf (A(0) > 0 And A(1) < 0) Or (A(0) < 0 And A(1) > 0) Then
    set_tangent_line = _
    set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "1", "0", "180", _
              0, temp_record, 0, 0, 0, 5, 0, 0, False)
    If set_tangent_line > 1 Then
     Exit Function
    End If
   End If
   '************
    A(0) = angle_number(m_lin(tangent_line(no%).data(0).line_no).data(0).data0.poi(1), _
                         tangent_line(no%).data(0).poi(k%), _
                      m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%), 0, 0)
    A(1) = angle_number(tangent_line(no%).data(0).poi(k%), _
            m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%), _
              m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%), 0, 0)
   If (A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0) Then
    set_tangent_line = _
    set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "-1", "0", "0", _
              0, temp_record, 0, 0, 0, 5, 0, 0, False)
    If set_tangent_line > 1 Then
     Exit Function
    End If
   ElseIf (A(0) > 0 And A(1) < 0) Or (A(0) < 0 And A(1) > 0) Then
    set_tangent_line = _
    set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "1", "0", "180", _
              0, temp_record, 0, 0, 0, 5, 0, 0, False)
    If set_tangent_line > 1 Then
     Exit Function
    End If
   End If
'****************
 End If
 End If
' Next l%
 '***********************************************************************************
'  End If
If th_chose(145).chose = 1 Then
'切割线
For m% = 1 To m_lin(tangent_line(no%).data(0).line_no).data(0).data0.in_point(0)
 If m_lin(tangent_line(no%).data(0).line_no).data(0).data0.in_point(m%) <> tangent_line(no%).data(0).poi(k%) And _
  tangent_line(no%).data(0).poi(k%) <> m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%) And _
   tangent_line(no%).data(0).poi(k%) <> m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%) Then
  record_0.data0.condition_data.condition_no = 0 ' record0
If is_three_point_on_line(m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%), _
   m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%), _
      m_lin(tangent_line(no%).data(0).line_no).data(0).data0.in_point(m%), dn%, -1000, 0, 0, _
        record_0.data0.condition_data, 0, 0, 0) = 1 Then
    temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.theorem_no = 145
set_tangent_line = set_dpoint_pair(m_lin(tangent_line(no%).data(0).line_no).data(0).data0.in_point(m%), _
  tangent_line(no%).data(0).poi(k%), m_lin(tangent_line(no%).data(0).line_no).data(0).data0.in_point(m%), _
    m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(i%), m_lin(tangent_line(no%).data(0).line_no).data(0).data0.in_point(m%), _
     m_Circ(tangent_line(no%).data(0).ele(k%).no).data(0).data0.in_point(j%), m_lin(tangent_line(no%).data(0).line_no).data(0).data0.in_point(m%), _
      tangent_line(no%).data(0).poi(k%), 0, 0, 0, 0, 0, 0, _
       0, 0, 0, 0, 0, 0, 1, temp_record, True, 0, 0, 0, 0, False)
     If set_tangent_line > 1 Then
      Exit Function
     End If
  End If
  End If
Next m%
End If
Next j%
Next i%
If th_chose(29).chose = 1 Then
temp_record.record_data.data0.theorem_no = 97
For o% = 1 + last_conditions.last_cond(0).tangent_line_no To last_conditions.last_cond(1).tangent_line_no
i% = tangent_line(o%).data(0).record.data1.index.i(0)
For m% = 0 To 1
 If i% <> no% And tangent_line(i%).data(0).ele(m%).no = tangent_line(no%).data(0).ele(k%).no Then
  tp(0) = is_line_line_intersect(tangent_line(i%).data(0).line_no, _
                 tangent_line(no%).data(0).line_no, 0, 0, False)
   If tp(0) > 0 Then
    temp_record.record_data.data0.condition_data.condition_no = 2
    temp_record.record_data.data0.condition_data.condition(2).ty = tangent_line_
    temp_record.record_data.data0.condition_data.condition(2).no = i%
  set_tangent_line = _
   set_equal_dline(tangent_line(i%).data(0).poi(m%), tp(0), tangent_line(no%).data(0).poi(k%), _
     tp(0), 0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce, False)
     If set_tangent_line > 1 Then
      Exit Function
     End If
  A(0) = Abs(angle_number(m_Circ(tangent_line(i%).data(0).ele(m%).no).data(0).data0.center, tp(0), _
        tangent_line(no%).data(0).poi(k%), 0, 0))
    A(1) = Abs(angle_number(m_Circ(tangent_line(i%).data(0).ele(m%).no).data(0).data0.center, _
          tp(0), tangent_line(i%).data(0).poi(m%), 0, 0))
If A(0) > 0 And A(1) > 0 Then
set_tangent_line = _
   set_three_angle_value(A(0), A(1), 0, "1", "-1", "0", "0", _
            0, temp_record, 0, 0, 0, 5, 0, 0, False)
     If set_tangent_line > 1 Then
      Exit Function
     End If
 End If
 End If
 End If
 Next m%
Next o%
End If
'End If
Next k%
End If
Exit Function
set_tangent_line_error:
If set_new_data Then
last_conditions.last_cond(1).tangent_line_no = temp_no%
For i% = 1 To last_conditions.last_cond(1).tangent_line_no
tangent_line(i%).data(0) = tangent_line(i%).data(1)
Next i%
End If
ElseIf tangent_line(no%).data(0).record.data0.condition_data.condition_no = 0 Then 'run_type=1
 
  temp_record.record_data.data0.condition_data.condition_no = 1
  temp_record.record_data.data0.condition_data.condition(1).ty = tangent_line_
  temp_record.record_data.data0.condition_data.condition(1).no = no%
   set_tangent_line = set_verti_for_run_type_1(line_number0(tangent_line(no%).data(0).poi(0), _
     m_Circ(tangent_line(no%).data(0).ele(0).no).data(0).data0.center, 0, 0), _
       tangent_line(no%).data(0).line_no, temp_record)
        If set_tangent_line > 1 Then
           Exit Function
        End If
End If
End Function
Public Function set_verti_for_run_type_1(ByVal l1%, ByVal l2%, re As total_record_type) As Byte
Dim i%, j%, k%, l%
Dim v_line(1) As Integer
Dim c_data0 As condition_data_type
For i% = 2 To m_lin(l1%).data(0).data0.in_point(0)
 For j% = 1 To i% - 1
  v_line(0) = vector_number(m_lin(l1%).data(0).data0.in_point(i%), _
                m_lin(l1%).data(0).data0.in_point(j%), 0)
    If v_line(0) = 0 Then
             GoTo set_verti_for_run_type_1_nextJ
    End If
   For k% = 2 To m_lin(l2%).data(0).data0.in_point(0)
    For l% = 1 To k% - 1
     v_line(1) = vector_number(m_lin(l2%).data(0).data0.in_point(k%), _
                m_lin(l2%).data(0).data0.in_point(l%), 0)
       If v_line(1) > 0 Then
       set_verti_for_run_type_1 = set_item0_value0(v_line(0), -10, v_line(1), -10, "*", "0", _
             re.record_data.data0.condition_data)
              If set_verti_for_run_type_1 > 1 Then
                 Exit Function
              End If
       Else
        GoTo set_verti_for_run_type_1_nextl
       End If
     If m_lin(l1%).data(0).data0.in_point(i%) = m_lin(l2%).data(0).data0.in_point(k%) Then
          set_verti_for_run_type_1 = set_P_theorem_for_run_type_1( _
              m_lin(l1%).data(0).data0.in_point(i%), m_lin(l1%).data(0).data0.in_point(j%), _
               m_lin(l2%).data(0).data0.in_point(l%), re)
                If set_verti_for_run_type_1 > 1 Then
                   Exit Function
                End If   '
     ElseIf m_lin(l1%).data(0).data0.in_point(i%) = m_lin(l2%).data(0).data0.in_point(l%) Then
          set_verti_for_run_type_1 = set_P_theorem_for_run_type_1( _
              m_lin(l1%).data(0).data0.in_point(i%), m_lin(l1%).data(0).data0.in_point(j%), _
               m_lin(l2%).data(0).data0.in_point(k%), re)
                If set_verti_for_run_type_1 > 1 Then
                   Exit Function
                End If   '
     ElseIf m_lin(l1%).data(0).data0.in_point(j%) = m_lin(l2%).data(0).data0.in_point(k%) Then
          set_verti_for_run_type_1 = set_P_theorem_for_run_type_1( _
              m_lin(l1%).data(0).data0.in_point(j%), m_lin(l1%).data(0).data0.in_point(i%), _
               m_lin(l2%).data(0).data0.in_point(l%), re)
                If set_verti_for_run_type_1 > 1 Then
                   Exit Function
                End If   '
    ElseIf m_lin(l1%).data(0).data0.in_point(j%) = m_lin(l2%).data(0).data0.in_point(l%) Then
          set_verti_for_run_type_1 = set_P_theorem_for_run_type_1( _
              m_lin(l1%).data(0).data0.in_point(j%), m_lin(l1%).data(0).data0.in_point(i%), _
               m_lin(l2%).data(0).data0.in_point(k%), re)
                If set_verti_for_run_type_1 > 1 Then
                   Exit Function
                End If   '
    End If
set_verti_for_run_type_1_nextl:
    Next l%
  Next k%
set_verti_for_run_type_1_nextJ:
 Next j%
Next i%
End Function



Public Function cos_(ByVal s As String, ty As Byte) As String
Dim v!
Dim p%
Dim A!
If InStr(1, s, "F", 0) > 0 Or s = "" Then
 cos_ = "F"
Exit Function
End If
ty = 0
If s = "0" Then
 cos_ = "1"
ElseIf s = "15" Then
 cos_ = "('6#'2)/2"
'ElseIf s = "45/2" Then
ElseIf s = "30" Then
cos_ = "'3/2"
ElseIf s = "45" Then
cos_ = "'2/2"
ElseIf s = "60" Then
cos_ = "1/2"
ElseIf s = "75" Then
cos_ = "('6@'2)/4"
ElseIf s = "90" Then
cos_ = "0"
ElseIf s = "105" Then
cos_ = "(@'6#'2)/4"
ElseIf s = "120" Then
cos_ = "-1/2"
ElseIf s = "135" Then
cos_ = "-'2/2"
ElseIf s = "150" Then
cos_ = "-'3/2"
ElseIf s = "165" Then
cos_ = "-('6#'2)/4"
ElseIf s = "180" Then
cos_ = "-1"
ElseIf th_chose(-5).chose = 1 Then
 ty = 1
  v! = val_(value_string(s)) 'Val(s) / Val(Mid$(s, p% + 1, Len(s) - p%))
    A! = Cos(v! * 3.1415 / 180)
     cos_ = Trim(str(A!))
Else
ty = 2
 cos_ = "F"
End If
End Function
Public Function set_three_line_value(ByVal p1%, ByVal p2%, ByVal p3%, _
   ByVal p4%, ByVal p5%, ByVal p6%, ByVal in1%, ByVal in2%, ByVal in3%, _
    ByVal in4%, ByVal in5%, ByVal in6%, ByVal il1%, ByVal il2%, _
     ByVal il3%, ByVal s1 As String, ByVal S2 As String, ByVal s3 As String, _
      ByVal v As String, re As total_record_type, no%, ByVal no_reduce As Byte, _
       find_conclusion As Byte) As Byte
Dim i%, j%, tn%, temp_no%, triA%
Dim n_(6) As Integer
'Dim tp(5) As Integer
'Dim s(2) As String
'Dim l(2) As Integer
Dim l3_value As line3_value_data0_type
Dim ty As Boolean
Dim value As String
Dim t_s$
Dim level As Byte
Dim set_new_data As Boolean
Dim re1 As total_record_type
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
'On Error GoTo set_three_line_value_error
If no_reduce = 255 Or InStr(1, s1, "F", 0) > 0 Or _
       InStr(1, S2, "F", 0) Or InStr(1, s3, "F", 0) > 0 _
         Or InStr(1, v, "F", 0) Then
 Exit Function
End If
re1.record_data = re.record_data
display_inform = 0
If no% > 0 Then
 If line3_value(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
   GoTo set_three_line_value_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
End If
If no = 0 And (p1% = p2% And p3% = p4% And p5% = p6%) Or _
    (s1 = "0" And S2 = "0" And s3 = "0") Then
 set_three_line_value = 0
  Exit Function
ElseIf s3 = "0" Then
 set_three_line_value = set_two_line_value(p1%, p2%, p3%, p4%, _
     in1%, in2%, in3%, in4%, il1%, il2%, s1, S2, v, re, no%, no_reduce)
      Exit Function
ElseIf S2 = "0" Then
 set_three_line_value = set_two_line_value(p1%, p2%, p5%, p6%, _
     in1%, in2%, in5%, in6%, il1%, il3%, s1, s3, v, re, no%, no_reduce)
      Exit Function
ElseIf s1 = "0" Then
 set_three_line_value = set_two_line_value(p3%, p4%, p5%, p6%, _
     in3%, in4%, in5%, in6%, il2%, il3%, S2, s3, v, re, no%, no_reduce)
      Exit Function
End If
temp_record = re
If re.record_data.data0.condition_data.condition_no = 0 Then
 ty = False
Else
 ty = True
End If
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
Exit Function
End If
If is_three_line_value(p1%, p2%, p3%, p4%, p5%, p6%, in1%, in2%, in3%, _
    in4%, in5%, in6%, il1%, il2%, il3%, s1, S2, s3, v, no%, _
     n_(0), n_(1), n_(2), n_(3), n_(4), n_(5), l3_value, _
      cond_type, temp_record.record_data.data0.condition_data, find_conclusion) Then
  If no% > 0 And run_type < 10 Then
temp_record1 = re
If cond_type = line3_value_ Then
set_three_line_value = set_string_value_(line3_value(no%).data(0).data0.value, _
                       l3_value.value, line3_value_, no%, temp_record1.record_data, no_reduce)
ElseIf cond_type = two_line_value_ Then
set_three_line_value = set_string_value_(two_line_value(no%).data(0).data0.value, _
                       l3_value.value, two_line_value_, no%, temp_record1.record_data, no_reduce)
ElseIf cond_type = line_value_ Then
set_three_line_value = set_string_value_(line_value(no%).data(0).data0.value, _
                       l3_value.value, line_value_, no%, temp_record1.record_data, no_reduce)
End If
If set_three_line_value > 1 Then
 Exit Function
End If
   Call set_level(temp_record.record_data.data0.condition_data)
   If cond_type = line3_value_ Then
    level = line3_value(no%).data(0).record.data0.condition_data.level
    If set_prove_type(line3_value_, no%, temp_record.record_data, _
         line3_value(no%).data(0).record) And set_or_prove < 2 Then
    Call simple_record(line3_value_, no%, line3_value(no%).data(0).record.data0.condition_data.level, _
            level)
    If no_reduce = 0 Then 'Or run_type <= 1 Then
     set_three_line_value = 0
     Exit Function
    Else
     no_reduce = 0
      ' line3_value(no%).data(0).record_.no_reduce = 0
   GoTo set_three_line_value_mark0
    End If
   End If
   If set_or_prove < 2 Then
       set_three_line_value = 0
    Exit Function
   Else
    If display_inform = 1 Then
     If conclusion_data(0).ty = line3_value_ And conclusion_data(0).no(0) = no% Then
      prove_type = 4
              event_statue = complete_prove
     End If
      Call display_prove_inform(modify_wenti_no, display)
    End If
   Exit Function
   End If
 ElseIf cond_type = line_value_ Then
  Call set_level(temp_record.record_data.data0.condition_data)
  Call set_prove_type(line_value_, no%, temp_record.record_data, _
      line_value(no%).data(0).record)
   Exit Function
  ' End If
 ElseIf cond_type = midpoint_ Then
  Call set_level(temp_record.record_data.data0.condition_data)
  Call set_prove_type(midpoint_, no%, temp_record.record_data, _
      Dmid_point(no%).data(0).record)
  Exit Function
 ElseIf cond_type = eline_ Then
  Call set_level(temp_record.record_data.data0.condition_data)
  Call set_prove_type(eline_, no%, temp_record.record_data, _
      Deline(no%).data(0).record)
  Exit Function
 ElseIf cond_type = relation_ Then
  Call set_level(temp_record.record_data.data0.condition_data)
  Call set_prove_type(relation_, no%, temp_record.record_data, _
      Drelation(no%).data(0).record)
  Exit Function
  ElseIf cond_type = two_line_value_ Then
  Call set_level(temp_record.record_data.data0.condition_data)
  Call set_prove_type(two_line_value_, no%, temp_record.record_data, _
      two_line_value(no%).data(0).record)
  Exit Function
 End If
Else
    Exit Function
End If
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_three_line_value = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
     Exit Function
   End If
End If
'*****************
 If l3_value.para(1) = "0" Then
   set_three_line_value = set_line_value(l3_value.poi(0), l3_value.poi(1), _
     l3_value.value, l3_value.n(0), l3_value.n(1), l3_value.line_no(0), _
       temp_record, 0, no_reduce, False)
   Exit Function
 ElseIf l3_value.para(2) = "0" Then
  If l3_value.value = "0" Then
   set_three_line_value = set_Drelation(l3_value.poi(0), l3_value.poi(1), _
     l3_value.poi(2), l3_value.poi(3), l3_value.n(0), l3_value.n(1), _
      l3_value.n(2), l3_value.n(3), l3_value.line_no(0), l3_value.line_no(1), _
       divide_string(time_string("-1", l3_value.para(1), False, False), _
         l3_value.para(0), True, False), _
          temp_record, 0, 0, 0, 0, no_reduce, False)
      Exit Function
  Else
    set_three_line_value = set_two_line_value(l3_value.poi(0), l3_value.poi(1), _
       l3_value.poi(2), l3_value.poi(3), l3_value.n(0), l3_value.n(1), l3_value.n(2), _
        l3_value.n(3), l3_value.line_no(0), l3_value.line_no(1), l3_value.para(0), _
         l3_value.para(1), l3_value.value, temp_record, 0, no_reduce)
       Exit Function
  End If
 End If
 If l3_value.value = "0" Then
  If l3_value.para(0) <> "1" And l3_value.para(0) <> "-1" And _
      l3_value.para(0) <> "@1" And l3_value.para(0) <> "2" And _
       l3_value.para(0) <> "-2" And l3_value.para(0) <> "@2" Then
   Exit Function
  ElseIf l3_value.para(1) <> "1" And l3_value.para(1) <> "-1" And _
          l3_value.para(1) <> "@1" And l3_value.para(1) <> "2" And _
           l3_value.para(1) <> "-2" And l3_value.para(1) <> "@2" Then
   Exit Function
  ElseIf l3_value.para(2) <> "1" And l3_value.para(2) <> "-1" And _
          l3_value.para(2) <> "@1" And l3_value.para(2) <> "2" And _
           l3_value.para(2) <> "-2" And l3_value.para(2) <> "@2" Then
   Exit Function
  End If
 Else
   If l3_value.para(0) <> "1" Then
    Exit Function
   ElseIf l3_value.para(1) <> "1" Then
    Exit Function
   ElseIf l3_value.para(2) <> "1" Then
    Exit Function
   End If
 End If
'********
temp_no% = last_conditions.last_cond(1).line3_value_no
For i% = 1 To temp_no%
line3_value(i%).record_.index = line3_value(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).line3_value_no Mod 10 = 0 Then
   ReDim Preserve line3_value(last_conditions.last_cond(1).line3_value_no + 10) As line3_value_type
End If
last_conditions.last_cond(1).line3_value_no = last_conditions.last_cond(1).line3_value_no + 1
set_new_data = True
    line3_value(last_conditions.last_cond(1).line3_value_no).data(0).data0 = l3_value
 line3_value(last_conditions.last_cond(1).line3_value_no).data(0).record = temp_record.record_data
 line3_value(last_conditions.last_cond(1).line3_value_no).record_ = temp_record.record_
 line3_value(last_conditions.last_cond(1).line3_value_no).record_.no_reduce = 0
 For j% = 0 To 5
 For i% = last_conditions.last_cond(1).line3_value_no To n_(j%) + 2 Step -1
 line3_value(i%).data(0).record.data1.index.i(j%) = _
  line3_value(i% - 1).data(0).record.data1.index.i(j%)
 Next i%
 line3_value(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).line3_value_no
 Next j%
 no% = last_conditions.last_cond(1).line3_value_no
 If last_conditions_for_aid_no > 0 Then
  If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
   For i% = 0 To 5
    If l3_value.poi(i%) > last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
     GoTo set_three_line_value_res
    End If
   Next i%
   last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  End If
 End If
set_three_line_value_res:
t_s$ = set_display_three_line_value(line3_value(no%).data(0), False, 0, False)
   set_three_line_value = set_prove_proccess(t_s$, line3_value_, no%, line3_value(no%).data(0).record.display_string)
   If set_three_line_value > 1 Then
    Exit Function
   End If
If line3_value(no%).data(0).data0.para(0) = "1" And line3_value(no%).data(0).data0.para(1) = "1" And _
       line3_value(no%).data(0).data0.para(2) = "1" Then
   If line3_value(no%).data(0).data0.poi(1) = line3_value(no%).data(0).data0.poi(2) And _
       is_same_two_point(line3_value(no%).data(0).data0.poi(0), line3_value(no%).data(0).data0.poi(3), _
          line3_value(no%).data(0).data0.poi(4), line3_value(no%).data(0).data0.poi(5)) Then
           triA% = triangle_number(line3_value(no%).data(0).data0.poi(0), _
             line3_value(no%).data(0).data0.poi(1), line3_value(no%).data(0).data0.poi(3), _
               0, 0, 0, 0, 0, 0, 0)
   ElseIf line3_value(no%).data(0).data0.poi(0) = line3_value(no%).data(0).data0.poi(2) And _
       is_same_two_point(line3_value(no%).data(0).data0.poi(1), line3_value(no%).data(0).data0.poi(3), _
          line3_value(no%).data(0).data0.poi(4), line3_value(no%).data(0).data0.poi(5)) Then
           triA% = triangle_number(line3_value(no%).data(0).data0.poi(0), _
             line3_value(no%).data(0).data0.poi(1), line3_value(no%).data(0).data0.poi(3), _
                0, 0, 0, 0, 0, 0, 0)
   ElseIf line3_value(no%).data(0).data0.poi(1) = line3_value(no%).data(0).data0.poi(3) And _
       is_same_two_point(line3_value(no%).data(0).data0.poi(0), line3_value(no%).data(0).data0.poi(2), _
          line3_value(no%).data(0).data0.poi(4), line3_value(no%).data(0).data0.poi(5)) Then
           triA% = triangle_number(line3_value(no%).data(0).data0.poi(0), _
             line3_value(no%).data(0).data0.poi(1), line3_value(no%).data(0).data0.poi(2), _
                0, 0, 0, 0, 0, 0, 0)
   ElseIf line3_value(no%).data(0).data0.poi(0) = line3_value(no%).data(0).data0.poi(3) And _
       is_same_two_point(line3_value(no%).data(0).data0.poi(1), line3_value(no%).data(0).data0.poi(2), _
          line3_value(no%).data(0).data0.poi(4), line3_value(no%).data(0).data0.poi(5)) Then
           triA% = triangle_number(line3_value(no%).data(0).data0.poi(0), _
             line3_value(no%).data(0).data0.poi(1), line3_value(no%).data(0).data0.poi(2), _
                0, 0, 0, 0, 0, 0, 0)
   Else
    triA% = 0
   End If
 If triangle(triA%).data(0).length_of_sides_value = "" And triA% > 0 Then
     triangle(triA%).data(0).length_of_sides_value = _
                   line3_value(no%).data(0).data0.value
     Call add_conditions_to_record(line3_value_, no%, 0, 0, _
             triangle(triA%).data(0).length_of_sides)
     set_three_line_value = set_length_of_sides_from_length_of_sides(triA%)
       If set_three_line_value > 1 Then
          Exit Function
       End If
 End If
End If
'****************************
set_three_line_value_mark0:
If regist_data.run_type = 0 Then
If line3_value(no%).record_.no_reduce < 2 Then
 'If line3_value(no%).data(0).record.data0.level < 5 Then
  Call set_level_(line3_value(no%).record_.no_reduce, 2)
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
set_three_line_value = combine_three_line_with_line_value(no%, 0, no_reduce)
If set_three_line_value > 1 Then
 Exit Function
End If
set_three_line_value = combine_three_line_with_midpoint(no%, 0, no_reduce)
If set_three_line_value > 1 Then
 Exit Function
End If
set_three_line_value = combine_three_line_with_relation(no%, 0, no_reduce)
If set_three_line_value > 1 Then
 Exit Function
End If
set_three_line_value = combine_three_line_with_eline(no%, 0, no_reduce)
If set_three_line_value > 1 Then
 Exit Function
End If
set_three_line_value = combine_three_line_with_two_line(no%, 0, no_reduce)
If set_three_line_value > 1 Then
 Exit Function
End If
set_three_line_value = combine_three_three_line(no%, no_reduce) 'no_reduce)
If set_three_line_value > 1 Then
 Exit Function
End If
set_three_line_value = combine_line3_value_with_length_of_polygon(no%)  'no_reduce)
If set_three_line_value > 1 Then
 Exit Function
End If
End If
Exit Function
set_three_line_value_error:
set_three_line_value = 0
If set_new_data Then
 last_conditions.last_cond(1).line3_value_no = temp_no%
 For i% = 1 To temp_no%
 line3_value(i%).data(0).record.data1.index = line3_value(i%).record_.index
 Next i%
End If
ElseIf line3_value(no%).data(0).record.data0.condition_data.condition_no = 0 Then 'run_type=1
End If
End Function


Public Sub set_temp_triangle_from_angle(ByVal A%, _
             ByVal p%, t As temp_triangle_type, ty As Boolean)
Dim n(1) As Integer
 Dim m(1) As Integer
  Dim s(1) As Integer
   Dim t_angle_data0 As angle_data_type
   Dim i%, j%
t_angle_data0 = angle(A%).data(0)
If A% = 0 Then
 Exit Sub
ElseIf t_angle_data0.line_no(0) = t_angle_data0.line_no(1) Then '平角
 Exit Sub
End If
If is_point_in_line3(t_angle_data0.poi(1), m_lin(t_angle_data0.line_no(0)).data(0).data0, n(0)) And _
    is_point_in_line3(t_angle_data0.poi(1), m_lin(t_angle_data0.line_no(1)).data(0).data0, n(1)) Then
If t_angle_data0.te(0) = 0 Then
 m(0) = 1
  n(0) = n(0) - 1
   s(0) = -1
Else
 m(0) = m_lin(t_angle_data0.line_no(0)).data(0).data0.in_point(0)
  n(0) = n(0) + 1
   s(0) = 1
End If
If t_angle_data0.te(1) = 0 Then
 m(1) = 1
  n(1) = n(1) - 1
   s(1) = -1
Else
 m(1) = m_lin(t_angle_data0.line_no(1)).data(0).data0.in_point(0)
  n(1) = n(1) + 1
   s(1) = 1
End If
t.last_T = 0
For i% = n(0) To m(0) Step s(0)
 For j% = n(1) To m(1) Step s(1)
  t.last_T = t.last_T + 1
   t.data(t.last_T).poi(0) = t_angle_data0.poi(1)
    t.data(t.last_T).poi(1) = m_lin(t_angle_data0.line_no(0)).data(0).data0.in_point(i%)
     t.data(t.last_T).poi(2) = m_lin(t_angle_data0.line_no(1)).data(0).data0.in_point(j%)
      t.data(t.last_T).no = triangle_number(t_angle_data0.poi(1), t.data(t.last_T).poi(1), _
       t.data(t.last_T).poi(2), t.data(t.last_T).angle(0), t.data(t.last_T).angle(1), _
         t.data(t.last_T).angle(2), t.data(t.last_T).l_v(0), t.data(t.last_T).l_v(1), _
           t.data(t.last_T).l_v(2), t.data(t.last_T).direction)
 If t.data(t.last_T).poi(0) = p% Or t.data(t.last_T).poi(1) = p% _
      Or t.data(t.last_T).poi(2) = p% Then
       t.data(t.last_T).is_contain_p = True
 End If
            If t.data(t.last_T).no = 0 Then
             t.last_T = t.last_T - 1
              GoTo set_temp_triangle_from_angle_mark1
            End If
 If ty Then '为证明全等相似，交换顶点
  t.last_T = t.last_T + 1
   t.data(t.last_T).poi(0) = t_angle_data0.poi(1)
    t.data(t.last_T).poi(1) = m_lin(t_angle_data0.line_no(1)).data(0).data0.in_point(j%)
     t.data(t.last_T).poi(2) = m_lin(t_angle_data0.line_no(0)).data(0).data0.in_point(i%)
      record_0.data0.condition_data.condition_no = 0 'record0
  t.data(t.last_T).no = triangle_number(t_angle_data0.poi(1), t.data(t.last_T).poi(1), _
           t.data(t.last_T).poi(2), t.data(t.last_T).angle(0), t.data(t.last_T).angle(1), _
            t.data(t.last_T).angle(2), t.data(t.last_T).l_v(0), t.data(t.last_T).l_v(1), _
             t.data(t.last_T).l_v(2), t.data(t.last_T).direction)
 If t.data(t.last_T).poi(0) = p% Or t.data(t.last_T).poi(1) = p% _
      Or t.data(t.last_T).poi(2) = p% Then
       t.data(t.last_T).is_contain_p = True
 End If
  End If
set_temp_triangle_from_angle_mark1:
 Next j%
Next i%
End If
End Sub

Public Sub set_temp_triangle_from_lin(ByVal p1%, ByVal p2%, _
     ByVal p3%, t As temp_triangle_type, ty As Boolean)
Dim i%
t.last_T = 0
For i% = 1 To last_conditions.last_cond(1).point_no
record_0.data0.condition_data.condition_no = 0 'record0
If is_three_point_on_line(p1%, p2%, i%, 0, -1000, 0, 0, record_0.data0.condition_data, _
    0, 0, 0) = 0 Then
 t.last_T = t.last_T + 1
  t.data(t.last_T).poi(0) = i%
   t.data(t.last_T).poi(1) = p1%
    t.data(t.last_T).poi(2) = p2%
 t.data(t.last_T).no = triangle_number(i%, p1%, p2%, _
      t.data(t.last_T).angle(0), t.data(t.last_T).angle(1), t.data(t.last_T).angle(2), _
       t.data(t.last_T).l_v(0), t.data(t.last_T).l_v(1), t.data(t.last_T).l_v(2), _
                 t.data(t.last_T).direction)
 If i% = p3% Then
  t.data(t.last_T).is_contain_p = True
 End If
 If t.data(t.last_T).no = 0 Then
  t.last_T = t.last_T - 1
   GoTo set_temp_triangle_from_line_mark1
 End If
If ty Then  '为证明全等相似，交换顶点
 t.last_T = t.last_T + 1
  t.data(t.last_T).poi(0) = i%
   t.data(t.last_T).poi(1) = p2%
    t.data(t.last_T).poi(2) = p1%
 t.data(t.last_T).no = triangle_number(i%, p2%, p1%, _
    t.data(t.last_T).angle(0), t.data(t.last_T).angle(1), t.data(t.last_T).angle(2), _
     t.data(t.last_T).l_v(0), t.data(t.last_T).l_v(1), t.data(t.last_T).l_v(2), _
       t.data(t.last_T).direction)
 If i% = p3% Then
  t.data(t.last_T).is_contain_p = True
 End If
 End If
End If
set_temp_triangle_from_line_mark1:
Next i%
End Sub

Public Sub arrange_display_no()
Dim i%, j%, k%, l%, m%
Dim temp_type As Byte
Dim no%
Dim temp_display As display_string_type
Dim re As total_record_type
Dim re1 As total_record_type
'last_same_prove_proccess = 0
For j% = display_no To 1 Step -1
  If display_string(j%).display_record_type = new_point_ Then
    For i% = display_no To j% + 1 Step -1
     If display_string(i%).display_record_type <> new_point_ Then
        temp_display = display_string(j%)
        For k% = j% To i% - 1
         display_string(k%) = display_string(k% + 1)
        Next k%
         display_string(i%) = temp_display
          GoTo arrange_display_mark1
     End If
    Next i%
  End If
arrange_display_mark1:
Next j%
For i% = 1 To display_no
Call record_no(display_string(i%).display_record_type, _
      display_string(i%).display_record_no, re, False, 0, 0)
 For j% = display_no To i% + 1 Step -1
  If display_string(i%).display_record_type = _
      display_string(j%).display_record_type Then
   'If display_record_type(i%) = general_string_ Then
    'if general_string(abs(display_record_no(i%))).data(0).value<>""
   Call record_no(display_string(j%).display_record_type, _
      display_string(j%).display_record_no, re1, False, 0, 0)
   'If re.data(0).condition_data.condition_no <> 0 Then
   'If is_same_prove_proccess(re, re1, True) Then
   'last_same_prove_proccess = last_same_prove_proccess + 1
   'ReDim Preserve same_prove_proccess(last_same_prove_proccess) As _
         same_prove_proccess_type
   'same_prove_proccess(last_same_prove_proccess).date_ty = _
       display_string(i%).display_record_type
   'same_prove_proccess(last_same_prove_proccess).date_n1 = _
       display_string(i%).display_record_no
   'same_prove_proccess(last_same_prove_proccess).date_n2 = _
       display_string(j%).display_record_no
   'same_prove_proccess(last_same_prove_proccess).dis_n1 = i%
   'same_prove_proccess(last_same_prove_proccess).dis_n2 = j%
'GoTo arrange_display_no_mark1
   'End If
   'End If
   End If
 Next j%
arrange_display_no_mark1:
Next i%
End Sub


Public Function set_equal_sides_triangle(ByVal triA As Integer, _
   re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim i%
If no_reduce = 255 Then
 Exit Function
End If
If triangle(triA).ty = equal_sides Then
  set_equal_sides_triangle = 0
 Exit Function
Else
set_equal_sides_triangle = 1
triangle(triA).ty = equal_sides
'triangle(triA).data(0).record = re.record_data
For i% = 0 To 2
set_equal_sides_triangle = set_angle_value(triangle(triA).data(0).angle(i%), _
  "60", re, 0, no_reduce, False)
 If set_equal_sides_triangle > 1 Then
  Exit Function
 End If
set_equal_sides_triangle = _
    set_equal_dline(triangle(triA).data(0).poi(i%), _
  triangle(triA).data(0).poi((i% + 1) Mod 3), triangle(triA).data(0).poi((i% + 1) Mod 3), _
   triangle(triA).data(0).poi((i% + 2) Mod 3), 0, 0, 0, 0, 0, 0, 0, re, 0, 0, 0, 0, no_reduce, False)
 If set_equal_sides_triangle > 1 Then
  Exit Function
 End If
Next i%
End If
End Function


Public Function set_angle_value0(ByVal p1%, _
   ByVal p2%, ByVal p3%, ByVal v As String, _
     re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim A%
'On Error GoTo set_angle_value0_error
If InStr(1, v, "F", 0) > 0 Then
 Exit Function
End If
A% = angle_number(p1%, p2%, p3%, 0, 0)
  set_angle_value0 = _
         set_angle_value(Abs(A%), v, re, 0, no_reduce, False)
          Exit Function
set_angle_value0_error:
set_angle_value0 = 0
End Function


Public Function set_triangle0(ByVal p1%, ByVal p2%, ByVal _
    p3%, ByVal p4%, triA%, direction%, _
      tp1%, tp2%, tp3%, A1%, A2%, A3%) As Byte
Dim tp(2) As Integer
If p4% = 0 Then
tp1% = p1%
tp2% = p2%
tp3% = p3%
ElseIf p1% = p3% Then
tp1% = p1%
tp2% = p2%
tp3% = p4%
ElseIf p2% = p3% Then
tp1% = p2%
tp2% = p1%
tp3% = p4%
ElseIf p1% = p4% Then
tp1% = p1%
tp2% = p2%
tp3% = p3%
ElseIf p2% = p4% Then
tp1% = p2%
tp2% = p1%
tp3% = p3%
Else
set_triangle0 = 0
Exit Function
End If
 triA% = triangle_number(tp1%, tp2%, tp3%, _
  A1%, A2%, A3%, 0, 0, 0, direction%)
 If triA% > 0 Then
 set_triangle0 = 1
 End If
End Function

Public Function set_point_pair_for_similar(ByVal triA1%, _
   ByVal triA2%, ByVal re1%, ByVal re2%, no%, ByVal no_reduce As Byte) As Byte
Dim i%
Dim temp_record As total_record_type
If triA1% > 0 And triA2% > 0 Then
If triA1% > triA2% Then
i% = triA1%
 triA1% = triA2%
  triA2% = i%
i% = re1%
 re1% = re2%
  re2% = re1%
End If
If th_chose(20).chose = 1 Then
For i% = 1 To last_conditions.last_cond(1).point_pair_for_similar_no
 If point_pair_for_similar(i%).data(0).triA(0) = triA1% And _
   point_pair_for_similar(i%).data(0).triA(1) = triA2% Then
    set_point_pair_for_similar = i%
     If point_pair_for_similar(i%).data(0).point_pair_no(0) = 0 Then
      point_pair_for_similar(i%).data(0).point_pair_no(0) = no%
     ElseIf point_pair_for_similar(i%).data(0).point_pair_no(1) = 0 Then
      point_pair_for_similar(i%).data(0).point_pair_no(1) = no%
       If set_direction(re1%, re2%) = _
        set_direction(point_pair_for_similar(i%).data(0).direction(0), _
          point_pair_for_similar(i%).data(0).direction(1)) Then
        point_pair_for_similar(i%).data(0).is_proved = 1
       temp_record.record_data.data0.condition_data.condition_no = 2
        temp_record.record_data.data0.condition_data.condition(1).ty = dpoint_pair_
         temp_record.record_data.data0.condition_data.condition(2).ty = dpoint_pair_
          temp_record.record_data.data0.condition_data.condition(1).no = point_pair_for_similar(i%).data(0).point_pair_no(0)
           temp_record.record_data.data0.condition_data.condition(2).no = no%
            temp_record.record_data.data0.theorem_no = 12
     set_point_pair_for_similar = _
        set_similar_triangle0(triA1%, triA2%, re1%, re2%, temp_record, 0, no_reduce, 1)
     End If
     ElseIf point_pair_for_similar(i%).data(0).point_pair_no(2) = 0 Then
        point_pair_for_similar(i%).data(0).point_pair_no(2) = no%
     End If
     Exit Function
 End If
Next i%
'If set_or_prove = 0 Then
If last_conditions.last_cond(1).point_pair_for_similar_no Mod 10 = 0 Then
ReDim Preserve point_pair_for_similar(last_conditions.last_cond(1).point_pair_for_similar_no + 10) _
    As point_pair_for_similar_type
End If
last_conditions.last_cond(1).point_pair_for_similar_no = last_conditions.last_cond(1).point_pair_for_similar_no + 1
point_pair_for_similar(last_conditions.last_cond(1).point_pair_for_similar_no).data(0) _
    = point_pair_for_similar_data_0
point_pair_for_similar(last_conditions.last_cond(1).point_pair_for_similar_no).data(0).triA(0) = triA1%
point_pair_for_similar(last_conditions.last_cond(1).point_pair_for_similar_no).data(0).triA(1) = triA2%
point_pair_for_similar(last_conditions.last_cond(1).point_pair_for_similar_no).data(0).direction(0) = re1%
point_pair_for_similar(last_conditions.last_cond(1).point_pair_for_similar_no).data(0).direction(1) = re2%
End If
'End If
End If
End Function

Public Function set_total_equal_triangle_from_eline(ByVal p1%, ByVal p2%, _
                  ByVal p3%, ByVal p4%, re As total_record_type, p%, _
                     ByVal no_reduce As Byte) As Byte
'由边相等推出三角形全等
Dim j%, k%, no%, tn%
Dim dn(2) As Integer
Dim con_no%
Dim triA(1) As temp_triangle_type
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim temp_record0 As total_record_type
Dim t_condition_data  As condition_data_type
Dim t_condition_data_(1) As condition_data_type
Dim re_ As record_data_type
Dim is_value_180 As Boolean
Dim total_equal As Boolean
Dim total_equal_type_S(2) As Byte
Dim total_equal_type_A(2) As Byte
total_equal_type_S(0) = 1
 con_no% = re.record_data.data0.condition_data.condition_no
 Call set_temp_triangle_from_lin(p1%, p2%, p%, triA(0), True)
  Call set_temp_triangle_from_lin(p3%, p4%, p%, triA(1), False)
   '设置与p1,p2及p3,p4有关的三角形,
For j% = 1 To triA(0).last_T
 For k% = 1 To triA(1).last_T
 '配对
 total_equal_type_S(1) = 0
 total_equal_type_S(2) = 0
 total_equal_type_A(0) = 0
 total_equal_type_A(1) = 0
 total_equal_type_A(2) = 0
  If triA(0).data(j%).no <> triA(1).data(k%).no Then '不同的三角形
   If p% = 0 Or triA(0).data(j%).is_contain_p Or _
        triA(1).data(k%).is_contain_p Then
    If triangle(triA(0).data(j%).no).epolygon_no = 0 Or _
        triangle(triA(1).data(k%).no).epolygon_no = 0 Then
         total_equal = False
     If p% > 0 Then
      If triA(0).data(j%).poi(0) <> p% And triA(1).data(k%).poi(0) <> p% Then
       GoTo set_total_equal_triangle_from_eline_mark1
      End If
     End If
If th_chose(36).chose = 1 Then
 If triA(0).data(j%).no = triA(1).data(k%).no And triA(0).data(j%).no > 0 Then
  If triA(1).data(k%).poi(1) = triA(0).data(j%).poi(0) Then
   temp_record = re
    temp_record.record_data.data0.theorem_no = 36
     set_total_equal_triangle_from_eline = set_three_angle_value(triA(0).data(j%).angle(0), _
     triA(1).data(k%).angle(0), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 5, 0, 0, False)
      If set_total_equal_triangle_from_eline > 1 Then
       Exit Function
      End If
      If is_equal_dline(triA(0).data(j%).poi(2), triA(0).data(j%).poi(1), _
        triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, _
         dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
          cond_type, "", record_0.data0.condition_data) Then
       temp_record = re
        Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record0.record_data.data0.condition_data)
         set_total_equal_triangle_from_eline = set_equal_sides_triangle( _
          triA(0).data(j%).no, temp_record, no_reduce)
      If set_total_equal_triangle_from_eline > 1 Then
       Exit Function
      End If
    End If
 ElseIf triA(1).data(k%).poi(2) = triA(0).data(j%).poi(0) Then
       temp_record = re
   set_total_equal_triangle_from_eline = set_three_angle_value(triA(0).data(j%).angle(0), _
     triA(1).data(k%).angle(0), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 5, 0, 0, False)
      If set_total_equal_triangle_from_eline > 1 Then
       Exit Function
      End If
 Else
  GoTo set_total_equal_triangle_from_eline_mark1
 End If
End If
End If
If finish_prove = 1 Then
If is_total_equal_Triangle(triA(0).data(j%).no, triA(1).data(k%).no, _
 triA(0).data(j%).direction, triA(1).data(k%).direction, 0, -1000, _
  0, 0, two_triangle0, record_0, 0) Then
   GoTo set_total_equal_triangle_from_eline_mark1
 End If
 End If
 temp_record.record_data.data0.condition_data.condition_no = 0
  '**********************************************************
  record_0.data0.condition_data.condition_no = 0
   If is_equal_dline(triA(0).data(j%).poi(0), triA(0).data(j%).poi(1), _
     triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, _
      dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
       cond_type, "", record_0.data0.condition_data) Then '边等
         temp_record0.record_data = re.record_data
           Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record0.record_data.data0.condition_data)
    '两对边相等
    total_equal_type_S(2) = 1
     record_0.data0.condition_data.condition_no = 0
      If is_equal_dline(triA(0).data(j%).poi(0), triA(0).data(j%).poi(2), _
       triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, _
        dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
         cond_type, "", record_0.data0.condition_data) And th_chose(31).chose = 1 Then
    '(SSS) 三边相等
       temp_record1 = temp_record0
        Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
         temp_record1.record_data.data0.theorem_no = 31
     If finish_prove = 1 Then
             temp_record = temp_record1
        GoTo set_total_equal_triangle_from_eline_mark2
     Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
             temp_record = temp_record1
        End If
        total_equal_type_S(1) = 1
         total_equal = True
     End If
     End If
    If is_equal_angle(triA(0).data(j%).angle(1), _
      triA(1).data(k%).angle(1), dn(0), dn(1)) And th_chose(28).chose = 1 Then '两边一夹角
    '(SAS)
        If angle(triA(0).data(j%).angle(1)).data(0).value = "90" Then
         total_equal_type_A(1) = 2
        Else
         total_equal_type_A(1) = 1
        End If
         temp_record1 = temp_record0
          temp_record1.record_data.data0.theorem_no = 28
        Call add_conditions_to_record(angle3_value_, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
        If finish_prove = 1 Then
         temp_record = temp_record1
          GoTo set_total_equal_triangle_from_eline_mark2
        Else
          If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
             temp_record = temp_record1
          End If
            total_equal = True
        End If
    ' elseif
    ' elseif
     End If
     '    GoTo set_total_equal_triangle_from_eline_mark1
     If angle(triA(0).data(j%).angle(0)).data(0).value = "90" And th_chose(32).chose = 1 Then
      temp_record1 = temp_record0
          temp_record1.record_data.data0.theorem_no = 32
      Call add_conditions_to_record(angle3_value_, angle(triA(0).data(j%).angle(0)).data(0).value_no, _
               0, 0, temp_record1.record_data.data0.condition_data)
      If angle(triA(1).data(k%).angle(0)).data(0).value = "90" Then
      '(SSA)
       Call add_conditions_to_record(angle3_value_, angle(triA(1).data(k%).angle(0)).data(0).value_no, _
             0, 0, temp_record1.record_data.data0.condition_data)
       If finish_prove = 1 Then
          temp_record = temp_record1
         GoTo set_total_equal_triangle_from_eline_mark2
       Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
         temp_record = temp_record1
        End If
        total_equal = True
       total_equal_type_A(0) = 2
       End If
      End If
     End If '     GoTo set_total_equal_triangle_from_eline_mark1
     If angle(triA(0).data(j%).angle(2)).data(0).value = "90" And th_chose(32).chose = 1 Then
         temp_record1 = temp_record0
     temp_record1.record_data.data0.theorem_no = 32
      Call add_conditions_to_record(angle3_value_, angle(triA(0).data(j%).angle(2)).data(0).value_no, _
            0, 0, temp_record1.record_data.data0.condition_data)
       If angle(triA(1).data(k%).angle(2)).data(0).value = "90" Then
       Call add_conditions_to_record(angle3_value_, angle(triA(1).data(k%).angle(2)).data(0).value_no, _
               0, 0, temp_record1.record_data.data0.condition_data)
    If finish_prove = 1 Then
        temp_record = temp_record1
         GoTo set_total_equal_triangle_from_eline_mark2
    Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
         temp_record = temp_record1
        End If
        total_equal = True
        total_equal_type_A(2) = 2
    End If
    End If
    End If
End If
  '************************************************************
record_0.data0.condition_data.condition_no = 0
If is_equal_dline(triA(0).data(j%).poi(0), triA(0).data(j%).poi(2), _
     triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, _
      dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
        cond_type, "", record_0.data0.condition_data) Then '两边相等
                total_equal_type_S(1) = 1
     temp_record0.record_data = re.record_data
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record0.record_data.data0.condition_data)
   record_0.data0.condition_data.condition_no = 0
    If is_equal_angle(triA(0).data(j%).angle(2), _
      triA(1).data(k%).angle(2), dn(0), dn(1)) And th_chose(28).chose = 1 Then '夹角
    '(SAS)
      temp_record1 = temp_record0
      temp_record1.record_data.data0.theorem_no = 28
       Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
   If finish_prove = 1 Then
        temp_record = temp_record1
    GoTo set_total_equal_triangle_from_eline_mark2
   Else
        If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = True
        total_equal_type_S(2) = 1
    End If
  End If
  If angle(triA(0).data(j%).angle(0)).data(0).value = "90" And th_chose(32).chose = 1 Then
    temp_record1 = temp_record0
    temp_record1.record_data.data0.theorem_no = 32
      Call add_conditions_to_record(angle3_value_, angle(triA(0).data(j%).angle(0)).data(0).value_no, _
          0, 0, temp_record1.record_data.data0.condition_data)
     If angle(triA(1).data(k%).angle(0)).data(0).value = "90" Then
    '(SSA)
       Call add_conditions_to_record(angle3_value_, angle(triA(1).data(k%).angle(0)).data(0).value_no, _
          0, 0, temp_record1.record_data.data0.condition_data)
    If finish_prove = 1 Then
        temp_record = temp_record1
    GoTo set_total_equal_triangle_from_eline_mark2
   Else
       If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
        temp_record = temp_record1
        End If
        total_equal = True
        total_equal_type_A(0) = 2
    End If
    End If
    End If
      'GoTo set_total_equal_triangle_from_eline_mark1
   If angle(triA(0).data(j%).angle(1)).data(0).value = "90" And th_chose(32).chose = 1 Then
   temp_record1 = temp_record0
    temp_record1.record_data.data0.theorem_no = 32
      Call add_conditions_to_record(angle3_value_, angle(triA(0).data(j%).angle(1)).data(0).value_no, _
         0, 0, temp_record1.record_data.data0.condition_data)
      If angle(triA(1).data(k%).angle(1)).data(0).value = "90" Then
     '(SSA)
       Call add_conditions_to_record(angle3_value_, angle(triA(1).data(k%).angle(1)).data(0).value_no, _
           0, 0, temp_record1.record_data.data0.condition_data)
   If finish_prove = 1 Then
        temp_record = temp_record1
    GoTo set_total_equal_triangle_from_eline_mark2
   Else
    If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
     temp_record = temp_record1
        End If
        total_equal = True
        total_equal_type_A(1) = 2
   End If
   End If
  End If
  End If
  record_0.data0.condition_data.condition_no = 0
'******************************
     temp_record0.record_data = re.record_data
 If is_equal_angle(triA(0).data(j%).angle(1), _
      triA(1).data(k%).angle(1), dn(0), dn(1)) Then
       Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record0.record_data.data0.condition_data)
       record_0.data0.condition_data.condition_no = 0
        temp_record1 = temp_record0
     If is_equal_angle(triA(0).data(j%).angle(2), _
       triA(1).data(k%).angle(2), dn(0), dn(1)) And th_chose(29).chose = 1 Then
        '   (ASA)
        temp_record1.record_data.data0.theorem_no = 29
         Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
          If finish_prove = 1 Then
           temp_record = temp_record1
            GoTo set_total_equal_triangle_from_eline_mark2
          Else
              If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
               compare_two_record(temp_record1.record_data, temp_record.record_data) Then
                temp_record = temp_record1
              End If
               total_equal = True
                  If angle(triA(0).data(j%).angle(2)).data(0).value = "90" Then
                       total_equal_type_A(1) = 2
                  Else
                       total_equal_type_A(1) = 1
                  End If
          End If
      End If
           record_0.data0.condition_data.condition_no = 0
            temp_record1 = temp_record0
      If is_equal_angle(triA(0).data(j%).angle(0), triA(1).data(k%).angle(0), dn(0), _
         dn(1)) And th_chose(30).chose = 1 Then
         '(SAA)
          Call add_conditions_to_record(angle3_value_, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
           temp_record1.record_data.data0.theorem_no = 30
            If finish_prove = 1 Then
             temp_record = temp_record1
               GoTo set_total_equal_triangle_from_eline_mark2
            Else
              If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
                compare_two_record(temp_record1.record_data, temp_record.record_data) Then
                 temp_record = temp_record1
              End If
               total_equal = True
                  If angle(triA(0).data(j%).angle(0)).data(0).value = "90" Then
                       total_equal_type_A(0) = 2
                  Else
                       total_equal_type_A(0) = 1
                  End If
              End If
       Else 'If run_type > 4 Then
       t_condition_data.condition_no = 0
       't_condition_data(1).condition_no = 0
      If is_two_angle_value_180(triA(0).data(j%).angle(0), triA(1).data(k%).angle(0), t_condition_data, is_value_180) Then
        total_equal_type_A(0) = 2
       If triA(0).data(j%).poi(0) <> triA(1).data(k%).poi(0) Or _
            triA(0).data(j%).poi(2) <> triA(1).data(k%).poi(2) Then
        If is_equal_dline(triA(0).data(j%).poi(2), triA(0).data(j%).poi(0), _
         triA(1).data(k%).poi(2), triA(1).data(k%).poi(0), 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
        temp_record1.record_data.data0.theorem_no = 30
        tn% = 0
        set_total_equal_triangle_from_eline = set_pseudo_total_equal_triangle(triA(0).data(j%), triA(1).data(k%), 2, 0, 2, 0, tn%, _
            temp_record1.record_data.data0, t_condition_data)
           If set_total_equal_triangle_from_eline > 1 Then
             Exit Function
           ElseIf set_total_equal_triangle_from_eline > 0 Then
            pseudo_total_equal_triangle(tn%).data(0).ty = 0
           End If
       '  temp_record1.record_data.data0.theorem_no = 24
       '  temp_record1.record_data.data0.condition_data.condition_no = 1
       '  temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
       '  temp_record1.record_data.data0.condition_data.condition(1).no = tn%
       '    set_total_equal_triangle_from_eline = set_equal_dline(triA(0).data(j%).poi(2), triA(0).data(j%).poi(0), _
            triA(1).data(k%).poi(2), triA(1).data(k%).poi(0), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
       '      If set_total_equal_triangle_from_eline > 1 Then
       '       Exit Function
       '      End If
         GoTo set_total_equal_triangle_from_eline_mark10
         End If
         End If
        End If
      End If
    End If
  record_0.data0.condition_data.condition_no = 0
    If is_equal_angle(triA(0).data(j%).angle(2), triA(1).data(k%).angle(2), dn(0), _
       dn(1)) Then
    '(SAS)
                 If angle(triA(0).data(j%).angle(2)).data(0).value = "90" Then
                   total_equal_type_A(2) = 2
                  Else
                    total_equal_type_A(2) = 1
                  End If
    temp_record0.record_data = re.record_data
     record_0.data0.condition_data.condition_no = 0
       Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record0.record_data.data0.condition_data)
     temp_record1 = temp_record0
      If is_equal_angle(triA(0).data(j%).angle(0), _
       triA(1).data(k%).angle(0), dn(0), dn(1)) And th_chose(28).chose = 1 Then
    '(SAS)
            Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record1.record_data.data0.condition_data)
          temp_record1.record_data.data0.theorem_no = 30
         If finish_prove = 1 Then
           temp_record = temp_record1
            GoTo set_total_equal_triangle_from_eline_mark2
         Else
           If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            compare_two_record(temp_record1.record_data, temp_record.record_data) Then
              temp_record = temp_record1
           End If
            total_equal = True
                  If angle(triA(0).data(j%).angle(0)).data(0).value = "90" Then
                   total_equal_type_A(0) = 2
                  Else
                    total_equal_type_A(0) = 1
                  End If
         End If
       Else 'If run_type > 4 Then
        t_condition_data.condition_no = 0
        't_condition_data(1).condition_no = 0
        If is_two_angle_value_180(triA(0).data(j%).angle(0), triA(1).data(k%).angle(0), t_condition_data, is_value_180) Then
         If is_value_180 = False Then
          total_equal_type_A(0) = 2
        If triA(0).data(j%).poi(1) <> triA(1).data(k%).poi(1) Or _
            triA(0).data(j%).poi(0) <> triA(1).data(k%).poi(0) Then
       temp_record1.record_data.data0.theorem_no = 30
       If is_equal_dline(triA(0).data(j%).poi(1), triA(0).data(j%).poi(0), _
         triA(1).data(k%).poi(1), triA(1).data(k%).poi(0), 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
           '相等关系不成立,应用拟全等
                  tn% = 0
       If set_pseudo_total_equal_triangle(triA(0).data(j%), triA(1).data(k%), 1, 0, 1, 0, tn%, _
           temp_record1.record_data.data0, t_condition_data) Then
         pseudo_total_equal_triangle(tn%).data(0).ty = 0
       End If
       End If
 '        temp_record1.record_data.data0.theorem_no = 24
 '        temp_record1.record_data.data0.condition_data.condition_no = 1
 '        temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
 '        temp_record1.record_data.data0.condition_data.condition(1).no = tn%
 '       set_total_equal_triangle_from_eline = set_equal_dline(triA(0).data(j%).poi(1), triA(0).data(j%).poi(0), _
 '        triA(1).data(k%).poi(1), triA(1).data(k%).poi(0), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
 '         If set_total_equal_triangle_from_eline > 1 Then
 '          Exit Function
 '        End If
          GoTo set_total_equal_triangle_from_eline_mark10
         End If
         End If
         End If
       End If
     End If
       record_0.data0.condition_data.condition_no = 0
     If is_equal_angle(triA(0).data(j%).angle(0), triA(1).data(k%).angle(0), dn(0), _
       dn(1)) Then
       If angle(triA(0).data(j%).angle(0)).data(0).value = "90" Then
        total_equal_type_A(0) = 2
       Else
        total_equal_type_A(0) = 1
       End If
      '(SAS)
        temp_record0.record_data = re.record_data
         record_0.data0.condition_data.condition_no = 0
          Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record0.record_data.data0.condition_data)
           temp_record1 = temp_record0
           t_condition_data.condition_no = 0
           't_condition_data(1).condition_no = 0
        If is_two_angle_value_180(triA(0).data(j%).angle(1), triA(1).data(k%).angle(1), t_condition_data, is_value_180) Then
         If is_value_180 = False Then
           total_equal_type_A(1) = 2
        If triA(0).data(j%).poi(0) <> triA(1).data(k%).poi(0) Or _
            triA(0).data(j%).poi(2) <> triA(1).data(k%).poi(2) Then
         If is_equal_dline(triA(0).data(j%).poi(0), triA(0).data(j%).poi(2), _
                triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, _
                  0, -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
          temp_record1.record_data.data0.theorem_no = 30
          tn% = 0
        set_total_equal_triangle_from_eline = _
          set_pseudo_total_equal_triangle(triA(0).data(j%), triA(1).data(k%), 2, 1, 0, 2, tn%, _
            temp_record1.record_data.data0, t_condition_data)
             pseudo_total_equal_triangle(tn%).data(0).ty = 1
         If set_total_equal_triangle_from_eline > 1 Then
          Exit Function
         End If
        End If
'         temp_record1.record_data.data0.theorem_no = 24
'         temp_record1.record_data.data0.condition_data.condition_no = 1
'         temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
'         temp_record1.record_data.data0.condition_data.condition(1).no = tn%
'            set_total_equal_triangle_from_eline = set_equal_dline(triA(0).data(j%).poi(0), triA(0).data(j%).poi(2), _
                triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
'            If set_total_equal_triangle_from_eline > 1 Then
'              Exit Function
'            End If
           GoTo set_total_equal_triangle_from_eline_mark10
          End If
          End If
        ElseIf is_two_angle_value_180(triA(0).data(j%).angle(2), triA(1).data(k%).angle(2), t_condition_data, _
                  is_value_180) Then
        If is_value_180 = False Then
        total_equal_type_A(2) = 2
       If triA(0).data(j%).poi(1) <> triA(1).data(k%).poi(1) Or _
            triA(0).data(j%).poi(0) <> triA(1).data(k%).poi(0) Then
         If is_equal_dline(triA(0).data(j%).poi(0), triA(0).data(j%).poi(1), _
                triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, _
                  0, -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
         temp_record1.record_data.data0.theorem_no = 30
         tn% = 0
        set_total_equal_triangle_from_eline = _
         set_pseudo_total_equal_triangle(triA(0).data(j%), triA(1).data(k%), 1, 2, 0, 1, tn%, _
          temp_record1.record_data.data0, t_condition_data)
         pseudo_total_equal_triangle(tn%).data(0).ty = 1
        If set_total_equal_triangle_from_eline > 1 Then
         Exit Function
        End If
        End If
'         temp_record1.record_data.data0.theorem_no = 24
'         temp_record1.record_data.data0.condition_data.condition_no = 1
'         temp_record1.record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
'         temp_record1.record_data.data0.condition_data.condition(1).no = tn%
'           set_total_equal_triangle_from_eline = set_equal_dline(triA(0).data(j%).poi(0), triA(0).data(j%).poi(1), _
'                triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, 0, temp_record1, 0, 0, 0, 0, 0)
'            If set_total_equal_triangle_from_eline > 1 Then
'              Exit Function
'            End If
           GoTo set_total_equal_triangle_from_eline_mark10
         End If
         End If
        End If
     End If
 '(ASA)
 '***************************************************************
If total_equal Then
set_total_equal_triangle_from_eline_mark2:
  set_total_equal_triangle_from_eline = set_total_equal_triangle0(triA(0).data(j%).no, triA(1).data(k%).no, _
     triA(0).data(j%).direction, triA(1).data(k%).direction, temp_record, 0, no_reduce)
     If set_total_equal_triangle_from_eline > 1 Then
      Exit Function
      End If
Else

End If
set_total_equal_triangle_from_eline_mark1:
End If
End If
End If
Call set_aid_point_data(triA(0).data(j%), triA(1).data(k%), total_equal_type_S, total_equal_type_A)
set_total_equal_triangle_from_eline_mark10:
Next k%
Next j%
End Function

Public Function set_angle_display_string(ByVal A%) As String
set_angle_display_string = set_display_angle0( _
 m_poi(m_lin(angle(A%).data(0).line_no(0)).data(0).data0.poi(angle(A%).data(0).te(0))).data(0).data0.name + _
  m_poi(angle(A%).data(0).poi(1)).data(0).data0.name + _
   m_poi(m_lin(angle(A%).data(0).line_no(1)).data(0).data0.poi(angle(A%).data(0).te(1))).data(0).data0.name)
    Call C_display_picture.set_dot_line(0, 0, angle(A%).data(0).line_no(0), 0)
    Call C_display_picture.set_dot_line(0, 0, angle(A%).data(1).line_no(1), 0)
End Function
Public Function set_triangle_display_string(ByVal A%, ByVal direction%, dis_or_no As Boolean, _
                              is_depend As Boolean, ty As Byte, st%) As String
Dim p(2) As Integer
Dim i%
Call read_triangle_element(A%, direction, p(0), p(1), p(2), _
                                   0, 0, 0, 0, 0, 0, 0, 0, 0)
If is_depend Then
For i% = 0 To 2
Call set_depend_from_point(p(i%))
Next i%
End If
If ty = 0 Then
set_triangle_display_string = LoadResString_(1385, "") + _
 m_poi(p(0)).data(0).data0.name + m_poi(p(1)).data(0).data0.name + m_poi(p(2)).data(0).data0.name
Else
set_triangle_display_string = "\\" + Trim(str(st%)) + "\\" + m_poi(p(0)).data(0).data0.name + _
                              "\\" + Trim(str(st% + 1)) + "\\" + m_poi(p(1)).data(0).data0.name + _
                              "\\" + Trim(str(st% + 2)) + "\\" + m_poi(p(2)).data(0).data0.name
End If
If dis_or_no = display Then
Call C_display_picture.set_dot_line(p(0), p(1), 0, 0)
Call C_display_picture.set_dot_line(p(1), p(2), 0, 0)
Call C_display_picture.set_dot_line(p(0), p(2), 0, 0)
End If
End Function
Public Function set_angle_relation(ByVal A1%, ByVal A2%, ByVal v1$, _
     ByVal v2$, re As total_record_type, ByVal no%, ByVal no_reduce As Byte, reduce As Boolean) As Byte
set_angle_relation = set_three_angle_value(A1%, A2%, 0, time_string(-1, v2$, True, False), _
      v1$, "0", "0", 0, re, 0, 0, 0, 5, 0, 0, reduce)
'************************************************************
End Function

Public Function set_property_of_dparal(ByVal l1%, ByVal l2%, _
    ByVal p1%, ByVal p2%, re As total_record_type, ByVal no_reduce As Byte) As Byte
'设置平行线的角的关系
Dim i%, j%, k%, l%, no%, n%, m%
Dim ty As Byte
Dim triA(1) As Integer
Dim dn(2) As Integer
Dim tn(2) As Integer
Dim tp(1) As Integer
Dim tp1(1) As Integer
Dim tp2(1) As Integer
Dim A(1) As Integer
Dim re_v$
Dim temp_record As total_record_type
Dim re_ As record_data_type
Dim c_data As condition_data_type
Dim dr_data As relation_data0_type
Dim area_ele(1) As condition_type
'On Error GoTo set_property_of_dparal_error
'set_property_of_dparal = add_point_from_paral_and_circle(
'       re.record_data.data0.condition_data.condition(1).no, 0)
'       If set_property_of_dparal > 1 Then
'        Exit Function
'       End If
If th_chose(11).chose = 1 Or th_chose(12).chose = 1 Or th_chose(13).chose = 1 Then
temp_record = re
set_property_of_dparal = set_angle_from_paral(l1%, l2%, p1%, p2%, temp_record.record_data, no_reduce)
If set_property_of_dparal > 1 Then
 Exit Function
End If
End If
'*****************
'中位线定理
For i% = 2 To m_lin(l1%).data(0).data0.in_point(0)
 For j% = 1 To i% - 1
  For k% = 1 To m_lin(l2%).data(0).data0.in_point(0)
   temp_record = re
   triA(0) = triangle_number(m_lin(l1%).data(0).data0.in_point(i%), _
          m_lin(l2%).data(0).data0.in_point(k%), m_lin(l1%).data(0).data0.in_point(j%), _
           0, 0, 0, 0, 0, 0, 0)
    If triangle(triA(0)).data(0).Area <> "" Then
     Call add_conditions_to_record(area_of_element_, triangle(triA(0)).data(0).area_no, 0, 0, _
                temp_record.record_data.data0.condition_data)
      temp_record.record_data.data0.theorem_no = 157
      For l% = 1 To m_lin(l2%).data(0).data0.in_point(0)
       If l% <> k% Then
        triA(1) = triangle_number(m_lin(l1%).data(0).data0.in_point(i%), _
          m_lin(l2%).data(0).data0.in_point(l%), m_lin(l1%).data(0).data0.in_point(j%), _
           0, 0, 0, 0, 0, 0, 0)
           set_property_of_dparal = set_area_of_triangle(triA(1), triangle(triA(0)).data(0).Area, _
              temp_record, 0, 0)
            If set_property_of_dparal > 1 Then '
             Exit Function
            End If
       End If
      Next l%
    End If
   temp_record = re
   temp_record.record_data.data0.theorem_no = 0
   A(0) = angle_number(m_lin(l1%).data(0).data0.in_point(i%), _
        m_lin(l2%).data(0).data0.in_point(k%), m_lin(l1%).data(0).data0.in_point(j%), _
         0, 0)
    If angle(Abs(A(0))).data(0).value = "90" Then
     Call add_conditions_to_record(angle3_value_, angle(Abs(A(0))).data(0).value_no, _
             0, 0, temp_record.record_data.data0.condition_data)
      If get_midpoint(m_lin(l1%).data(0).data0.in_point(i%), 0, _
          m_lin(l1%).data(0).data0.in_point(j%), 0, 0, 0, 0, 0) = 0 Then
        If is_equal_dline(m_lin(l1%).data(0).data0.in_point(i%), _
         m_lin(l2%).data(0).data0.in_point(k%), m_lin(l1%).data(0).data0.in_point(j%), _
          m_lin(l2%).data(0).data0.in_point(k%), 0, 0, 0, 0, 0, 0, _
           dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
            ty, "", record_0.data0.condition_data) Then
        Call add_conditions_to_record(ty, dn(0), dn(1), dn(2), _
           temp_record.record_data.data0.condition_data)
        For n% = 1 + last_conditions.last_cond(0).verti_no To last_conditions.last_cond(1).verti_no
         l% = Dverti(n%).data(0).record.data1.index.i(0)
         Call add_conditions_to_record(verti_, l%, 0, 0, temp_record.record_data.data0.condition_data)
         If Dverti(l%).data(0).line_no(0) = l1% Then
          l% = Dverti(l%).data(0).line_no(1)
           GoTo set_property_of_paral_mark1
         ElseIf Dverti(l%).data(0).line_no(1) = l1% Then
          l% = Dverti(l%).data(0).line_no(0)
           GoTo set_property_of_paral_mark1
         End If
        Next n%
           GoTo set_property_of_paral_mark2
set_property_of_paral_mark1:
         tp(0) = is_line_line_intersect(l%, l1%, _
            tn(0), 0, False)
         tp(1) = is_line_line_intersect(l%, l2%, _
            tn(1), 0, False)
            If tp(0) > 0 And tp(1) > 0 Then
             set_property_of_dparal = set_Drelation( _
              m_lin(l1%).data(0).data0.in_point(j%), m_lin(l1%).data(0).data0.in_point(i%), _
               tp(0), tp(1), j%, i%, tn(0), tn(1), l1%, l%, _
                "2", temp_record, 0, 0, 0, 0, no_reduce, False)
             If set_property_of_dparal > 1 Then
              Exit Function
             End If
                
            End If
set_property_of_paral_mark2:
       End If
      End If
    End If
  Next k%
  Next j%
Next i%
'***********************
If th_chose(157).chose = 1 Then
For i% = 2 To m_lin(l2%).data(0).data0.in_point(0)
 For j% = 1 To i% - 1
  For k% = 1 To m_lin(l1%).data(0).data0.in_point(0)
   temp_record.record_data = re.record_data
    'If triangle(triA(0)).data(0).area <> "" Then
     temp_record = re
      temp_record.record_data.data0.theorem_no = 157
      For l% = 1 To m_lin(l1%).data(0).data0.in_point(0)
       If l% <> k% Then
       triA(0) = triangle_number(m_lin(l2%).data(0).data0.in_point(i%), _
              m_lin(l1%).data(0).data0.in_point(k%), m_lin(l2%).data(0).data0.in_point(j%), _
                0, 0, 0, 0, 0, 0, 0)
       triA(1) = triangle_number(m_lin(l2%).data(0).data0.in_point(i%), _
          m_lin(l1%).data(0).data0.in_point(l%), m_lin(l2%).data(0).data0.in_point(j%), _
           0, 0, 0, 0, 0, 0, 0)
        If triangle(triA(0)).data(0).Area <> "" And triangle(triA(1)).data(0).Area = "" Then
         Call add_conditions_to_record(area_of_element_, triangle(triA(0)).data(0).area_no, 0, 0, _
                temp_record.record_data.data0.condition_data)
          set_property_of_dparal = set_area_of_triangle(triA(1), triangle(triA(0)).data(0).Area, _
              temp_record, 0, 0)
            If set_property_of_dparal > 1 Then '
             Exit Function
            End If
        ElseIf triangle(triA(1)).data(0).Area <> "" And triangle(triA(0)).data(0).Area = "" Then
         Call add_conditions_to_record(area_of_element_, triangle(triA(0)).data(1).area_no, 0, 0, _
                temp_record.record_data.data0.condition_data)
           set_property_of_dparal = set_area_of_triangle(triA(0), triangle(triA(1)).data(0).Area, _
              temp_record, 0, 0)
            If set_property_of_dparal > 1 Then '
             Exit Function
            End If
        ElseIf triangle(triA(0)).data(0).Area = "" And triangle(triA(1)).data(0).Area = "" Then
            set_property_of_dparal = set_equal_area_triangle(triA(0), triA(1), temp_record, 0, 1, 0)
            If set_property_of_dparal > 1 Then '
             Exit Function
            End If
         End If
   triA(0) = triangle_number(m_lin(l1%).data(0).data0.in_point(l%), _
          m_lin(l1%).data(0).data0.in_point(k%), m_lin(l2%).data(0).data0.in_point(i%), _
           0, 0, 0, 0, 0, 0, 0)
   triA(1) = triangle_number(m_lin(l1%).data(0).data0.in_point(l%), _
          m_lin(l1%).data(0).data0.in_point(k%), m_lin(l2%).data(0).data0.in_point(j%), _
           0, 0, 0, 0, 0, 0, 0)
         If triangle(triA(0)).data(0).Area <> "" And triangle(triA(1)).data(0).Area = "" Then
           set_property_of_dparal = set_area_of_triangle(triA(1), triangle(triA(0)).data(0).Area, _
              temp_record, 0, 0)
            If set_property_of_dparal > 1 Then '
             Exit Function
            End If
        ElseIf triangle(triA(1)).data(0).Area <> "" And triangle(triA(0)).data(0).Area = "" Then
           set_property_of_dparal = set_area_of_triangle(triA(0), triangle(triA(1)).data(0).Area, _
              temp_record, 0, 0)
            If set_property_of_dparal > 1 Then '
             Exit Function
            End If
        ElseIf triangle(triA(0)).data(0).Area = "" And triangle(triA(1)).data(0).Area = "" Then
            set_property_of_dparal = set_equal_area_triangle(triA(0), triA(1), temp_record, 0, 1, 0)
            If set_property_of_dparal > 1 Then '
             Exit Function
            End If
         End If
     
        End If
      Next l%
   
   temp_record.record_data = re.record_data
   A(0) = angle_number(m_lin(l2%).data(0).data0.in_point(i%), _
        m_lin(l1%).data(0).data0.in_point(k%), m_lin(l2%).data(0).data0.in_point(j%), _
         0, 0)
    If angle(Abs(A(0))).data(0).value = "90" Then
     Call add_conditions_to_record(angle3_value_, angle(Abs(A(0))).data(0).value_no, _
          0, 0, temp_record.record_data.data0.condition_data)
      If get_midpoint(m_lin(l2%).data(0).data0.in_point(i%), 0, _
          m_lin(l2%).data(0).data0.in_point(j%), 0, 0, 0, 0, 0) = 0 Then
        If is_equal_dline(m_lin(l2%).data(0).data0.in_point(i%), _
         m_lin(l1%).data(0).data0.in_point(k%), m_lin(l2%).data(0).data0.in_point(j%), _
          m_lin(l1%).data(0).data0.in_point(k%), 0, 0, 0, 0, 0, 0, _
           dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
            ty, "", record_0.data0.condition_data) Then
        Call add_conditions_to_record(ty, dn(0), dn(1), dn(2), _
           temp_record.record_data.data0.condition_data)
        For n% = 1 + last_conditions.last_cond(0).verti_no To last_conditions.last_cond(1).verti_no
         l% = Dverti(n%).data(0).record.data1.index.i(0)
         Call add_conditions_to_record(verti_, l%, 0, 0, temp_record.record_data.data0.condition_data)
         If Dverti(l%).data(0).line_no(0) = l1% Then
          l% = Dverti(l%).data(0).line_no(1)
           GoTo set_property_of_paral_mark5
         ElseIf Dverti(l%).data(0).line_no(1) = l1% Then
          l% = Dverti(l%).data(0).line_no(0)
           GoTo set_property_of_paral_mark5
         End If
        Next n%
           GoTo set_property_of_paral_mark6
set_property_of_paral_mark5:
         tp(0) = is_line_line_intersect(l%, l1%, _
            tn(0), 0, False)
         tp(1) = is_line_line_intersect(l%, l2%, _
            tn(1), 0, False)
            If tp(0) > 0 And tp(1) > 0 Then
             set_property_of_dparal = set_Drelation( _
              m_lin(l2%).data(0).data0.in_point(j%), m_lin(l2%).data(0).data0.in_point(i%), _
               tp(0), tp(1), j%, i%, tn(0), tn(1), l2%, l%, _
                "2", temp_record, 0, 0, 0, 0, no_reduce, False)
             If set_property_of_dparal > 1 Then
              Exit Function
             End If
                
            End If
set_property_of_paral_mark6:
       End If
      End If
    End If
  Next k%
  Next j%
Next i%
End If
Exit Function
set_property_of_dparal_error:
set_property_of_dparal = 0
End Function

Public Sub set_condition(num%)
Dim i%
For i% = 0 To 10
 If Asc(C_display_wenti.m_condition(num, i%)) > 63 And _
           Asc(C_display_wenti.m_condition(num, i%)) < 91 Then
    Call C_display_wenti.set_m_point_no(num, _
     point_number(C_display_wenti.m_condition(num, i%)), i%, False)
   If C_display_wenti.m_point_no(num, i%) = 0 Then
    Exit Sub
   End If
End If
Next i%
If Asc(C_display_wenti.m_condition(num, 0)) <> 8 And _
    Asc(C_display_wenti.m_condition(num, 0)) <> 32 Then '不是删除
Call draw_picture(num%, 0, False)
Else
 event_statue = ready '复原
End If
End Sub

Public Function min_by(n1 As Byte, n2 As Byte) As Byte
If n1 < n2 Then
 min_by = n1
Else
 min_by = n2
End If
End Function
Public Function max_by(n1 As Byte, n2 As Byte) As Byte
If n1 < n2 Then
 max_by = n2
Else
 max_by = n1
End If
End Function


Public Function set_mid_point_line(ByVal p1%, ByVal p2%, ByVal p3%, _
   ByVal p4%, ByVal p5%, ByVal p6%, _
     re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
 Dim i%, j%, tn%
Dim p(5) As Integer
Dim s As String
Dim temp_record As total_record_type
Dim level As Byte
'If (re.condition_data.condition_no = 0 And (draw_or_prove = 0 Or draw_or_prove = 5)) Or no% = -2 Then
'no_reduce = True
'End If
If no_reduce = 255 Then
 Exit Function
End If
If no% > 0 And draw_or_prove = 1 Then
 If mid_point_line(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_mid_point_line_mark0
 End If
End If
Call set_level(re.record_data.data0.condition_data)
If is_mid_point_line(p1%, p2%, p3%, p4%, p5%, p6%, _
   p(0), p(1), p(2), p(3), p(4), p(5), no%) Then
If no% > 0 And run_type < 10 Then
level = mid_point_line(no%).data(0).record.data0.condition_data.level
If set_prove_type(mid_point_line_, no%, re.record_data, _
   mid_point_line(no%).data(0).record) And set_or_prove < 2 Then
     Call simple_record(mid_point_line_, no%, mid_point_line(no%).data(0).record.data0.condition_data.level, _
       level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
      set_mid_point_line = 0
      Exit Function
     Else
     no_reduce = 2
 '    mid_point_line(no%).record_.no_reduce = 0
     GoTo set_mid_point_line_mark_0
     End If
End If
End If
If set_or_prove < 2 Then
  If no_reduce = 0 Then
   no% = 0
  End If
       set_mid_point_line = 0
   End If
    Exit Function
Else
 If set_or_prove = 2 Then
  set_mid_point_line = 0
    Exit Function
   End If
End If
If set_or_prove < 2 Then
If last_conditions.last_cond(1).mid_point_line_no Mod 10 = 0 Then
ReDim Preserve mid_point_line(last_conditions.last_cond(1).mid_point_line_no + 10) As mid_point_line_type
End If
last_conditions.last_cond(1).mid_point_line_no = last_conditions.last_cond(1).mid_point_line_no + 1
no% = last_conditions.last_cond(1).mid_point_line_no
mid_point_line(no%).data(0) = mid_point_line_data_0
For i% = 0 To 5
mid_point_line(no%).data(0).poi(i%) = p(i%)
Next i%
mid_point_line(no%).data(0).record = re.record_data
mid_point_line(no%).record_ = re.record_
mid_point_line(no%).record_.no_reduce = 0
End If
If last_conditions_for_aid_no > 0 Then
 If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
  If p(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      p(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       p(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       p(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        p(4) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
         p(5) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
  last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  End If
 End If
End If
set_mid_point_line = set_prove_proccess("", mid_point_line_, no%, mid_point_line(no%).data(0).record.display_string)
If set_mid_point_line > 1 Then
 Exit Function
End If
If no_reduce = 0 Then
Exit Function
End If
set_mid_point_line_mark0:
If mid_point_line(no%).record_.no_reduce = 0 Then
     mid_point_line(no%).record_.no_reduce = 255
       Call set_level_(mid_point_line(no%).record_.no_reduce, 1)
set_mid_point_line_mark_0:
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
temp_record.record_data.data0.condition_data.condition(1).ty = mid_point_line_
  temp_record.record_data.data0.condition_data.condition(1).no = no%
End If
End Function

Public Function combine_two_angle(ByVal A1%, _
  ByVal A2%, oA1%, oA1_%, oA0%, oA2%, oA2_%, oA%, ty As Byte, last As Byte, ty_ As Byte) As Boolean
'化简oA1%+oA2%=oA%
Dim tA%, tp%
Dim A(3) As Integer
Dim angle_data(1) As angle_data_type
'Dim ty1 As Byte
Dim last1 As Byte
oA0% = 0
oA% = 0
ty = 0
If A1% = 0 Or A2% = 0 Then
 Exit Function
ElseIf A1% > 0 And A2% > 0 Then
If A1% = A2% Then
  oA1% = A1%
  oA2% = A2%
  oA1_% = A1%
  oA2_% = A2%
  oA0% = 0
   oA% = 0
    ty = 2
     last = 0
    combine_two_angle = True
Else
If A1% > A2% Then
  oA1% = A1%
  oA2% = A2%
Else
  oA1% = A2%
  oA2% = A1%
End If
  oA1_% = oA1%
  oA2_% = oA2%
angle_data(0) = angle(A1%).data(0)
angle_data(1) = angle(A2%).data(0)
If angle_data(0).poi(1) = angle_data(1).poi(1) Then '共顶点
 If angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) And angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0) Then
    If angle(A1%).data(0).te(0) = angle(A2%).data(0).te(1) Then
     oA1% = A2%
     oA2% = A1% '平角
     oA1_% = A2%
     oA2_% = A1% '平角
     oA0% = 0
     oA% = 0
     ty = 20 '
    ElseIf angle(A1%).data(0).te(1) = angle(A2%).data(0).te(0) Then
     oA1% = A1%
     oA2% = A2%
     oA1_% = A1%
     oA2_% = A2%
     oA0% = 0
     oA% = 0
     ty = 20
    End If
    combine_two_angle = True
  ElseIf angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(0) And angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(1) Then
     If A1% < A2% Then
      oA1% = A1%
      oA2% = A2%
     Else
      oA1% = A2%
      oA2% = A1%
     End If
    oA1_% = oA1%
    oA2_% = oA2%
    oA0% = 0
     oA% = 0
     ty = 21 ' 对顶角
     combine_two_angle = True
  ElseIf angle_data(0).line_no(0) = angle_data(1).line_no(0) Then
  '共顶共边
     If angle_data(0).te(0) = angle_data(1).te(0) Then '第一边同
       tA% = angle_number(angle(A1%).data(0).poi(2), _
                angle(A2%).data(0).poi(1), angle(A2%).data(0).poi(2), 0, 0) '有正负
     Else
       tA% = angle_number(angle(A1%).data(0).poi(2), _
                angle(A2%).data(0).poi(1), _
                 m_lin(angle(A2%).data(0).line_no(1)).data(0).data0.poi((angle(A2%).data(0).te(1) + 1) Mod 2), 0, 0) '有正负
       If tA% = 0 Then
        tA% = angle_number(m_lin(angle(A1%).data(0).line_no(1)).data(0).data0.poi((angle(A1%).data(0).te(1) + 1) Mod 2), _
                angle(A2%).data(0).poi(1), angle(A2%).data(0).poi(2), 0, 0)               '有正负
       End If
     End If
   If tA% > 0 Then
    ty = 7
     oA1% = A1%
      oA2% = tA%
       oA% = A2%
        oA1_% = oA1%
         oA2_% = oA2%
       combine_two_angle = True
    ElseIf tA% < 0 Then
     ty = 8
      oA1% = A2%
       oA2% = -tA%
        oA% = A1%
         oA1_% = oA1%
          oA2_% = oA2%
         combine_two_angle = True
    End If
ElseIf angle_data(0).line_no(1) = angle_data(1).line_no(1) Then '2边=2边
   If angle_data(0).te(1) = angle_data(1).te(1) Then
       tA% = angle_number(angle(A1%).data(0).poi(0), _
                angle(A2%).data(0).poi(1), angle(A2%).data(0).poi(0), 0, 0) '有正负
     Else
       tA% = angle_number(angle(A1%).data(0).poi(0), _
                angle(A2%).data(0).poi(1), _
                 m_lin(angle(A2%).data(0).line_no(0)).data(0).data0.poi((angle(A2%).data(0).te(0) + 1) Mod 2), 0, 0) '有正负
       If tA% = 0 Then
        tA% = angle_number(m_lin(angle(A1%).data(0).line_no(0)).data(0).data0.poi((angle(A1%).data(0).te(0) + 1) Mod 2), _
                angle(A2%).data(0).poi(1), angle(A2%).data(0).poi(0), 0, 0)               '有正负
       End If
     End If
     If tA% > 0 Then
      ty = 4
       oA1% = tA%
        oA2% = A2%
         oA% = A1%
        combine_two_angle = True
     ElseIf tA% < 0 Then
      ty = 6
       oA1% = -tA%
        oA2% = A1%
         oA% = A2%
        combine_two_angle = True
     End If
        oA1_% = oA1%
         oA2_% = oA2%
ElseIf angle_data(0).line_no(0) = angle_data(1).line_no(1) Then ' 1bian=2bian
        tA% = angle_number(angle_data(1).poi(0), _
          angle_data(1).poi(1), angle_data(0).poi(2), 0, 0)
       oA1% = A2%
        oA2% = A1%
         oA% = Abs(tA%)
            oA0% = 0
     If angle_data(0).te(0) = angle_data(1).te(1) Then '同向
        If tA% > 0 Then
          ty = 5
       combine_two_angle = True
        ElseIf tA% < 0 Then
          ty = 10
         combine_two_angle = True
        ElseIf angle_data(0).line_no(1) = angle_data(1).line_no(0) Then
           ty = 20
        combine_two_angle = True
        End If
      Else 'If ty_ > 0 Then '反向
        If tA% < 0 Then
         ty = 15
          oA0% = -tA%
           oA% = 0
           combine_two_angle = True
        ElseIf tA% > 0 Then
         ty = 16
          oA0% = tA%
             oA% = 0
           combine_two_angle = True
        End If
       End If
         oA1_% = oA1%
          oA2_% = oA2%
 ElseIf angle_data(0).line_no(1) = angle_data(1).line_no(0) Then
       tA% = angle_number(angle_data(0).poi(0), _
          angle_data(1).poi(1), angle_data(1).poi(2), 0, 0)
      oA1% = A1%
       oA2% = A2%
        oA% = Abs(tA%)
    If angle_data(0).te(1) = angle_data(1).te(0) Then
     If tA% > 0 Then
      ty = 3
    combine_two_angle = True
     ElseIf tA% < 0 Then
      ty = 9
       combine_two_angle = True
     ElseIf angle_data(0).line_no(0) = angle_data(1).line_no(1) Then
      ty = 20
      combine_two_angle = True
     End If
    Else 'If ty_ > 0 Then
       If tA% < 0 Then
        ty = 17
            oA% = 0
             oA0% = -tA%
           combine_two_angle = True
       ElseIf tA% > 0 Then
        ty = 18
            oA% = 0
             oA0% = tA%
             combine_two_angle = True
       End If
   End If
     oA1_% = oA1%
     oA2_% = oA2%
 Else 'If ty_ > 0 Then
   A(0) = angle_number(angle_data(0).poi(0), angle_data(0).poi(1), _
         angle_data(1).poi(0), 0, 0) '00
   A(1) = angle_number(angle_data(0).poi(0), angle_data(0).poi(1), _
         angle_data(1).poi(2), 0, 0) '01
   A(2) = angle_number(angle_data(1).poi(0), angle_data(0).poi(1), _
         angle_data(0).poi(2), 0, 0) '10
   A(3) = angle_number(angle_data(0).poi(2), angle_data(0).poi(1), _
         angle_data(1).poi(2), 0, 0) '11
    '***********
If A(0) > 0 And A(3) > 0 And A(1) > 0 Then
    If A(2) < 0 Then
      ty = 11
      oA1% = A1%
       oA2% = A2%
        oA1_% = A(0)
         oA2_% = A(3)
        oA0% = -A(2)
         oA% = A(1)
         combine_two_angle = True
     ElseIf A(2) > 0 Then
       ty = 12
       oA1% = A(0)
        oA2% = A(3)
         oA1_% = A(0)
          oA2_% = A(3)
         oA0% = A(2)
          oA% = A(1)
          combine_two_angle = True
     End If
ElseIf A(0) < 0 And A(3) < 0 And A(2) > 0 Then
   If A(1) < 0 Then
     ty = 13
     oA1% = A2%
      oA2% = A1%
       oA1_% = A(0)
        oA2_% = A(3)
       oA0% = -A(1)
        oA% = A(2)
        combine_two_angle = True
   ElseIf A(1) > 0 Then
     ty = 14
     oA1% = -A(0)
      oA2% = -A(3)
       oA1_% = Abs(A(0))
        oA2_% = Abs(A(3))
       oA0% = A(1)
        oA% = A(2)
       combine_two_angle = True
   End If
  End If

    '***********
 End If
Else 'poi(1)<>poi(1)
' angle_data(0) = angle(A1%).data
'angle_data(1) = angle(A2%).data
' 三角形角的关系
'If ty_ = 1 Then '
 If angle_data(0).line_no(0) = angle_data(1).line_no(0) Then
   tp% = is_line_line_intersect(angle_data(0).line_no(1), _
              angle_data(1).line_no(1), 0, 0, False)
   If tp% > 0 Then
     tA% = angle_number(angle_data(0).poi(1), tp%, angle_data(1).poi(1), 0, 0)
    'If angle_data(0).te(0) = angle_data(1).te(0) Then
        If tA% > 0 Then
         oA1% = A1%
          oA2% = tA%
           oA% = A2%
            ty = 7
        combine_two_angle = True
        ElseIf tA% < 0 Then
         oA1% = -tA%
          oA2% = A2%
           oA% = A1%
            ty = 4
        combine_two_angle = True
        End If
     End If
       oA1_% = oA1%
       oA2_% = oA2%
ElseIf angle_data(0).line_no(0) = angle_data(1).line_no(1) Then
   tp% = is_line_line_intersect(angle_data(0).line_no(1), _
               angle_data(1).line_no(0), 0, 0, False)
     'tA% = angle_number(angle_data(0).poi(1), tp%, angle_data(1).poi(1), 0, 0)
   If tp% > 0 Then
     tA% = angle_number(angle_data(0).poi(1), tp%, angle_data(1).poi(1), 0, 0)
      If tA% > 0 Then
       ty = 15 '和=180
         oA1% = A1%
          oA2% = A2%
           oA0% = tA%
            oA% = 0
       combine_two_angle = True
      ElseIf tA% < 0 Then
        ty = 16 'oa1%+oa2%-|ta|=180
         oA1% = A1%
          oA2% = A2%
           oA0% = -tA%
            oA% = 0
          combine_two_angle = True
     End If
   End If
     oA1_% = oA1%
     oA2_% = oA2%
ElseIf angle_data(0).line_no(1) = angle_data(1).line_no(0) Then
    tp% = is_line_line_intersect(angle_data(0).line_no(0), _
                    angle_data(1).line_no(1), 0, 0, False)
   If tp% > 0 Then
      tA% = angle_number(angle_data(0).poi(1), tp%, angle_data(1).poi(1), 0, 0)
      If tA% < 0 Then
       ty = 15 '和=180
         oA1% = A1%
          oA2% = A2%
           oA0% = -tA%
            oA% = 0
         combine_two_angle = True
      ElseIf tA% > 0 Then
        ty = 16 'oa1%+oa2%-|ta|=180
         oA1% = A1%
          oA2% = A2%
           oA0% = tA%
            oA% = 0
          combine_two_angle = True
     End If
   End If
  oA1_% = oA1%
  oA2_% = oA2%
ElseIf angle_data(0).line_no(1) = angle_data(1).line_no(1) Then
   tp% = is_line_line_intersect(angle_data(0).line_no(0), _
                    angle_data(1).line_no(0), 0, 0, False)
   If tp% > 0 Then
     tA% = angle_number(angle_data(0).poi(1), tp%, angle_data(1).poi(1), 0, 0)
     If tA% > 0 Then
      ty = 4
       oA1% = tA%
        oA2% = A2%
         oA% = A1%
        combine_two_angle = True
    ElseIf tA% < 0 Then
      ty = 7
       oA1% = A1%
        oA2% = -tA%
         oA% = A2%
          combine_two_angle = True
     End If
   End If
     oA1_% = oA1%
     oA2_% = oA2%
'End If
End If
End If
End If
End If
End Function

Public Sub short_route(ByVal ty As Byte, ByVal no%, re As record_data_type)
Dim i%, j%, k%
Dim temp_record As record_data_type
'last_area_triangle_value = last_area_triangle_value_for_aid '35
'last_equal_area_triangle = last_equal_area_triangle_for_aid '36
'last_general_angle_string = last_general_angle_string_for_aid '37
'For i% = 1 To last_conditions.last_cond(1).equal_side_tixing_no
' If Dequal_side_tixing(i%).data(0).record.data0.condition_data.condition_no < 9 Then
' For j% = 1 To Dequal_side_tixing(i%).data(0).record.data0.condition_data.condition_no
'  If Dequal_side_tixing(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Dequal_side_tixing(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
'    temp_record = Dequal_side_tixing(i%).data(0).record
'     Call set_level(temp_record)
'    Call set_prove_type(equal_side_tixing_, i%, temp_record, _
'      Dequal_side_tixing(i%).data(0).record, set_or_prove)
'     GoTo short_route_equal_side_tixing
'   End If
'  Next j%
'  End If
'short_route_equal_side_tixing:
'Next i%
For i% = 1 To last_conditions.last_cond(1).tixing_no
 If Dtixing(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Dtixing(i%).data(0).record.data0.condition_data.condition_no
  If Dtixing(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Dtixing(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Dtixing(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(tixing_, i%, temp_record, Dtixing(i%).data(0).record)
     GoTo short_route_tixing
   End If
  Next j%
  End If
short_route_tixing:
Next i%
For i% = 1 To last_conditions.last_cond(1).epolygon_no
If epolygon(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To epolygon(i%).data(0).record.data0.condition_data.condition_no
  If epolygon(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       epolygon(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = epolygon(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(epolygon_, i%, temp_record, epolygon(i%).data(0).record)
     GoTo short_route_Epolygon
   End If
  Next j%
  End If
short_route_Epolygon:
Next i%
For i% = 1 To last_conditions.last_cond(1).rhombus_no
If rhombus(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To rhombus(i%).data(0).record.data0.condition_data.condition_no
  If rhombus(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       rhombus(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = rhombus(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(rhombus_, i%, temp_record, rhombus(i%).data(0).record)
     GoTo short_route_rhombus
   End If
  Next j%
  End If
short_route_rhombus:
Next i%
For i% = 1 To last_conditions.last_cond(1).long_squre_no
If Dlong_squre(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Dlong_squre(i%).data(0).record.data0.condition_data.condition_no
  If Dlong_squre(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Dlong_squre(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Dlong_squre(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(long_squre_, i%, temp_record, Dlong_squre(i%).data(0).record)
     GoTo short_route_long_squre
   End If
  Next j%
 End If
short_route_long_squre:
Next i%
For i% = 1 To last_conditions.last_cond(1).general_string_no
If general_string(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To general_string(i%).data(0).record.data0.condition_data.condition_no
  If general_string(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       general_string(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = general_string(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(general_string_, i%, temp_record, general_string(i%).data(0).record)
     GoTo short_route_general_string
   End If
  Next j%
  End If
short_route_general_string:
Next i%
For i% = 1 To last_conditions.last_cond(1).tangent_line_no
 If tangent_line(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To tangent_line(i%).data(0).record.data0.condition_data.condition_no
  If tangent_line(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       tangent_line(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = tangent_line(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(tangent_line_, i%, temp_record, tangent_line(i%).data(0).record)
     GoTo short_route_tangent_line
   End If
  Next j%
  End If
short_route_tangent_line:
Next i%
For i% = 1 To last_conditions.last_cond(1).equal_arc_no
If equal_arc(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To equal_arc(i%).data(0).record.data0.condition_data.condition_no
  If equal_arc(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       equal_arc(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = equal_arc(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(equal_arc_, i%, temp_record, equal_arc(i%).data(0).record)
     GoTo short_route_equal_arc
   End If
  Next j%
  End If
short_route_equal_arc:
Next i%
For i% = 1 To last_conditions.last_cond(1).arc_value_no
If arc_value(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To arc_value(i%).data(0).record.data0.condition_data.condition_no
  If arc_value(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       arc_value(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = arc_value(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(arc_value_, i%, temp_record, arc_value(i%).data(0).record)
     GoTo short_route_arc_value
   End If
  Next j%
  End If
short_route_arc_value:
Next i%
For i% = 1 To last_conditions.last_cond(1).verti_mid_line_no
 If verti_mid_line(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To verti_mid_line(i%).data(0).record.data0.condition_data.condition_no
  If verti_mid_line(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       verti_mid_line(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = verti_mid_line(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(verti_mid_, i%, temp_record, verti_mid_line(i%).data(0).record)
     GoTo short_route_verti_mid_line
   End If
  Next j%
  End If
short_route_verti_mid_line:
Next i%

For k% = 1 + last_conditions.last_cond(0).line3_value_no To last_conditions.last_cond(1).line3_value_no
 i% = line3_value(k%).data(0).record.data1.index.i(0)
 If line3_value(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To line3_value(i%).data(0).record.data0.condition_data.condition_no
  If line3_value(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       line3_value(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = line3_value(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(line3_value_, i%, temp_record, line3_value(i%).data(0).record)
     GoTo short_route_line3_value
   End If
  Next j%
  End If
short_route_line3_value:
Next k%
For k% = 1 + last_conditions.last_cond(0).two_line_value_no To last_conditions.last_cond(1).two_line_value_no
 i% = two_line_value(k%).data(0).record.data1.index.i(0)
 If two_line_value(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To two_line_value(i%).data(0).record.data0.condition_data.condition_no
  If two_line_value(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       two_line_value(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = two_line_value(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(two_line_value_, i%, temp_record, two_line_value(i%).data(0).record)
     GoTo short_route_two_line_value
   End If
  Next j%
End If
short_route_two_line_value:
Next k%
For i% = 1 To last_conditions.last_cond(1).three_point_on_line_no
 If three_point_on_line(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To three_point_on_line(i%).data(0).record.data0.condition_data.condition_no
  If three_point_on_line(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       three_point_on_line(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = three_point_on_line(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(point3_on_line_, i%, temp_record, three_point_on_line(i%).data(0).record)
     GoTo short_route_Three_point_on_line
   End If
  Next j%
  End If
short_route_Three_point_on_line:
Next i%

For i% = 1 To last_conditions.last_cond(1).mid_point_line_no
 If mid_point_line(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To mid_point_line(i%).data(0).record.data0.condition_data.condition_no
  If mid_point_line(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       mid_point_line(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = mid_point_line(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(mid_point_line_, i%, temp_record, mid_point_line(i%).data(0).record)
     GoTo short_route_mid_point_line
   End If
  Next j%
  End If
short_route_mid_point_line:
Next i%

For i% = 1 To last_conditions.last_cond(1).area_relation_no
 If Darea_relation(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Darea_relation(i%).data(0).record.data0.condition_data.condition_no
  If Darea_relation(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Darea_relation(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Darea_relation(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(area_relation_, i%, temp_record, Darea_relation(i%).data(0).record)
     GoTo short_route_area_relation
   End If
  Next j%
  End If
short_route_area_relation:
Next i%
'For i% = 1 To last_angle_value
' If angle_value(i%).data(0).record.data0.condition_data.condition_no < 9 Then
' For j% = 1 To angle_value(i%).data(0).record.data0.condition_data.condition_no
 ' If angle_value(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       angle_value(i%).data(0).record.condition_data.condition(j%).no = no% Then
 '   temp_record = angle_value(i%).data(0).record
 '   Call set_level(temp_record )
 '   Call set_prove_type(angle_value_, i%, temp_record, _
      angle_value(i%).data(0).record, set_or_prove)
  '   GoTo short_route_angle_value
  ' End If
  'Next j%
  'End If
'short_route_angle_value:
'Next i%
For k% = 1 + last_conditions.last_cond(0).paral_no To last_conditions.last_cond(1).paral_no
 i% = Dparal(k%).data(0).data0.record.data1.index.i(0)
 If Dparal(i%).data(0).data0.record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Dparal(i%).data(0).data0.record.data0.condition_data.condition_no
  If Dparal(i%).data(0).data0.record.data0.condition_data.condition(j%).ty = ty And _
       Dparal(i%).data(0).data0.record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Dparal(i%).data(0).data0.record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(paral_, i%, temp_record, Dparal(i%).data(0).data0.record)
     GoTo short_route_paral
   End If
  Next j%
 End If
short_route_paral:
Next k%
For k% = 1 + last_conditions.last_cond(0).dpoint_pair_no To last_conditions.last_cond(1).dpoint_pair_no
i% = Ddpoint_pair(k%).data(0).record.data1.index.i(0)
If Ddpoint_pair(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Ddpoint_pair(i%).data(0).record.data0.condition_data.condition_no
  If Ddpoint_pair(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Ddpoint_pair(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Ddpoint_pair(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(dpoint_pair_, i%, temp_record, Ddpoint_pair(i%).data(0).record)
     GoTo short_route_Dpoint_pair
   End If
  Next j%
 End If
short_route_Dpoint_pair:
Next k%
For k% = 1 + last_conditions.last_cond(0).relation_no To last_conditions.last_cond(1).relation_no
i% = Drelation(k%).data(0).record.data1.index.i(0)
 If Drelation(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Drelation(i%).data(0).record.data0.condition_data.condition_no
  If Drelation(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Drelation(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Drelation(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(relation_, i%, temp_record, Drelation(i%).data(0).record)
     GoTo short_route_relation
   End If
  Next j%
  End If
short_route_relation:
Next k%
For k% = 1 + last_conditions.last_cond(0).verti_no To last_conditions.last_cond(1).verti_no
i% = Dverti(k%).data(0).record.data1.index.i(0)
If Dverti(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Dverti(i%).data(0).record.data0.condition_data.condition_no
  If Dverti(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Dverti(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Dverti(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(verti_, i%, temp_record, Dverti(i%).data(0).record)
     GoTo short_route_verti
   End If
  Next j%
  End If
short_route_verti:
Next k%
'For i% = 1 To last_Eangle
' If Deangle(i%).data(0).record.data0.condition_data.condition_no < 9 Then
' For j% = 1 To Deangle(i%).data(0).record.data0.condition_data.condition_no
 ' If Deangle(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
  '     Deangle(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
  '  temp_record = Deangle(i%).data(0).record
   ' Call set_level(temp_record )
   ' Call set_prove_type(eangle, i%, temp_record, _
    '  Deangle(i%).data(0).record, set_or_prove)
    ' GoTo short_route_Eangle
   'End If
  'Next j%
  'End If
'short_route_Eangle:
'Next i%
For k% = 1 + last_conditions.last_cond(0).eline_no To last_conditions.last_cond(1).eline_no
i% = Deline(k%).data(0).record.data1.index.i(0)
If Deline(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Deline(i%).data(0).record.data0.condition_data.condition_no
  If Deline(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Deline(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Deline(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(eline_, i%, temp_record, Deline(i%).data(0).record)
     GoTo short_route_eline
   End If
   Next j%
 End If
short_route_eline:
Next k%
For i% = 1 To last_conditions.last_cond(1).four_point_on_circle_no
 If four_point_on_circle(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To four_point_on_circle(i%).data(0).record.data0.condition_data.condition_no
  If four_point_on_circle(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       four_point_on_circle(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = four_point_on_circle(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(point4_on_circle_, i%, temp_record, four_point_on_circle(i%).data(0).record)
     GoTo short_route_Four_point_on_circle
   End If
  Next j%
  End If
short_route_Four_point_on_circle:
Next i%
For k% = 1 + last_conditions.last_cond(0).line_value_no To last_conditions.last_cond(1).line_value_no
i% = line_value(k%).data(0).record.data1.index.i(0)
 If line_value(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To line_value(i%).data(0).record.data0.condition_data.condition_no
  If line_value(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       line_value(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = line_value(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(line_value_, i%, temp_record, line_value(i%).data(0).record)
     GoTo short_route_line_value
   End If
  Next j%
 End If
short_route_line_value:
Next k%
For k% = 1 + last_conditions.last_cond(0).mid_point_no To last_conditions.last_cond(1).mid_point_no
i% = Dmid_point(k%).data(0).record.data1.index.i(0)
 If Dmid_point(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Dmid_point(i%).data(0).record.data0.condition_data.condition_no
  If Dmid_point(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Dmid_point(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Dmid_point(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(midpoint_, i%, temp_record, Dmid_point(i%).data(0).record)
     GoTo short_route_mid_point
   End If
  Next j%
 End If
short_route_mid_point:
Next k%
For i% = 1 To last_conditions.last_cond(1).parallelogram_no
 If Dparallelogram(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Dparallelogram(i%).data(0).record.data0.condition_data.condition_no
  If Dparallelogram(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Dparallelogram(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Dparallelogram(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(parallelogram_, i%, temp_record, Dparallelogram(i%).data(0).record)
     GoTo short_route_parallelogram
   End If
  Next j%
  End If
short_route_parallelogram:
Next i%
For i% = 1 To last_conditions.last_cond(1).similar_triangle_no
 If Dsimilar_triangle(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Dsimilar_triangle(i%).data(0).record.data0.condition_data.condition_no
  If Dsimilar_triangle(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Dsimilar_triangle(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Dsimilar_triangle(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(similar_triangle_, i%, temp_record, Dsimilar_triangle(i%).data(0).record)
     GoTo short_route_similar_triangle
   End If
  Next j%
  End If
short_route_similar_triangle:
Next i%
For k% = 1 + last_conditions.last_cond(0).angle3_value_no To last_conditions.last_cond(1).angle3_value_no
i% = angle3_value(k%).data(0).record.data1.index.i(0)
 If angle3_value(i%).data(0).record.data0.condition_data.condition_no < 9 Then
  For j% = 1 To angle3_value(i%).data(0).record.data0.condition_data.condition_no
  If angle3_value(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       angle3_value(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = angle3_value(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(angle3_value_, i%, temp_record, angle3_value(i%).data(0).record)
     GoTo short_route_angle3_value
   End If
  Next j%
End If
short_route_angle3_value:
Next k%
For i% = 1 To last_conditions.last_cond(1).total_equal_triangle_no
If Dtotal_equal_triangle(i%).data(0).record.data0.condition_data.condition_no < 9 Then
 For j% = 1 To Dtotal_equal_triangle(i%).data(0).record.data0.condition_data.condition_no
  If Dtotal_equal_triangle(i%).data(0).record.data0.condition_data.condition(j%).ty = ty And _
       Dtotal_equal_triangle(i%).data(0).record.data0.condition_data.condition(j%).no = no% Then
    temp_record = Dtotal_equal_triangle(i%).data(0).record
     Call set_level(temp_record.data0.condition_data)
    Call set_prove_type(total_equal_triangle_, i%, temp_record, Dtotal_equal_triangle(i%).data(0).record)
     GoTo short_route_total_equal_triangle
   End If
  Next j%
  End If
short_route_total_equal_triangle:
Next i%
End Sub

Public Function set_level1(re1 As record_data_type, _
     ty As Byte, no%, re2 As record_data_type)
're2 的变化引起 re1 变化
Dim i%
Dim l As Byte
Dim temp_record As total_record_type
 For i% = 1 To re1.data0.condition_data.condition_no
  If re1.data0.condition_data.condition(i%).ty = ty And re1.data0.condition_data.condition(i%).no = no% And _
    re1.data0.condition_data.level > re2.data0.condition_data.level Then
      If l < re2.data0.condition_data.level Then
       l = re2.data0.condition_data.level
      End If
  Else
  Call record_no(re1.data0.condition_data.condition(i%).ty, re1.data0.condition_data.condition(i%).no, _
       temp_record, False, 0, 0)
       If l < temp_record.record_data.data0.condition_data.level Then
       l = temp_record.record_data.data0.condition_data.level
      End If
 End If
 Next i%
If re1.data0.condition_data.level > l + 1 Then
set_level1 = True
re1.data0.condition_data.level = l + 1
End If
End Function


Public Function set_area_relation(triA1 As condition_type, triA2 As condition_type, _
   ByVal value As String, re As total_record_type, no%, filer As Byte, ByVal no_reduce As Byte) As Byte
Dim i%, j%, k%, temp_no%
Dim new_triA_in_conclusion As condition_type
Dim old_triA_in_conclusion As condition_type
Dim n_(2) As Integer
Dim t_A(2) As condition_type
Dim tn(3) As Byte
Dim dn(2) As Integer
Dim ty As Boolean
Dim ty0 As Integer
Dim tp As Integer
Dim num_string As String
Dim nu(1) As Integer
Dim con_no%
Dim ts$
Dim level As Byte
Dim v1(1) As String
Dim v2(1) As String
Dim triA1_(1) As Integer
Dim triA2_(1) As Integer
Dim set_new_data As Boolean
Dim temp_record As total_record_type
Dim rela As relation_data0_type
Dim t_triA(1) As condition_type
'On Error GoTo set_area_relation_error
If using_area_th = 0 Then
   Exit Function
ElseIf InStr(1, value, "F", 0) > 0 Then
   Exit Function
End If
t_triA(0) = triA1
t_triA(1) = triA2
If no_reduce = 255 Or InStr(1, value, "F", 0) > 0 Or _
      using_area_th = 2 And run_statue > 1 Or _
       InStr(1, value, ".", 0) > 0 Then '12.10
 Exit Function
ElseIf (triA1.no = 0 Or triA2.no = 0) And no% = 0 Then
  set_area_relation = 0
   Exit Function
ElseIf no% > 0 And draw_or_prove = 1 Then
 If Darea_relation(no%).record_.no_reduce < 2 Then
  GoTo set_area_relation_mark0
 Else
 Exit Function
 End If
ElseIf filer = 1 Then
 For i% = 1 To last_area_element_in_conclusion
  If triA1.ty = Area_element_in_conclusion(i%).ty And triA1.no = Area_element_in_conclusion(i%).no Then
  'triA1在结论中
    If compare_two_area_element_for_new(triA2, triA1) = -1 Then
       old_triA_in_conclusion = triA1
        new_triA_in_conclusion = triA2
         GoTo set_area_relation_out
    End If
  ElseIf triA2.ty = Area_element_in_conclusion(i%).ty And triA2.no = Area_element_in_conclusion(i%).no Then
  'triA1在结论中
    If compare_two_area_element_for_new(triA2, triA1) = 1 Then
       old_triA_in_conclusion = triA2
        new_triA_in_conclusion = triA1
         GoTo set_area_relation_out
    End If
  End If
 Next i%
 Exit Function
Else
 old_triA_in_conclusion.no = 0
End If
set_area_relation_out:
temp_record.record_data = re.record_data
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
Exit Function
End If
If is_area_relation(t_triA(0), t_triA(1), value, no%, n_(0), n_(1), n_(2), _
    t_A(0), t_A(1), t_A(2), num_string, cond_type, 0, 0) Then
 If run_type < 10 And cond_type = area_relation_ And no% > 0 Then
 level = Darea_relation(no%).data(0).record.data0.condition_data.level
  If set_prove_type(area_relation_, no%, temp_record.record_data, _
      Darea_relation(no%).data(0).record) And set_or_prove < 2 Then
    Call simple_record(total_equal_triangle_, no%, Darea_relation(no%).data(0).record.data0.condition_data.level, _
            level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
     set_area_relation = 0
     Exit Function
     Else
     no_reduce = 2
     GoTo set_area_relation_mark_0
     End If
  End If
   If set_or_prove < 2 Then
       set_area_relation = 0
   End If
' ElseIf cond_type = equal_area_triangle_ And no% > 0 Then
 ' Call set_prove_type(equal_area_triangle_, no%, temp_record.record_data, _
      equal_area_triangle(no%).data(0).record, set_or_prove)
'   If set_or_prove < 2 Then
'       set_area_relation = 0
'   End If
End If
    Exit Function
Else
 If set_or_prove = 2 Then
  set_area_relation = 0
    If re.record_data.data0.condition_data.condition(1).ty = new_point_ Then
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
  End If
    Exit Function
   End If
End If
'****************************************************************
If InStr(1, num_string, "F", 0) > 0 Then
 Exit Function
End If
If set_or_prove < 2 Then
temp_no% = last_conditions.last_cond(1).area_relation_no
For i% = 1 To temp_no%
Darea_relation(i%).record_.index = Darea_relation(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).area_relation_no Mod 10 = 0 Then
ReDim Preserve Darea_relation(last_conditions.last_cond(1).area_relation_no + 10) As area_relation_type
End If
 last_conditions.last_cond(1).area_relation_no = last_conditions.last_cond(1).area_relation_no + 1
      Darea_relation(last_conditions.last_cond(1).area_relation_no).data(0).area_element(0) = t_A(0)
       Darea_relation(last_conditions.last_cond(1).area_relation_no).data(0).area_element(1) = t_A(1)
        Darea_relation(last_conditions.last_cond(1).area_relation_no).data(0).area_element(2) = t_A(2)
         Darea_relation(last_conditions.last_cond(1).area_relation_no).data(0).value = num_string
          If t_A(0).ty = triangle_ Then
          If triangle(t_A(0).no).data(0).condition.no > 0 Then
           Call add_conditions_to_record(triangle(t_A(0).no).data(0).condition.ty, _
            triangle(t_A(0).no).data(0).condition.no, 0, 0, temp_record.record_data.data0.condition_data)
          End If
          End If
          If t_A(1).ty = triangle_ Then
          If triangle(t_A(1).no).data(0).condition.no > 0 Then
           Call add_conditions_to_record(triangle(t_A(1).no).data(0).condition.ty, _
            triangle(t_A(1).no).data(0).condition.no, 0, 0, temp_record.record_data.data0.condition_data)
          End If
          End If
          Darea_relation(last_conditions.last_cond(1).area_relation_no).data(0).record = temp_record.record_data
           Darea_relation(last_conditions.last_cond(1).area_relation_no).record_ = temp_record.record_
           Darea_relation(last_conditions.last_cond(1).area_relation_no).record_.no_reduce = 0
          set_area_relation = 1
 For j% = 0 To 2
   For i% = last_conditions.last_cond(1).area_relation_no To n_(j%) + 2 Step -1
   Darea_relation(i%).data(0).record.data1.index.i(j%) = _
      Darea_relation(i% - 1).data(0).record.data1.index.i(j%)
   Next i%
   Darea_relation(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).area_relation_no
Next j%
no% = last_conditions.last_cond(1).area_relation_no
 ts$ = set_area_relation_display_string( _
        Darea_relation(last_conditions.last_cond(1).area_relation_no).data(0), 0, False) '(t_A(0), 1, no_display) + "/" + _
           set_triangle_display_string(t_A(1), 1, no_display) + "=" + display_string_(num_string, 1)
set_area_relation = set_prove_proccess(ts$, area_relation_, no%, Darea_relation(no%).data(0).record.display_string)
If set_area_relation > 1 Then
  Exit Function
End If
If old_triA_in_conclusion.no > 0 Then
For j% = 0 To 2
 If compare_two_area_element_for_new(Darea_relation(no%).data(0).area_element(j%), _
                           old_triA_in_conclusion) = -1 Then
 'If triangle(Darea_relation(no%).data(0).triangle(j%)).data(0).poi(2) < _
     triangle(old_triA_in_conclusion).data(0).poi(2) Then
  For i% = 1 To last_area_element_in_conclusion
   If Area_element_in_conclusion(i%).no = old_triA_in_conclusion.no And _
       Area_element_in_conclusion(i%).ty = old_triA_in_conclusion.ty Then
        Area_element_in_conclusion(i%) = Darea_relation(no%).data(0).area_element(j%)
      set_area_relation = set_area_relation_from_new_area_element_in_conclusion( _
          Darea_relation(no%).data(0).area_element(j%))
           If set_area_relation > 1 Then
            Exit Function
           End If
      GoTo set_area_relation_out1
    End If
  Next i%
  last_area_element_in_conclusion = last_area_element_in_conclusion + 1
  ReDim Preserve Area_element_in_conclusion(last_area_element_in_conclusion) As condition_type
   Area_element_in_conclusion(last_area_element_in_conclusion) = _
     Darea_relation(no%).data(0).area_element(j%)
       set_area_relation = set_area_relation_from_new_area_element_in_conclusion( _
         Darea_relation(no%).data(0).area_element(j%))
If set_area_relation > 1 Then
  Exit Function
End If
set_area_relation_out1:
  End If
Next j%
End If
If no_reduce = 0 Then
 Exit Function
End If
 End If
set_area_relation_mark0:
If Darea_relation(no%).record_.no_reduce = 0 Or _
   Darea_relation(no%).record_.no_reduce = 2 Or _
    Darea_relation(no%).record_.no_reduce = 4 Then
set_area_relation_mark_0:
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
         Call set_level_(Darea_relation(no%).record_.no_reduce, 1)
          temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
           Call add_conditions_to_record(area_relation_, _
             no%, 0, 0, temp_record.record_data.data0.condition_data)
    t_A(0) = Darea_relation(no%).data(0).area_element(0)
     t_A(1) = Darea_relation(no%).data(0).area_element(1)
      num_string = Darea_relation(no%).data(0).value
'******************************************************************
'等量替换
'*******************************************************
If th_chose(1).chose = 1 And area_of_triangle_conclusion = 1 Then
temp_record.record_data.data0.theorem_no = 1
For i% = 1 To last_conditions.last_cond(1).area_of_element_no
 If area_of_element(i%).data(0).element.no = t_A(0).no And _
     area_of_element(i%).data(0).element.ty = t_A(0).ty Then
  If t_A(0).ty = triangle_ Then
  temp_record.record_data.data0.condition_data.condition(2).ty = area_of_element_
   temp_record.record_data.data0.condition_data.condition(2).no = i%
    temp_record.record_data.data0.condition_data.condition_no = 2
     If t_A(1).ty = triangle_ Then
      set_area_relation = set_area_of_triangle(t_A(1).no, _
       divide_string(area_of_element(i%).data(0).value, num_string, True, False), temp_record, _
        0, no_reduce)
     If set_area_relation > 1 Then
      Exit Function
     End If
     End If
   End If
 ElseIf area_of_element(i%).data(0).element.no = t_A(1).no And _
         area_of_element(i%).data(0).element.ty = t_A(1).ty Then
   temp_record.record_data.data0.condition_data.condition(2).ty = area_of_element_
   temp_record.record_data.data0.condition_data.condition(2).no = i%
    temp_record.record_data.data0.condition_data.condition_no = 2
    If t_A(0).ty = triangle_ Then
     set_area_relation = set_area_of_triangle(t_A(0).no, _
     time_string(area_of_element(i%).data(0).value, num_string, True, False), temp_record, _
      0, no_reduce)
     If set_area_relation > 1 Then
      Exit Function
     End If
     End If
 Else
End If
Next i%
End If
'共边定理
If Darea_relation(no%).data(0).value = "1" Then
    If Darea_relation(no%).data(0).area_element(0).ty = triangle_ And _
        Darea_relation(no%).data(0).area_element(1).ty = triangle_ Then
ty0 = combine_two_area_of_element0(Darea_relation(no%).data(0).area_element(0), _
         Darea_relation(no%).data(0).area_element(1), t_A(0), t_A(1), rela)
    If ty0 = -5 Then
     temp_record = re
     temp_record.record_data.data0.theorem_no = 1
     set_area_relation = set_area_relation(t_A(0), t_A(1), "1", temp_record, 0, 0, 0)
      If set_area_relation > 1 Then
         Exit Function
      End If
    End If
    End If
End If
If Darea_relation(no%).data(0).record.data0.condition_data.condition(1).ty <> relation_ And _
     Darea_relation(no%).data(0).record.data0.condition_data.condition(1).ty <> line_value_ Then
For i% = 0 To 2
 For j% = 0 To 2
  If th_chose(157).chose = 1 And _
       Darea_relation(no%).data(0).area_element(0).ty = triangle_ And _
        Darea_relation(no%).data(0).area_element(1).ty = triangle_ Then
  If is_same_two_point(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi(i%), _
   triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 1) Mod 3), _
    triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi(j%), _
     triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 1) Mod 3)) Then
     '共边
  tp = is_line_line_intersect( _
    line_number0(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi(i%), _
    triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 1) Mod 3), 0, 0), _
      line_number0(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 2) Mod 3), _
      triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 2) Mod 3), 0, 0), 0, 0, False)
   If tp > 0 Then
    temp_record.record_data.data0.theorem_no = 157
   set_area_relation = _
    set_Drelation(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 2) Mod 3), _
        tp, tp, triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 2) Mod 3), _
           0, 0, 0, 0, 0, 0, Darea_relation(no%).data(0).value, _
            temp_record, 0, 0, 0, 0, no_reduce, False)
If set_area_relation > 1 Then
 Exit Function
End If
   End If
ElseIf is_same_two_point(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi(i%), _
   triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 1) Mod 3), _
    triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi(j%), _
     triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 2) Mod 3)) Then
     '共边
  tp = is_line_line_intersect( _
      line_number0(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi(i%), _
    triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 1) Mod 3), 0, 0), _
       line_number0(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 2) Mod 3), _
      triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 1) Mod 3), 0, 0), 0, 0, False)
   If tp > 0 Then
    temp_record.record_data.data0.theorem_no = 156
   set_area_relation = _
    set_Drelation(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 2) Mod 3), _
        tp, tp, triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 1) Mod 3), _
          0, 0, 0, 0, 0, 0, Darea_relation(no%).data(0).value, temp_record, 0, 0, 0, 0, no_reduce, False)
If set_area_relation > 1 Then
 Exit Function
End If
   End If
End If
ElseIf th_chose(158).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 158
  If line_number0(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi(i%), _
   triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 1) Mod 3), 0, 0) = _
     line_number0(triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi(j%), _
     triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 1) Mod 3), 0, 0) And _
       triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 2) Mod 3) = _
        triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 2) Mod 3) Then
 set_area_relation = _
    set_Drelation(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi(i%), _
        triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 1) Mod 3), _
         triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi(j%), _
            triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 1) Mod 3), _
             0, 0, 0, 0, 0, 0, Darea_relation(no%).data(0).value, temp_record, 0, 0, 0, 0, no_reduce, False)
          If set_area_relation > 1 Then
           Exit Function
          End If
  ElseIf line_number0(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi(i%), _
   triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 1) Mod 3), 0, 0) = _
     line_number0(triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi(j%), _
     triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 2) Mod 3), 0, 0) And _
       triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 2) Mod 3) = _
        triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 1) Mod 3) Then
  set_area_relation = _
    set_Drelation(triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi(i%), _
        triangle(Darea_relation(no%).data(0).area_element(0).no).data(0).poi((i% + 1) Mod 3), _
         triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi(j%), _
            triangle(Darea_relation(no%).data(0).area_element(1).no).data(0).poi((j% + 2) Mod 3), _
             0, 0, 0, 0, 0, 0, Darea_relation(no%).data(0).value, temp_record, 0, 0, 0, 0, no_reduce, False)
          If set_area_relation > 1 Then
           Exit Function
          End If
End If
End If
   Next j%
    Next i%
End If
'*****
set_area_relation = combine_area_relation_with_area_relation(no%)
    If set_area_relation > 1 Then
     Exit Function
    End If

End If
Exit Function
set_area_relation_error:
set_area_relation = 0
If set_new_data Then
last_conditions.last_cond(1).area_relation_no = temp_no%
For i% = 1 To temp_no%
Darea_relation(i%).data(0).record.data1.index = Darea_relation(i%).record_.index
Next i%
End If
End Function

Public Function set_equal_area_triangle(ByVal triA1%, ByVal triA2%, _
    re As total_record_type, no%, filer As Byte, ByVal no_reduce As Byte) As Byte
Dim area_ele(1) As condition_type
 If triangle(triA1%).data(0).no_reduce = 0 And triangle(triA2%).data(0).no_reduce = 0 Then
 area_ele(0).ty = triangle_
 area_ele(1).ty = triangle_
 area_ele(0).no = triangle_
 area_ele(1).no = triangle_
     set_equal_area_triangle = set_area_relation(area_ele(0), area_ele(1), _
         "1", re, no%, filer, no_reduce)
 End If
End Function
Public Function start_prove(prove_ty As Byte, ByVal no_reduce As Byte, _
                                          run_type_ As Byte) As Byte
                                          'run_type_=0 第一次证明
                                          'yun_type_=1 优化
Dim i%, j%, k%, l%, m%, tn%, first%, last%
Dim no_reduce_ As Byte
Dim run_times As Byte
Dim p As polygon
Dim tri_f As tri_function_data_type
Dim temp_record As total_record_type
Dim loop_time As Byte
Dim start_no_%
Dim ty(1) As Boolean
Dim l_of_p As length_of_polygon_type
'On Error GoTo start_prove_error
run_type = 1 '开始证明
wenti_condition_no = C_display_wenti.m_last_input_wenti_no - 1
If run_type_ = 0 Then
MDIForm1.Timer1.Enabled = False
MDIForm1.Timer2.Enabled = False
Draw_form.Timer1.Enabled = False
Call remove_circle_center
If th_chose(-5).chose = 1 Then '确定是否作近似计算=1
 If MsgBox(LoadResString_(1895, ""), 4, "", "", 0) <> 6 Then
  th_chose(-5).chose = 0 '不作近似计算
 End If
ElseIf th_chose(-5).chose = 2 Then 't条件中有近似值
  th_chose(-5).chose = 1
End If
For i% = 1 To last_conditions.last_cond(1).general_string_no
 For j% = 0 To 3
 If general_string(i%).data(0).item(j%) > 0 Then
    If item0(general_string(i%).data(0).item(j%)).data(0).sig = "~" Then
     ty(0) = True
    End If
 End If
 Next j%
Next i%
'
no_reduce_ = no_reduce
'For i% = 1 To last_conditions.last_cond(1).point_no
'    m_poi(i%).data(0).no_reduce = True
'Next i%
For i% = 0 To last_conclusion - 1
'Call find_conclusion(i%, 0, 0)
If conclusion_data(i%).ty = general_string_ Then
      For j% = 0 To 3
       If item0(con_general_string(i%).data(0).item(j%)).data(0).sig = "~" Then
        ty(1) = True
       End If
      Next j%
End If
If conclusion_data(i%).ty = line_value_ Or conclusion_data(i%).ty = area_of_circle_ Or _
    conclusion_data(i%).ty = area_of_fan_ Or conclusion_data(i%).ty = area_of_element_ Or _
     conclusion_data(i%).ty = sides_length_of_triangle_ Or _
      conclusion_data(i%).ty = sides_length_of_circle_ Or conclusion_data(i%).ty = line3_value_ Or _
       conclusion_data(i%).ty = two_line_value_ Or ty(1) Then
  If last_conditions.last_cond(1).line_value_no = 0 And _
      last_conditions.last_cond(1).area_of_circle_no = 0 And _
       last_conditions.last_cond(1).area_of_fan_no = 0 And _
        last_conditions.last_cond(1).area_of_element_no = 0 And _
           last_conditions.last_cond(1).sides_length_of_triangle_no = 0 And _
             last_conditions.last_cond(1).sides_length_of_circle_no = 0 And _
              last_conditions.last_cond(1).line3_value_no = 0 And _
               last_conditions.last_cond(1).two_line_value_no = 0 And ty(0) = False Then
          error_of_wenti = 3
           start_prove = 2
            Exit Function
  End If
ElseIf conclusion_data(i%).ty = area_of_circle_ Or conclusion_data(i%).ty = area_of_fan_ Or _
        conclusion_data(i%).ty = area_of_element_ Or conclusion_data(i%).ty = area_relation_ Or _
         conclusion_data(i%).ty = relation_ Then
          using_area_th = 8
End If
'Call find_conclusion(i%, 0, 0)
Next i%
End If
'***************************************************************************************
If prove_ty = 0 Then
  GoTo start_prove_begin
Else 'End If
'temp_conditions = t_condition
start_no_% = start_no%
Select Case start_type
Case 0
  GoTo start_prove_begin
Case V_line_value_
  GoTo start_prove_v_line_value
Case verti_mid_line_
  GoTo start_prove_verti_mid_line
Case area_of_element_
  GoTo start_prove_area_of_element
Case point4_on_circle_
  GoTo start_prove_four_point_on_circle
Case verti_
  GoTo start_prove_verti
Case epolygon_
  GoTo start_prove_epolygon
Case tixing_
  GoTo start_prove_tixing
'Case string_value_
 ' GoTo start_prove_string_value
'Case equal_side_tixing_
'  GoTo start_prove_equal_side_tixing
Case rhombus_
  GoTo start_prove_rhombus
Case long_squre_
  GoTo start_prove_long_squre
Case Squre
  GoTo start_prove_squre
Case dpoint_pair_
  GoTo start_prove_dpoint_pair
Case area_relation_
  GoTo start_prove_area_relation
Case mid_point_line_
  GoTo start_prove_mid_point_line
Case eline_
  GoTo start_prove_eline
Case midpoint_
  GoTo start_prove_mid_point
Case paral_
  GoTo start_prove_paral
Case parallelogram_
  GoTo start_prove_parallelogram
Case relation_
  GoTo start_prove_relation
Case v_relation_
  GoTo start_prove_v_relation
'Case relation
'  GoTo start_prove_v_relation
Case similar_triangle_
  GoTo start_prove_similar_triangle
Case total_equal_triangle_
  GoTo start_prove_total_equal_triangle
Case point3_on_line_
  GoTo start_prove_three_point_on_line
Case two_line_value_
  GoTo start_prove_two_line_value
'Case angle_value_
  'GoTo start_prove_angle_value
'Case reduce_angle3_value_
 ' GoTo start_prove_reduce_angle3_value
Case angle3_value_
  GoTo start_prove_angle3_value
Case arc_value_
  GoTo start_prove_arc_value
Case equal_arc_
  GoTo start_prove_equal_arc
Case line_value_
  GoTo start_prove_line_value
Case length_of_polygon_
  GoTo start_prove_length_of_polygon
Case tangent_line_
  GoTo start_prove_tangent_line
'Case equal_area_triangle_
 ' GoTo start_prove_equal_area_triangle
Case general_string_
  GoTo start_prove_general_string
Case tri_function_
  GoTo start_prove_tri_function
End Select
  GoTo start_prove_mark00
End If
start_prove_begin:
If run_type_ = 0 Then
start_prove = start_prove0 '预先处理（可省略）
If start_prove > 1 Then
 Exit Function
End If
draw_or_prove = 1
End If
Do
Do
Do
start_prove_mark00:
t_condition.last_cond(0) = t_condition.last_cond(1)
t_condition.last_cond(1) = last_conditions.last_cond(1)
'temp_conditions = t_condition
'temp_total_condition = last_conditions.last_cond(1).total_condition
'**********************************************************
start_type = V_line_value_
For start_no_% = t_condition.last_cond(0).v_line_value_no + 1 To _
                              t_condition.last_cond(1).v_line_value_no
start_no% = start_no_%
start_prove_v_line_value:
If V_line_value(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = V_line_value(start_no_%).data(0).record
temp_record.record_ = V_line_value(start_no_%).record_
 start_prove = set_V_line_value(0, 0, 0, 0, 0, "", temp_record, start_no_%, False)
 If start_prove > 1 Then
   Exit Function
 End If
 End If
Next start_no_%
'**************************************************************
start_type = verti_mid_line_
For start_no_% = t_condition.last_cond(0).verti_mid_line_no + 1 To _
                              t_condition.last_cond(1).verti_mid_line_no
start_no% = start_no_%
start_prove_verti_mid_line:
If verti_mid_line(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = verti_mid_line(start_no_%).data(0).record
temp_record.record_ = verti_mid_line(start_no_%).record_
 start_prove = set_verti_mid_line(0, 0, 0, 0, temp_record, start_no_%, no_reduce_)
 If start_prove > 1 Then
   Exit Function
 End If
 End If
Next start_no_%
'***************************************************
start_type = area_of_element_
For start_no_% = t_condition.last_cond(0).area_of_element_no + 1 To _
                   t_condition.last_cond(1).area_of_element_no
start_no% = start_no_%
start_prove_area_of_element:
If area_of_element(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = area_of_element(start_no_%).data(0).record
temp_record.record_ = area_of_element(start_no_%).record_
 start_prove = set_area_of_element(0, 0, "", start_no_%, temp_record)
 If start_prove > 1 Then
   Exit Function
 End If
 End If
Next start_no_%
'*************************************************
start_type = point4_on_circle_
For start_no_% = t_condition.last_cond(0).four_point_on_circle_no + 1 To _
                 t_condition.last_cond(1).four_point_on_circle_no '9
start_no% = start_no_%
start_prove_four_point_on_circle:
If four_point_on_circle(start_no_%).data(0).record.data1.is_removed = False Then
 temp_record.record_data = four_point_on_circle(start_no_%).data(0).record
  temp_record.record_ = four_point_on_circle(start_no_%).record_
 start_prove = set_four_point_on_circle(0, 0, 0, 0, 0, temp_record, _
       start_no_%, no_reduce_)
  If start_prove > 1 Then
  Exit Function
  End If
  End If
Next start_no_%
'************************
start_type = verti_
For start_no_% = t_condition.last_cond(0).verti_no + 1 To _
                  t_condition.last_cond(1).verti_no
start_no% = start_no_%
start_prove_verti:
If Dverti(start_no_%).data(0).record.data1.is_removed = False Then
  temp_record.record_data = Dverti(start_no_%).data(0).record
  temp_record.record_ = Dverti(start_no_%).record_
  start_prove = set_dverti(0, 0, temp_record, start_no_%, no_reduce_, False)
  If start_prove > 1 Then
   Exit Function
  End If
  End If
Next start_no_%
'********************************************************
start_type = epolygon_
For start_no_% = t_condition.last_cond(0).epolygon_no + 1 To _
                     t_condition.last_cond(1).epolygon_no
start_no% = start_no_%
start_prove_epolygon:
If epolygon(start_no_%).data(0).record.data1.is_removed = False Then
 temp_record.record_data = epolygon(start_no_%).data(0).record
  temp_record.record_ = epolygon(start_no_%).record_
   start_prove = set_Epolygon(p, temp_record, start_no_%, no_reduce_, 0, 0, False)
    If start_prove > 1 Then
     Exit Function
   End If
 End If
Next start_no_%
'*******************************************
start_type = tixing_
For start_no_% = t_condition.last_cond(0).tixing_no + 1 To _
                 t_condition.last_cond(1).tixing_no
start_no% = start_no_%
start_prove_tixing:
If Dtixing(start_no_%).data(0).record.data1.is_removed = False Then
  temp_record.record_data = Dtixing(start_no_%).data(0).record
  temp_record.record_ = Dtixing(start_no_%).record_
   start_prove = set_tixing(0, 0, 0, 0, 0, temp_record, start_no_%, no_reduce_)
    If start_prove > 1 Then
   Exit Function
   End If
 End If
Next start_no_%
'start_type = string_value_
'For start_no% = t_condition.last_cond(0).string_value_no + 1 To _
                 t_condition.last_cond(1).string_value_no
'start_prove_string_value:
 ' temp_record.record_data = string_value(start_no_%).data(0).record
  'temp_record.record_ = string_value(start_no_%).record_
   'start_prove = set_string_value("", "", temp_record, start_no%, no_reduce_)
   'If start_prove > 1 Then
   'Exit Function
   'End If
'Next start_no%
'start_type = equal_side_tixing_
'For start_no_% = t_condition.last_cond(0).equal_side_tixing_no + 1 To _
                  t_condition.last_cond(1).equal_side_tixing_no
'start_no% = start_no_%
'start_prove_equal_side_tixing:
'  temp_record.record_data = Dequal_side_tixing(start_no_%).data(0).record
'  temp_record.record_ = Dequal_side_tixing(start_no_%).record_
'   start_prove = set_equal_side_tixing(0, 0, 0, 0, temp_record, start_no_%, no_reduce_)
'   If start_prove > 1 Then
'   Exit Function
'   End If
'Next start_no_%
'***************************
start_type = rhombus_
For start_no_% = t_condition.last_cond(0).rhombus_no + 1 To _
                   t_condition.last_cond(1).rhombus_no
start_no% = start_no_%
start_prove_rhombus:
If rhombus(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = rhombus(start_no_%).data(0).record
temp_record.record_ = rhombus(start_no_%).record_
start_prove = set_rhombus(0, 0, 0, 0, temp_record, start_no_%, no_reduce_)
If start_prove > 1 Then
  Exit Function
End If
End If
Next start_no_%
'****************************************************
start_type = long_squre_
For start_no_% = t_condition.last_cond(0).long_squre_no + 1 To _
                   t_condition.last_cond(1).long_squre_no
start_no% = start_no_%
start_prove_long_squre:
If Dlong_squre(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Dlong_squre(start_no_%).data(0).record
temp_record.record_ = Dlong_squre(start_no_%).record_
start_prove = set_long_squre(0, 0, 0, 0, temp_record, start_no_%, no_reduce_, 0, False)
If start_prove > 1 Then
  Exit Function
End If
End If
Next start_no_%
'**************************************
start_type = Squre
For start_no_% = t_condition.last_cond(0).squre_no + 1 To _
                   t_condition.last_cond(1).squre_no
start_no% = start_no_%
start_prove_squre:
If Dsqure(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Dsqure(start_no_%).data(0).record
temp_record.record_ = Dsqure(start_no_%).record_
start_prove = set_squre(0, 0, 0, 0, start_no_%, temp_record, 0, False)
If start_prove > 1 Then
  Exit Function
End If
End If
Next start_no_%
'*******************************************************
start_type = dpoint_pair_
For start_no_% = t_condition.last_cond(0).dpoint_pair_no + 1 To _
                  t_condition.last_cond(1).dpoint_pair_no '3
start_no% = start_no_%
start_prove_dpoint_pair:
If Ddpoint_pair(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Ddpoint_pair(start_no_%).data(0).record
temp_record.record_ = Ddpoint_pair(start_no_%).record_
 'If Ddpoint_pair(start_no_%).data(0).record.condition_data.condition_no = 0 Then
 start_prove = set_dpoint_pair(0, 0, 0, 0, 0, 0, 0, 0, _
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _
       temp_record, False, start_no_%, 0, 0, no_reduce_, False)
    If start_prove > 1 Then
     Exit Function
    End If
 End If
Next start_no_%
'***********************************************************
start_type = area_relation_
For start_no_% = t_condition.last_cond(0).area_relation_no + 1 To _
                 t_condition.last_cond(1).area_relation_no '4
start_no% = start_no_%
start_prove_area_relation:
If Darea_relation(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Darea_relation(start_no_%).data(0).record
temp_record.record_ = Darea_relation(start_no_%).record_
start_prove = set_area_relation(condition_type0, condition_type0, "", temp_record, start_no_%, 0, no_reduce_)
If start_prove > 1 Then
  Exit Function
End If
End If
'********************************************************
Next start_no_%
start_type = mid_point_line_
For start_no_% = t_condition.last_cond(0).mid_point_line_no + 1 To _
                   t_condition.last_cond(1).mid_point_line_no '7
start_no% = start_no_%
start_prove_mid_point_line:
If mid_point_line(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = mid_point_line(start_no_%).data(0).record
temp_record.record_ = mid_point_line(start_no_%).record_
 start_prove = set_mid_point_line(0, 0, 0, 0, 0, 0, temp_record, start_no_%, no_reduce_)
 If start_prove > 1 Then
  Exit Function
 End If
 End If
Next start_no_%
'**********************************************************
start_type = eline_
For start_no_% = t_condition.last_cond(0).eline_no + 1 To _
                 t_condition.last_cond(1).eline_no '8
start_no% = start_no_%
start_prove_eline:
If Deline(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Deline(start_no_%).data(0).record
temp_record.record_ = Deline(start_no_%).record_
 start_prove = set_equal_dline(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _
    0, temp_record, start_no_%, 0, 0, 0, no_reduce_, False)
 If start_prove > 1 Then
  Exit Function
 End If
 End If
Next start_no_%
'**************************************************************
start_type = midpoint_
For start_no_% = t_condition.last_cond(0).mid_point_no + 1 To _
                   t_condition.last_cond(1).mid_point_no  '12
start_no% = start_no_%
start_prove_mid_point:
If Dmid_point(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Dmid_point(start_no_%).data(0).record
temp_record.record_ = Dmid_point(start_no_%).record_
 start_prove = set_mid_point(0, 0, 0, 0, 0, 0, 0, 0, temp_record, start_no_%, 0, 0, 0, no_reduce_)
 If start_prove > 1 Then
  Exit Function
 End If
 End If
Next start_no_%
'*************************************************************
start_type = paral_
For start_no_% = t_condition.last_cond(0).paral_no + 1 To _
                  t_condition.last_cond(1).paral_no
start_no% = start_no_%
start_prove_paral:
If Dparal(start_no_%).data(0).data0.record.data1.is_removed = False Then
 temp_record.record_data = Dparal(start_no_%).data(0).data0.record
 temp_record.record_ = Dparal(start_no_%).record_
 start_prove = set_dparal(0, 0, temp_record, start_no_%, no_reduce_, False)
 If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
'**************************************************************
start_type = parallelogram_
For start_no_% = t_condition.last_cond(0).parallelogram_no + 1 To _
                   t_condition.last_cond(1).parallelogram_no '14
start_no% = start_no_%
start_prove_parallelogram:
If Dparallelogram(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Dparallelogram(start_no_%).data(0).record
temp_record.record_ = Dparallelogram(start_no_%).record_
 start_prove = set_parallelogram(0, 0, 0, 0, temp_record, start_no_%, no_reduce_)
 If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
'***************************************************************
start_type = relation_
For start_no_% = t_condition.last_cond(0).relation_no + 1 To _
                t_condition.last_cond(1).relation_no '16
start_no% = start_no_%
start_prove_relation:
If Drelation(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Drelation(start_no_%).data(0).record
temp_record.record_ = Drelation(start_no_%).record_
 start_prove = set_Drelation(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _
      "", temp_record, start_no_%, 0, 0, 0, no_reduce_, False)
 If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
'***************************************************************
start_type = v_relation_
For start_no_% = t_condition.last_cond(0).v_relation_no + 1 To _
                t_condition.last_cond(1).v_relation_no '16
start_no% = start_no_%
start_prove_v_relation:
If v_Drelation(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = v_Drelation(start_no_%).data(0).record
temp_record.record_ = v_Drelation(start_no_%).record_
 start_prove = set_v_relation(0, 0, 0, 0, _
                       "", start_no_%, temp_record)
 If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
'***************************************************************
start_type = similar_triangle_
For start_no_% = t_condition.last_cond(0).similar_triangle_no + 1 To _
                   t_condition.last_cond(1).similar_triangle_no '17temp_record.record_data = Dsimilar_triangle(start_no%).record
start_no% = start_no_%
start_prove_similar_triangle:
If Dsimilar_triangle(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Dsimilar_triangle(start_no_%).data(0).record
temp_record.record_ = Dsimilar_triangle(start_no_%).record_
 start_prove = set_similar_triangle0(0, 0, 0, 0, temp_record, start_no_%, no_reduce_, 0)
 If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
start_type = total_equal_triangle_
For start_no_% = t_condition.last_cond(0).total_equal_triangle_no + 1 To _
                  t_condition.last_cond(1).total_equal_triangle_no '18
start_no% = start_no_%
start_prove_total_equal_triangle:
If Dtotal_equal_triangle(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = Dtotal_equal_triangle(start_no_%).data(0).record
temp_record.record_ = Dtotal_equal_triangle(start_no_%).record_
 start_prove = set_total_equal_triangle0(0, 0, 0, 0, temp_record, start_no_%, no_reduce_)
  If start_prove > 1 Then
  Exit Function
  End If
End If
Next start_no_%
'**************************************************************
start_type = point3_on_line_
For start_no_% = t_condition.last_cond(0).three_point_on_line_no + 1 To _
                  t_condition.last_cond(1).three_point_on_line_no '20
start_no% = start_no_%
start_prove_three_point_on_line:
If three_point_on_line(start_no_%).data(0).record.data1.is_removed = False Then
 temp_record.record_data = three_point_on_line(start_no_%).data(0).record
 temp_record.record_ = three_point_on_line(start_no_%).record_
 start_prove = set_three_point_on_line(0, 0, 0, temp_record, start_no_%, no_reduce_, 0)
 If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
'**************************************************************
start_type = two_line_value_
For start_no_% = t_condition.last_cond(0).two_line_value_no + 1 To _
                  t_condition.last_cond(1).two_line_value_no  '21
start_no% = start_no_%
start_prove_two_line_value:
If two_line_value(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = two_line_value(start_no_%).data(0).record
temp_record.record_ = two_line_value(start_no_%).record_
 start_prove = set_two_line_value(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", _
   temp_record, start_no_%, no_reduce_)
 If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
'start_type = reduce_angle3_value_
'For start_no% = t_condition.last_cond(0).reduce_angle3_value_no + 1 To _
                    t_condition.last_cond(1).reduce_angle3_value_no '22
'start_prove_reduce_angle3_value:
 'start_prove = set_reduce_angle3_value(0, start_no%)
 'If start_prove > 1 Then
  'Exit Function
'End If
'Next start_no%
'**************************************************
start_type = angle3_value_
For start_no_% = t_condition.last_cond(0).angle3_value_no + 1 To _
                    t_condition.last_cond(1).angle3_value_no '22
start_no% = start_no_%
start_prove_angle3_value:
If angle3_value(start_no_%).data(0).record.data1.is_removed = False Then
 temp_record.record_data = angle3_value(start_no_%).data(0).record
 temp_record.record_ = angle3_value(start_no_%).record_
start_prove = set_three_angle_value(0, 0, 0, "", "", "", "", _
         0, temp_record, start_no_%, 0, 0, 5, 0, 0, False)
 If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
'start_type = Two_angle_value_
'For start_no% = t_condition.last_cond(0) _for_aid(aid_times).Two_angle_value.old_last_no + 1 To _
         last_conditions_for_aid(aid_times).Two_angle_value.temp_last_no '22
'start_prove_two_angle_value:
 'tn% = Two_angle_value.av_no(start_no%).no
 'temp_record.record_data = angle3_value(tn%).record
'start_prove = set_three_angle_value(0, 0, 0, "", "", "", "", _
         0, temp_record, tn%, no_reduce_, 0, True)
 'If start_prove > 1 Then
  'Exit Function
'End If
'Next start_no%
'*********************************************************
start_type = arc_value_
For start_no_% = t_condition.last_cond(0).arc_value_no + 1 To _
                  t_condition.last_cond(1).arc_value_no '25
start_no% = start_no_%
start_prove_arc_value:
If arc_value(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = arc_value(start_no_%).data(0).record
temp_record.record_ = arc_value(start_no_%).record_
 start_prove = set_arc_value(0, "", temp_record, start_no_%, no_reduce_)
 If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
'****************************************************************
start_type = equal_arc_
For start_no_% = t_condition.last_cond(0).equal_arc_no + 1 To _
                  t_condition.last_cond(1).equal_arc_no '26
start_no% = start_no_%
start_prove_equal_arc:
If equal_arc(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = equal_arc(start_no_%).data(0).record
temp_record.record_ = equal_arc(start_no_%).record_
 start_prove = set_equal_arc(0, 0, temp_record, start_no_%, no_reduce_)
  If start_prove > 1 Then
  Exit Function
  End If
End If
Next start_no_%
'*****************************************************************
start_type = line_value_
For start_no_% = t_condition.last_cond(0).line_value_no + 1 To _
                  t_condition.last_cond(1).line_value_no '33
start_no% = start_no_%
start_prove_line_value:
If line_value(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = line_value(start_no_%).data(0).record
temp_record.record_ = line_value(start_no_%).record_
 start_prove = set_line_value(0, 0, "", 0, 0, 0, temp_record, start_no_%, no_reduce_, False)
  If start_prove > 1 Then
  Exit Function
 End If
End If
Next start_no_%
'*****************************************************************
start_type = length_of_polygon_
For start_no_% = t_condition.last_cond(0).length_of_polygon_no + 1 To _
                  t_condition.last_cond(1).length_of_polygon_no '33
start_no% = start_no_%
start_prove_length_of_polygon:
If length_of_polygon(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = length_of_polygon(start_no_%).data(0).record
temp_record.record_ = length_of_polygon(start_no_%).record_
 start_prove = set_length_of_polygon(l_of_p, start_no_%, temp_record)
  If start_prove > 1 Then
  Exit Function
  End If
End If
Next start_no_%
'*********************************************************************
start_type = tangent_line_
For start_no_% = t_condition.last_cond(0).tangent_line_no + 1 To _
                  t_condition.last_cond(1).tangent_line_no '34
start_no% = start_no_%
start_prove_tangent_line:
If tangent_line(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = tangent_line(start_no_%).data(0).record
temp_record.record_ = tangent_line(start_no_%).record_
 start_prove = set_tangent_line(0, 0, 0, 0, 0, temp_record, start_no_%, no_reduce_)
  If start_prove > 1 Then
  Exit Function
  End If
End If
Next start_no_%
'***********************************************************
'start_type = equal_area_triangle_
'For start_no_% = t_condition.last_cond(0).equal_area_triangle_no + 1 To _
                 t_condition.last_cond(1).equal_area_triangle_no '36
'start_no% = start_no_%
'start_prove_equal_area_triangle:
'temp_record.record_data = equal_area_triangle(start_no_%).data(0).record
'temp_record.record_ = equal_area_triangle(start_no_%).record_
' start_prove = set_equal_area_triangle(0, 0, temp_record, start_no_%, no_reduce_)
'  If start_prove > 1 Then
'  Exit Function
' End If
'Next start_no_%
start_type = general_string_
For start_no_% = t_condition.last_cond(0).general_string_no + 1 To _
                 t_condition.last_cond(1).general_string_no '37
start_no% = start_no_%
start_prove_general_string:
If general_string(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = general_string(start_no_%).data(0).record
temp_record.record_ = general_string(start_no_%).record_
'record_0 = record0
start_prove = set_general_string(0, 0, 0, 0, 0, 0, 0, 0, 0, general_string(start_no%).record_.conclusion_no, 0, 0, temp_record, _
    start_no_%, ge_reduce_level)
If start_prove > 1 Then
  Exit Function
End If
End If
Next start_no_%
'***********************************************************
start_type = tri_function_
For start_no_% = t_condition.last_cond(0).tri_function_no + 1 To _
                 t_condition.last_cond(1).tri_function_no  '37
start_no% = start_no_%
start_prove_tri_function:
If tri_function(start_no_%).data(0).record.data1.is_removed = False Then
temp_record.record_data = tri_function(start_no_%).data(0).record
temp_record.record_ = tri_function(start_no_%).record_
'record_0 = record0
start_prove = set_tri_function(0, "", "", "", "", start_no_%, temp_record, False, tri_f, 0)
If start_prove > 1 Then
  Exit Function
End If
End If
Next start_no_%

'start_type = angle3_value_
'For start_no% = last_conditions_for_aid(aid_times).three_angle_value.old_last_no + 1 To _
                   last_conditions_for_aid(aid_times).three_angle_value.temp_last_no '22
'start_prove_angle3_value:
'tn% = three_angle_value.av_no(start_no%).no
 'temp_record.record_data = angle3_value(tn%).record
'start_prove = set_three_angle_value(0, 0, 0, "", "", "", "", _
         0, temp_record, tn%, no_reduce_, 0, True)
 'If start_prove > 1 Then
  'Exit Function
'End If
'Next start_no%
start_type = 0
start_no% = 0
' If run_type = 0 Then
 ' Call from_last_to_old
 'End If
  If loop_time = 0 Then
   loop_time = 1
    no_reduce_ = 1
  End If
  If finish_prove > 2 Then
  If t_condition.last_cond(1).total_condition < last_conditions.last_cond(1).total_condition Then
      If finish_prove = 3 Then
       finish_prove = 4
      Else
       finish_prove = 5
      End If
       start_prove = 2
          finish_prove = 4
       If run_type > 0 Then
        If set_display_string_(0, 0, False) Then
         Call display_run(0)
           Exit Function
        End If
       Else
           Exit Function
       End If
  End If
  End If
Loop Until t_condition.last_cond(1).total_condition = last_conditions.last_cond(1).total_condition
'**************************************************
 start_prove = call_theorem(0, 1)
 If start_prove > 1 Then
     Exit Function
 End If
'  If start_prove > 1 Then
'   start_no% = 0
'    start_type = 0
'       If run_type > 0 Then
'       If set_display_string_ Then
'        Call display_run(0)
'          Exit Function
'       End If
'       Else
'                  Exit Function
'       End If
'  End If
  'If run_type_ = 0 Then
'  Call from_last_to_old(0)
  'End If
  If last_conditions.last_cond(1).total_condition > t_condition.last_cond(1).total_condition Then
  If finish_prove = 4 Or finish_prove = 3 Then
      If finish_prove = 3 Then
       finish_prove = 4
      Else
       finish_prove = 5
      End If
       start_prove = 2
         finish_prove = 4
       If run_type > 0 Then
        If set_display_string_(0, 0, False) Then
        Call display_run(0)
         Exit Function
        End If
        Else
         Exit Function
        End If
  End If
  End If
Loop Until last_conditions.last_cond(1).total_condition = t_condition.last_cond(1).total_condition
  If finish_prove = 4 Or finish_prove = 3 Then
      finish_prove = 6
       start_prove = 2
       If run_type > 0 Then
        If set_display_string_(0, 0, False) Then
         Call display_run(0)
          Exit Function
        End If
       Else
          Exit Function
       End If
  End If
'If last_conditions.last_cond(1).circle_no > 4 And run_type < 10 Then
'three_angle_value0.temp_last_no = three_angle_value0.last_no(1)
'Two_angle_value0.temp_last_no = Two_angle_value0.last_no(1)
'first% = three_angle_value0.old_last_no
'last% = three_angle_value0.temp_last_no
'For k% = first% + 1 To last%
'start_no% = three_angle_value.av_no(k%).no
 ' start_prove = combine_three_angle_with_three_angle_(start_no%, k%, 0)
  '  If start_prove > 1 Then
   '  Exit Function
    'End If
'Next k%
'first% = Two_angle_value0.old_last_no
'last% = Two_angle_value0.temp_last_no
'For k% = first% + 1 To last%
' start_no% = Two_angle_value.av_no(k%).no
' start_prove = combine_three_angle_with_three_angle_(start_no%, k%, 0)
 '   If start_prove > 1 Then
 '         Exit Function
 '   End If
'Next k%
'three_angle_value0.old_last_no = three_angle_value0.temp_last_no
'Two_angle_value0.old_last_no = Two_angle_value0.temp_last_no
'End If
Loop Until t_condition.last_cond(1).total_condition = last_conditions.last_cond(1).total_condition
   start_prove = find_conclusion1(0, 0, False)
     prove_result = start_prove
    If start_prove > 1 Then
       If run_type > 0 Then
        If set_display_string_(0, 0, False) Then
         Call display_run(0)
          Exit Function
        End If
       Else
          Exit Function
       End If
    Else
    End If
If run_type_ = 1 And run_times = 0 And run_type = 0 Then
start_prove = th_menei
  run_times = 1
 If start_prove = 2 Then
       If run_type > 0 Then
        If set_display_string_(0, 0, False) Then
         Call display_run(0)
          Exit Function
        End If
       Else
          Exit Function
       End If
 Else
   GoTo start_prove_mark00
 End If
End If
       If run_type > 0 And finish_prove > 1 Then
        Call end_prove
       End If
For i% = 0 To last_conclusion - 1
   If conclusion_data(i%).ty = general_string_ And conclusion_data(i%).no(0) = 0 Then   '
      For j% = 1 To last_conditions.last_cond(1).general_string_no
          If general_string(j%).record_.conclusion_no = i% + 1 Then
            start_prove = set_general_string(0, 0, 0, 0, 0, 0, 0, 0, 0, _
              general_string(start_no%).record_.conclusion_no, 0, 0, temp_record, _
               j%, ge_reduce_level)
               If start_prove > 1 Then
                  Exit Function
               End If
          End If
      Next j%
   End If
Next i%
start_prove_error:
End Function



Public Function set_total_equal_triangle_from_eline_eline(ByVal el1%, _
          ByVal el2%, ByVal no_reduce As Byte) As Byte
Dim tp1(2) As Integer
Dim tp2(2) As Integer
If th_chose(5).chose = 0 Then
 Exit Function
End If
If Deline(el1%).data(0).data0.poi(0) = Deline(el2%).data(0).data0.poi(0) Then
 tp1(0) = Deline(el1%).data(0).data0.poi(1)
   tp1(1) = Deline(el1%).data(0).data0.poi(0)
     tp1(2) = Deline(el2%).data(0).data0.poi(1)
 If Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(2) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(3) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(2) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(3) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 Else
  Exit Function
 End If
ElseIf Deline(el1%).data(0).data0.poi(0) = Deline(el2%).data(0).data0.poi(1) Then
 tp1(0) = Deline(el1%).data(0).data0.poi(1)
   tp1(1) = Deline(el1%).data(0).data0.poi(0)
     tp1(2) = Deline(el2%).data(0).data0.poi(0)
 If Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(2) Then
   tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
ElseIf Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(3) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(2) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(3) Then
Exit Function
End If
ElseIf Deline(el1%).data(0).data0.poi(0) = Deline(el2%).data(0).data0.poi(2) Then
 tp1(0) = Deline(el1%).data(0).data0.poi(1)
   tp1(1) = Deline(el1%).data(0).data0.poi(0)
     tp1(2) = Deline(el2%).data(0).data0.poi(3)
 If Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(0) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(1) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(0) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(1) Then
Exit Function
End If
ElseIf Deline(el1%).data(0).data0.poi(0) = Deline(el2%).data(0).data0.poi(3) Then
  tp1(0) = Deline(el1%).data(0).data0.poi(1)
   tp1(1) = Deline(el1%).data(0).data0.poi(0)
     tp1(2) = Deline(el2%).data(0).data0.poi(2)
 If Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(0) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(1) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(0) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(1) Then
 Exit Function
 End If
ElseIf Deline(el1%).data(0).data0.poi(1) = Deline(el2%).data(0).data0.poi(0) Then
 tp1(0) = Deline(el1%).data(0).data0.poi(0)
   tp1(1) = Deline(el1%).data(0).data0.poi(1)
     tp1(2) = Deline(el2%).data(0).data0.poi(1)
If Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(2) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(3) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(2) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(3) Then
Exit Function
End If
ElseIf Deline(el1%).data(0).data0.poi(1) = Deline(el2%).data(0).data0.poi(1) Then
  tp1(0) = Deline(el1%).data(0).data0.poi(0)
   tp1(1) = Deline(el1%).data(0).data0.poi(1)
     tp1(2) = Deline(el2%).data(0).data0.poi(0)
If Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(2) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(3) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(2) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(3) Then
Exit Function
 End If
ElseIf Deline(el1%).data(0).data0.poi(1) = Deline(el2%).data(0).data0.poi(2) Then
 tp1(0) = Deline(el1%).data(0).data0.poi(0)
   tp1(1) = Deline(el1%).data(0).data0.poi(1)
     tp1(2) = Deline(el2%).data(0).data0.poi(3)
 If Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(0) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(1) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(0) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(1) Then
 Exit Function
 End If
ElseIf Deline(el1%).data(0).data0.poi(1) = Deline(el2%).data(0).data0.poi(3) Then
 tp1(0) = Deline(el1%).data(0).data0.poi(0)
   tp1(1) = Deline(el1%).data(0).data0.poi(1)
     tp1(2) = Deline(el2%).data(0).data0.poi(2)
 If Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(0) Then
   tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
ElseIf Deline(el1%).data(0).data0.poi(2) = Deline(el2%).data(0).data0.poi(1) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(0) Then
  tp2(0) = Deline(el1%).data(0).data0.poi(3)
   tp2(1) = Deline(el1%).data(0).data0.poi(2)
     tp2(2) = Deline(el2%).data(0).data0.poi(3)
 ElseIf Deline(el1%).data(0).data0.poi(3) = Deline(el2%).data(0).data0.poi(1) Then
Exit Function
End If
Else
 Exit Function
End If
End Function

Public Function three_point_direction(ByVal p1%, ByVal p2%, ByVal p3%) As Integer
Dim X(1) As Long
Dim Y(1) As Long
X(0) = m_poi(p1%).data(0).data0.coordinate.X - m_poi(p2%).data(0).data0.coordinate.X
X(1) = m_poi(p3%).data(0).data0.coordinate.X - m_poi(p2%).data(0).data0.coordinate.X
Y(0) = m_poi(p1%).data(0).data0.coordinate.Y - m_poi(p2%).data(0).data0.coordinate.Y
Y(1) = m_poi(p3%).data(0).data0.coordinate.Y - m_poi(p2%).data(0).data0.coordinate.Y
If X(0) * Y(1) - X(1) * Y(0) < 0 Then
three_point_direction = -1
ElseIf X(0) * Y(1) - X(1) * Y(0) > 0 Then
three_point_direction = 1
Else
three_point_direction = 0
Exit Function
End If

End Function

Public Function start_prove0() As Byte
Dim i%, j%, k%, l%, m%, p%, q%, cond_no%, no%
Dim t_draw_or_prove As Byte
Dim A(2) As Integer
Dim tn(1) As Integer
Dim v_line(2) As Integer
Dim cond_ty As Byte
Dim A1(2) As Integer
Dim triA As triangle_data0_type
Dim triA1 As triangle_data0_type
Dim temp_record As total_record_type
Dim c_data As condition_data_type
'Call C_display_wenti.m_display_start_prove
t_draw_or_prove = draw_or_prove
draw_or_prove = 0
For i% = 0 To 3
 If conclusion_data(i%).ty = angle3_value_ Then
    con_angle3_value(i%).data(1) = con_angle3_value(i%).data(0)
 End If
Next i%
For i% = 1 To last_conditions.last_cond(1).line_no
   'If m_lin(i%).data(0).data0.in_point(0) = 2 Then
    '        If m_lin(i%).data(0).parent.element(0).no = 0 And _
                 m_lin(i%).data(0).parent.element(1).no = 0 Then
     '        Call set_element_depend(line_, i%, point_, m_lin(i%).data(0).data0.poi(0), _
                 point_, m_lin(i%).data(0).data0.poi(1), 0, 0)
     '       End If
   'End If
  Call set_two_point_line_for_line(i%, temp_record.record_data)
  For j% = 3 To m_lin(i%).data(0).data0.in_point(0)
  For k% = 2 To j% - 1
   For l% = 1 To k% - 1
    temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
    start_prove0 = set_three_point_on_line(m_lin(i%).data(0).data0.in_point(j%), m_lin(i%).data(0).data0.in_point(k%), _
     m_lin(i%).data(0).data0.in_point(l%), temp_record, 0, 0, 0)
      If start_prove0 > 1 Then
       Exit Function
      End If
   Next l%
  Next k%
 Next j%
For j% = 1 To i% - 1
 Call set_total_angle0(i%, j%)
Next j%
Next i%
For i% = 1 To last_conditions.last_cond(1).point_no - 2
 'If m_poi(i%).data(0).no_reduce = 0 Then
 For j% = 1 To last_conditions.last_cond(1).point_no - 1
   If j% > i% Then
    For k% = 1 To last_conditions.last_cond(1).point_no
     If k% > j% Then
          temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
           triA = triA1
            start_prove0 = set_triangle(i%, j%, k%, triA, 0, 0, 0, 0, 0, _
                temp_record, 0)
            If start_prove0 > 1 Then
             Exit Function
            End If
   End If
  Next k%
  End If
 Next j%
' End If
Next i%
Call set_pseudo_inter_point_line_line
For i% = 1 To last_conditions.last_cond(1).circle_no
 start_prove0 = combine_circle_with_circle(i%, 0)
  If start_prove0 > 1 Then
   Exit Function
  End If
 For j% = 1 To m_Circ(i%).data(0).data0.in_point(0)
 ' v_line(0) = vector_number(m_Circ(i%).data(0).data0.center, m_Circ(i%).data(0).data0.in_point(j%), 0)
 ' Call set_item0(v_line(0), -10, v_line(0), -10, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", "1", _
        0, c_data, -1, tn(0), 0, 0, c_data)
 For k% = 1 To j% - 1
  Call set_initial_data_from_two_point_in_circle_for_run_type_1(i%, j%, k%)
 ' v_line(1) = vector_number(m_Circ(i%).data(0).data0.center, m_Circ(i%).data(0).data0.in_point(k%), 0)
 ' Call set_item0(v_line(1), -10, v_line(1), -10, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", "1", _
        0, c_data, -1, tn(1), 0, 0, c_data)
'  temp_record.record_data.data0.condition_data.condition_no = 0
'   Call set_general_string(tn(0), tn(1), 0, 0, "1", "-1", "0", "0", "0", 0, 0, _
     0, temp_record, 0, 0)
'   l% = line_number0(m_Circ(i%).data(0).data0.in_point(j%), _
         m_Circ(i%).data(0).data0.in_point(k%), 0, 0, True)
'    v_line(2) = vector_number(m_Circ(i%).data(0).data0.center, m_Circ(i%).data(0).data0.in_point(k%), 0)
     
  If m_Circ(i%).data(0).data0.center > 0 And m_poi(m_Circ(i%).data(0).data0.center).data(0).data0.visible > 0 Then
    p% = 0
    p% = max(p%, wenti_no_from_point(m_Circ(i%).data(0).data0.in_point(j%)))
    'If q% > p% Then
    '      temp_record.record_data.data0.condition_data.condition_no = 1
    '      temp_record.record_data.data0.condition_data.condition(1).ty = cond_ty
    '      temp_record.record_data.data0.condition_data.condition(1).no = cond_no%
    '      p% = q%
    'End If
    p% = max(p%, wenti_no_from_point(m_Circ(i%).data(0).data0.in_point(k%)))
    'If q% > p% Then
    '      temp_record.record_data.data0.condition_data.condition_no = 1
    '      temp_record.record_data.data0.condition_data.condition(1).ty = cond_ty
    '      temp_record.record_data.data0.condition_data.condition(1).no = cond_no%
    '       p% = q%
    'End If
    p% = max(p%, wenti_no_from_point(m_Circ(i%).data(0).data0.center))
    'If q% > p% Then
    '      temp_record.record_data.data0.condition_data.condition_no = 1
    '      temp_record.record_data.data0.condition_data.condition(1).ty = cond_ty
    '      temp_record.record_data.data0.condition_data.condition(1).no = cond_no%
    '      p% = q%
    'End If
    'temp_record.record_data.data0.condition_data.condition_no = 1
    'temp_record.record_data.data0.condition_data.condition(1).ty = 255
    'temp_record.record_data.data0.condition_data.condition(1).no = p%
    start_prove0 = set_equal_dline(m_Circ(i%).data(0).data0.in_point(j%), m_Circ(i%).data(0).data0.center, _
           m_Circ(i%).data(0).data0.in_point(k%), m_Circ(i%).data(0).data0.center, 0, 0, 0, 0, 0, 0, _
              0, temp_record, 0, 0, 0, 0, 0, False)
    If start_prove0 > 1 Then
     Exit Function
    End If
   End If
   'For l% = 1 To Circ(i%).data(0).data0.in_point(0)
   ' If l% <> j% And l% <> k% Then
   '  A(0) = angle_number(Circ(i%).data(0).data0.in_point(j%), Circ(i%).data(0).data0.in_point(l%), _
   '        Circ(i%).data(0).data0.in_point(k%), "", 0)
   '  A(1) = angle_number(Circ(i%).data(0).data0.in_point(j%), Circ(i%).data(0).center, _
           Circ(i%).data(0).data0.in_point(k%), "", 0)
   '  If (A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0) Then
   '   start_prove0 = set_three_angle_value(Abs(A(1)), Abs(A(0)), 0, "1", "-2", "0", "0", 0, _
           temp_record, 0, 0, 0, 0)
   '   If start_prove0 > 1 Then
   '     Exit Function
   '   End If
   '  End If
   ' End If
   'Next l%
 For l% = 1 To k% - 1
  If m_Circ(i%).data(0).data0.visible > 0 And _
                  m_Circ(i%).data(0).data0.center > 0 Then
           temp_record.record_data.data0.condition_data.condition_no = 0
    start_prove0 = set_three_point_on_circle(m_Circ(i%).data(0).data0.in_point(j%), _
      m_Circ(i%).data(0).data0.in_point(k%), m_Circ(i%).data(0).data0.in_point(l%), 0, i%, temp_record)
    If start_prove0 > 1 Then
     Exit Function
  End If
  End If
 For m% = 1 To l% - 1
    temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
    p% = 0
    p% = max(p%, wenti_no_from_point(m_Circ(i%).data(0).data0.in_point(j%)))
    'If q% > p% Then
     'temp_record.record_data.data0.condition_data.condition_no = 1
     'temp_record.record_data.data0.condition_data.condition(1).ty = cond_ty
     'temp_record.record_data.data0.condition_data.condition(1).no = cond_no%
     'p% = q%
    'End If
    p% = max(p%, wenti_no_from_point(m_Circ(i%).data(0).data0.in_point(k%)))
    'If q% > p% Then
    ' temp_record.record_data.data0.condition_data.condition_no = 1
    ' temp_record.record_data.data0.condition_data.condition(1).ty = cond_ty
    ' temp_record.record_data.data0.condition_data.condition(1).no = cond_no%
    ' p% = q%
    'End If
    p% = max(p%, wenti_no_from_point(m_Circ(i%).data(0).data0.in_point(l%)))
    'If q% > p% Then
    ' temp_record.record_data.data0.condition_data.condition_no = 1
    ' temp_record.record_data.data0.condition_data.condition(1).ty = cond_ty
    ' temp_record.record_data.data0.condition_data.condition(1).no = cond_no%
    ' p% = q%
    'End If
   ' p% = max(p%, wenti_no_from_point(m_Circ(i%).data(0).data0.in_point(m%)))
   '   temp_record.record_data.data0.condition_data.condition_no = 1
   '   temp_record.record_data.data0.condition_data.condition(1).ty = 255
   '   temp_record.record_data.data0.condition_data.condition(1).no = p%
   '   p% = q%
   '           no% = 0
              start_prove0 = set_four_point_on_circle(m_Circ(i%).data(0).data0.in_point(j%), _
                       m_Circ(i%).data(0).data0.in_point(k%), m_Circ(i%).data(0).data0.in_point(l%), _
                         m_Circ(i%).data(0).data0.in_point(m%), i%, temp_record, no%, 0)
    If start_prove0 > 1 Then
     Exit Function
    End If
    If regist_data.run_type = 1 Then
       temp_record.record_data.data0.condition_data.condition_no = 0
       Call add_conditions_to_record(point4_on_circle_, no%, 0, 0, temp_record.record_data.data0.condition_data)
       start_prove0 = set_four_point_on_circle_for_vector0(m_Circ(i%).data(0).data0.in_point(j%), _
           m_Circ(i%).data(0).data0.in_point(j%), m_Circ(i%).data(0).data0.in_point(j%), _
             m_Circ(i%).data(0).data0.in_point(j%), temp_record)
           If start_prove0 > 1 Then
              Exit Function
           End If
    End If
 Next m%
 Next l%
 Next k%
 Next j%
Next i%
    Call set_tangent_line_for_prove
draw_or_prove = t_draw_or_prove
End Function

Public Function set_general_string(ByVal it1%, ByVal it2%, _
       ByVal it3%, ByVal it4%, ByVal pA1$, ByVal pA2$, _
           ByVal pa3$, ByVal pa4$, ByVal value$, ByVal concl_no As Byte, _
            ByVal equal_mark_no As Byte, ByVal is_zero As Byte, re As total_record_type, _
              no%, ByVal no_reduce As Byte) As Byte
Dim i%, j%, k%, l%, tn%, temp_no%
Dim re1 As record_type
Dim g_string As general_string_data_type
Dim s1$
Dim S2$
Dim dp As Dpoint_pair_type
Dim tn_(2) As Integer
Dim n_(3) As Integer
Dim it(4) As Integer
Dim para(4) As String
Dim t_it(4) As Integer
Dim t_pa(4) As String
Dim t_para$
Dim tv As String
Dim t_tv As String
Dim ts$, ts1$
Dim level As Byte
Dim set_new_data As Boolean
Dim is_zero1 As Byte
Dim ty(1) As Byte
Dim dn(7) As Integer
Dim dr As relation_data0_type
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim t_y As Boolean
Dim c_data As condition_data_type
'On Error GoTo set_general_string_error
If no_reduce = 255 Or InStr(1, value$, "F", 0) > 0 Or _
       InStr(1, pA1$, "F", 0) Or InStr(1, pA2$, "F", 0) > 0 Or _
        InStr(1, pa3$, "F", 0) > 0 Or InStr(1, pa4$, "F", 0) > 0 Or _
         InStr(1, value$, "F", 0) > 0 Then
 Exit Function
End If
If no% > 0 Then
 If general_string(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
   GoTo set_general_string_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
End If
If (pA1$ = "0" And pA2$ = "0" And pa3$ = "0" And pa4$ = "0") Or _
        (it1% = 0 And it2% = 0 And it3% = 0 And it4% = 0) Then
 If value$ = "0" Then
  Exit Function
 Else
  If re.record_data.data0.condition_data.condition_no < 8 Then
   If re.record_data.data0.condition_data.condition(re.record_data.data0.condition_data.condition_no).ty = general_string_ Then
    no% = re.record_data.data0.condition_data.condition(re.record_data.data0.condition_data.condition_no).no
     For i% = 1 To re.record_data.data0.condition_data.condition_no - 1
     Call add_conditions_to_record(re.record_data.data0.condition_data.condition(i%).ty, _
         re.record_data.data0.condition_data.condition(i%).no, 0, 0, _
            general_string(no%).data(0).record.data0.condition_data)
     Next i%
     If pA1$ = "0" And pA2$ = "0" And pa3$ = "0" And pa4$ = "0" Then
     general_string(no%).data(0).value = "0"
     Else
     general_string(no%).data(0).value = add_string(add_string(pa3$, pa4$, False, False), _
            add_string(pA1$, pA2$, False, False), True, False)
     End If
     Call set_level(general_string(no%).data(0).record.data0.condition_data)
      set_general_string = is_con_general_string(no%)
       Exit Function
   End If
  End If
 End If
End If
  If concl_no = 0 And re.record_data.data0.condition_data.condition(1).ty = general_string_ Then
    concl_no = general_string(re.record_data.data0.condition_data.condition(1).no).record_.conclusion_no
   End If
temp_record = re
temp_record.record_.conclusion_no = concl_no
Call set_level(temp_record.record_data.data0.condition_data)
If concl_no > 0 Then
 If conclusion_data(concl_no - 1).no(0) > 0 Then
  If general_string(conclusion_data(concl_no - 1).no(0)).data(0).record.data0.condition_data.level <= _
      temp_record.record_data.data0.condition_data.level Then
       Exit Function
  End If
 End If
End If
If temp_record.record_data.data0.condition_data.level > 50 Then
 Exit Function
End If
set_general_string = is_general_string(it1, it2, it3, it4, pA1$, pA2$, pa3$, pa4$, value$, _
    no%, n_(0), n_(1), n_(2), n_(3), g_string, concl_no, _
     cond_type, temp_record.record_data, no_reduce)
If set_general_string > 1 Then
 Exit Function
ElseIf set_general_string = 1 Then
 Call set_level(temp_record.record_data.data0.condition_data)
 If cond_type = general_string_ And no% > 0 Then
  temp_record1.record_data = temp_record.record_data
'Call add_conditions_to_record(general_string_, no%, 0, 0, _
           temp_record1.record_data.data0.condition_data)
set_general_string = set_string_value_(general_string(no%).data(0).value, _
                       g_string.value, general_string_, no%, temp_record1.record_data, no_reduce)
If set_general_string > 1 Then
 Exit Function
End If
level = general_string(no%).data(0).record.data0.condition_data.level
  If set_prove_type(general_string_, no%, temp_record.record_data, _
      general_string(no%).data(0).record) And set_or_prove < 2 Then
       general_string(no%).data(0).trans_para = g_string.trans_para
   Call simple_record(general_string_, no%, _
         general_string(no%).data(0).record.data0.condition_data.level, level)
   If no_reduce = 0 Then 'Or run_type = 1 Then
     If no_reduce = 0 Then
      no% = 0
     End If
     set_general_string = 0
   Exit Function
   Else
     no_reduce = 2
 '     general_string(no%).record_.no_reduce = 0
   GoTo set_general_string_mark_0
   End If
  End If
  End If
 If set_or_prove < 2 Then
     set_general_string = 0
     Exit Function
  Else
   If display_inform = 1 Then
    If conclusion_data(0).ty = general_string_ And conclusion_data(0).no(0) = no% Then
     prove_type = 4
     event_statue = complete_prove
    End If
    Call display_prove_inform(modify_wenti_no, display)
   Else
    Exit Function
   End If
  End If
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_general_string = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
    Exit Function
   End If
End If
    If is_zero = 4 Or is_zero = 2 Then
     is_zero1 = 3
    Else
     is_zero1 = is_zero
    End If
'***************
If g_string.value <> "" Then
 If g_string.item(0) = 0 And g_string.item(1) = 0 And g_string.item(2) = 0 And g_string.item(3) = 0 Then
  Exit Function
 'ElseIf g_string.item(1) = 0 And InStr(1, g_string.para(0), "U", 0) = 0 And InStr(1, g_string.para(0), "V", 0) = 0 Then
 '  set_general_string = set_item0_value(g_string.item(0), 0, 0, "", "", _
                divide_string(g_string.value, g_string.para(0), True, False), "", _
                 0, temp_record.record_data.data0.condition_data)
 '                  Exit Function
 End If
End If
set_general_string = simple_general_string(g_string, temp_record, is_zero)
If set_general_string > 0 Then
    Exit Function
End If
set_general_string_mark6:
'End If
temp_no% = last_conditions.last_cond(1).general_string_no
For i% = 1 To temp_no%
general_string(i%).record_.index = general_string(i%).data(0).record.data1.index
Next i%
set_new_data = True
If last_conditions.last_cond(1).general_string_no Mod 10 = 0 Then
   ReDim Preserve general_string(last_conditions.last_cond(1).general_string_no + 10) As general_string_type
End If
 last_conditions.last_cond(1).general_string_no = last_conditions.last_cond(1).general_string_no + 1
  general_string(last_conditions.last_cond(1).general_string_no).data(0) = g_string
   general_string(last_conditions.last_cond(1).general_string_no).data(0).trans_para_for_display = _
    general_string(last_conditions.last_cond(1).general_string_no).data(0).trans_para
     general_string(last_conditions.last_cond(1).general_string_no).data(0).record = temp_record.record_data
       general_string(last_conditions.last_cond(1).general_string_no).record_ = temp_record.record_
         general_string(last_conditions.last_cond(1).general_string_no).record_.no_reduce = 0
          general_string(last_conditions.last_cond(1).general_string_no).data(0).value_ = _
            general_string(last_conditions.last_cond(1).general_string_no).data(0).value
             general_string(last_conditions.last_cond(1).general_string_no).data(0).trans_equal_mark = equal_mark_no
For j% = 0 To 3
For i% = last_conditions.last_cond(1).general_string_no To n_(j%) + 2 Step -1
 general_string(i%).data(0).record.data1.index.i(j%) = _
   general_string(i% - 1).data(0).record.data1.index.i(j%)
Next i%
 general_string(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).general_string_no
Next j%
no% = last_conditions.last_cond(1).general_string_no
If last_conditions_for_aid_no > 0 Then
 If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
  If item0(g_string.item(0)).data(0).poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And item0(g_string.item(0)).data(0).poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      item0(g_string.item(0)).data(0).poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And item0(g_string.item(0)).data(0).poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
     item0(g_string.item(1)).data(0).poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And item0(g_string.item(1)).data(0).poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      item0(g_string.item(1)).data(0).poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And item0(g_string.item(1)).data(0).poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
     item0(g_string.item(2)).data(0).poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And item0(g_string.item(2)).data(0).poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      item0(g_string.item(2)).data(0).poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And item0(g_string.item(2)).data(0).poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
     item0(g_string.item(3)).data(0).poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And item0(g_string.item(3)).data(0).poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      item0(g_string.item(3)).data(0).poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And item0(g_string.item(3)).data(0).poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
      last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  End If
 End If
End If
 ts$ = set_display_g_string(general_string(no%), True, 0, False)
If temp_record.record_.conclusion_no > "0" And re.record_data.data0.condition_data.condition_no > 0 And _
     re.record_data.data0.condition_data.condition_no < 8 Then
set_general_string_mark3:
  If re.record_data.data0.condition_data.condition(re.record_data.data0.condition_data.condition_no).ty = general_string_ Then
   general_string(no%).record_.conclusion_no = _
     general_string(re.record_data.data0.condition_data.condition(re.record_data.data0.condition_data.condition_no).no).record_.conclusion_no
   ts1$ = set_display_g_string(general_string(re.record_data.data0.condition_data.condition(re.record_data.data0.condition_data.condition_no).no), True, 0, False)
   If g_string.trans_para <> "1" And g_string.trans_para <> "-1" And g_string.trans_para <> "@1" Then
     If InStr(1, g_string.trans_para, "-", 0) > 1 Or _
         InStr(1, g_string.trans_para, "+", 0) > 0 Or _
          InStr(1, g_string.trans_para, "/", 0) > 0 Then
      ts$ = "(" + g_string.trans_para + ")(" + ts$ + ")"
     Else
      ts$ = g_string.trans_para + "(" + ts$ + ")"
     End If
   ElseIf g_string.trans_para = "-1" Or g_string.trans_para = "@1" Then
     ts$ = "-" + "(" + ts$ + ")"
   End If
   If equal_mark_no = 0 Then
    ts$ = ts1$ + "=" + ts$
   ElseIf equal_mark_no = 1 Then
    ts$ = ts1$ + "≥" + ts$
   ElseIf equal_mark_no = 2 Then
    ts$ = ts1$ + "≤" + ts$
   ElseIf equal_mark_no = 3 Then
    ts$ = ts1$ + "＞" + ts$
   ElseIf equal_mark_no = 4 Then
    ts$ = ts1$ + "＜" + ts$
   End If
 Else
 ts1$ = ""
 End If
 End If
 set_general_string = set_prove_proccess(ts$, general_string_, no%, general_string(no%).data(0).record.display_string)
  If set_general_string > 1 Or no_reduce = 0 Then
   Exit Function
  End If
  '******************************************************
  If general_string(no%).record_.conclusion_no > 0 And _
       general_string(no%).data(0).value <> "" Then
    set_general_string = is_con_general_string(no%)
  If set_general_string > 1 Or no_reduce = 0 Then
   Exit Function
  End If
  End If
  '***********************************
set_general_string_mark0:
If general_string(no%).record_.no_reduce = 0 Or _
    general_string(no%).record_.no_reduce = 2 Or _
     general_string(no%).record_.no_reduce = 4 Then
set_general_string_mark_0:
If general_string(no%).record_.conclusion_ty = 75 Or general_string(no%).record_.conclusion_ty = 76 Then
   set_general_string = set_min_max_value(no%)
    If set_general_string > 1 Then
       Exit Function
    End If
ElseIf general_string(no%).record_.conclusion_ty = 73 Then
   set_general_string = set_const_value(no%)
    If set_general_string > 1 Then
       Exit Function
    End If
End If
temp_record.record_data.data0.condition_data.condition_no = 0 ' record0
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
      Call set_level_(general_string(no%).record_.no_reduce, 1)
If general_string(no%).data(0).value <> "" And _
     general_string(no%).record_.conclusion_no > 0 Then
       set_general_string = is_con_general_string(no%)
     If set_general_string > 1 Then
        Exit Function
      End If
End If
temp_record.record_.conclusion_no = general_string(no%).record_.conclusion_no
temp_record.record_.conclusion_ty = general_string(no%).record_.conclusion_ty
temp_record.record_data.data0.condition_data.condition_no = 0 'record0
temp_record.record_data.data0.theorem_no = 1
'对general_string(no%)化简
Call add_conditions_to_record(general_string_, no%, 0, 0, temp_record.record_data.data0.condition_data)
   temp_record.record_.conclusion_no = general_string(no%).record_.conclusion_no
   temp_record.record_.conclusion_ty = general_string(no%).record_.conclusion_ty
    it(0) = general_string(no%).data(0).item(0)
     it(1) = general_string(no%).data(0).item(1)
      it(2) = general_string(no%).data(0).item(2)
       it(3) = general_string(no%).data(0).item(3)
    para(0) = general_string(no%).data(0).para(0)
     para(1) = general_string(no%).data(0).para(1)
      para(2) = general_string(no%).data(0).para(2)
       para(3) = general_string(no%).data(0).para(3)
        tv = general_string(no%).data(0).value
        t_y = False
For i% = 0 To 3
 '其中第i%项的值已知,代入
 If it(i%) > 0 And item0(it(i%)).data(0).value <> "" Then
  t_y = True
  If tv = "" Then
   para(i%) = time_string(para(i%), item0(it(i%)).data(0).value, True, False)
    it(i%) = 0
  Else
  tv = minus_string(tv, time_string(para(i%), item0(it(i%)).data(0).value, False, False), True, False)
   it(i%) = 0
    para(i%) = "0"
  End If
   Call add_record_to_record(item0(it(i%)).data(0).record_for_value.data0.condition_data, _
                               temp_record.record_data.data0.condition_data)
 End If
Next i%
If t_y = True Then
 temp_record.record_data.data0.theorem_no = 1
    set_general_string = set_general_string(it(0), it(1), it(2), it(3), para(0), para(1), para(2), para(3), _
     tv, general_string(no%).record_.conclusion_no, 0, 0, temp_record, 0, 0)
      If set_general_string > 1 Then
      Exit Function
      End If
End If
'*****************************************************************
temp_record.record_data.data0.condition_data.condition_no = 0
Call add_conditions_to_record(general_string_, no%, 0, 0, temp_record.record_data.data0.condition_data)
   temp_record.record_.conclusion_no = general_string(no%).record_.conclusion_no
   temp_record.record_.conclusion_ty = general_string(no%).record_.conclusion_ty
    it(0) = general_string(no%).data(0).item(0)
     it(1) = general_string(no%).data(0).item(1)
      it(2) = general_string(no%).data(0).item(2)
       it(3) = general_string(no%).data(0).item(3)
    para(0) = general_string(no%).data(0).para(0)
     para(1) = general_string(no%).data(0).para(1)
      para(2) = general_string(no%).data(0).para(2)
       para(3) = general_string(no%).data(0).para(3)
        tv = general_string(no%).data(0).value
'************************************************************
For i% = 0 To 3
''将第i%项化为相等的项
 If it(i%) > 0 Then
  For j% = 1 To item0(it(i%)).data(0).record_for_trans.last_trans_to
   If item0(it(i%)).data(0).record_for_trans.record(j%).to_no(0) > 0 Then
    t_it(i%) = item0(it(i%)).data(0).record_for_trans.record(j%).to_no(0)
    t_pa(i%) = time_string(item0(it(i%)).data(0).record_for_trans.record(j%).para(0), para(i%), True, False)
    If item0(it(i%)).data(0).record_for_trans.record(j%).para(1) <> "" And _
         item0(it(i%)).data(0).record_for_trans.record(j%).para(1) <> "0" Then '单项化单项
      t_it(4) = item0(it(i%)).data(0).record_for_trans.record(j%).to_no(1)
      t_pa(4) = time_string(item0(it(i%)).data(0).record_for_trans.record(j%).para(1), para(i%), True, False)
    Else
      t_it(4) = 0
      t_pa(4) = "0"
    End If
   ElseIf item0(it(i%)).data(0).record_for_trans.record(j%).to_no(1) > 0 Then
    t_it(i%) = item0(it(i%)).data(0).record_for_trans.record(j%).to_no(1)
    t_pa(i%) = time_string(item0(it(i%)).data(0).record_for_trans.record(j%).para(1), para(i%), True, False)
    If item0(it(i%)).data(0).record_for_trans.record(j%).para(0) <> "" And _
         item0(it(i%)).data(0).record_for_trans.record(j%).para(0) <> "0" Then
      t_it(4) = item0(it(i%)).data(0).record_for_trans.record(j%).to_no(0)
      t_pa(4) = time_string(item0(it(i%)).data(0).record_for_trans.record(j%).para(0), para(i%), True, False)
    Else
      t_it(4) = 0
      t_pa(4) = "0"
    End If
   Else
    If item0(it(i%)).data(0).record_for_trans.record(j%).para(0) <> "" And _
         item0(it(i%)).data(0).record_for_trans.record(j%).para(0) <> "0" Then
       t_it(i%) = 0
       t_pa(i%) = time_string(item0(it(i%)).data(0).record_for_trans.record(j%).para(0), para(i%), True, False)
    ElseIf item0(it(i%)).data(0).record_for_trans.record(j%).para(1) <> "" And _
         item0(it(i%)).data(0).record_for_trans.record(j%).para(1) <> "0" Then
       t_it(i%) = 0
       t_pa(i%) = time_string(item0(it(i%)).data(0).record_for_trans.record(j%).para(1), para(i%), True, False)
    End If
      t_it(4) = 0
      t_pa(4) = "0"
   End If
 temp_record.record_data.data0.theorem_no = 1
  Call add_conditions_to_record(general_string_, no%, 0, 0, temp_record.record_data.data0.condition_data)
   Call add_record_to_record(item0(it(i%)).data(0).record_for_trans.record(j%).condition_data, _
       temp_record.record_data.data0.condition_data)
    For k% = 0 To 3
     If k% <> i% Then
      t_it(k%) = it(k%)
      t_pa(k%) = para(k%)
     End If
    Next k%
    t_tv = tv
    For k% = 0 To 4
     For l% = k% + 1 To 4
      If t_it(k%) = t_it(l%) Then
       t_pa(k%) = add_string(t_pa(k%), t_pa(l%), True, False)
        t_pa(l%) = "0"
        t_it(l%) = 0
      End If
     Next l%
     If t_pa(k%) = "0" Then
      t_it(k%) = 0
     End If
    Next k%
    For k% = 0 To 3
     If (t_pa(k%) = "0" And t_pa(k% + 1) <> "0") Or _
         (t_pa(k%) <> "0" And t_pa(k% + 1) <> "0" And _
             t_it(k%) = 0) Then
       Call exchange_two_integer(t_it(k%), t_it(k% + 1))
       Call exchange_string(t_pa(k%), t_pa(k% + 1))
     End If
    Next k%
    For k% = 0 To 3
     If (t_pa(k%) = "0" And t_pa(k% + 1) <> "0") Or _
         (t_pa(k%) <> "0" And t_pa(k% + 1) <> "0" And _
             t_it(k%) = 0) Then
       Call exchange_two_integer(t_it(k%), t_it(k% + 1))
       Call exchange_string(t_pa(k%), t_pa(k% + 1))
     End If
    Next k%
    For k% = 0 To 3
     If (t_pa(k%) = "0" And t_pa(k% + 1) <> "0") Or _
         (t_pa(k%) <> "0" And t_pa(k% + 1) <> "0" And _
             t_it(k%) = 0) Then
       Call exchange_two_integer(t_it(k%), t_it(k% + 1))
       Call exchange_string(t_pa(k%), t_pa(k% + 1))
     End If
    Next k%
    For k% = 0 To 3
     If (t_pa(k%) = "0" And t_pa(k% + 1) <> "0") Or _
         (t_pa(k%) <> "0" And t_pa(k% + 1) <> "0" And _
             t_it(k%) = 0) Then
       Call exchange_two_integer(t_it(k%), t_it(k% + 1))
       Call exchange_string(t_pa(k%), t_pa(k% + 1))
     End If
    Next k%
    If t_tv = "" Then
     If t_pa(4) = "0" Then
      set_general_string = set_general_string(t_it(0), t_it(1), t_it(2), t_it(3), t_pa(0), t_pa(1), t_pa(2), t_pa(3), _
          t_tv, concl_no, 0, is_zero, temp_record, 0, 0)
      If set_general_string > 1 Then
       Exit Function
      End If
     End If
    Else
     If t_it(4) = 0 Then
      set_general_string = set_general_string(t_it(0), t_it(1), t_it(2), t_it(3), t_pa(0), t_pa(1), t_pa(2), t_pa(3), _
          minus_string(t_tv, t_pa(4), True, False), concl_no, 0, is_zero, temp_record, 0, 0)
      If set_general_string > 1 Then
       Exit Function
      End If
     End If
    End If
   Next j%
 End If
Next i%
      temp_record.record_data.data0.condition_data.condition_no = 0
      Call add_conditions_to_record(general_string_, no%, 0, 0, temp_record.record_data.data0.condition_data)
For i% = 1 To 3
 If it(i%) > 0 Then
 For j% = 0 To i% - 1
  t_it(0) = it(0)
  t_it(1) = it(1)
  t_it(2) = it(2)
  t_it(3) = it(3)
  t_pa(0) = para(0)
  t_pa(1) = para(1)
  t_pa(2) = para(2)
  t_pa(3) = para(3)
  If combine_two_item_for_p(it(j%), it(i%), para(j%), para(i%), t_it(j%), t_it(i%), _
      t_pa(j%), t_pa(i%), c_data) = 1 Then '两项合并
       Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
       set_general_string = set_general_string(t_it(0), t_it(1), t_it(2), t_it(3), _
        t_pa(0), t_pa(1), t_pa(2), t_pa(3), tv, _
            general_string(no%).record_.conclusion_no, 0, is_zero1, temp_record, _
              0, ge_reduce_level)
    If set_general_string > 1 Then
     Exit Function
    End If
   t_y = True
   GoTo set_general_string_mark10
  End If
 Next j%
 End If
Next i%
'*********************************************************
set_general_string_mark10:
      temp_record.record_data.data0.condition_data.condition_no = 0
      Call add_conditions_to_record(general_string_, no%, 0, 0, temp_record.record_data.data0.condition_data)
If para(0) = "0" And para(1) = "0" And para(2) = "0" And para(3) = "0" Then
  set_general_string = set_equation(tv, 0, temp_record)
    If set_general_string > 1 Then
     Exit Function
    End If
ElseIf is_general_string_sum_squ(general_string(no%).data(0), t_it(0), t_it(1), _
    t_pa(0), t_pa(1)) Then
       set_general_string = set_general_string(t_it(0), t_it(1), 0, 0, _
        t_pa(0), t_pa(1), "0", "0", tv, _
            general_string(no%).record_.conclusion_no, 0, is_zero1, temp_record, _
               0, ge_reduce_level)
    If set_general_string > 1 Then
     Exit Function
    End If
ElseIf para(2) = "0" And para(3) = "0" Then
   If item0(it(0)).data(0).poi(1) = -7 And item0(it(0)).data(0).poi(3) = -7 Then
     If item0(it(0)).data(0).sig = "*" Then
      If tv = "0" Then
       If item0(it(0)).data(0).poi(0) = it(1) Then
        set_general_string = set_item0_value(item0(it(0)).data(0).poi(2), 0, 0, "", "", _
             divide_string(time_string("-1", para(1), False, False), para(0), True, False), _
              "", 0, temp_record.record_data.data0.condition_data)
         If set_general_string > 1 Then
          Exit Function
         End If
       ElseIf item0(it(0)).data(0).poi(2) = it(1) Then
        set_general_string = set_item0_value(item0(it(0)).data(0).poi(0), 0, 0, "", "", _
             divide_string(time_string("-1", para(1), False, False), para(0), True, False), _
                "", 0, temp_record.record_data.data0.condition_data)
         If set_general_string > 1 Then
          Exit Function
         End If
        End If
      Else
        If item0(it(0)).data(0).poi(0) = item0(it(0)).data(0).poi(2) And _
              item0(it(0)).data(0).poi(0) = it(1) Then
         If solut_2order_equation(para(0), para(1), _
            time_string("-1", general_string(no%).data(0).value, False, False), s1$, S2$, False) Then
              temp_record.record_data.data0.theorem_no = -1
               If item0(it(1)).data(0).big_or_smamll Then
               set_general_string = set_item0_value(it(1), 0, 0, "", "", S2$, "", 0, _
                 temp_record.record_data.data0.condition_data)
               Else
               set_general_string = set_item0_value(it(1), 0, 0, "", "", s1$, "", 0, _
                 temp_record.record_data.data0.condition_data)
               End If
            If set_general_string > 1 Then
             Exit Function
            End If
         End If
        End If
      End If
     End If
   ElseIf item0(it(1)).data(0).poi(1) = -7 And item0(it(1)).data(0).poi(3) = -7 Then
    If item0(it(1)).data(0).sig = "*" Then
      If tv = "0" Then
       If item0(it(1)).data(0).poi(0) = it(0) Then
        set_general_string = set_item0_value(item0(it(1)).data(0).poi(2), 0, 0, "", "", _
             divide_string(time_string("-1", para(0), False, False), para(1), True, False), _
               "", 0, temp_record.record_data.data0.condition_data)
         If set_general_string > 1 Then
          Exit Function
         End If
       ElseIf item0(it(1)).data(0).poi(2) = it(0) Then
         set_general_string = set_item0_value(item0(it(1)).data(0).poi(0), 0, 0, "", "", _
             divide_string(time_string("-1", para(0), False, False), para(1), True, False), _
               "", 0, temp_record.record_data.data0.condition_data)
         If set_general_string > 1 Then
          Exit Function
         End If
      End If
      Else
        If item0(it(1)).data(0).poi(0) = item0(it(1)).data(0).poi(2) And _
              item0(it(1)).data(0).poi(0) = it(0) Then
          If solut_2order_equation(para(1), para(0), _
            time_string("-1", general_string(no%).data(0).value, False, False), s1$, S2$, False) Then
              temp_record.record_data.data0.theorem_no = -1
               If item0(it(1)).data(0).big_or_smamll Then
               set_general_string = set_item0_value(it(0), 0, 0, "", "", S2$, "", 0, _
                 temp_record.record_data.data0.condition_data)
               Else
               set_general_string = set_item0_value(it(0), 0, 0, "", "", s1$, "", 0, _
                 temp_record.record_data.data0.condition_data)
               End If
            If set_general_string > 1 Then
             Exit Function
            End If
         End If
        End If
      End If

    End If
   ElseIf item0(it(0)).data(0).sig = "*" And item0(it(1)).data(0).sig = "~" Then
    If general_string(no%).data(0).value = "0" Then
      If item0(it(0)).data(0).poi(0) = item0(it(1)).data(0).poi(0) And _
          item0(it(0)).data(0).poi(1) = item0(it(1)).data(0).poi(1) And _
            item0(it(0)).data(0).poi(1) <> -10 Then
        set_general_string = set_element_value(it(0), 1, divide_string(time_string("-1", para(1), False, False), _
            para(0), True, False), temp_record, no_reduce)
       ElseIf item0(it(0)).data(0).poi(2) = item0(it(1)).data(0).poi(0) And _
          item0(it(0)).data(0).poi(3) = item0(it(1)).data(0).poi(1) Then
         set_general_string = set_element_value(it(0), 0, divide_string(time_string("-1", para(1), False, False), _
           para(0), True, False), temp_record, no_reduce)
         If set_general_string > 1 Then
          Exit Function
         End If
      End If
     Else '<>"0"
      If item0(it(0)).data(0).poi(0) = item0(it(0)).data(0).poi(2) And _
          item0(it(0)).data(0).poi(0) = item0(it(1)).data(0).poi(0) And _
           item0(it(0)).data(0).poi(1) = item0(it(0)).data(0).poi(3) And _
             item0(it(0)).data(0).poi(1) = item0(it(1)).data(0).poi(1) And _
              item0(it(1)).data(0).poi(1) <> -10 Then
       If solut_2order_equation(para(0), para(1), _
         time_string("-1", general_string(no%).data(0).value, False, False), s1$, S2$, False) Then
          temp_record.record_data.data0.theorem_no = -1
           If item0(it(1)).data(0).big_or_smamll Then
             set_general_string = set_element_value(it(0), 0, S2$, temp_record, no_reduce)
           Else
             set_general_string = set_element_value(it(0), 0, s1$, temp_record, no_reduce)
           End If
            If set_general_string > 1 Then
             Exit Function
            End If
        End If
       End If
      End If
   ElseIf item0(it(0)).data(0).sig = "~" And item0(it(1)).data(0).sig = "*" Then
     If general_string(no%).data(0).value = "0" Then
       If item0(it(0)).data(0).poi(0) = item0(it(1)).data(0).poi(0) And _
           item0(it(0)).data(0).poi(1) = item0(it(1)).data(0).poi(1) And _
            item0(it(0)).data(0).poi(1) <> -10 Then
         set_general_string = set_element_value(it(1), 1, _
           divide_string(time_string("-1", para(0), True, False), _
            para(1), True, False), temp_record, no_reduce)
            If set_general_string > 1 Then
             Exit Function
            End If
        ElseIf item0(it(0)).data(0).poi(0) = item0(it(1)).data(0).poi(2) And _
             item0(it(0)).data(0).poi(1) = item0(it(1)).data(0).poi(3) And _
               item0(it(0)).data(0).poi(1) <> -10 Then
          set_general_string = set_element_value(it(1), 0, _
              divide_string(time_string("-1", para(0), False, False), _
               para(1), True, False), temp_record, no_reduce)
             If set_general_string > 1 Then
              Exit Function
             End If
        End If
      Else '<>"0"
       If item0(it(1)).data(0).poi(0) = item0(it(1)).data(0).poi(2) And _
           item0(it(1)).data(0).poi(0) = item0(it(0)).data(0).poi(0) And _
            item0(it(1)).data(0).poi(1) = item0(it(1)).data(0).poi(3) And _
             item0(it(1)).data(0).poi(1) = item0(it(0)).data(0).poi(1) And _
              item0(it(0)).data(0).poi(1) <> -10 Then
         If solut_2order_equation(para(1), para(0), _
             time_string("-1", general_string(no%).data(0).value, False, False), s1$, S2$, False) Then
              temp_record.record_data.data0.theorem_no = -1
               general_string(no%).record_.no_reduce = 255
               If Mid$(S2$, 1, 1) = "-" Or Mid$(S2$, 1, 1) = "@" Then
                 set_general_string = set_element_value(it(0), 0, _
                  s1$, temp_record, no_reduce)
               ElseIf Mid$(s1$, 1, 1) = "-" Or Mid$(s1$, 1, 1) = "@" Then
                 set_general_string = set_element_value(it(0), 0, _
                  S2$, temp_record, no_reduce)
               Else
                tv$ = chose_line_value_from_two_line_value(item0(it(0)).data(0).poi(0), _
                  item0(it(0)).data(0).poi(1), s1$, S2$, add_string(s1$, S2$, True, False))
                 set_general_string = set_element_value(it(0), 0, _
                  tv$, temp_record, no_reduce)
               End If
              'If item0(it(0)).data(0).big_or_smamll Then
               'set_general_string = set_element_value(it(0), 0, _
                ' S2$, temp_record.record_data, no_reduce)
              'Else
               'set_general_string = set_element_value(it(0), 0, _
                ' s1$, temp_record.record_data, no_reduce)
              'End If
                  If set_general_string > 1 Then
                       Exit Function
                  End If
          End If
        End If
       End If
    End If
 End If
't_y = False
For i% = 1 To 3
 For j% = 0 To i% - 1
 If (it(i%) > 0 And it(j%) > 0) Or (para(i%) <> "0" And para(j%) <> "0") Then
  If add_item0(it(i%), para(i%), it(j%), para(j%), tn%, t_para$, no_reduce) Then
   t_y = True
    it(j%) = tn%
     para(j%) = t_para$
       it(i%) = 0
        para(i%) = "0"
   End If
  End If
 Next j%
Next i%
If t_y Then
   'is_zero1 = general_string(no%).is_zero
If it(0) = 0 And it(1) = 0 And it(2) = 0 And it(3) = 0 And _
               general_string(no%).data(0).value = "" Then
 general_string(no%).data(0).value = add_string(add_string(add_string(para(0), para(1), False, False), _
       para(2), False, False), para(3), True, False)
    set_general_string = is_con_general_string(no%)
     If set_general_string > 1 Then
      Exit Function
     End If
Else
set_general_string = set_general_string(it(0), it(1), it(2), it(3), _
 para(0), para(1), para(2), para(3), general_string(no%).data(0).value, _
   general_string(no%).record_.conclusion_no, 0, is_zero1, temp_record, _
     0, ge_reduce_level)
  If set_general_string > 1 Then
   Exit Function
  End If
End If
End If
End If
If general_string(no%).record_.no_reduce <= 5 Then
Call set_level_(general_string(no%).record_.no_reduce, 2)
 If no_reduce > 0 Then
  no_reduce = no_reduce - 1
 End If
If (general_string(no%).data(0).value = "" And general_string(no%).data(0).record.data0.condition_data.level < 10) Or _
      (general_string(no%).data(0).value <> "" And general_string(no%).data(0).record.data0.condition_data.level < 10) Then
 set_general_string = combine_general_string_with_general_string(no%, no_reduce)
  If set_general_string > 1 Then
   Exit Function
  End If
End If
temp_record.record_data.data0.condition_data.condition_no = 0
 set_general_string = combine_mid_point_with_general_string(0, 0, 0, no%, temp_record)
 set_general_string = combine_general_string_with_item(no%, no_reduce)
  If set_general_string > 1 Then
   Exit Function
  End If
set_general_string = combine_general_string_with_item_value(no%, 0)
   If set_general_string > 1 Then
   Exit Function
  End If
set_general_string = combine_general_string_with_two_line_value(no%, 0)
  If set_general_string > 1 Then
    Exit Function
  End If
End If
Exit Function
set_general_string_error:
set_general_string = 0
If set_new_data Then
last_conditions.last_cond(1).general_string_no = temp_no%
For i% = 1 To temp_no%
general_string(i%).data(0).record.data1.index = general_string(i%).record_.index
Next i%
End If
End Function

Public Function set_item0(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, sig$, _
            ByVal in1%, ByVal in2%, ByVal in3%, ByVal in4%, ByVal il1%, _
              ByVal il2%, ByVal para1$, ByVal para2$, ByVal para$, ByVal value$, _
               para3$, conclusion_no%, re_for_value As condition_data_type, ByVal _
                from_no%, no%, no_reduce As Byte, is_no_initial As Integer, _
                 c_data As condition_data_type, dis_no As Boolean) As Byte                                   ', ByVal form_no%, ty As Byte) As Byte
Dim i%, j% 'ty =0  后推，ty=1 前推
Dim n_(3) As Integer
Dim t_item As item0_data_type
Dim temp_record As condition_data_type
temp_record = re_for_value
'Call set_level(temp_record.record_data)
 t_item = set_item0_(p1%, p2%, p3%, p4%, sig$, in1%, in2%, in3%, in4%, _
       il1%, il2%, para1$, para2$, para3$, is_no_initial, "", c_data)
        If para3$ <> "" And para$ <> "" Then
         para$ = time_string(para3$, para$, True, False)
        End If
 set_item0 = set_item0_from_data(t_item, para$, value$, conclusion_no%, _
    temp_record, from_no%, no%, no_reduce)
     If item0(no%).data(0).value <> "" Then
         Call add_record_to_record(item0(no%).data(0).record_for_value.data0.condition_data, c_data)
          para3$ = time_string(para3$, item0(no%).data(0).value, True, False)
           If dis_no = False Then
            no% = 0
           End If
     Else
         Call set_level(c_data)
          If c_data.level < item0(no%).data(0).record_for_value.data0.condition_data.level Then
             item0(no%).data(0).record_for_value.data0.condition_data = c_data
          End If
     End If
End Function
Public Function set_temp_item0(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, sig$, _
             ByVal para1$, ByVal para2$, _
               para3$, no%) As Byte                                   ', ByVal form_no%, ty As Byte) As Byte
Dim i%, j%, temp_no% 'ty =0  后推，ty=1 前推
Dim n_(3) As Integer
Dim t_item As item0_data_type
Dim set_new_data As Boolean
Dim c_data As condition_data_type
'On Error GoTo set_temp_item0_error
'Call set_level(temp_record.record_data)
 t_item = set_item0_(p1%, p2%, p3%, p4%, sig$, 0, 0, 0, 0, _
        0, 0, para1$, para2$, para3$, 0, "", c_data)
For i% = 1 To last_temp_item0
 If temp_item0(i%).sig = t_item.sig And _
     temp_item0(i%).poi(0) = t_item.poi(0) And _
      temp_item0(i%).poi(1) = t_item.poi(1) And _
       temp_item0(i%).poi(2) = t_item.poi(2) And _
        temp_item0(i%).poi(3) = t_item.poi(3) And _
         temp_item0(i%).para(0) = t_item.para(0) And _
           temp_item0(i%).para(1) = t_item.para(1) Then
 no% = i%
 Exit Function
 End If
Next i%
temp_no% = last_temp_item0
last_temp_item0 = last_temp_item0 + 1
set_new_data = True
ReDim Preserve temp_item0(last_temp_item0) As item0_data_type
temp_item0(last_temp_item0) = t_item
no% = last_temp_item0
Exit Function
set_temp_item0_error:
If set_new_data Then
 last_temp_item0 = temp_no%
  set_temp_item0 = 0
End If
End Function

Public Function item_number(i As item0_data_type, para$, c_data As condition_data_type) As Integer
Dim n%
If i.poi(0) = 0 And i.poi(1) = 0 And i.poi(2) = 0 And i.poi(3) = 0 Then
 para$ = "0"
 item_number = 0
Else
Call set_item0(i.poi(0), i.poi(1), i.poi(2), i.poi(3), i.sig, _
     0, 0, 0, 0, 0, 0, i.para(0), i.para(1), "1", "", para$, 0, _
        record_data0.data0.condition_data, 0, n%, 0, 0, c_data, False)
item_number = n%
End If
End Function

Public Function set_display_g_string(g_s As general_string_type, _
          is_positive As Boolean, dis_ty As Byte, is_depend As Boolean) As String
Dim i%, j%, k%
Dim sig(3) As String
Dim ts(3) As Integer
Dim t_s$, pa0$
Dim item(3) As String
    t_s$ = g_s.data(0).value
For i% = 0 To 3
    item(i%) = set_display_item0(item0(g_s.data(0).item(i%)).data(0), dis_ty, False, is_depend)
Next i%
'*********************************************************************
If g_s.record_.conclusion_no = 0 And _
                           g_s.display_con_string = "" Then
  If g_s.data(0).item(0) = 0 Then
   set_display_g_string = "0"
    Exit Function
  End If
  set_display_g_string = ""
   For i% = 0 To 3
    If g_s.data(0).item(i) > 0 Then
     If i% = 1 And g_s.data(0).item(2) = 0 And g_s.data(0).value = "0" Then
      set_display_g_string = set_display_g_string + "=" + _
               combine_para_with_element(time_string("-1", g_s.data(0).para(i%), True, False), item(i), "", dis_ty)
                Exit Function
     Else
      set_display_g_string = combine_para_with_element(g_s.data(0).para(i%), item(i), set_display_g_string, dis_ty)
     End If
    End If
   Next i%
   set_display_g_string = set_display_g_string + "=" + _
        combine_para_with_element(g_s.data(0).value, "1", "", dis_ty)
  Else
    For i% = 0 To 3
     If g_s.data(0).item(i) > 0 Then
      set_display_g_string = combine_para_with_element(g_s.data(0).para(i%), item(i), set_display_g_string, dis_ty)
     ElseIf g_s.data(0).para(i) <> "" Then
      set_display_g_string = combine_para_with_element(g_s.data(0).para(i%), "1", set_display_g_string, dis_ty)
     End If
    Next i%
   If g_s.record_.conclusion_no = 0 Then
      set_display_g_string = combine_para_with_element(time_string("-1", g_s.data(0).value, True, False), "1", _
           set_display_g_string, dis_ty)
      If g_s.data(0).trans_para_for_display <> "1" Then
         If InStr(1, set_display_g_string, "+", 0) > 0 And InStr(1, set_display_g_string, "-", 0) > 0 Then
          set_display_g_string = g_s.data(0).trans_para_for_display + "(" + set_display_g_string + ")"
         Else
          set_display_g_string = g_s.data(0).trans_para_for_display + set_display_g_string
         End If
      End If
      set_display_g_string = set_display_g_string + "=0"
   'Else
   End If
 End If
End Function

Public Function set_display_g_string_with_c_item(ByVal g%, ty1 As Boolean, display_string As String, _
                                dis_ty As Byte, is_depend As Boolean) As Boolean
Dim i%
Dim it(3) As Integer
Dim pA(3) As String
Dim ty As Byte
Dim s(3) As String
Dim p(1) As String
Dim c_data As condition_data_type
If (general_string(g%).data(0).combine_two_item(1) = 0 And _
      general_string(g%).data(0).combine_two_item(0) = 1) _
    Or (general_string(g%).data(0).combine_two_item(1) = 1 And _
            general_string(g%).data(0).combine_two_item(0) = 0) Then
it(0) = general_string(g%).data(0).item(0)
it(1) = general_string(g%).data(0).item(1)
it(2) = general_string(g%).data(0).item(2)
it(3) = general_string(g%).data(0).item(3)
pA(0) = general_string(g%).data(0).para(0)
pA(1) = general_string(g%).data(0).para(1)
pA(2) = general_string(g%).data(0).para(2)
pA(3) = general_string(g%).data(0).para(3)
ElseIf (general_string(g%).data(0).combine_two_item(1) = 0 And _
          general_string(g%).data(0).combine_two_item(0) = 2) Or _
         (general_string(g%).data(0).combine_two_item(1) = 2 And _
           general_string(g%).data(0).combine_two_item(0) = 0) Then
it(0) = general_string(g%).data(0).item(0)
it(1) = general_string(g%).data(0).item(2)
it(2) = general_string(g%).data(0).item(1)
it(3) = general_string(g%).data(0).item(3)
pA(0) = general_string(g%).data(0).para(0)
pA(1) = general_string(g%).data(0).para(2)
pA(2) = general_string(g%).data(0).para(1)
pA(3) = general_string(g%).data(0).para(3)
ElseIf (general_string(g%).data(0).combine_two_item(1) = 0 And _
         general_string(g%).data(0).combine_two_item(0) = 3) Or _
        (general_string(g%).data(0).combine_two_item(1) = 3 And _
          general_string(g%).data(0).combine_two_item(0) = 0) Then
it(0) = general_string(g%).data(0).item(0)
it(1) = general_string(g%).data(0).item(3)
it(2) = general_string(g%).data(0).item(2)
it(3) = general_string(g%).data(0).item(1)
pA(0) = general_string(g%).data(0).para(0)
pA(1) = general_string(g%).data(0).para(3)
pA(2) = general_string(g%).data(0).para(2)
pA(3) = general_string(g%).data(0).para(1)
ElseIf (general_string(g%).data(0).combine_two_item(1) = 1 And _
         general_string(g%).data(0).combine_two_item(0) = 2) Or _
         (general_string(g%).data(0).combine_two_item(1) = 2 And _
           general_string(g%).data(0).combine_two_item(0) = 1) Then
it(0) = general_string(g%).data(0).item(1)
it(1) = general_string(g%).data(0).item(2)
it(2) = general_string(g%).data(0).item(0)
it(3) = general_string(g%).data(0).item(3)
pA(0) = general_string(g%).data(0).para(1)
pA(1) = general_string(g%).data(0).para(2)
pA(2) = general_string(g%).data(0).para(0)
pA(3) = general_string(g%).data(0).para(3)
ElseIf (general_string(g%).data(0).combine_two_item(1) = 1 And _
          general_string(g%).data(0).combine_two_item(0) = 3) Or _
        (general_string(g%).data(0).combine_two_item(1) = 3 And _
          general_string(g%).data(0).combine_two_item(0) = 1) Then
it(0) = general_string(g%).data(0).item(1)
it(1) = general_string(g%).data(0).item(3)
it(2) = general_string(g%).data(0).item(2)
it(3) = general_string(g%).data(0).item(0)
pA(0) = general_string(g%).data(0).para(1)
pA(1) = general_string(g%).data(0).para(3)
pA(2) = general_string(g%).data(0).para(2)
pA(3) = general_string(g%).data(0).para(0)
ElseIf (general_string(g%).data(0).combine_two_item(1) = 2 And _
           general_string(g%).data(0).combine_two_item(0) = 3) Or _
        (general_string(g%).data(0).combine_two_item(1) = 3 And _
            general_string(g%).data(0).combine_two_item(0) = 2) Then
it(0) = general_string(g%).data(0).item(2)
it(1) = general_string(g%).data(0).item(3)
it(2) = general_string(g%).data(0).item(0)
it(3) = general_string(g%).data(0).item(1)
pA(0) = general_string(g%).data(0).para(2)
pA(1) = general_string(g%).data(0).para(3)
pA(2) = general_string(g%).data(0).para(0)
pA(3) = general_string(g%).data(0).para(1)
End If
For i% = 0 To 3
If ty1 = False Then
     pA(i%) = time_string("-1", pA(i%), True, False)
End If
Next i%

If item0(it(0)).data(0).sig = "*" And item0(it(1)).data(0).sig = "*" Then
   If item0(it(0)).data(0).poi(0) = item0(it(1)).data(0).poi(0) And _
        item0(it(0)).data(0).poi(1) = item0(it(1)).data(0).poi(1) Then
    Call arrange_four_point(item0(it(0)).data(0).poi(2), item0(it(0)).data(0).poi(3), _
         item0(it(1)).data(0).poi(2), item0(it(1)).data(0).poi(3), 0, 0, 0, 0, _
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ty, c_data, 0)
      If ty = 4 Or ty = 8 Then
       s(0) = m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + _
              "*(" + m_poi(item0(it(0)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(3)).data(0).data0.name + _
               "-" + m_poi(item0(it(1)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(3)).data(0).data0.name + ")"
      p(0) = pA(0)
      ElseIf ty = 6 Or ty = 7 Then
      s(0) = m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + _
           "*(" + m_poi(item0(it(1)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(3)).data(0).data0.name + _
            "-" + m_poi(item0(it(0)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(3)).data(0).data0.name + ")"
      p(0) = pA(1)
      ElseIf ty = 3 Or ty = 5 Then
      s(0) = m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + _
           "*(" + m_poi(item0(it(1)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(3)).data(0).data0.name + _
            "+" + m_poi(item0(it(0)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(3)).data(0).data0.name + ")"
      p(0) = pA(1)

      End If
        
   ElseIf item0(it(0)).data(0).poi(2) = item0(it(1)).data(0).poi(2) And _
        item0(it(0)).data(0).poi(3) = item0(it(1)).data(0).poi(3) Then
    Call arrange_four_point(item0(it(0)).data(0).poi(0), item0(it(0)).data(0).poi(1), _
         item0(it(1)).data(0).poi(0), item0(it(1)).data(0).poi(1), 0, 0, 0, 0, 0, 0, _
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ty, c_data, 0)
      If ty = 4 Or ty = 8 Then
      s(0) = m_poi(item0(it(0)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(3)).data(0).data0.name + _
              "*(" + m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + _
               "-" + m_poi(item0(it(1)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(1)).data(0).data0.name + ")"
      p(0) = pA(0)
      ElseIf ty = 6 Or ty = 7 Then
      s(0) = m_poi(item0(it(0)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(3)).data(0).data0.name + _
           "*(" + m_poi(item0(it(1)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(1)).data(0).data0.name + _
            "-" + m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + ")"
      p(0) = pA(1)
      ElseIf ty = 3 Or ty = 5 Then
      s(0) = m_poi(item0(it(0)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(3)).data(0).data0.name + _
           "*(" + m_poi(item0(it(1)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(1)).data(0).data0.name + _
            "+" + m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + ")"
      p(0) = pA(1)
      End If
   End If
ElseIf item0(it(0)).data(0).sig = "/" And item0(it(1)).data(0).sig = "/" Then
   If item0(it(0)).data(0).poi(2) = item0(it(1)).data(0).poi(2) And item0(it(0)).data(0).poi(3) = item0(it(1)).data(0).poi(3) And _
        item0(it(0)).data(0).poi(0) > 0 And item0(it(0)).data(0).poi(1) > 0 And _
          item0(it(1)).data(0).poi(0) > 0 And item0(it(1)).data(0).poi(1) > 0 Then
     Call arrange_four_point(item0(it(0)).data(0).poi(0), item0(it(0)).data(0).poi(1), _
         item0(it(1)).data(0).poi(0), item0(it(1)).data(0).poi(1), 0, 0, 0, 0, 0, 0, _
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ty, c_data, 0)
      If ty = 4 Or ty = 8 Then
      s(0) = "(" + m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + _
               "-" + m_poi(item0(it(1)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(1)).data(0).data0.name + ")" + _
                  m_poi(item0(it(0)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(3)).data(0).data0.name
      p(0) = pA(0)
      ElseIf ty = 6 Or ty = 7 Then
      s(0) = "(" + m_poi(item0(it(1)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(1)).data(0).data0.name + _
            "-" + m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + ")/" + _
               m_poi(item0(it(0)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(3)).data(0).data0.name
      p(0) = pA(1)
      ElseIf ty = 3 Or ty = 5 Then
      s(0) = "(" + m_poi(item0(it(1)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(1)).data(0).data0.name + _
            "+" + m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + ")/" + _
               m_poi(item0(it(0)).data(0).poi(2)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(3)).data(0).data0.name
      p(0) = pA(1)
      End If
  End If
ElseIf (item0(it(0)).data(0).sig = "~" Or item0(it(0)).data(0).sig = empty_char) And _
        (item0(it(1)).data(0).sig = "~" Or item0(it(1)).data(0).sig = empty_char) Then
Call arrange_four_point(item0(it(0)).data(0).poi(0), item0(it(0)).data(0).poi(1), _
         item0(it(1)).data(0).poi(0), item0(it(1)).data(0).poi(1), 0, 0, 0, 0, 0, 0, _
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ty, c_data, 0)
If ty = 4 Or ty = 8 Then
s(0) = "(" + m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + _
       "-" + m_poi(item0(it(1)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(1)).data(0).data0.name + ")"
p(0) = pA(0)
ElseIf ty = 6 Or ty = 7 Then
s(0) = "(" + m_poi(item0(it(1)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(1)).data(0).data0.name + _
       "-" + m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + ")"
p(0) = pA(1)
ElseIf ty = 3 Or ty = 5 Then
s(0) = "(" + m_poi(item0(it(1)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(1)).data(0).poi(1)).data(0).data0.name + _
       "+" + m_poi(item0(it(0)).data(0).poi(0)).data(0).data0.name + m_poi(item0(it(0)).data(0).poi(1)).data(0).data0.name + ")"
p(0) = pA(1)

End If
End If
s(2) = set_display_item0(item0(it(2)).data(0), dis_ty, False, is_depend)
s(3) = set_display_item0(item0(it(3)).data(0), dis_ty, False, is_depend)
If pA(2) <> "" And pA(2) <> "0" And s(2) = "" And pA(3) <> "" And pA(3) <> "0" And _
      s(3) <> "" Then
s(1) = s(2)
s(2) = s(3)
s(3) = s(1)
pA(1) = pA(2)
pA(2) = pA(3)
pA(3) = pA(1)
End If
'***********************************

If Mid$(p(0), 1, 1) = "-" Then
 If Mid$(pA(2), 1, 1) = "-" Then
  display_string = display_item_with_parament(True, s(3), pA(3), dis_ty) + _
      display_item_with_parament(False, s(0), pA(0), ty) + _
        display_item_with_parament(True, s(2), pA(2), dis_ty)
 Else
  display_string = display_item_with_parament(True, s(2), pA(2), dis_ty) + _
      display_item_with_parament(False, s(0), pA(0), dis_ty) + _
        display_item_with_parament(True, s(3), pA(3), dis_ty)
 End If
Else
  display_string = display_item_with_parament(True, s(0), pA(0), dis_ty) + _
      display_item_with_parament(False, s(2), pA(2), dis_ty) + _
        display_item_with_parament(True, s(3), pA(3), dis_ty)
End If
set_display_g_string_with_c_item = True
End Function

Public Function display_item_with_parament(is_first_item As Boolean, it$, pA$, dis_ty As Byte) As String
 If pA$ <> "" And pA$ <> "0" Then
 If it$ = "" Then
  display_item_with_parament = display_string_(pA$, dis_ty)
 Else
  If is_first_item Then
   If pA$ = "1" Then
    display_item_with_parament = it$
   Else
    display_item_with_parament = display_string_(pA$, dis_ty) + it$
   End If
  Else
   If pA$ = "1" Then
   display_item_with_parament = "+" + it$
   ElseIf pA$ = "-1" Or pA$ = "@1" Then
    display_item_with_parament = "-" + it$
   Else
    display_item_with_parament = display_string_(pA$, dis_ty) + it$
   End If
  End If
 End If
 Else
 display_item_with_parament = ""
 End If
End Function


Public Function set_long_squre0(ByVal poly4_no%, re As total_record_type, no%, _
      ByVal no_reduce As Byte, ty As Byte) As Byte
Dim cond_ty As Byte
Dim temp_record As total_record_type
Dim ts$
If ty = 1 Then
 If is_long_squre0(poly4_no%, no%, 0, cond_ty) Then
  Exit Function
 End If
End If
temp_record = re
If Dpolygon4(poly4_no%).data(0).ty = Squre Then
 set_long_squre0 = set_squre0(poly4_no%, no%, temp_record)
Else
If long_squre_ - Dpolygon4(poly4_no%).data(0).ty >= 2 Then
If last_conditions.last_cond(1).long_squre_no Mod 10 = 0 Then
  ReDim Preserve Dlong_squre(last_conditions.last_cond(1).long_squre_no + 10) As long_squre_type
End If
last_conditions.last_cond(1).long_squre_no = last_conditions.last_cond(1).long_squre_no + 1
 no% = last_conditions.last_cond(1).long_squre_no
  Dlong_squre(no%).data(0) = dpolygon4_data_0
   Dlong_squre(no%).data(0).polygon4_no = poly4_no%
    If Dpolygon4(poly4_no%).data(0).condition.no > 0 Then
     Call add_conditions_to_record(Dpolygon4(poly4_no%).data(0).condition.ty, Dpolygon4(poly4_no%).data(0).condition.no, _
          0, 0, temp_record.record_data.data0.condition_data)
    End If
       Dlong_squre(no%).data(0).record = temp_record.record_data
        Dlong_squre(no%).record_ = temp_record.record_
         Dlong_squre(no%).record_.no_reduce = 0
If last_conditions_for_aid_no > 0 Then
 If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
  If Dpolygon4(poly4_no%).data(0).poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       Dpolygon4(poly4_no%).data(0).poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        Dpolygon4(poly4_no%).data(0).poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
         Dpolygon4(poly4_no%).data(0).poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
      last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  End If
 End If
End If
Dpolygon4(poly4_no%).data(0).ty = long_squre_
Dpolygon4(poly4_no%).data(0).no = no%
ts$ = LoadResString_from_inpcond(-13, set_display_polygon4(Dpolygon4(poly4_no%).data(0), 0, False, 1, 0))
   set_long_squre0 = set_prove_proccess(ts$, long_squre_, no%, Dlong_squre(no%).data(0).record.display_string)
ElseIf Abs(Dpolygon4(poly4_no%).data(0).ty - long_squre_) < 2 Then
Call add_conditions_to_record(rhombus_, Dpolygon4(poly4_no%).data(0).no, 0, 0, _
  temp_record.record_data.data0.condition_data)
 set_long_squre0 = set_squre0(poly4_no%, no%, temp_record)
End If
End If
End Function


Public Function set_long_squre(ByVal p1%, _
    ByVal p2%, ByVal p3%, ByVal p4%, re As total_record_type, no%, _
      ByVal no_reduce As Byte, is_initial As Byte, is_reduce As Boolean) As Byte
Dim i%
Dim tp As Integer
Dim dn(2) As Integer
Dim n_(5) As Integer
Dim l_(1) As Integer
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim no_reduce1 As Boolean
Dim ts$
Dim level As Byte
'Dim po As polygon
Dim poly4_no%
'On Error GoTo set_long_squre_error
If no_reduce = 255 Then
 Exit Function
End If
If no% > 0 Then
 If Dlong_squre(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_long_squre_mark0
 End If
ElseIf no% = -1 Then
display_inform = 1
End If
If (p1% = p2% Or p1% = p3% Or p1% = p2% Or p2% = p3% Or p2% = p4% Or _
       p3% = p4%) And no% = 0 Then
set_long_squre = 0
Exit Function
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(p4%, p1%, p1%, p2%, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
     eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
  temp_record = re
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
    no_reduce1 = True
     Call set_level(temp_record.record_data.data0.condition_data)
End If
record_0.data0.condition_data.condition_no = 0 'record0
If is_equal_dline(p1%, p2%, p2%, p3%, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
     eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
  temp_record1.record_data = re.record_data
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
     Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
    no_reduce1 = True
End If
record_0.data0.condition_data.condition_no = 0 'record0
If is_equal_dline(p2%, p3%, p3%, p4%, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
     eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
  temp_record1.record_data = re.record_data
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
    no_reduce1 = True
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(p3%, p4%, p4%, p1%, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
      eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
  temp_record1.record_data = re.record_data
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
    no_reduce1 = True
End If
If temp_record.record_data.data0.condition_data.condition_no > 0 Then
'po.total_v = 4
' po.v(0) = p1%
 ' po.v(1) = p2%
  ' po.v(2) = p3%
   ' po.v(3) = p4%
set_long_squre = set_squre(p1%, p2%, p3, p4%, 0, temp_record, is_initial, is_reduce)
 If set_long_squre > 1 Then
  Exit Function
 End If
End If
If no_reduce1 Then
 Exit Function
End If
temp_record = re
Call set_level(temp_record.record_data.data0.condition_data)
If is_long_squre(p1%, p2%, p3%, p4%, no%, poly4_no%, 0, cond_type) Then
If run_type < 10 And no% > 0 And cond_type = long_squre_ Then
level = Dlong_squre(no%).data(0).record.data0.condition_data.level
If set_prove_type(long_squre_, no%, temp_record.record_data, _
     Dlong_squre(no%).data(0).record) And set_or_prove < 2 Then
Call simple_record(long_squre_, no%, Dlong_squre(no%).data(0).record.data0.condition_data.level, _
       level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
      Exit Function
     Else
'      Dlong_squre(no%).record_.no_reduce = 0
       GoTo set_long_squre_mark_0
     End If
End If
'设置证明类型
End If
If set_or_prove < 2 Then
   If no_reduce = 0 Then
   no% = 0
  End If
      set_long_squre = 0
        Exit Function
Else
 If display_inform = 1 Then
  If conclusion_data(0).ty = midpoint_ And conclusion_data(0).no(0) = no% Then
   prove_type = 4
    event_statue = complete_prove
  End If
    Call display_prove_inform(modify_wenti_no, display)
  Else
   Exit Function
 End If
End If
Exit Function
Else
 If set_or_prove = 2 And display_inform = 1 Then
  set_long_squre = 0
 ' If re.data0.condition_data.condition_no = 255 Then
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
  'End If
  Exit Function
 End If
End If
'If set_or_prove = 0 Then
set_long_squre = set_long_squre0(poly4_no%, temp_record, no%, 0, 0)
   If set_long_squre > 1 Then
     Exit Function
   End If
   If no_reduce = False Then
     Exit Function
   End If
set_long_squre_mark0:
If Dlong_squre(no%).record_.no_reduce = 0 Or _
    Dlong_squre(no%).record_.no_reduce = 2 Or _
     Dlong_squre(no%).record_.no_reduce = 4 Then
If is_squre0(Dlong_squre(no%).data(0).polygon4_no, 0, 0) Then
    Exit Function
End If
set_long_squre_mark_0:
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
      Call set_level_(Dlong_squre(no%).record_.no_reduce, 1)
temp_record.record_data.data0.condition_data.condition(1).ty = long_squre_
 temp_record.record_data.data0.condition_data.condition(1).no = no%
  temp_record.record_data.data0.condition_data.condition_no = 1
'************************
'邻边相等
If is_equal_dline(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
       Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
        Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), 0, 0, 0, 0, _
         0, 0, dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), cond_type, "", _
           record_0.data0.condition_data) Then
          Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
           set_long_squre = set_squre0(Dlong_squre(no%).data(0).polygon4_no, 0, temp_record)
            If set_long_squre > 1 Then
             Exit Function
            End If
ElseIf is_equal_dline(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
       Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
        Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), 0, 0, 0, 0, _
         0, 0, dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), cond_type, "", _
           record_0.data0.condition_data) Then
          Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
           set_long_squre = set_squre0(Dlong_squre(no%).data(0).polygon4_no, 0, temp_record)
            If set_long_squre > 1 Then
             Exit Function
            End If
ElseIf is_equal_dline(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), _
       Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), _
        Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), 0, 0, 0, 0, _
         0, 0, dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), cond_type, "", _
           record_0.data0.condition_data) Then
          Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
           set_long_squre = set_squre0(Dlong_squre(no%).data(0).polygon4_no, 0, temp_record)
            If set_long_squre > 1 Then
             Exit Function
            End If
ElseIf is_equal_dline(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), _
      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
       Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
        Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), 0, 0, 0, 0, _
         0, 0, dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), cond_type, "", _
           record_0.data0.condition_data) Then
          Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
           set_long_squre = set_squre0(Dlong_squre(no%).data(0).polygon4_no, 0, temp_record)
            If set_long_squre > 1 Then
             Exit Function
            End If
ElseIf is_dverti(line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), 0, 0), _
       line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
        Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), 0, 0), dn(0), _
         -1000, 0, 0, 0, 0) Then
          Call add_conditions_to_record(verti_, dn(0), 0, 0, temp_record.record_data.data0.condition_data)
           temp_record.record_data.data0.theorem_no = 84
           set_long_squre = set_squre0(Dlong_squre(no%).data(0).polygon4_no, 0, temp_record)
            If set_long_squre > 1 Then
             Exit Function
            End If
End If
temp_record.record_data.data0.condition_data.condition(1).ty = long_squre_
 temp_record.record_data.data0.condition_data.condition(1).no = no%
  temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = set_equal_dline(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
        Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
         Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
          Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), _
           0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
If set_long_squre > 1 Then
 Exit Function
End If
temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = set_equal_dline(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), _
      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
       Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
        Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
         0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce, False)
If set_long_squre > 1 Then
 Exit Function
End If
'*************************
'对角线相等
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = set_equal_dline(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
     Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
       Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), _
        0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce, is_reduce)
If set_long_squre > 1 Then
 Exit Function
End If
'*************************************
'对角线相互平分
l_(0) = line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
                      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), n_(0), n_(1))
l_(1) = line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
                      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), n_(2), n_(3))
tp = is_line_line_intersect(l_(0), _
                 l_(1), n_(4), n_(5), False)
If tp > 0 Then
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = set_mid_point(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), tp, _
      Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
       n_(0), n_(4), n_(1), l_(0), 0, temp_record, 0, 0, 0, 0, no_reduce)
If set_long_squre > 1 Then
 Exit Function
End If
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = set_mid_point(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), tp, _
   Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), _
       n_(2), n_(5), n_(3), l_(1), 0, _
                  temp_record, 0, 0, 0, 0, no_reduce)
If set_long_squre > 1 Then
 Exit Function
End If
End If
'************************
temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = set_angle_value(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).angle(0), _
      "90", temp_record, 0, no_reduce, is_reduce)
If set_long_squre > 1 Then
 Exit Function
End If
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = set_angle_value(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).angle(1), _
   "90", temp_record, 0, no_reduce, is_reduce)
If set_long_squre > 1 Then
 Exit Function
End If
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = set_angle_value(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).angle(2), _
   "90", temp_record, 0, no_reduce, is_reduce)
If set_long_squre > 1 Then
 Exit Function
End If
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = set_angle_value(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).angle(3), _
   "90", temp_record, 0, no_reduce, is_reduce)
If set_long_squre > 1 Then
 Exit Function
End If
'****************
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = _
  set_dparal(line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
               Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), 0, 0), _
        line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
               Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), 0, 0), _
                temp_record, 0, no_reduce, False)
If set_long_squre > 1 Then
 Exit Function
End If
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = _
   set_dparal(line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
                Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), 0, 0), _
       line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
          Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), 0, 0), _
           temp_record, 0, no_reduce, False)
If set_long_squre > 1 Then
 Exit Function
End If
'***********
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = _
 set_dverti(line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
        Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), 0, 0), _
        line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
            Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), 0, 0), _
            temp_record, 0, no_reduce, False)
If set_long_squre > 1 Then
 Exit Function
End If
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = _
   set_dverti(line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
          Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), 0, 0), _
        line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
           Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), 0, 0), _
         temp_record, 0, no_reduce, False)
If set_long_squre > 1 Then
 Exit Function
End If
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = _
 set_dverti(line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
           Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), 0, 0), _
        line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), _
           Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), 0, 0), _
         temp_record, 0, no_reduce, False)
If set_long_squre > 1 Then
 Exit Function
End If
'**********
 temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = _
   set_dverti(line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), _
              Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), 0, 0), _
             line_number0(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
                Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), 0, 0), _
         temp_record, 0, no_reduce, False)
If set_long_squre > 1 Then
 Exit Function
End If
temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = _
  set_four_sides_polygon_for_mid_paral(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), _
                    Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), _
    Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), temp_record, no_reduce)
If set_long_squre > 1 Then
 Exit Function
End If
temp_record.record_data.data0.condition_data.condition_no = 1
set_long_squre = _
   set_four_sides_polygon_for_mid_paral(Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(1), Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(2), _
    Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(3), Dpolygon4(Dlong_squre(no%).data(0).polygon4_no).data(0).poi(0), temp_record, no_reduce)
 Call set_level_(Dlong_squre(no%).record_.no_reduce, 1)
If set_long_squre > 1 Then
 Exit Function
End If
End If
Exit Function
set_long_squre_error:
End Function

Public Sub set_tangent_line_for_prove() '预处理
Dim i%, l%, tn%, o%
Dim tp(1) As Integer
Dim ty  As Byte
Dim temp_record As total_record_type
'On Error GoTo set_tangent__line_for_prove_error
For o% = 1 + last_conditions.last_cond(0).tangent_line_no To last_conditions.last_cond(1).tangent_line_no
i% = tangent_line(o%).data(0).record.data1.index.i(0)
If m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(0) = tangent_line(i%).data(0).poi(0) Then '切点是端点
 If m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(1) = tangent_line(i%).data(0).poi(1) Then
 tp(0) = tangent_line(i%).data(0).poi(0) '切点
  tp(1) = tangent_line(i%).data(0).poi(1)
   ty = 2
 Else
 tp(0) = tangent_line(i%).data(0).poi(0) '切点
  tp(1) = m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(1)
   ty = 1
 End If
ElseIf m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(1) = tangent_line(i%).data(0).poi(0) Then '切点是端点
 If m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(0) = tangent_line(i%).data(0).poi(1) Then
  tp(0) = tangent_line(i%).data(0).poi(0) '切点
   tp(1) = tangent_line(i%).data(0).poi(1)
    ty = 2
 Else
  tp(0) = tangent_line(i%).data(0).poi(0) '切点
   tp(1) = m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(0)
    ty = 1
 End If
ElseIf m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(0) = tangent_line(i%).data(0).poi(1) Then
tp(0) = tangent_line(i%).data(0).poi(1)
 tp(1) = m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(1)
ElseIf m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(1) = tangent_line(i%).data(0).poi(1) Then
tp(0) = tangent_line(i%).data(0).poi(1)
tp(1) = m_lin(tangent_line(i%).data(0).line_no).data(0).data0.poi(0)
Else
GoTo set_tangent_line_for_prove_mark0
End If
'***********************
last_conditions.last_cond(1).point_no = last_conditions.last_cond(1).point_no + 1
 t_coord.X = 2 * m_poi(tp(0)).data(0).data0.coordinate.X - _
     m_poi(tp(1)).data(0).data0.coordinate.X
 t_coord.Y = 2 * m_poi(tp(0)).data(0).data0.coordinate.Y - _
     m_poi(tp(1)).data(0).data0.coordinate.Y
Call set_point_coordinate(last_conditions.last_cond(1).point_no, t_coord, False)
Call get_new_char(last_conditions.last_cond(1).point_no)
Call set_point_no_reduce(last_conditions.last_cond(1).point_no, True)
l% = line_number0(tp(0), tp(1), 0, 0)
record_0.data0.condition_data.condition_no = 0
Call add_point_to_line(last_conditions.last_cond(1).point_no, l%, tn%, no_display, False, 0)
  Call set_two_point_line_for_line(l%, temp_record.record_data)
   Call arrange_data_for_new_point(l%, 0)
Call set_New_point(last_conditions.last_cond(1).point_no, temp_record, l%, 0, 0, tn%, 0, 0, 0, 1)
If ty = 2 Then
last_conditions.last_cond(1).point_no = last_conditions.last_cond(1).point_no + 1
  t_coord.X = 2 * m_poi(tp(1)).data(0).data0.coordinate.X - _
     m_poi(tp(0)).data(0).data0.coordinate.X
  t_coord.Y = 2 * m_poi(tp(1)).data(0).data0.coordinate.Y - _
     m_poi(tp(0)).data(0).data0.coordinate.Y
     Call set_point_coordinate(last_conditions.last_cond(1).point_no, t_coord, False)
Call get_new_char(last_conditions.last_cond(1).point_no)
  Call set_point_no_reduce(last_conditions.last_cond(1).point_no, True)
'l% = line_number0(tp(0), tp(1), 0, 0)
record_0.data0.condition_data.condition_no = 0
Call add_point_to_line(last_conditions.last_cond(1).point_no, l%, tn%, no_display, False, 0)
  Call set_two_point_line_for_line(l%, temp_record.record_data)
   Call arrange_data_for_new_point(l%, 0)
Call set_New_point(last_conditions.last_cond(1).point_no, temp_record, l%, 0, 0, tn%, 0, 0, 0, 1)
End If
set_tangent_line_for_prove_mark0:
Next o%
Exit Sub
set_tangent__line_for_prove_error:
End Sub

Public Function set_mid_point_equal_side_triangle(ByVal p1%, ByVal p2%, _
       ByVal p3%, ByVal p4%, re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim temp_record As total_record_type
Dim no1%
If no_reduce = 255 Then
 Exit Function
End If
 temp_record = re
 If th_chose(39).chose = 1 Then
  temp_record.record_data.data0.theorem_no = 39
 set_mid_point_equal_side_triangle = _
   set_dverti(line_number0(p1%, p3%, 0, 0), _
           line_number0(p2%, p4%, 0, 0), temp_record, 0, no_reduce, True)
 If set_mid_point_equal_side_triangle > 1 Then
  Exit Function
 End If
 set_mid_point_equal_side_triangle = _
    set_angle_value(Abs(angle_number(p1%, p4%, p2%, 0, 0)), _
           "90", temp_record, 0, no_reduce, False)
 If set_mid_point_equal_side_triangle > 1 Then
  Exit Function
 End If
 set_mid_point_equal_side_triangle = _
   set_angle_value(Abs(angle_number(p3%, p4%, p2%, 0, 0)), _
           "90", re, 0, no_reduce, False)
 If set_mid_point_equal_side_triangle > 1 Then
  Exit Function
 End If
 set_mid_point_equal_side_triangle = _
   set_angle_value(Abs(angle_number(p1%, p2%, p4%, 0, 0)), _
           "30", re, 0, no_reduce, False)
 If set_mid_point_equal_side_triangle > 1 Then
  Exit Function
 End If
 set_mid_point_equal_side_triangle = _
   set_angle_value(Abs(angle_number(p3%, p2%, p4%, 0, 0)), _
            "30", re, 0, no_reduce, False)
 If set_mid_point_equal_side_triangle > 1 Then
  Exit Function
 End If
End If
End Function

Public Function set_rhombus0(ByVal poly4_no%, no%, n_%, re As total_record_type, _
      ByVal no_reduce As Byte) As Byte
Dim cond_ty As Byte
Dim temp_record As total_record_type
Dim ts$
'If ty = 1 Then
 If is_rhombus0(poly4_no%, no%, 0, cond_ty) Then
  Exit Function
 End If
'End If
temp_record = re
If Dpolygon4(poly4_no%).data(0).ty = Squre Then
 set_rhombus0 = set_squre0(poly4_no%, no%, temp_record)
Else
If rhombus_ - Dpolygon4(poly4_no%).data(0).ty >= 2 Then
If last_conditions.last_cond(1).rhombus_no Mod 10 = 0 Then
  ReDim Preserve rhombus(last_conditions.last_cond(1).rhombus_no + 10) As rhombus_type
End If
last_conditions.last_cond(1).rhombus_no = last_conditions.last_cond(1).rhombus_no + 1
 no% = last_conditions.last_cond(1).rhombus_no
    rhombus(no%).data(0) = dpolygon4_data_0
   rhombus(no%).data(0).polygon4_no = poly4_no%
    If Dpolygon4(poly4_no%).data(0).condition.no > 0 Then
     Call add_conditions_to_record(Dpolygon4(poly4_no%).data(0).condition.ty, Dpolygon4(poly4_no%).data(0).condition.no, _
          0, 0, temp_record.record_data.data0.condition_data)
    End If
       rhombus(no%).data(0).record = temp_record.record_data
        rhombus(no%).record_ = temp_record.record_
         rhombus(no%).record_.no_reduce = 0
If last_conditions_for_aid_no > 0 Then
 If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
  If Dpolygon4(poly4_no%).data(0).poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       Dpolygon4(poly4_no%).data(0).poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        Dpolygon4(poly4_no%).data(0).poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
         Dpolygon4(poly4_no%).data(0).poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
      last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  End If
 End If
End If
Dpolygon4(poly4_no%).data(0).ty = rhombus_
Dpolygon4(poly4_no%).data(0).no = no%
ts$ = LoadResString_from_inpcond(-10, set_display_polygon4(Dpolygon4(poly4_no%).data(0), 0, False, 1, 0))
   set_rhombus0 = set_prove_proccess(ts$, rhombus_, no%, rhombus(no%).data(0).record.display_string)
ElseIf Dpolygon4(poly4_no%).data(0).ty = long_squre_ Then
Call add_conditions_to_record(long_squre_, Dpolygon4(poly4_no%).data(0).no, 0, 0, _
  temp_record.record_data.data0.condition_data)
 set_rhombus0 = set_squre0(poly4_no%, no%, temp_record)
End If
End If
End Function
Public Function set_rhombus(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, _
   re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
Dim i%, t_no%, t_n%, A%
'Dim no_reduce As Byte
Dim no_reduce1 As Boolean
Dim n_(5) As Integer
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
'Dim op(3) As Integer
Dim l(1) As Integer
Dim level As Byte
Dim tp%
Dim ts$
Dim l_v As line_value_data0_type
Dim poly4_no%
Dim rhombus_data As polygon4_data_type
Dim re_ As record_data_type
'On Error GoTo set_rhombus_error
If no_reduce = 255 Then
 Exit Function
End If
display_inform = 0
If no% > 0 Then
 If rhombus(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_rhombus_mark0
 End If
ElseIf no% = -1 Then
display_inform = 1
End If
If angle(Abs(A%)).data(0).value = "90" Then
 temp_record = re
  Call set_level(temp_record.record_data.data0.condition_data)
  Call add_conditions_to_record(angle3_value_, angle(Abs(A%)).data(0).value_no, _
         0, 0, temp_record.record_data.data0.condition_data)
    no_reduce1 = True
End If
A% = angle_number(p4%, p1%, p2%, 0, 0)
If angle(Abs(A%)).data(0).value = "90" Then
 temp_record1.record_data = re.record_data
  Call add_conditions_to_record(angle3_value_, angle(Abs(A%)).data(0).value_no, _
         0, 0, temp_record.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
    no_reduce1 = True
End If
A% = angle_number(p1%, p2%, p3%, 0, 0)
If angle(Abs(A%)).data(0).value = "90" Then
 temp_record1.record_data = re.record_data
  Call add_conditions_to_record(angle3_value_, angle(Abs(A%)).data(0).value_no, _
         0, 0, temp_record.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
    no_reduce1 = True
End If
A% = angle_number(p2%, p3%, p4%, 0, 0)
If angle(Abs(A%)).data(0).value = "90" Then
 temp_record1.record_data = re.record_data
  Call add_conditions_to_record(angle3_value_, angle(Abs(A%)).data(0).value_no, _
        0, 0, temp_record.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
    no_reduce1 = True
End If
If temp_record.record_data.data0.condition_data.condition_no > 0 Then
 set_rhombus = set_squre0(poly4_no%, no%, temp_record)
  'If set_rhombus > 1 Then
   Exit Function
   'End If
 End If
If no_reduce1 Then
 Exit Function
End If
temp_record = re
Call set_level(temp_record.record_data.data0.condition_data)
If is_rhombus(p1%, p2%, p3%, p4%, no%, poly4_no%, 0, cond_type) Then
If cond_type = epolygon_ And no% > 0 And run_type < 10 Then
 level = epolygon(no%).data(0).record.data0.condition_data.level
  Call set_prove_type(epolygon_, no%, temp_record.record_data, _
     epolygon(no%).data(0).record)
If set_prove_type(epolygon_, no%, temp_record.record_data, _
      epolygon(no%).data(0).record) And set_or_prove < 2 Then
   Call simple_record(epolygon_, no%, epolygon(no%).data(0).record.data0.condition_data.level, _
    level)
End If
ElseIf cond_type = rhombus_ Then
 level = rhombus(no%).data(0).record.data0.condition_data.level
If set_prove_type(rhombus_, no%, temp_record.record_data, _
     rhombus(no%).data(0).record) And set_or_prove < 2 Then
   Call simple_record(rhombus_, no%, rhombus(no%).data(0).record.data0.condition_data.level, _
     level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
      set_rhombus = 0
      Exit Function
     Else
     no_reduce = 0
'      rhombus(no%).record_.no_reduce = 0
       GoTo set_rhombus_mark0
     End If
End If
  If set_or_prove < 2 Then
       set_rhombus = 0
        Exit Function
  Else
   If display_inform = 1 Then
    If conclusion_data(0).ty = angle3_value_ And conclusion_data(0).no(0) = no% Then
     prove_type = 4
         event_statue = complete_prove
    End If
       Call display_prove_inform(modify_wenti_no, display)
   Else
    Exit Function
   End If
  End If
End If
Exit Function
Else
 If set_or_prove = 2 Then
  set_rhombus = 0
    'If re.data0.condition_data.condition_no = 255 Then
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
  'End If

    Exit Function
   End If
End If

'If set_or_prove = 0 Then
If last_conditions.last_cond(1).rhombus_no Mod 10 = 0 Then
ReDim Preserve rhombus(last_conditions.last_cond(1).rhombus_no + 10) As rhombus_type
End If
last_conditions.last_cond(1).rhombus_no = last_conditions.last_cond(1).rhombus_no + 1
no% = last_conditions.last_cond(1).rhombus_no
rhombus(no%).data(0).polygon4_no = poly4_no%
'rhombus(no%).data(0).record = re.record_data
If rhombus_data.condition.no > 0 Then
Call add_conditions_to_record(rhombus_data.condition.ty, rhombus_data.condition.no, _
      0, 0, temp_record.record_data.data0.condition_data)
End If
rhombus(no%).data(0).record = temp_record.record_data
rhombus(no%).record_ = temp_record.record_
rhombus(no%).record_.no_reduce = 0
rhombus_data = Dpolygon4(poly4_no%).data(0)
If last_conditions_for_aid_no > 0 Then
If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
If rhombus_data.poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
    rhombus_data.poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
     rhombus_data.poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      rhombus_data.poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
     last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
End If
End If
End If
ts$ = LoadResString_from_inpcond(-10, "\\0\\" + m_poi(rhombus_data.poi(0)).data(0).data0.name + _
                                      "\\\1\\" + m_poi(rhombus_data.poi(1)).data(0).data0.name + _
                                      "\\2\\" + m_poi(rhombus_data.poi(2)).data(0).data0.name + _
                                      "\\3\\" + m_poi(rhombus_data.poi(3)).data(0).data0.name)
set_rhombus = set_prove_proccess(ts$, rhombus_, no%, rhombus(no%).data(0).record.display_string)
If set_rhombus > 1 Then
  Exit Function
End If
If no_reduce = 0 Then
 Exit Function
End If
set_rhombus_mark0:
If rhombus(no%).record_.no_reduce = 0 Then
     rhombus(no%).record_.no_reduce = 255
 If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
      Call set_level_(rhombus(no%).record_.no_reduce, 1)
temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.condition_data.condition(1).ty = rhombus_
  temp_record.record_data.data0.condition_data.condition(1).no = no%
set_rhombus = set_property_of_polygon4(rhombus(no%).data(0).polygon4_no, rhombus_, temp_record)
  If set_rhombus > 1 Then
   Exit Function
  End If
End If
Exit Function
set_rhombus_error:
End Function

Public Function set_tixing(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, _
              cond_ty As Byte, re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
Dim p%, i%, j%, n%
Dim is_right As Boolean
Dim n_(5) As Integer
Dim l_(1) As Integer
Dim tn(1) As Integer
Dim tA(1) As Integer
Dim tl(2) As Integer
Dim tp(5) As Integer
Dim dn(2) As Integer
Dim cond_type_ As Byte
Dim tv As String
'Dim ty As Byte
Dim ty1 As Boolean
Dim paral_no%
Dim ts$
Dim level As Byte
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim no_reduce1 As Boolean
Dim poly4_no%
Dim ele(1) As condition_type
Dim l_v0 As line_value_data0_type
Dim t_l_v0 As two_line_value_data0_type
Dim md As mid_point_data0_type
Dim condition_data0 As condition_data_type
If no_reduce = 255 Then
 Exit Function
End If
If (p1% = p2% Or p3% = p4% Or p1% = p3% Or p2% = p4%) And no% = 0 Then
 set_tixing = 0
  Exit Function
End If
If no% > 0 Then
 If Dtixing(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_tixing_mark0:
 End If
End If
If th_chose(158).chose = 1 Then '平行线等积变换
 temp_record = re
 temp_record.record_data.data0.theorem_no = 158
 ele(0).ty = triangle_
 ele(1).ty = triangle_
 ele(0).no = triangle_number(p1%, p2%, p3%, 0, 0, 0, 0, 0, 0, 0)
 ele(1).no = triangle_number(p1%, p2%, p4%, 0, 0, 0, 0, 0, 0, 0)
 set_tixing = set_area_relation(ele(0), ele(1), "1", temp_record, 0, 0, 0)
 If set_tixing > 1 Then
    Exit Function
 End If
 ele(0).ty = triangle_
 ele(1).ty = triangle_
 ele(0).no = triangle_number(p3%, p4%, p1%, 0, 0, 0, 0, 0, 0, 0)
 ele(1).no = triangle_number(p3%, p4%, p2%, 0, 0, 0, 0, 0, 0, 0)
 set_tixing = set_area_relation(ele(0), ele(1), "1", temp_record, 0, 0, 0)
 If set_tixing > 1 Then
    Exit Function
 End If
End If
'*********************************************************************************
If cond_ty = tixing_ Then
If th_chose(92).chose = 1 Then
record_0.data0.condition_data.condition_no = 0 'record0
If is_equal_dline(p3%, p1%, p2%, p4%, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
      eline_data0, dn(1), dn(2), cond_type_, "", record_0.data0.condition_data) Then '两腰
  temp_record = re
   Call add_conditions_to_record(cond_type_, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
    temp_record.record_data.data0.theorem_no = 92
     cond_ty = equal_side_tixing_
      GoTo set_tixing_mark_e_s_tixing
End If
End If
If th_chose(93).chose = 1 Then
tA(0) = Abs(angle_number(p1%, p4%, p3%, "", 0))
tA(0) = Abs(angle_number(p2%, p3%, p4%, "", 0))
If is_equal_angle(tA(0), tA(1), dn(0), dn(1)) Then '对角线
  temp_record.record_data = re.record_data
    Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record.record_data.data0.condition_data)
    temp_record.record_data.data0.theorem_no = 93
     cond_ty = equal_side_tixing_
      GoTo set_tixing_mark_e_s_tixing
End If
tA(0) = Abs(angle_number(p4%, p1%, p2%, "", 0))
tA(0) = Abs(angle_number(p1%, p2%, p3%, "", 0))
If is_equal_angle(tA(0), tA(1), dn(0), dn(1)) Then '对角线
  temp_record.record_data = re.record_data
    Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record.record_data.data0.condition_data)
    temp_record.record_data.data0.theorem_no = 93
     cond_ty = equal_side_tixing_
      GoTo set_tixing_mark_e_s_tixing
End If
End If
set_tixing_mark_e_s_tixing:
'*********
If th_chose(65).chose = 1 Then
If is_equal_dline(p1%, p2%, p3%, p4%, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
         eline_data0, dn(1), dn(2), cond_type_, "", record_0.data0.condition_data) Then
  temp_record.record_data = re.record_data
    Call add_conditions_to_record(cond_type_, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
    temp_record.record_data.data0.theorem_no = 65
        set_tixing = _
          set_parallelogram(p1%, p2%, p3%, p4%, temp_record, 0, no_reduce)
          Exit Function
 End If
 End If
ElseIf cond_ty = equal_side_tixing_ Then
If th_chose(65).chose = 1 Then
If is_equal_dline(p1%, p2%, p3%, p4%, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
      eline_data0, dn(1), dn(2), cond_type_, "", record_0.data0.condition_data) Then
  temp_record = re
   Call add_conditions_to_record(cond_type_, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
   temp_record.record_data.data0.theorem_no = 65
    set_tixing = set_parallelogram(p1%, p2%, p3%, p4%, temp_record, _
        0, no_reduce)
      Exit Function
End If
End If
If th_chose(67).chose = 1 Then
If angle(Dpolygon4(poly4_no%).data(0).angle(1)).data(0).value = "90" Then
 temp_record.record_data = re.record_data
  is_right = True
  Call add_conditions_to_record(angle3_value_, _
               angle(Dpolygon4(poly4_no%).data(0).angle(1)).data(0).value_no, 0, 0, _
                 temp_record.record_data.data0.condition_data)
ElseIf angle(Dpolygon4(poly4_no%).data(0).angle(2)).data(0).value = "90" Then
 temp_record1.record_data = re.record_data
  is_right = True
  Call add_conditions_to_record(angle3_value_, _
               angle(Dpolygon4(poly4_no%).data(0).angle(2)).data(0).value_no, 0, 0, _
                 temp_record.record_data.data0.condition_data)
ElseIf angle(Dpolygon4(poly4_no%).data(0).angle(3)).data(0).value = "90" Then
 temp_record1.record_data = re.record_data
  is_right = True
  Call add_conditions_to_record(angle3_value_, _
               angle(Dpolygon4(poly4_no%).data(0).angle(3)).data(0).value_no, 0, 0, _
                 temp_record.record_data.data0.condition_data)
End If
 If is_right Then
 set_tixing = _
   set_long_squre0(poly4_no%, temp_record, 0, no_reduce, 1)
   Exit Function
 End If
End If
End If
'************************************
Call set_level(re.record_data.data0.condition_data)
If is_tixing(p1%, p2%, p3%, p4%, no%, _
     tp(0), tp(1), tp(2), tp(3), poly4_no%, 0, paral_no%, cond_type_, False) Then
 If cond_type = tixing_ And no% > 0 And run_type < 10 Then
 level = Dtixing(no%).data(0).record.data0.condition_data.level
  If set_prove_type(tixing_, no%, re.record_data, _
       Dtixing(no%).data(0).record) And set_or_prove < 2 Then
    Call simple_record(tixing_, no%, Dtixing(no%).data(0).record.data0.condition_data.level, _
           level)
    If Dpolygon4(Dtixing(no%).data(0).poly4_no).data(0).ty <> tixing_ And _
       cond_ty = equal_side_tixing_ Then
        Dpolygon4(Dtixing(no%).data(0).poly4_no).data(0).ty = equal_side_tixing_
         GoTo set_tixing_mark0
    End If
    If no_reduce = 0 Then 'Or run_type <= 1 Then
     set_tixing = 0
    Exit Function
    Else
      no_reduce = 0
'       Dtixing(no%).record_.no_reduce = 0
        GoTo set_tixing_mark_0
    End If
  End If
  If set_or_prove < 2 Then
       set_tixing = 0
   Exit Function
  Else
   If display_inform = 1 Then
    If conclusion_data(0).ty = tixing_ And conclusion_data(0).no(0) = no% Then
     prove_type = 4
     event_statue = complete_prove
    End If
       Call display_prove_inform(modify_wenti_no, display)
   Else
   Exit Function
   End If
  End If
 Else
  ty1 = True
   GoTo set_tixing_mark1
 End If
Exit Function
Else
  If set_or_prove = 3 Then
   set_tixing = 0
   prove_type = 0
   Call display_prove_inform(modify_wenti_no, display)
    Exit Function
  End If
End If
set_tixing_mark1:
temp_record = re
If is_equal_dline(tp(0), tp(1), tp(3), tp(2), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, _
      0, eline_data0, dn(1), dn(2), cond_type, _
        "", record_0.data0.condition_data) Then
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
        temp_record.record_data.data0.theorem_no = 60
       set_tixing = _
         set_parallelogram(tp(0), tp(1), tp(2), tp(3), temp_record, 0, no_reduce)
        Exit Function
ElseIf is_equal_dline(tp(0), tp(3), tp(1), tp(2), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, _
          0, eline_data0, dn(1), dn(2), cond_type, _
            "", record_0.data0.condition_data) And cond_ty <> equal_side_tixing_ Then
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
  If Sgn(P_diffrence(m_poi(tp(0)).data(0).data0.coordinate, m_poi(tp(3)).data(0).data0.coordinate, m_poi(tp(2)).data(0).data0.coordinate)) * _
      Sgn(P_diffrence(m_poi(tp(1)).data(0).data0.coordinate, m_poi(tp(2)).data(0).data0.coordinate, m_poi(tp(3)).data(0).data0.coordinate)) > 0 Then
   set_tixing = _
    set_tixing(tp(0), tp(1), tp(2), tp(3), equal_side_tixing_, temp_record, 0, no_reduce)
     Exit Function
   Else
    If th_chose(13).chose = 1 Then
     temp_record.record_data.data0.theorem_no = 60
      set_tixing = _
        set_parallelogram(tp(0), tp(1), tp(2), tp(3), temp_record, 0, no_reduce)
       Exit Function
     End If
    End If
ElseIf is_dparal(line_number0(tp(0), tp(3), 0, 0), _
        line_number0(tp(1), tp(2), 0, 0), dn(0), _
        -1000, 0, 0, 0, 0) Then
         Call add_conditions_to_record(paral_, dn(0), 0, 0, temp_record.record_data.data0.condition_data)
    If th_chose(13).chose = 1 Then
     temp_record.record_data.data0.theorem_no = 60
      set_tixing = _
        set_parallelogram(tp(0), tp(1), tp(2), tp(3), temp_record, 0, no_reduce)
       Exit Function
     End If
End If
If ty1 Then
 Exit Function
End If
If last_conditions.last_cond(1).tixing_no Mod 10 = 0 Then
ReDim Preserve Dtixing(last_conditions.last_cond(1).tixing_no + 10) As tixing_type
End If
last_conditions.last_cond(1).tixing_no = last_conditions.last_cond(1).tixing_no + 1
 no% = last_conditions.last_cond(1).tixing_no
 Dtixing(no%).data(0) = tixing_data_0
Dtixing(no%).data(0).poi(0) = tp(0)
Dtixing(no%).data(0).poi(1) = tp(1)
Dtixing(no%).data(0).poi(2) = tp(2)
Dtixing(no%).data(0).poi(3) = tp(3)
Dtixing(no%).data(0).poly4_no = poly4_no%
Dtixing(no%).data(0).record = re.record_data
Dtixing(no%).record_ = re.record_
Dtixing(no%).record_.no_reduce = 0
Dtixing(no%).data(0).paral_no = paral_no%
Dtixing(no%).data(0).ty = cond_ty
'Call is_dverti(line_number0(tp(0), tp(1), 0, 0), line_number0(tp(2), tp(3), 0, 0), _
     Dtixing(no%).data(0).paral_no, -1000, 0, 0, 0, 0)
Dpolygon4(poly4_no%).data(0).ty = cond_ty
Dpolygon4(poly4_no%).data(0).no% = no%
If last_conditions_for_aid_no > 0 Then
 If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
  If tp(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      tp(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       tp(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        tp(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
     last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
   End If
 End If
End If
ts$ = set_display_tixing(Dtixing(no%).data(0), False)
set_tixing = set_prove_proccess(ts$, tixing_, no%, Dtixing(no%).data(0).record.display_string)
If set_tixing > 1 Then
  Exit Function
End If
temp_record.record_data.data0.condition_data.condition_no = 1
temp_record.record_data.data0.condition_data.condition(1).ty = tixing_
temp_record.record_data.data0.condition_data.condition(1).no = no%
set_tixing = set_property_of_equal_sides_tixing(no%, temp_record)
If set_tixing > 1 Then
  Exit Function
End If
If no_reduce = 0 Then 're.data0.condition_data.condition_no = 0 And draw_or_prove = 0 Then
Exit Function
End If
'****************************************************
set_tixing_mark0:
If regist_data.run_type = 0 Then
If Dtixing(no%).record_.no_reduce = 0 Then
set_tixing_mark_0:
     Dtixing(no%).record_.no_reduce = 255
     Call set_level_(Dtixing(no%).record_.no_reduce, 1)
'set_tixing = add_point_from_tixing_for_condition(no%)
' If set_tixing > 1 Then
'    Exit Function
' End If
tp(0) = Dtixing(no%).data(0).poi(0)
tp(1) = Dtixing(no%).data(0).poi(1)
tp(2) = Dtixing(no%).data(0).poi(2)
tp(3) = Dtixing(no%).data(0).poi(3)
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
'*******************************************************
set_tixing = set_area_of_tixing(no%)
If set_tixing > 1 Then
   Exit Function
End If
'*************************************************************************
temp_record.record_data.data0.condition_data.condition_no = 0 'record0
Call add_conditions_to_record(tixing_, no%, 0, 0, temp_record.record_data.data0.condition_data)
temp_record.record_data.data0.theorem_no = 3 '梯形的面积公式
If Dpolygon4(Dtixing(no%).data(0).poly4_no).data(0).area_value <> "" Then '已知梯形面积
'       temp_record.record_data = Ddistance_of_paral_line(Dparal(Dtixing(no%).data(0).paral_no)).data(0).record
         Call add_conditions_to_record(area_of_element_, _
                Dpolygon4(Dtixing(no%).data(0).poly4_no).data(0).area_value_no, 0, 0, temp_record.record_data.data0.condition_data)
     If Dparal(Dtixing(no%).data(0).paral_no).data(0).distance_no > 0 Then
         Call add_record_to_record( _
            Ddistance_of_paral_line(Dparal(Dtixing(no%).data(0).paral_no).data(0).distance_no).data(0).record.data0.condition_data, _
               temp_record.record_data.data0.condition_data)
         tv = divide_string(Dpolygon4(Dtixing(no%).data(0).poly4_no).data(0).area_value, _
                  Ddistance_of_paral_line(Dparal(Dtixing(no%).data(0).paral_no).data(0).distance_no).data(0).value, _
                           True, False)
         set_tixing = set_two_line_value(Dtixing(no%).data(0).poi(0), Dtixing(no%).data(0).poi(1), _
               Dtixing(no%).data(0).poi(2), Dtixing(no%).data(0).poi(3), 0, 0, 0, 0, 0, 0, _
                "1", "1", time_string(tv, "2", True, False), temp_record, 0, 0)
                   If set_tixing > 1 Then
                       Exit Function
                   End If
         If Dtixing(no%).data(0).mid_point_no(0).no > 0 And Dtixing(no%).data(0).mid_point_no(2).no > 0 Then
           For i% = 0 To 3
             Call add_conditions_to_record(Dtixing(no%).data(0).mid_point_no(i%).ty, _
                Dtixing(no%).data(0).mid_point_no(i%).no, 0, 0, temp_record.record_data.data0.condition_data)
           Next i%
         set_tixing = set_line_value(Dtixing(no%).data(0).mid_poi(0), Dtixing(no%).data(0).mid_poi(1), _
               tv, 0, 0, 0, temp_record, 0, 0, False)
                   If set_tixing > 1 Then
                       Exit Function
                   End If
         End If
      End If
   ElseIf (Dtixing(no%).data(0).buttom_(0).no > 0 And _
           Dtixing(no%).data(0).buttom_(1).no > 0) Or _
             Dtixing(no%).data(0).mid_position_line_value_no > 0 Or _
              Dtixing(no%).data(0).sum_of_two_bottom_no > 0 Then '已知两底边的长
      If Dparal(Dtixing(no%).data(0).paral_no).data(0).distance_no = 0 Then
         If Dtixing(no%).data(0).buttom_(0).no > 0 And _
           Dtixing(no%).data(0).buttom_(1).no > 0 Then
            Call add_conditions_to_record(line_value_, Dtixing(no%).data(0).buttom_(0).no, _
              Dtixing(no%).data(0).buttom_(1).no, 0, temp_record.record_data.data0.condition_data)
               tv = add_string(line_value(Dtixing(no%).data(0).buttom_(0).no).data(0).data0.value, _
                    line_value(Dtixing(no%).data(0).buttom_(1).no).data(0).data0.value, False, False)
               tv = divide_string(tv, "2", False, False)
      ElseIf Dtixing(no%).data(0).mid_position_line_value_no > 0 Then
            For i% = 0 To 3
             Call add_conditions_to_record(Dtixing(no%).data(0).mid_point_no(i%).ty, _
                Dtixing(no%).data(0).mid_point_no(i%).no, 0, 0, temp_record.record_data.data0.condition_data)
           Next i%
             Call add_conditions_to_record(line_value_, Dtixing(no%).data(0).mid_position_line_value_no, _
              0, 0, temp_record.record_data.data0.condition_data)
               tv = line_value(Dtixing(no%).data(0).mid_position_line_value_no).data(0).data0.value
      Else
             Call add_conditions_to_record(two_line_value_, Dtixing(no%).data(0).sum_of_two_bottom_no, _
              0, 0, temp_record.record_data.data0.condition_data)
               tv = two_line_value(Dtixing(no%).data(0).sum_of_two_bottom_no).data(0).data0.value
               tv = divide_string(tv, "2", False, False)
      End If
               tv = divide_string(Dpolygon4(Dtixing(no%).data(0).poly4_no).data(0).area_value, tv, True, False)
                set_tixing = set_distance_of_paral_line(Dtixing(no%).data(0).paral_no, _
                       0, tv, 0, temp_record.record_data)
                If set_tixing > 1 Then
                   Exit Function
                End If
   End If
Else
  If Dparal(Dtixing(no%).data(0).paral_no).data(0).distance_no > 0 Then
     Call add_record_to_record( _
           Ddistance_of_paral_line(Dparal(Dtixing(no%).data(0).paral_no).data(0).distance_no).data(0).record.data0.condition_data, _
             temp_record.record_data.data0.condition_data)
    If Dtixing(no%).data(0).buttom_(0).no > 0 And _
           Dtixing(no%).data(0).buttom_(1).no > 0 Then
     Call add_conditions_to_record(line_value_, Dtixing(no%).data(0).buttom_(0).no, _
           Dtixing(no%).data(0).buttom_(1).no, 0, temp_record.record_data.data0.condition_data)
           tv = add_string(line_value(Dtixing(no%).data(0).buttom_(0).no).data(0).data0.value, _
                 line_value(Dtixing(no%).data(0).buttom_(1).no).data(0).data0.value, False, False)
           tv = divide_string(tv, "2", False, False)
    ElseIf Dtixing(no%).data(0).mid_position_line_value_no > 0 Then
           For i% = 0 To 3
             Call add_conditions_to_record(Dtixing(no%).data(0).mid_point_no(i%).ty, _
                Dtixing(no%).data(0).mid_point_no(i%).no, 0, 0, temp_record.record_data.data0.condition_data)
           Next i%
     Call add_conditions_to_record(line_value_, Dtixing(no%).data(0).mid_position_line_value_no, _
           0, 0, temp_record.record_data.data0.condition_data)
           tv = line_value(Dtixing(no%).data(0).mid_position_line_value_no).data(0).data0.value
    ElseIf Dtixing(no%).data(0).sum_of_two_bottom_no > 0 Then
     Call add_conditions_to_record(two_line_value_, Dtixing(no%).data(0).sum_of_two_bottom_no, _
           0, 0, temp_record.record_data.data0.condition_data)
           tv = divide_string(two_line_value(Dtixing(no%).data(0).sum_of_two_bottom_no).data(0).data0.value, _
                "2", False, False)
    Else
           tv = "F"
    End If
           tv = time_string(tv, _
            Ddistance_of_paral_line(Dparal(Dtixing(no%).data(0).paral_no).data(0).distance_no).data(0).value, _
             True, False)
    set_tixing = set_area_of_element(polygon_, Dtixing(no%).data(0).poly4_no, tv, 0, temp_record)
    If set_tixing > 1 Then
       Exit Function
    End If
  End If
End If
If Dtixing(no%).data(0).paral_no = 0 Then
  n% = 0
  set_tixing = set_dparal(line_number0(tp(0), tp(1), 0, 0), _
      line_number0(tp(2), tp(3), 0, 0), temp_record, n%, no_reduce, False)
       Dtixing(no%).data(0).paral_no = n%
    If set_tixing > 1 Then
     Exit Function
    End If
End If
set_tixing = set_two_line_value_from_tixing(no%)
     If set_tixing > 1 Then
     Exit Function
    End If
temp_record.record_data.data0.condition_data.condition_no = 1
set_tixing = set_four_sides_polygon_for_mid_paral(tp(0), _
 tp(1), tp(2), tp(3), temp_record, no_reduce)
If set_tixing > 1 Then
 Exit Function
End If
'等腰梯形
If Dpolygon4(Dtixing(no%).data(0).poly4_no).data(0).ty = equal_side_tixing_ Then
'set_tixing = _
    set_dparal(line_number0(tp(0), tp(1), 0, 0), _
      line_number0(tp(2), tp(3), 0, 0), temp_record, 0, no_reduce)
'If set_tixing > 1 Then
' Exit Function
'End If
' 腰相等
temp_record.record_data.data0.theorem_no = 90
set_tixing = _
 set_equal_dline(tp(0), tp(3), tp(1), tp(2), 0, 0, 0, 0, 0, 0, _
    0, temp_record, 0, 0, 0, 0, no_reduce, False)  '
If set_tixing > 1 Then
 Exit Function
End If
'对角线相等
temp_record.record_data.data0.theorem_no = 92
set_tixing = _
 set_equal_dline(tp(0), tp(2), tp(1), tp(3), 0, 0, 0, 0, 0, 0, _
     0, temp_record, 0, 0, 0, 0, no_reduce, False) '
If set_tixing > 1 Then
 Exit Function
End If
temp_record.record_data.data0.theorem_no = 0
l_(0) = line_number0(tp(0), tp(3), n_(0), n_(1))
l_(1) = line_number0(tp(1), tp(2), n_(2), n_(3))
p% = is_line_line_intersect(l_(0), _
                 l_(1), n_(4), n_(5), False)
If p% > 0 Then
 set_tixing = _
  set_equal_dline(tp(0), p%, p%, tp(1), n_(0), n_(4), _
       n_(5), n_(2), l_(0), l_(1), 0, _
        temp_record, 0, 0, 0, 0, no_reduce, False) '
  If set_tixing > 1 Then
   Exit Function
  End If
set_tixing = _
 set_equal_dline(tp(3), p%, p%, tp(2), n_(1), n_(4), _
      n_(5), n_(3), l_(0), l_(1), _
       0, temp_record, 0, 0, 0, 0, no_reduce, False) '
If set_tixing > 1 Then
 Exit Function
End If
End If
temp_record.record_data.data0.theorem_no = 91
 tA(0) = angle_number(tp(1), tp(2), tp(3), 0, 0)
  tA(1) = angle_number(tp(0), tp(3), tp(2), 0, 0)
If tA(0) > 0 And tA(1) > 0 Then
 set_tixing = _
 set_three_angle_value(tA(0), tA(1), 0, "1", "-1", "0", "0", _
        0, temp_record, 0, 0, 0, 5, 0, 0, False)
If set_tixing > 1 Then
 Exit Function
End If
End If
temp_record.record_data.data0.theorem_no = 91
set_tixing = _
 tA(0) = angle_number(tp(0), tp(1), tp(2), 0, 0)
   tA(1) = angle_number(tp(1), tp(0), tp(3), 0, 0)
If tA(0) > 0 And tA(1) > 0 Then
set_tixing = _
 set_three_angle_value(tA(0), tA(1), 0, "1", "-1", "0", "0", _
         0, temp_record, 0, 0, 0, 5, 0, 0, False)
If set_tixing > 1 Then
 Exit Function
End If
End If
temp_record.record_data.data0.theorem_no = 91
tA(0) = angle_number(tp(0), tp(2), tp(3), 0, 0)
  tA(1) = angle_number(tp(1), tp(3), tp(2), 0, 0)
If tA(0) > 0 And tA(1) > 0 Then
 set_tixing = _
  set_three_angle_value(tA(0), tA(1), 0, "1", "-1", "0", "0", _
        0, temp_record, 0, 0, 0, 5, 0, 0, False)
If set_tixing > 1 Then
 Exit Function
End If
End If
temp_record.record_data.data0.theorem_no = 91
tA(0) = angle_number(tp(0), tp(1), tp(3), 0, 0)
   tA(1) = angle_number(tp(1), tp(0), tp(2), 0, 0)
If tA(0) > 0 And tA(1) > 0 Then
 set_tixing = _
 set_three_angle_value(tA(0), tA(1), 0, "1", "-1", "0", "0", _
        0, temp_record, 0, 0, 0, 5, 0, 0, False)
If set_tixing > 1 Then
 Exit Function
End If
End If
set_tixing = _
 set_four_sides_polygon_for_mid_paral(tp(0), tp(1), _
      tp(2), tp(3), temp_record, no_reduce)
If set_tixing > 1 Then
Exit Function
End If
End If
End If
Else 'if 'regist_data.run_type =1
End If
End Function

Public Function set_display_two_line_value(t_l_v As two_line_value_type, _
                  is_display As Boolean, dis_ty As Byte, is_depend As Boolean) As String
Dim i%
Dim item(1) As String
Dim s(1) As String
Dim t_l As two_line_value_data0_type
t_l = t_l_v.data(0).data0
If t_l_v.data(0).record.data0.condition_data.condition(1).ty = new_point_ And _
         t_l_v.data(0).record.data0.condition_data.condition_no = 1 Then
   set_display_two_line_value = _
     new_point(t_l_v.data(0).record.data0.condition_data.condition(1).no).data(0).display_string
      If is_display Then
         Call draw_aid_point(t_l_v.data(0).record.data0.condition_data.condition(1).no)
      End If
Else
set_display_two_line_value = ""
For i% = 0 To 1
 item(i%) = set_display_element(t_l.poi(2 * i%), t_l.poi(2 * i% + 1), dis_ty, is_depend)
 set_display_two_line_value = combine_para_with_element(t_l.para(i%), item(i%), _
    set_display_two_line_value, dis_ty)
Next i%
set_display_two_line_value = set_display_two_line_value + "=" + display_string_(t_l.value, dis_ty)
End If
End Function

Public Function set_display_three_line_value(t_l As line3_value_data_type, _
    is_display As Boolean, dis_ty As Byte, is_depend As Boolean) As String
Dim i%
Dim p(5) As Integer
Dim item(2) As String
Dim s(2) As String
Dim pA(2) As String
If is_depend Then
  For i% = 0 To 5
   Call set_depend_from_point(t_l.data0.poi(i%))
  Next i%
End If
pA(0) = t_l.data0.para(0)
pA(1) = t_l.data0.para(1)
pA(2) = t_l.data0.para(2)
If t_l.record.data0.condition_data.condition(1).ty = new_point_ And _
        t_l.record.data0.condition_data.condition_no = 1 Then
   set_display_three_line_value = _
     new_point(t_l.record.data0.condition_data.condition(1).no).data(0).display_string
      If is_display Then
      Call draw_aid_point(t_l.record.data0.condition_data.condition(1).no)
      End If
Else
For i% = 0 To 2
s(i%) = Mid$(pA(i%), 1, 1)
 If s(i%) = "-" Or s(i%) = "@" Then
  pA(i%) = Mid$(pA(i%), 2, Len(pA(i%)) - 1)
  s(i%) = "-"
 Else
  If pA(i%) = "0" Then
   s(i%) = "0"
  Else
   s(i%) = "+"
  End If
 End If
If s(i%) <> "0" Then
  item(i%) = m_poi(t_l.data0.poi(2 * i%)).data(0).data0.name + _
                    m_poi(t_l.data0.poi(2 * i% + 1)).data(0).data0.name
 If pA(i%) <> "1" Then
  item(i%) = display_string_(pA(i%), dis_ty) + item(i%)
 End If
End If
Next i%
If t_l.data0.value = "0" Then
 If s(2) = "0" Then
     set_display_three_line_value = item(0) + "=" + item(1)
 Else
  If s(1) = "-" And s(2) = "-" Then
   set_display_three_line_value = item(0) + "=" + _
                      item(1) + "+" + item(2)
  ElseIf s(1) = "+" And s(2) = "-" Then
   set_display_three_line_value = item(2) + "=" + _
           item(0) + "+" + item(1)
  ElseIf s(1) = "-" And s(2) = "+" Then
   set_display_three_line_value = item(1) + "=" + _
       item(0) + "+" + item(2)

  End If
 End If
Else
 If s(2) = "0" And s(1) = "0" Then
  set_display_three_line_value = item(0)
 ElseIf s(2) = "0" Then
  set_display_three_line_value = item(0) + s(1) + item(1)
 Else
  set_display_three_line_value = item(0) + s(1) + item(1) + s(2) + item(2)
 End If
    set_display_three_line_value = set_display_three_line_value + "=" + _
                display_string_(t_l.data0.value, dis_ty)
End If
End If
End Function

Public Function set_mid_point_for_polygon(ByVal n%, ByVal no_reduce As Byte) As Byte
Dim i%, j%, m%, p%
Dim temp_record As total_record_type
For i% = 1 To last_conditions.last_cond(1).tixing_no
 temp_record.record_data.data0.condition_data.condition_no = 3
 temp_record.record_data.data0.condition_data.condition(1).ty = tixing_
  temp_record.record_data.data0.condition_data.condition(1).no = i%
   If is_same_two_point(Dtixing(i%).data(0).poi(1), Dtixing(i%).data(0).poi(2), _
       Dmid_point(n%).data(0).data0.poi(0), Dmid_point(n%).data(0).data0.poi(2)) Then
        p% = get_midpoint(Dtixing(i%).data(0).poi(0), 0, Dtixing(i%).data(0).poi(3), _
         0, 0, 0, 0, m%)
   If m% > 0 Then
   temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(2).no = n%
   temp_record.record_data.data0.condition_data.condition(3).no = m%
   set_mid_point_for_polygon = _
     set_mid_position_line(Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1), _
        Dtixing(i%).data(0).poi(2), Dtixing(i%).data(0).poi(3), Dmid_point(m%).data(0).data0.poi(1), _
         Dmid_point(n%).data(0).data0.poi(1), 0, 0, temp_record, 0, no_reduce)
   If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
   End If
  ElseIf is_same_two_point(Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(3), _
       Dmid_point(n%).data(0).data0.poi(0), Dmid_point(n%).data(0).data0.poi(2)) Then
   p% = get_midpoint(Dtixing(i%).data(0).poi(1), 0, Dtixing(i%).data(0).poi(2), _
        0, 0, 0, 0, m%)
   If m% > 0 Then
   temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(2).no = n%
   temp_record.record_data.data0.condition_data.condition(3).no = m%
   set_mid_point_for_polygon = _
     set_mid_position_line(Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1), _
        Dtixing(i%).data(0).poi(2), Dtixing(i%).data(0).poi(3), Dmid_point(n%).data(0).data0.poi(1), _
         Dmid_point(m%).data(0).data0.poi(1), 0, 0, temp_record, 0, no_reduce)
    If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
     End If
  ElseIf is_same_two_point(Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(2), _
       Dmid_point(n%).data(0).data0.poi(0), Dmid_point(n%).data(0).data0.poi(2)) Then
   p% = get_midpoint(Dtixing(i%).data(0).poi(1), 0, Dtixing(i%).data(0).poi(3), _
        0, 0, 0, 0, m%)
   If m% > 0 Then
   temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(2).no = n%
   temp_record.record_data.data0.condition_data.condition(3).no = m%
   set_mid_point_for_polygon = _
     set_mid_position_line(Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1), _
        Dtixing(i%).data(0).poi(2), Dtixing(i%).data(0).poi(3), 0, 0, _
         Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
         temp_record, 0, no_reduce)
    If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
     End If
  ElseIf is_same_two_point(Dtixing(i%).data(0).poi(1), Dtixing(i%).data(0).poi(3), _
       Dmid_point(n%).data(0).data0.poi(1), Dmid_point(n%).data(0).data0.poi(2)) Then
   p% = get_midpoint(Dtixing(i%).data(0).poi(0), 0, Dtixing(i%).data(0).poi(2), _
        0, 0, 0, 0, m%)
   If m% > 0 Then
   temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
   temp_record.record_data.data0.condition_data.condition(2).no = n%
   temp_record.record_data.data0.condition_data.condition(3).no = m%
   set_mid_point_for_polygon = _
     set_mid_position_line(Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1), _
        Dtixing(i%).data(0).poi(2), Dtixing(i%).data(0).poi(3), 0, 0, _
         Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
         temp_record, 0, no_reduce)
    If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
     End If
  End If
Next i%
'For i% = 1 To last_conditions.last_cond(1).equal_side_tixing_no
' temp_record.record_data.data0.condition_data.condition_no = 3
' temp_record.record_data.data0.condition_data.condition(1).ty = equal_side_tixing_
'  temp_record.record_data.data0.condition_data.condition(1).no = i%
'   If is_same_two_point(Dequal_side_tixing(i%).data(0).poi(0), _
'     Dequal_side_tixing(i%).data(0).poi(3), Dmid_point(n%).data(0).data0.poi(0), _
'      Dmid_point(n%).data(0).data0.poi(2)) Then
'    p% = get_midpoint(Dequal_side_tixing(i%).data(0).poi(1), 0, _
       Dequal_side_tixing(i%).data(0).poi(2), 0, 0, 0, 0, m%)
'   If m% > 0 > 0 Then
'   temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
'   temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
'   temp_record.record_data.data0.condition_data.condition(2).no = n%
'   temp_record.record_data.data0.condition_data.condition(3).no = m%
'   set_mid_point_for_polygon = _
       set_mid_position_line(Dequal_side_tixing(i%).data(0).poi(0), _
          Dequal_side_tixing(i%).data(0).poi(1), Dequal_side_tixing(i%).data(0).poi(2), _
           Dequal_side_tixing(i%).data(0).poi(3), Dmid_point(n%).data(0).data0.poi(1), _
            Dmid_point(m%).data(0).data0.poi(1), temp_record, 0, no_reduce)
'   If set_mid_point_for_polygon > 1 Then
'    Exit Function
'   End If
'    End If
' ElseIf is_same_two_point(Dequal_side_tixing(i%).data(0).poi(1), _
'      Dequal_side_tixing(i%).data(0).poi(2), Dmid_point(n%).data(0).data0.poi(0), _
'       Dmid_point(n%).data(0).data0.poi(2)) Then
'   p% = get_midpoint(Dequal_side_tixing(i%).data(0).poi(0), 0, _
'      Dequal_side_tixing(i%).data(0).poi(3), 0, 0, 0, 0, m%)
'   If m% > 0 Then
'   temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
'   temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
'   temp_record.record_data.data0.condition_data.condition(2).no = m%
'   temp_record.record_data.data0.condition_data.condition(3).no = n%
'   set_mid_point_for_polygon = _
'     set_mid_position_line(Dequal_side_tixing(i%).data(0).poi(2), _
        Dequal_side_tixing(i%).data(0).poi(3), Dequal_side_tixing(i%).data(0).poi(0), _
         Dequal_side_tixing(i%).data(0).poi(1), Dmid_point(n%).data(0).data0.poi(1), _
          Dmid_point(m%).data(0).data0.poi(1), temp_record, 0, no_reduce)
'   If set_mid_point_for_polygon > 1 Then
'    Exit Function
'   End If
' End If
' End If
'Next i%
For i% = 1 To last_conditions.last_cond(1).parallelogram_no
 temp_record.record_data.data0.condition_data.condition_no = 3
 temp_record.record_data.data0.condition_data.condition(1).ty = parallelogram_
  temp_record.record_data.data0.condition_data.condition(1).no = i%
 For j% = 0 To 1
  If is_same_two_point(Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(j%), _
    Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), _
     Dmid_point(n%).data(0).data0.poi(0), _
      Dmid_point(n%).data(0).data0.poi(2)) Then
      p% = get_midpoint(Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), 0, _
          Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), 0, 0, 0, 0, m%)
   If m% > 0 Then
      temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
      temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
       temp_record.record_data.data0.condition_data.condition(2).no = n%
       temp_record.record_data.data0.condition_data.condition(3).no = m%
     set_mid_point_for_polygon = set_mid_position_line _
      (Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(j%), _
       Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
        Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), _
         Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), _
          Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
           0, 0, temp_record, 0, no_reduce)
   If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
   GoTo set_mid_point_next
   End If
ElseIf is_same_two_point(Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
    Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), Dmid_point(n%).data(0).data0.poi(0), _
     Dmid_point(n%).data(0).data0.poi(2)) Then
     p% = get_midpoint(Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(j%), 0, _
          Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), 0, 0, 0, 0, m%)
   If m% > 0 Then
      temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
      temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
       temp_record.record_data.data0.condition_data.condition(2).no = n%
       temp_record.record_data.data0.condition_data.condition(3).no = m%
     set_mid_point_for_polygon = _
      set_mid_position_line _
      (Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(j%), _
        Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
         Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), _
          Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), _
           Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
            0, 0, temp_record, 0, no_reduce)
   If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
   GoTo set_mid_point_next
   End If
End If
 Next j%
set_mid_point_next:
Next i%
For i% = 1 To last_conditions.last_cond(1).long_squre_no
 temp_record.record_data.data0.condition_data.condition_no = 3
 temp_record.record_data.data0.condition_data.condition(1).ty = long_squre_
  temp_record.record_data.data0.condition_data.condition(1).no = i%
For j% = 0 To 1
  If is_same_two_point(Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(j%), _
    Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), _
     Dmid_point(n%).data(0).data0.poi(0), Dmid_point(n%).data(0).data0.poi(2)) Then
     p% = get_midpoint(Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
         0, Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), 0, 0, 0, 0, m%)
   If m% > 0 Then
         temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
      temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
       temp_record.record_data.data0.condition_data.condition(2).no = m%
       temp_record.record_data.data0.condition_data.condition(3).no = n%
     set_mid_point_for_polygon = set_mid_position_line _
      (Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(j%), _
        Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
         Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), _
          Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), _
         Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
          0, 0, temp_record, 0, no_reduce)
   If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
   GoTo set_mid_point_next1
   End If
ElseIf is_same_two_point(Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
    Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), Dmid_point(n%).data(0).data0.poi(0), _
     Dmid_point(n%).data(0).data0.poi(2)) Then
     p% = get_midpoint(Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(j%), 0, _
          Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), 0, 0, 0, 0, m%)
   If m% > 0 Then
         temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
      temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
       temp_record.record_data.data0.condition_data.condition(2).no = m%
       temp_record.record_data.data0.condition_data.condition(3).no = n%
     set_mid_point_for_polygon = set_mid_position_line _
      (Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(j%), _
       Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
        Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), _
         Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), _
         Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
          0, 0, temp_record, 0, no_reduce)
   If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
   GoTo set_mid_point_next1
   End If
End If
 Next j%
set_mid_point_next1:
Next i%
For i% = 1 To last_conditions.last_cond(1).epolygon_no
 temp_record.record_data.data0.condition_data.condition_no = 3
 temp_record.record_data.data0.condition_data.condition(1).ty = epolygon_
  temp_record.record_data.data0.condition_data.condition(1).no = i%
If epolygon(i%).data(0).p.total_v = 4 Then
 For j% = 0 To 1
  If is_same_two_point(epolygon(i%).data(0).p.v(j%), _
    epolygon(i%).data(0).p.v((j% + 3) Mod 4), Dmid_point(n%).data(0).data0.poi(0), _
     Dmid_point(n%).data(0).data0.poi(2)) Then
      p% = get_midpoint(epolygon(i%).data(0).p.v((j% + 1) Mod 4), 0, _
            epolygon(i%).data(0).p.v((j% + 2) Mod 4), 0, 0, 0, 0, m%)
   If m% > 0 Then
      temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
      temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
       temp_record.record_data.data0.condition_data.condition(2).no = m%
       temp_record.record_data.data0.condition_data.condition(3).no = n%
     set_mid_point_for_polygon = set_mid_position_line _
      (epolygon(i%).data(0).p.v(j%), epolygon(i%).data(0).p.v((j% + 1) Mod 4), _
        epolygon(i%).data(0).p.v((j% + 2) Mod 4), epolygon(i%).data(0).p.v((j% + 3) Mod 4), _
         Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
          0, 0, temp_record, 0, no_reduce)
   If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
   GoTo set_mid_point_next2
   End If
  ElseIf is_same_two_point(epolygon(i%).data(0).p.v((j% + 1) Mod 4), _
    epolygon(i%).data(0).p.v((j% + 2) Mod 4), Dmid_point(n%).data(0).data0.poi(0), _
     Dmid_point(n%).data(0).data0.poi(2)) Then
      p% = get_midpoint(epolygon(i%).data(0).p.v(j%), 0, _
            epolygon(i%).data(0).p.v((j% + 3) Mod 4), 0, 0, 0, 0, m%)
   If m% > 0 Then
      temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
      temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
       temp_record.record_data.data0.condition_data.condition(2).no = m%
       temp_record.record_data.data0.condition_data.condition(3).no = n%
     set_mid_point_for_polygon = set_mid_position_line _
      (epolygon(i%).data(0).p.v(j%), epolygon(i%).data(0).p.v((j% + 1) Mod 4), _
        epolygon(i%).data(0).p.v((j% + 2) Mod 4), epolygon(i%).data(0).p.v((j% + 3) Mod 4), _
         Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
          0, 0, temp_record, 0, no_reduce)
   If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
   GoTo set_mid_point_next2
   End If
  End If
 Next j%
 End If
set_mid_point_next2:
Next i%
For i% = 1 To last_conditions.last_cond(1).rhombus_no
 temp_record.record_data.data0.condition_data.condition_no = 3
 temp_record.record_data.data0.condition_data.condition(1).ty = rhombus_
  temp_record.record_data.data0.condition_data.condition(1).no = i%
 For j% = 0 To 1
  If is_same_two_point(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(j%), _
    Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), _
     Dmid_point(n%).data(0).data0.poi(0), _
      Dmid_point(n%).data(0).data0.poi(2)) = True Then
    p% = get_midpoint(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), 0, _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), 0, 0, 0, 0, m%)
   If m% > 0 Then
      temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
      temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
       temp_record.record_data.data0.condition_data.condition(2).no = n%
       temp_record.record_data.data0.condition_data.condition(3).no = m%
   set_mid_point_for_polygon = set_mid_position_line _
      (Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(j%), _
        Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
         Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), _
           Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
            0, 0, temp_record, 0, no_reduce)
   If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
   GoTo set_mid_point_next3
   End If
  ElseIf is_same_two_point(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
    Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), Dmid_point(n%).data(0).data0.poi(0), _
     Dmid_point(n%).data(0).data0.poi(2)) = True Then
    p% = get_midpoint(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(j%), 0, _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), 0, 0, 0, 0, m%)
   If m% > 0 Then
      temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
      temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
       temp_record.record_data.data0.condition_data.condition(2).no = n%
       temp_record.record_data.data0.condition_data.condition(3).no = m%
     set_mid_point_for_polygon = set_mid_position_line _
      (Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(j%), _
        Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
         Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi((j% + 3) Mod 4), _
           Dmid_point(n%).data(0).data0.poi(1), Dmid_point(m%).data(0).data0.poi(1), _
            0, 0, temp_record, 0, no_reduce)
   If set_mid_point_for_polygon > 1 Then
    Exit Function
   End If
   GoTo set_mid_point_next3
   End If
  End If
 Next j%
set_mid_point_next3:
Next i%


End Function


Public Function set_mid_position_line(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, _
     ByVal p5%, ByVal p6%, p7%, p8%, re As total_record_type, ByVal ty As Byte, _
      ByVal no_reduce As Byte) As Byte
'ty=0, 2梯形，ty=1,3  平行四边形ty=0,1 已知中点，ty=2,3 平行
Dim temp_record As total_record_type
If p7% > 0 And p8% > 0 Then
   temp_record = re
  If ty = 0 Or ty = 2 Then
     If (m_poi(p1%).data(0).data0.coordinate.X - m_poi(p2%).data(0).data0.coordinate.X) ^ 2 + _
        (m_poi(p1%).data(0).data0.coordinate.Y - m_poi(p2%).data(0).data0.coordinate.Y) ^ 2 > _
        (m_poi(p3%).data(0).data0.coordinate.X - m_poi(p4%).data(0).data0.coordinate.X) ^ 2 + _
        (m_poi(p3%).data(0).data0.coordinate.Y - m_poi(p4%).data(0).data0.coordinate.Y) ^ 2 Then
        set_mid_position_line = _
      set_three_line_value(p1%, p2%, p3%, p4%, p7%, p8%, 0, 0, 0, 0, 0, 0, _
        0, 0, 0, "1", "-1", "-2", "0", temp_record, 0, 0, 0)
     If set_mid_position_line > 1 Then
      Exit Function
     End If
     Else
     set_mid_position_line = _
     set_three_line_value(p1%, p2%, p3%, p4%, p7%, p8%, 0, 0, 0, 0, 0, 0, _
      0, 0, 0, "-1", "1", "-2", "0", temp_record, 0, 0, 0)
     If set_mid_position_line > 1 Then
      Exit Function
     End If
     End If
  End If
End If
If p5% > 0 And p6% > 0 Then
If ty = 0 Or ty = 2 Then
If th_chose(98).chose = 1 Then
 temp_record = re
  temp_record.record_data.data0.theorem_no = 98
set_mid_position_line = _
  set_three_line_value(p1%, p2%, p3%, p4%, p5%, p6%, 0, 0, 0, 0, 0, 0, _
      0, 0, 0, "1", "1", "-2", "0", temp_record, 0, 0, 0)
If set_mid_position_line > 1 Then
 Exit Function
End If
End If
Else
If th_chose(98).chose = 1 Then
 temp_record = re
 temp_record.record_data.data0.theorem_no = 98
set_mid_position_line = _
 set_equal_dline(p1%, p2%, p5%, p6%, 0, 0, 0, 0, 0, 0, 0, _
       temp_record, 0, 0, 0, 0, no_reduce, False)
If set_mid_position_line > 1 Then
 Exit Function
End If
temp_record = re
 temp_record.record_data.data0.theorem_no = 98
set_mid_position_line = _
 set_equal_dline(p3%, p4%, p5%, p6%, 0, 0, 0, 0, 0, 0, 0, _
    temp_record, 0, 0, 0, 0, no_reduce, False)
If set_mid_position_line > 1 Then
 Exit Function
End If
End If
End If
'**************
If ty = 0 Or ty = 1 Then
If th_chose(98).chose = 1 Then
temp_record = re
 temp_record.record_data.data0.theorem_no = 98
set_mid_position_line = _
 set_dparal(line_number0(p1%, p2%, 0, 0), _
  line_number0(p5%, p6%, 0, 0), temp_record, 0, no_reduce, False)
If set_mid_position_line > 1 Then
 Exit Function
End If
temp_record = re
 temp_record.record_data.data0.theorem_no = 98
set_mid_position_line = _
 set_dparal(line_number0(p3%, p4%, 0, 0), _
  line_number0(p5%, p6%, 0, 0), temp_record, 0, no_reduce, False)
If set_mid_position_line > 1 Then
 Exit Function
End If
End If
Else
If th_chose(94).chose = 1 Then
temp_record = re
 temp_record.record_data.data0.theorem_no = 94
set_mid_position_line = _
  set_mid_point(p3%, p4%, p6%, 0, 0, 0, 0, 0, temp_record, _
     0, 0, 0, 0, no_reduce)
End If
End If
End If
End Function

Public Function set_paral_for_polygon(ByVal n%, ByVal no_reduce As Byte)
Dim i%, j%, k%, l%, tp%, t_n%
Dim tn(3) As Integer
Dim n_(5) As Integer
Dim l_(1) As Integer
Dim tl(1) As Integer
Dim tl1(1) As Integer
Dim p(5) As Integer
Dim temp_record As total_record_type
tl(0) = Dparal(n%).data(0).data0.line_no(0)
tl(1) = Dparal(n%).data(0).data0.line_no(1)
If th_chose(95).chose = 1 Then
temp_record.record_data.data0.theorem_no = 95
For i% = 1 To last_conditions.last_cond(1).tixing_no
 temp_record.record_data.data0.condition_data.condition_no = 3
  temp_record.record_data.data0.condition_data.condition(1).ty = tixing_
   temp_record.record_data.data0.condition_data.condition(1).no = i%
  set_paral_for_polygon = set_paral_for_polygon_( _
     n%, Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1), Dtixing(i%).data(0).poi(2), _
      Dtixing(i%).data(0).poi(3), 0, temp_record, no_reduce)
     If set_paral_for_polygon > 1 Then
      Exit Function
     End If
Next i%
'********************************
'For i% = 1 To last_conditions.last_cond(1).equal_side_tixing_no
' temp_record.record_data.data0.condition_data.condition_no = 3
' temp_record.record_data.data0.condition_data.condition(1).ty = equal_side_tixing_
'  temp_record.record_data.data0.condition_data.condition(1).no = i%
'  set_paral_for_polygon = set_paral_for_polygon_( _
'     n%, Dequal_side_tixing(i%).data(0).poi(0), Dequal_side_tixing(i%).data(0).poi(1), _
'      Dequal_side_tixing(i%).data(0).poi(2), Dequal_side_tixing(i%).data(0).poi(3), _
'       0, temp_record, no_reduce)
'     If set_paral_for_polygon > 1 Then
'      Exit Function
'     End If
'Next i%
End If
'*********************************
If th_chose(94).chose = 1 Then
temp_record.record_data.data0.theorem_no = 94
For i% = 1 To last_conditions.last_cond(1).parallelogram_no
 temp_record.record_data.data0.condition_data.condition_no = 3
 temp_record.record_data.data0.condition_data.condition(1).ty = parallelogram_
  temp_record.record_data.data0.condition_data.condition(1).no = i%
  set_paral_for_polygon = set_paral_for_polygon_( _
     n%, Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(0), _
      Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(1), _
       Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(2), _
        Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(3), _
        1, temp_record, no_reduce)
     If set_paral_for_polygon > 1 Then
      Exit Function
     End If
Next i%
For i% = 1 To last_conditions.last_cond(1).long_squre_no
 temp_record.record_data.data0.condition_data.condition_no = 3
 temp_record.record_data.data0.condition_data.condition(1).ty = long_squre_
  temp_record.record_data.data0.condition_data.condition(1).no = i%
  set_paral_for_polygon = set_paral_for_polygon_( _
     n%, Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(0), _
      Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(1), _
       Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(2), _
        Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(3), _
       1, temp_record, no_reduce)
     If set_paral_for_polygon > 1 Then
      Exit Function
     End If
Next i%
End If
If th_chose(96).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 96
For i% = 1 To last_conditions.last_cond(1).epolygon_no
 temp_record.record_data.data0.condition_data.condition_no = 3
 temp_record.record_data.data0.condition_data.condition(1).ty = epolygon_
  temp_record.record_data.data0.condition_data.condition(1).no = i%
If epolygon(i%).data(0).p.total_v = 4 Then
  set_paral_for_polygon = set_paral_for_polygon_( _
     n%, epolygon(i%).data(0).p.v(0), epolygon(i%).data(0).p.v(1), _
      epolygon(i%).data(0).p.v(2), epolygon(i%).data(0).p.v(3), _
       1, temp_record, no_reduce)
     If set_paral_for_polygon > 1 Then
      Exit Function
     End If
 End If
Next i%
For i% = 1 To last_conditions.last_cond(1).rhombus_no
 temp_record.record_data.data0.condition_data.condition_no = 3
 temp_record.record_data.data0.condition_data.condition(1).ty = rhombus_
  temp_record.record_data.data0.condition_data.condition(1).no = i%
  set_paral_for_polygon = set_paral_for_polygon_( _
     n%, Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
      Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), _
       Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(2), _
        Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(3), 1, temp_record, no_reduce)
     If set_paral_for_polygon > 1 Then
      Exit Function
     End If
Next i%
End If
If th_chose(96).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 96
For i% = 0 To 1
 For k% = 2 To m_lin(Dparal(n%).data(0).data0.line_no(i%)).data(0).data0.in_point(0)
  For j% = 1 To k% - 1
   For l% = 1 To last_conditions.last_cond(1).point_no
    If is_point_in_paral_line(0, l%, n%, 0) = False Then ' 平行先外取一点
         Call get_midpoint(l%, 0, _
               m_lin(Dparal(n%).data(0).data0.line_no(i%)).data(0).data0.in_point(k%), _
                n_(0), 0, n_(1), l_(0), tn(0))
         Call get_midpoint(l%, 0, _
               m_lin(Dparal(n%).data(0).data0.line_no(i%)).data(0).data0.in_point(j%), _
                n_(2), 0, n_(3), l_(1), tn(1))
     If tn(0) > 0 And tn(1) = 0 Then
        If is_point_in_line3(Dmid_point(tn(0)).data(0).data0.poi(1), _
          m_lin(Dparal(n%).data(0).data0.line_no((i% + 1) Mod 2)).data(0).data0, 0) Then
           temp_record.record_data.data0.condition_data.condition_no = 2
            temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
             temp_record.record_data.data0.condition_data.condition(2).no = tn(0)
          tp% = is_line_line_intersect(Dparal(n%).data(0).data0.line_no((i% + 1) Mod 2), _
                  l_(1), n_(4), n_(5), False)
             If tp% > 0 Then
            set_paral_for_polygon = _
             set_mid_point(l%, tp%, m_lin(Dparal(n%).data(0).data0.line_no(i%)).data(0).data0.in_point(j%), _
                n_(2), n_(5), n_(3), l_(1), 0, temp_record, 0, 0, 0, 0, no_reduce)
               If set_paral_for_polygon > 1 Then
                Exit Function
               End If
             End If
      End If
      ElseIf tn(0) = 0 And tn(1) > 0 Then
           temp_record.record_data.data0.condition_data.condition_no = 2
            temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
             temp_record.record_data.data0.condition_data.condition(2).no = tn(1)
       If is_point_in_line3(Dmid_point(tn(1)).data(0).data0.poi(1), _
          m_lin(Dparal(n%).data(0).data0.line_no((i% + 1) Mod 2)).data(0).data0, 0) Then '
           tp% = is_line_line_intersect(Dparal(n%).data(0).data0.line_no((i% + 1) Mod 2), _
                 l_(0), n_(4), n_(5), False)
             If tp% > 0 Then
              set_paral_for_polygon = _
               set_mid_point(l%, tp%, m_lin(Dparal(n%).data(0).data0.line_no(i%)).data(0).data0.in_point(k%), _
                n_(0), n_(5), n_(1), l_(0), 0, temp_record, 0, 0, 0, 0, no_reduce)
               If set_paral_for_polygon > 1 Then
                Exit Function
               End If
              End If
       End If
      End If
    End If
   Next l%
  Next j%
 Next k%
Next i%
End If
End Function

Public Function set_area_of_triangle(ByVal triA As Integer, _
 ByVal v As String, re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
Dim i%, j%, k%, l%, m%, tp%, tn%, tA%, it%, temp_no%, vn%
Dim t_n(1) As Integer
Dim tl(2) As Integer
Dim ty As Integer
Dim po(5) As polygon
Dim t_y(1) As Boolean
Dim tv As String
Dim r$
Dim ts$
Dim para$
Dim level As Byte
Dim set_new_data As Boolean
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim c_data As condition_data_type
'On Error GoTo set_area_of_element_error
If InStr(1, v, "F", 0) > 0 Then
   Exit Function
ElseIf using_area_th = 0 And run_statue > 1 And no_reduce < 255 Then '12.10
   Exit Function
ElseIf (no% > 0 And draw_or_prove = 1) Then
 If area_of_element(no%).record_.no_reduce > 2 Then
  Exit Function
 ElseIf th_chose(156).chose = 0 And _
     th_chose(155).chose = 0 And _
      th_chose(2).chose = 0 Then
   Exit Function
 Else
 GoTo set_area_of_element_mark0
 End If
ElseIf triA = 0 Or no_reduce = 255 Or InStr(1, v, "F", 0) > 0 Then
 Exit Function
ElseIf triangle(triA).data(0).no_reduce > 0 Then
 Exit Function
End If
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_area_of_element(triangle_, triA%, no%, 0) Then
 If no% > 0 And run_type < 10 Then
temp_record1.record_data = re.record_data
'Call add_conditions_to_record(area_of_element_, no%, 0, 0, _
           temp_record1.record_data.data0.condition_data,0)
set_area_of_triangle = set_string_value_(area_of_element(no%).data(0).value, _
                      v, area_of_element_, no%, temp_record1.record_data, no_reduce)
If set_area_of_triangle > 1 Then
 Exit Function
End If
 level = area_of_element(no%).data(0).record.data0.condition_data.level
 If set_prove_type(area_of_element_, no%, temp_record.record_data, _
      area_of_element(no%).data(0).record) And set_or_prove < 2 Then
    If InStr(1, area_of_element(no%).data(0).value, ".", 0) > 0 Then
    If InStr(1, v, ".", 0) = 0 Then
     area_of_element(no%).data(0).value = v
      End If
    End If
     If area_of_element(no%).record_.no_reduce > 2 Or run_type <= 1 Then
       set_area_of_triangle = 0
      Exit Function
     Else
     no_reduce = 2
      GoTo set_area_of_element_mark_0
     End If
 End If
   If no_reduce = 0 Then
   no% = 0
  End If
  End If
 Exit Function
End If
set_area_of_element_mark_:
temp_no% = last_conditions.last_cond(1).area_of_element_no
For i% = 1 To temp_no%
area_of_element(i%).record_.index = area_of_element(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).area_of_element_no Mod 10 = 0 Then
ReDim Preserve area_of_element(last_conditions.last_cond(1).area_of_element_no + 10) As area_of_element_type
End If
last_conditions.last_cond(1).area_of_element_no = last_conditions.last_cond(1).area_of_element_no + 1
set_new_data = True
'area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0) = area_of_element_data_0
  area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).element.no = triA
   area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).element.ty = triangle_
  If triangle(triA).data(0).condition.no > 0 Then
   Call add_conditions_to_record(triangle(triA).data(0).condition.ty, triangle(triA).data(0).condition.no, _
          0, 0, temp_record.record_data.data0.condition_data)
  End If
  If is_contain_x(v, "x", 1) = False Then
   triangle(triA).data(0).Area = v
  End If
  area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).value = v
   area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).value_ = v
    area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).record = temp_record.record_data
     area_of_element(last_conditions.last_cond(1).area_of_element_no).record_ = temp_record.record_
      area_of_element(last_conditions.last_cond(1).area_of_element_no).record_.no_reduce = 0
For i = last_conditions.last_cond(1).area_of_element_no To no% + 2 Step -1
area_of_element(i%).data(0).record.data1.index.i(0) = _
  area_of_element(i% - 1).data(0).record.data1.index.i(0)
Next i%
area_of_element(no% + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).area_of_element_no
 no% = last_conditions.last_cond(1).area_of_element_no
  triangle(triA).data(0).area_no = no%
If last_conditions_for_aid_no > 0 Then
  If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
   If triangle(triA).data(0).poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       triangle(triA).data(0).poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        triangle(triA).data(0).poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
         last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
   End If
  End If
 End If
  ts$ = LoadResString_from_inpcond(63, set_triangle_display_string(triA, 1, no_display, False, 1, 0) + _
                                      "\\3\\" + display_string_(v, 0))
   set_area_of_triangle = set_prove_proccess(ts$, area_of_element_, no%, area_of_element(no%).data(0).record.display_string)
   If set_area_of_triangle > 1 Then
    Exit Function
   End If
   For i% = 1 To last_conditions.last_cond(1).verti_no
      If Dverti(i%).data(0).inter_poi > 0 Then
        If Dverti(i%).data(0).line_no(0) = triangle(triA).data(0).line_no(0) Then
           If is_point_in_line3(triangle(triA).data(0).poi(0), m_lin(Dverti(i%).data(0).line_no(1)).data(0).data0, 0) Then
            temp_record.record_data.data0.condition_data.condition_no = 2
            temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
            temp_record.record_data.data0.condition_data.condition(2).ty = verti_
            temp_record.record_data.data0.condition_data.condition(1).no = no%
            temp_record.record_data.data0.condition_data.condition(2).no = i%
            c_data.condition_no = 0
                Call set_item0(triangle(triA).data(0).poi(1), triangle(triA).data(0).poi(2), _
                      triangle(triA).data(0).poi(0), Dverti(i%).data(0).inter_poi, "*", _
                        0, 0, 0, 0, 0, 0, "", "", "", "", para$, 0, c_data, it%, 0, 0, 0, c_data, False) '0310
            set_area_of_triangle = set_general_string(it%, 0, 0, 0, para$, "0", "0", "0", _
                  time_string(triangle(triA).data(0).Area, "2", True, False), 0, 0, 0, _
                   temp_record, 0, 0)
             If set_area_of_triangle > 1 Then
                Exit Function
             End If
           End If
        ElseIf Dverti(i%).data(0).line_no(0) = triangle(triA).data(0).line_no(1) Then
           If is_point_in_line3(triangle(triA).data(0).poi(1), m_lin(Dverti(i%).data(0).line_no(1)).data(0).data0, 0) Then
            temp_record.record_data.data0.condition_data.condition_no = 2
            temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
            temp_record.record_data.data0.condition_data.condition(2).ty = verti_
            temp_record.record_data.data0.condition_data.condition(1).no = no%
            temp_record.record_data.data0.condition_data.condition(2).no = i%
                 Call set_item0(triangle(triA).data(0).poi(0), triangle(triA).data(0).poi(2), _
                      triangle(triA).data(0).poi(1), Dverti(i%).data(0).inter_poi, "*", _
                        0, 0, 0, 0, 0, 0, "", "", "", "", para$, 0, c_data, it%, 0, 0, 0, c_data, False) '0310
            set_area_of_triangle = set_general_string(it%, 0, 0, 0, para$, "0", "0", "0", _
                  time_string(triangle(triA).data(0).Area, "2", True, False), 0, 0, 0, _
                   temp_record, 0, 0)
             If set_area_of_triangle > 1 Then
                Exit Function
             End If
          End If
        ElseIf Dverti(i%).data(0).line_no(0) = triangle(triA).data(0).line_no(2) Then
           If is_point_in_line3(triangle(triA).data(0).poi(2), m_lin(Dverti(i%).data(0).line_no(1)).data(0).data0, 0) Then
            temp_record.record_data.data0.condition_data.condition_no = 2
            temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
            temp_record.record_data.data0.condition_data.condition(2).ty = verti_
            temp_record.record_data.data0.condition_data.condition(1).no = no%
            temp_record.record_data.data0.condition_data.condition(2).no = i%
                Call set_item0(triangle(triA).data(0).poi(1), triangle(triA).data(0).poi(0), _
                      triangle(triA).data(0).poi(2), Dverti(i%).data(0).inter_poi, "*", _
                        0, 0, 0, 0, 0, 0, "", "", "", "", para$, 0, c_data, it%, 0, 0, 0, c_data, False) '0310
            set_area_of_triangle = set_general_string(it%, 0, 0, 0, para$, "0", "0", "0", _
                  time_string(triangle(triA).data(0).Area, "2", True, False), 0, 0, 0, _
                   temp_record, 0, 0)
             If set_area_of_triangle > 1 Then
                Exit Function
             End If
           End If
        ElseIf Dverti(i%).data(0).line_no(1) = triangle(triA).data(0).line_no(0) Then
           If is_point_in_line3(triangle(triA).data(0).poi(0), m_lin(Dverti(i%).data(0).line_no(0)).data(0).data0, 0) Then
            temp_record.record_data.data0.condition_data.condition_no = 2
            temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
            temp_record.record_data.data0.condition_data.condition(2).ty = verti_
            temp_record.record_data.data0.condition_data.condition(1).no = no%
            temp_record.record_data.data0.condition_data.condition(2).no = i%
            Call set_item0(triangle(triA).data(0).poi(1), triangle(triA).data(0).poi(2), _
                      triangle(triA).data(0).poi(0), Dverti(i%).data(0).inter_poi, "*", _
                        0, 0, 0, 0, 0, 0, "", "", "", "", para$, 0, c_data, it%, 0, 0, 0, c_data, False) '0310
            set_area_of_triangle = set_general_string(it%, 0, 0, 0, para$, "0", "0", "0", _
                  time_string(triangle(triA).data(0).Area, "2", True, False), 0, 0, 0, _
                   temp_record, 0, 0)
             If set_area_of_triangle > 1 Then
                Exit Function
             End If
           End If
        ElseIf Dverti(i%).data(0).line_no(1) = triangle(triA).data(0).line_no(1) Then
           If is_point_in_line3(triangle(triA).data(0).poi(1), m_lin(Dverti(i%).data(0).line_no(0)).data(0).data0, 0) Then
            temp_record.record_data.data0.condition_data.condition_no = 2
            temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
            temp_record.record_data.data0.condition_data.condition(2).ty = verti_
            temp_record.record_data.data0.condition_data.condition(1).no = no%
            temp_record.record_data.data0.condition_data.condition(2).no = i%
            Call set_item0(triangle(triA).data(0).poi(0), triangle(triA).data(0).poi(2), _
                      triangle(triA).data(0).poi(1), Dverti(i%).data(0).inter_poi, "*", _
                        0, 0, 0, 0, 0, 0, "", "", "", "", para$, 0, c_data, it%, 0, 0, 0, c_data, False) '0310
            set_area_of_triangle = set_general_string(it%, 0, 0, 0, para$, "0", "0", "0", _
                  time_string(triangle(triA).data(0).Area, "2", True, False), 0, 0, 0, _
                   temp_record, 0, 0)
             If set_area_of_triangle > 1 Then
                Exit Function
             End If
           End If
        ElseIf Dverti(i%).data(0).line_no(1) = triangle(triA).data(0).line_no(2) Then
           If is_point_in_line3(triangle(triA).data(0).poi(2), m_lin(Dverti(i%).data(0).line_no(0)).data(0).data0, 0) Then
            temp_record.record_data.data0.condition_data.condition_no = 2
            temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
            temp_record.record_data.data0.condition_data.condition(2).ty = verti_
            temp_record.record_data.data0.condition_data.condition(1).no = no%
            temp_record.record_data.data0.condition_data.condition(2).no = i%
            Call set_item0(triangle(triA).data(0).poi(1), triangle(triA).data(0).poi(0), _
                      triangle(triA).data(0).poi(2), Dverti(i%).data(0).inter_poi, "*", _
                        0, 0, 0, 0, 0, 0, "", "", "", "", para$, 0, c_data, it%, 0, 0, 0, c_data, False) '0310
            set_area_of_triangle = set_general_string(it%, 0, 0, 0, para$, "0", "0", "0", _
                  time_string(triangle(triA).data(0).Area, "2", True, False), 0, 0, 0, _
                   temp_record, 0, 0)
             If set_area_of_triangle > 1 Then
                Exit Function
             End If
           End If
        End If
      End If
   Next i%
   For i% = 1 To last_area_element_in_conclusion
    If Area_element_in_conclusion(i%).no < triA And _
        Area_element_in_conclusion(i%).ty = triangle_ Then
     Area_element_in_conclusion(i%).no = triA
      set_area_of_triangle = set_area_relation_from_new_area_element_in_conclusion( _
        area_of_element(no%).data(0).element)
       If set_area_of_triangle > 0 Then
        Exit Function
       End If
       GoTo set_area_of_element_next1
    End If
   Next i%
    last_area_element_in_conclusion = last_area_element_in_conclusion + 1
     ReDim Area_element_in_conclusion(last_area_element_in_conclusion) As condition_type
      Area_element_in_conclusion(last_area_element_in_conclusion) = area_of_element(no%).data(0).element
set_area_of_element_next1:
For i% = 1 To last_conditions.last_cond(1).parallelogram_no
 temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
 temp_record.record_data.data0.condition_data.condition(1).no = no%
  set_area_of_triangle = is_area_of_parallelogram(i%, temp_record.record_data, 0)
  If set_area_of_triangle = 0 Then
   For j% = 0 To 2
    For k% = 0 To 3
     If Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(k%) = _
       triangle(area_of_element(no%).data(0).element.no).data(0).poi(j%) Then
        GoTo set_area_of_element_mark10
     End If
    Next k%
        GoTo set_area_of_element_mark11
set_area_of_element_mark10:
   Next j%
   temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
   temp_record.record_data.data0.condition_data.condition(1).no = no%
   temp_record.record_data.data0.theorem_no = 0
   set_area_of_triangle = set_area_of_element(polygon_, _
        Dparallelogram(i%).data(0).polygon4_no, _
         time_string(area_of_element(no%).data(0).value, "2", _
          True, False), 0, temp_record)
       If set_area_of_triangle > 1 Then
        Exit Function
       End If
  ElseIf set_area_of_triangle = 2 Then
   Exit Function
  End If
set_area_of_element_mark11:
Next i%
If no_reduce = 0 Then
  Exit Function
End If
set_area_of_element_mark0:
If area_of_element(no%).record_.no_reduce = 0 Then
       area_of_element(no%).record_.no_reduce = 255
      Call set_level_(area_of_element(no%).record_.no_reduce, 1)
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
set_area_of_element_mark_0:
temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
  temp_record.record_data.data0.condition_data.condition(1).no = no%
For i% = 0 To 2
 If angle(triangle(area_of_element(no%).data(0).element.no).data(0).angle(i%)).data(0).value <> "" Then
  tv$ = sin_(angle(triangle(area_of_element(no%).data(0).element.no).data(0).angle(i%)).data(0).value, 0)
   If InStr(1, tv$, "F", 0) = 0 Then
    tv$ = divide_string(time_string("2", area_of_element(no%).data(0).value, False, False), tv$, True, False)
     If InStr(1, tv$, "F", 0) = 0 Then
      temp_record.record_data.data0.condition_data.condition_no = 1
       Call add_conditions_to_record(angle3_value_, _
          angle(triangle(area_of_element(no%).data(0).element.no).data(0).angle(i%)).data(0).value_no, _
            0, 0, temp_record.record_data.data0.condition_data)
             set_area_of_triangle = set_item0(triangle(area_of_element(no%).data(0).element.no).data(0).poi(i%), _
               triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 1) Mod 3), _
                triangle(area_of_element(no%).data(0).element.no).data(0).poi(i%), _
                 triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 2) Mod 3), _
                  "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", tv$, "1", 0, _
                    temp_record.record_data.data0.condition_data, 0, 0, 0, 0, c_data, False)
              If set_area_of_triangle > 1 Then
                Exit Function
              End If
       End If
   End If
 End If
Next i%
For i% = 1 To last_conditions.last_cond(1).area_relation_no
 temp_record.record_data.data0.condition_data.condition_no = 2
  temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
   temp_record.record_data.data0.condition_data.condition(1).no = no%
 temp_record.record_data.data0.condition_data.condition(2).ty = area_relation_
  temp_record.record_data.data0.condition_data.condition(2).no = i%
   temp_record.record_data.data0.theorem_no = 1
   If compare_two_condition_type(Darea_relation(i%).data(0).area_element(0), _
        area_of_element(no%).data(0).element) = 0 Then
  set_area_of_triangle = set_area_of_element(Darea_relation(i%).data(0).area_element(1).ty, _
                     Darea_relation(i%).data(0).area_element(1).no, _
                      divide_string(area_of_element(no%).data(0).value, _
                       Darea_relation(i%).data(0).value, True, False), _
      0, temp_record)
   If set_area_of_triangle > 1 Then
    Exit Function
   End If
   If Darea_relation(i%).data(0).area_element(2).no <> 0 Then
  set_area_of_triangle = set_area_of_element(Darea_relation(i%).data(0).area_element(2).ty, _
       Darea_relation(i%).data(0).area_element(2).no, _
        add_string(area_of_element(no%).data(0).value, _
          divide_string(area_of_element(no%).data(0).value, Darea_relation(i%).data(0).value, False, False), _
           True, False), 0, temp_record)
   If set_area_of_triangle > 1 Then
    Exit Function
   End If
   End If
 ElseIf compare_two_condition_type(Darea_relation(i%).data(0).area_element(1), _
          area_of_element(no%).data(0).element) = 0 Then
            set_area_of_triangle = set_area_of_element(Darea_relation(i%).data(0).area_element(0).ty, _
                            Darea_relation(i%).data(0).area_element(0).no, _
    time_string(area_of_element(no%).data(0).value, Darea_relation(i%).data(0).value, True, False), _
        0, temp_record)
   If set_area_of_triangle > 1 Then
    Exit Function
   End If
   If Darea_relation(i%).data(0).area_element(2).no <> 0 Then
  set_area_of_triangle = set_area_of_element(Darea_relation(i%).data(0).area_element(2).ty, _
                           Darea_relation(i%).data(0).area_element(2).no, _
    add_string(area_of_element(no%).data(0).value, _
     time_string(area_of_element(no%).data(0).value, Darea_relation(i%).data(0).value, False, False), True, False), _
       0, temp_record)
   If set_area_of_triangle > 1 Then
    Exit Function
   End If
   End If
 ElseIf compare_two_condition_type(Darea_relation(i%).data(0).area_element(2), _
          area_of_element(no%).data(0).element) = 0 Then
  set_area_of_triangle = set_area_of_element(Darea_relation(i%).data(0).area_element(0).ty, _
                    Darea_relation(i%).data(0).area_element(0).no, _
    time_string(Darea_relation(i%).data(0).value, divide_string(area_of_element(no%).data(0).value, add_string("1", _
     Darea_relation(i%).data(0).value, False, False), False, False), True, False), 0, temp_record)
   If set_area_of_triangle > 1 Then
    Exit Function
   End If
     set_area_of_triangle = set_area_of_element(Darea_relation(i%).data(0).area_element(1).ty, _
             Darea_relation(i%).data(0).area_element(1).no, _
             divide_string(area_of_element(no%).data(0).value, add_string("1", _
        Darea_relation(i%).data(0).value, False, False), True, False), _
       0, temp_record)
   If set_area_of_triangle > 1 Then
    Exit Function
   End If
End If
Next i%
If th_chose(2).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 2
  ts$ = time_string("2", area_of_element(no%).data(0).value, True, False)
For i% = 0 To 2
  If find_verti_foot(triangle(area_of_element(no%).data(0).element.no).data(0).poi(i%), _
       line_number0(triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 1) Mod 3), _
         triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 2) Mod 3), 0, 0), _
            tp%, 0, vn%) Then
     temp_record.record_data.data0.condition_data.condition_no = 1
      temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
       temp_record.record_data.data0.condition_data.condition(1).no = no%
     Call add_conditions_to_record(verti_, vn%, 0, 0, temp_record.record_data.data0.condition_data)
     If is_line_value(triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 1) Mod 3), _
       triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 2) Mod 3), 0, 0, 0, "", _
          tn%, -1000, 0, 0, 0, line_value_data0) = 1 Then
        Call add_conditions_to_record(line_value_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
         set_area_of_triangle = _
          set_line_value(triangle(area_of_element(no%).data(0).element.no).data(0).poi(i%), _
         tp%, divide_string(ts$, _
            line_value(tn%).data(0).data0.value, True, False), 0, 0, 0, temp_record, 0, no_reduce, False)
         If set_area_of_triangle > 1 Then
             Exit Function
         End If
     ElseIf is_line_value(triangle(area_of_element(no%).data(0).element.no).data(0).poi(i%), _
          tp%, 0, 0, 0, "", tn%, -1000, 0, 0, 0, line_value_data0) = 1 Then
           temp_record.record_data.data0.condition_data.condition_no = 1
       Call add_conditions_to_record(line_value_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
       set_area_of_triangle = _
             set_line_value(triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 1) Mod 3), _
               triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 2) Mod 3), _
                divide_string(ts$, _
                  line_value(tn%).data(0).data0.value, True, False), 0, 0, 0, temp_record, 0, no_reduce, False)
         If set_area_of_triangle > 1 Then
             Exit Function
         End If
     Else
      set_area_of_triangle = set_item0(triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 1) Mod 3), _
             triangle(area_of_element(no%).data(0).element.no).data(0).poi((i% + 2) Mod 3), _
              triangle(area_of_element(no%).data(0).element.no).data(0).poi(i%), tp%, "*", 0, 0, 0, 0, 0, 0, "1", _
                 "1", "1", "", para$, 0, record_data0.data0.condition_data, 0, it%, no_reduce, 0, c_data, False)
        If set_area_of_triangle > 1 Then
         Exit Function
        End If
        set_area_of_triangle = set_general_string(it%, 0, 0, 0, para$, "0", "0", "0", _
               ts, 0, 0, 0, _
                temp_record, 0, no_reduce)
        If set_area_of_triangle > 1 Then
         Exit Function
        End If
     End If
  End If
Next i%
End If
'For i% = 1 To last_conditions.last_cond(1).area_of_element_no
'      temp_record.record_data.data0.condition_data.condition_no = 1
'       temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
'       temp_record.record_data.data0.condition_data.condition(1).no = no%
'If area_of_element(no%).data(0).element.ty = triangle_ Then
  po(0).total_v = 3
   po(0).v(0) = triangle(area_of_element(no%).data(0).element.no).data(0).poi(0)
    po(0).v(1) = triangle(area_of_element(no%).data(0).element.no).data(0).poi(1)
     po(0).v(2) = triangle(area_of_element(no%).data(0).element.no).data(0).poi(2)
'Else
' po(0).total_v = 4
'  po(0).v(0) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(0)
'   po(0).v(1) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(1)
'    po(0).v(2) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(2)
'     po(0).v(3) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(3)
'End If
' If i% <> no% Then
' If po(0).total_v = 3 Then
'  po(1).total_v = 3
'    po(1).v(0) = triangle(area_of_element(i%).data(0).element.no).data(0).poi(0)
'    po(1).v(1) = triangle(area_of_element(i%).data(0).element.no).data(0).poi(1)
'      po(1).v(2) = triangle(area_of_element(i%).data(0).element.no).data(0).poi(2)
'  temp_record.record_data.data0.condition_data.condition_no = 2
'   temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
'     temp_record.record_data.data0.condition_data.condition(2).ty = area_of_element_
'     temp_record.record_data.data0.condition_data.condition(1).no = no%
'      temp_record.record_data.data0.condition_data.condition(2).no = i%
'   set_area_of_triangle = set_property_of_triangle_relation(area_of_element(no%).data(0).element.no, _
            area_of_element(i%).data(0).element.no, divide_string( _
             area_of_element(no%).data(0).value, area_of_element(i%).data(0).value, True, False), _
              temp_record)
'    If set_area_of_triangle > 1 Then
'      Exit Function
'    End If
'    End If
'    End If
' Next i%
' ty = combine_two_polygon(po(0), po(1), po(2), po(3), po(4), po(5)) '合并图形
'  If ty = 1 Then '和
'   tv$ = add_string(area_of_element(i%).data(0).value, _
               area_of_element(no%).data(0).value, True, False)
'  ElseIf ty = -1 Then '前减后
'   tv$ = minus_string(area_of_element(no%).data(0).value, _
'        area_of_element(i%).data(0).value, True, False)
'  ElseIf ty = -2 Then '后减前
'   tv$ = minus_string(area_of_element(i%).data(0).value, _
'        area_of_element(no%).data(0).value, True, False)
'  Else
'   GoTo set_area_of_element_mark1
'  End If
'  If po(2).total_v = 3 Then
'   If ty <> 2 And ty <> -3 And ty <> -4 Then
   
'    set_area_of_triangle = _
'     set_area_of_element(triangle_, triangle_number(po(2).v(0), _
'              po(2).v(1), po(2).v(2), 0, 0, 0, 0, 0, 0, 0), _
               tv$, 0, temp_record)
'       If set_area_of_triangle > 1 Then
'        Exit Function
'       End If
'   ElseIf ty = 2 Then
'    t_y(0) = is_area_of_element(triangle_, tA%, t_n(0))
'     t_y(1) = is_area_of_element(triangle_, triangle_number(po(2).v(0), _
'         po(2).v(1), po(2).v(2), 0, 0, 0, 0, 0, 0, 0), t_n(1))
'     If t_y(0) = False And t_y(1) Then
'      Call add_conditions_to_record(area_of_element_, t_n(1), 0, 0, temp_record.record_data.data0.condition_data)
'       tv$ = minus_string(minus_string(area_of_element(t_n(1)).data(0).value, area_of_element(no%).data(0).value, False, False), _
'            area_of_element(i%).data(0).value, True, False)
'     set_area_of_triangle = _
'     set_area_of_element(triangle_, t_n(0), tv$, 0, temp_record)
'      If set_area_of_triangle > 1 Then
'       Exit Function
'      End If
'     ElseIf t_y(0) And t_y(1) = False Then
'      Call add_conditions_to_record(area_of_element_, t_n(0), 0, 0, temp_record.record_data.data0.condition_data)
'       tv$ = add_string(add_string(area_of_element(t_n(0)).data(0).value, area_of_element(no%).data(0).value, False, False), _
'            area_of_element(i%).data(0).value, True, False)
'     set_area_of_triangle = _
'      set_area_of_element(triangle_, t_n(1), tv$, 0, temp_record)
'      If set_area_of_triangle > 1 Then
'       Exit Function
'      End If
'     End If
'   ElseIf ty = -3 Then
'    tv$ = minus_string(area_of_element(no%).data(0).value, area_of_element(i%).data(0).value, True, False)
'    t_y(0) = is_area_of_element(triangle_, tA%, t_n(0))
'     t_y(1) = is_area_of_element(triangle_, triangle_number(po(2).v(0), _
'         po(2).v(1), po(2).v(2), 0, 0, 0, 0, 0, 0, 0), t_n(1))
'     If t_y(0) And t_y(1) = False Then
'       Call add_conditions_to_record(area_of_element_, t_n(0), 0, 0, temp_record.record_data.data0.condition_data)
'        tv$ = minus_string(tv$, area_of_element(t_n(0)).data(0).value, True, False)
'       set_area_of_triangle = _
'        set_area_of_element(triangle_, t_n(1), tv$, 0, temp_record)
'      If set_area_of_triangle > 1 Then
'       Exit Function
'      End If
'     ElseIf t_y(0) = False And t_y(1) Then
'      Call add_conditions_to_record(area_of_element_, t_n(0), 0, 0, temp_record.record_data.data0.condition_data)
'        tv$ = minus_string(tv$, area_of_element(t_n(1)).data(0).value, True, False)
'       set_area_of_triangle = _
'        set_area_of_element(triangle_, t_n(0), tv$, 0, temp_record)
'      If set_area_of_triangle > 1 Then
'       Exit Function
'      End If
'    End If
'   ElseIf ty = -4 Then
'    tv$ = minus_string(area_of_element(i%).data(0).value, area_of_element(no%).data(0).value, True, False)
'    t_y(0) = is_area_of_element(triangle_, tA%, t_n(0))
'     t_y(1) = is_area_of_element(triangle_, triangle_number(po(2).v(0), _
'         po(2).v(1), po(2).v(2), 0, 0, 0, 0, 0, 0, 0), t_n(1))
'     If t_y(0) = True And t_y(1) = False Then
'      Call add_conditions_to_record(area_of_element_, t_n(1), 0, 0, temp_record.record_data.data0.condition_data)
'        tv$ = minus_string(tv$, area_of_element(t_n(1)).data(0).value, True, False)
'       set_area_of_triangle = _
'        set_area_of_element(triangle_, t_n(0), tv$, 0, temp_record)
'      If set_area_of_triangle > 1 Then
'       Exit Function
'      End If
' ElseIf t_y(0) = False And t_y(1) Then
'      Call add_conditions_to_record(area_of_element_, t_n(0), 0, 0, temp_record.record_data.data0.condition_data)
'        tv$ = minus_string(tv$, area_of_element(t_n(0)).data(0).value, True, False)
'       set_area_of_triangle = _
'         set_area_of_element(triangle_, t_n(1), tv$, 0, temp_record)
'      If set_area_of_triangle > 1 Then
'       Exit Function
'      End If
'     End If
'   End If
'   ElseIf po(2).total_v = 4 Then
'   set_area_of_triangle = set_area_of_polygon(po(2).v(0), _
'    po(2).v(1), po(2).v(2), po(2).v(3), tv$, temp_record, _
'     0, no_reduce)
'      If set_area_of_triangle > 1 Then
'       Exit Function
'      End If
'   End If
'  End If
'set_area_of_element_mark1:
'  Next i%
' For i% = 1 To last_conditions.last_cond(1).area_of_element_no
'  If area_of_element(i%).data(0).element.ty = polygon_ Then
' po(1).total_v = 4
'   po(1).v(0) = Dpolygon4(area_of_element(i%).data(0).element.no).data(0).poi(0)
'    po(1).v(1) = Dpolygon4(area_of_element(i%).data(0).element.no).data(0).poi(1)
'     po(1).v(2) = Dpolygon4(area_of_element(i%).data(0).element.no).data(0).poi(2)
'      po(1).v(3) = Dpolygon4(area_of_element(i%).data(0).element.no).data(0).poi(3)
'   ty = combine_two_polygon(po(0), po(1), po(2), po(3), po(4), po(5))
'  If ty = 1 Then
'   tv$ = add_string(Dpolygon4(area_of_element(i%).data(0).element.no).data(0).area_value, _
'         area_of_element(no%).data(0).value, True, False)
'  ElseIf ty = -1 Then
'   tv$ = minus_string(area_of_element(no%).data(0).value, _
'        Dpolygon4(area_of_element(i%).data(0).element.no).data(0).area_value, True, False)
'  ElseIf ty = -2 Then
'   tv$ = minus_string(Dpolygon4(area_of_element(i%).data(0).element.no).data(0).area_value, _
'        area_of_element(no%).data(0).value, True, False)
'  Else
'GoTo set_area_of_element_mark2
'  End If
'  temp_record.record_data.data0.condition_data.condition_no = 2
'   temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
'    temp_record.record_data.data0.condition_data.condition(2).ty = area_of_element_
'     temp_record.record_data.data0.condition_data.condition(1).no = no%
'      temp_record.record_data.data0.condition_data.condition(2).no = i%
'  If po(2).total_v = 3 Then
'   set_area_of_triangle = _
'    set_area_of_element(triangle_, triangle_number(po(2).v(0), _
'     po(2).v(1), po(2).v(2), 0, 0, 0, 0, 0, 0, 0), _
'      tv$, 0, temp_record)
'      If set_area_of_triangle > 1 Then
'       Exit Function
'      End If
'   ElseIf po(2).total_v = 4 Then
'   set_area_of_triangle = _
'    set_area_of_polygon(po(2).v(0), _
'    po(2).v(1), po(2).v(2), po(2).v(3), tv$, temp_record, _
'         0, no_reduce)
'      If set_area_of_triangle > 1 Then
'       Exit Function
'      End If
'   End If
'End If
'set_area_of_element_mark2:
'Next i%
For i% = 1 To last_conditions.last_cond(1).total_equal_triangle_no
 temp_record.record_data.data0.condition_data.condition_no = 2
  temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
   temp_record.record_data.data0.condition_data.condition(2).ty = total_equal_triangle_
    temp_record.record_data.data0.condition_data.condition(1).no = no%
     temp_record.record_data.data0.condition_data.condition(2).no = i%
 If area_of_element(no%).data(0).element.no = _
     Dtotal_equal_triangle(i%).data(0).triangle(0) And _
       area_of_element(no%).data(0).element.ty = triangle_ Then
   set_area_of_triangle = _
   set_area_of_element(triangle_, Dtotal_equal_triangle(i%).data(0).triangle(1), _
     area_of_element(no%).data(0).value, 0, temp_record)
  If set_area_of_triangle > 1 Then
   Exit Function
  End If
 ElseIf area_of_element(no%).data(0).element.no = _
   Dtotal_equal_triangle(i%).data(0).triangle(1) And _
      area_of_element(no%).data(0).element.ty = triangle_ Then
    set_area_of_triangle = _
     set_area_of_element(triangle_, Dtotal_equal_triangle(i%).data(0).triangle(0), _
      area_of_element(no%).data(0).value, 0, temp_record)
  If set_area_of_triangle > 1 Then
   Exit Function
  End If
 End If
Next i%
If th_chose(111).chose = 1 Then
temp_record.record_data.data0.theorem_no = 111
For i% = 1 To last_conditions.last_cond(1).similar_triangle_no
 If area_of_element(no%).data(0).element.no = _
     Dsimilar_triangle(i%).data(0).triangle(0) And _
       area_of_element(no%).data(0).element.ty = triangle_ Then
  temp_record.record_data.data0.condition_data.condition_no = 0
  If read_ratio_of_similar_triangle(i%, r$, 0, 0, 0, 0, 0, 0, temp_record.record_data) Then
   Call add_conditions_to_record(area_of_element_, no%, 0, 0, temp_record.record_data.data0.condition_data)
   Call add_conditions_to_record(similar_triangle_, i%, 0, 0, temp_record.record_data.data0.condition_data)
  set_area_of_triangle = _
   set_area_of_element(triangle_, Dsimilar_triangle(i%).data(0).triangle(1), _
    divide_string(area_of_element(no%).data(0).value, time_string(r$, r$, False, False), True, False), _
     0, temp_record)
  If set_area_of_triangle > 1 Then
   Exit Function
  End If
  End If
 ElseIf area_of_element(no%).data(0).element.no = _
         Dsimilar_triangle(i%).data(0).triangle(1) And _
          area_of_element(no%).data(0).element.ty = triangle_ Then
  temp_record.record_data.data0.condition_data.condition_no = 0
  If read_ratio_of_similar_triangle(i%, r$, 0, 0, 0, 0, 0, 0, temp_record.record_data) Then
   Call add_conditions_to_record(area_of_element_, no%, 0, 0, temp_record.record_data.data0.condition_data)
   Call add_conditions_to_record(similar_triangle_, i%, 0, 0, temp_record.record_data.data0.condition_data)
  set_area_of_triangle = _
   set_area_of_element(triangle_, Dsimilar_triangle(i%).data(0).triangle(0), _
    time_string(area_of_element(no%).data(0).value, time_string(r$, r$, False, False), True, False), _
      0, temp_record)
  If set_area_of_triangle > 1 Then
   Exit Function
  End If
  End If
 End If
Next i%
End If
If th_chose(1).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 1
 For i% = 1 To last_conditions.last_cond(1).area_relation_no
 If compare_two_condition_type(Darea_relation(i%).data(0).area_element(0), _
         area_of_element(no%).data(0).element) = 0 Then
   temp_record.record_data.data0.condition_data.condition(2).ty = area_relation_
   temp_record.record_data.data0.condition_data.condition(2).no = i%
   temp_record.record_data.data0.condition_data.condition_no = 2
   set_area_of_triangle = _
    set_area_of_element(Darea_relation(i%).data(0).area_element(1).ty, _
      Darea_relation(i%).data(0).area_element(1).no, _
     divide_string(area_of_element(no%).data(0).value, Darea_relation(i%).data(0).value, True, False), _
       0, temp_record)
     If set_area_of_triangle > 1 Then
      Exit Function
     End If
  ElseIf compare_two_condition_type(Darea_relation(i%).data(0).area_element(1), _
            area_of_element(no%).data(0).element) = 0 Then
   temp_record.record_data.data0.condition_data.condition(2).ty = area_relation_
   temp_record.record_data.data0.condition_data.condition(2).no = i%
   temp_record.record_data.data0.condition_data.condition_no = 2
   set_area_of_triangle = _
    set_area_of_element(Darea_relation(i%).data(0).area_element(0).ty, _
                             Darea_relation(i%).data(0).area_element(0).no, _
    time_string(Darea_relation(i%).data(0).value, area_of_element(no%).data(0).value, True, False), _
          0, temp_record)
     If set_area_of_triangle > 1 Then
      Exit Function
     End If
    End If
 Next i%
End If
End If
 For i% = 1 To last_conditions.last_cond(1).paral_no
  For j% = 0 To 1
  For k% = 0 To 2
   If triangle(area_of_element(no%).data(0).element.no).data(0).line_no(k%) = Dparal(i%).data(0).data0.line_no(j%) Then
    '三角形的一边在直线上
       Call is_point_in_line3(triangle(area_of_element(no%).data(0).element.no).data(0).poi((k% + 1) Mod 3), _
         m_lin(Dparal(i%).data(0).data0.line_no(j%)).data(0).data0, t_n(0))
       Call is_point_in_line3(triangle(area_of_element(no%).data(0).element.no).data(0).poi((k% + 2) Mod 3), _
         m_lin(Dparal(i%).data(0).data0.line_no(j%)).data(0).data0, t_n(1))
         If t_n(0) > t_n(1) Then
          Call exchange_two_integer(t_n(0), t_n(1))
         End If
    '三角形的一个顶点在另一直线上
    If is_point_in_line3(triangle(area_of_element(no%).data(0).element.no).data(0).poi(k%), _
            m_lin(Dparal(i%).data(0).data0.line_no((j% + 1) Mod 2)).data(0).data0, 0) Then
       '设置三角形的另两边
       tl(0) = triangle(area_of_element(no%).data(0).element.no).data(0).line_no((k% + 1) Mod 2)
       tl(1) = triangle(area_of_element(no%).data(0).element.no).data(0).line_no((k% + 2) Mod 2)
     For l% = t_n(0) + 1 To t_n(1) - 1
      For m% = 1 To m_lin(Dparal(i%).data(0).data0.line_no((j% + 1) Mod 2)).data(0).data0.in_point(0)
       '在平行线上各取一点
       If m_lin(Dparal(i%).data(0).data0.line_no((j% + 1) Mod 2)).data(0).data0.in_point(m%) <> _
            triangle(area_of_element(no%).data(0).element.no).data(0).poi(k%) Then
            tl(2) = line_number0( _
               m_lin(Dparal(i%).data(0).data0.line_no((j% + 1) Mod 2)).data(0).data0.in_point(m%), _
                m_lin(Dparal(i%).data(0).data0.line_no(j%)).data(0).data0.in_point(l%), 0, 0)
         temp_record.record_data.data0.condition_data.condition_no = 3
         temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
         temp_record.record_data.data0.condition_data.condition(1).no = no%
         temp_record.record_data.data0.condition_data.condition(2).ty = paral_
         temp_record.record_data.data0.condition_data.condition(2).no = i%
         '选取的直线与三角形另一边平行
         If is_dparal(tl(0), tl(2), tn%, -1000, 0, 0, 0, 0) Then
         temp_record.record_data.data0.condition_data.condition(3).ty = paral_
         temp_record.record_data.data0.condition_data.condition(3).no = tn%
         tn% = 0
         '设置梯形
         set_area_of_triangle = set_area_of_polygon( _
            triangle(area_of_element(no%).data(0).element.no).data(0).poi(k%), _
             m_lin(Dparal(i%).data(0).data0.line_no((j% + 1) Mod 2)).data(0).data0.in_point(m%), _
              triangle(area_of_element(no%).data(0).element.no).data(0).poi((k% + 1) Mod 3), _
               m_lin(Dparal(i%).data(0).data0.line_no(j%)).data(0).data0.in_point(l%), _
                area_of_element(no%).data(0).value, temp_record, tn%, 0)
          If set_area_of_triangle > 1 Then
           Exit Function
          End If
         ElseIf is_dparal(tl(1), tl(2), tn%, -1000, 0, 0, 0, 0) Then
         temp_record.record_data.data0.condition_data.condition(3).ty = paral_
         temp_record.record_data.data0.condition_data.condition(3).no = tn%
         tn% = 0
         set_area_of_triangle = set_area_of_polygon( _
            triangle(area_of_element(no%).data(0).element.no).data(0).poi(k%), _
             m_lin(Dparal(i%).data(0).data0.line_no((j% + 1) Mod 2)).data(0).data0.in_point(m%), _
              triangle(area_of_element(no%).data(0).element.no).data(0).poi((k% + 2) Mod 3), _
               m_lin(Dparal(i%).data(0).data0.line_no(j%)).data(0).data0.in_point(l%), _
                area_of_element(no%).data(0).value, temp_record, tn%, 0)
          If set_area_of_triangle > 1 Then
           Exit Function
          End If
        End If
       End If
      Next m%
     Next l%
    End If
   End If
  Next k%
  Next j%
 Next i%
Exit Function
set_area_of_element_error:
set_area_of_triangle = 0
If set_new_data Then
 last_conditions.last_cond(1).area_of_element_no = temp_no%
For i% = 1 To temp_no%
area_of_element(i%).data(0).record.data1.index = area_of_element(i%).record_.index
Next i%
End If
End Function

Public Function set_area_of_polygon0(ByVal poly4_no%, _
         value As String, re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
Dim ts$
Dim i%, temp_no%
Dim level As Byte
Dim set_new_data As Boolean
Dim temp_record As total_record_type
Dim c_data As condition_data_type
Dim area_ele As area_of_element_data_type
'On Error GoTo set_area_of_polygon0_error
area_ele.element.no = poly4_no%
area_ele.element.ty = polygon_
If InStr(1, value, "F", 0) > 0 Then
 Exit Function
ElseIf search_for_area_element(area_ele, 1, no%, 0) Then
 Exit Function
End If
Dpolygon4(poly4_no%).data(0).area_value = value
If no_reduce = 255 Or using_area_th = 0 And re.record_data.data0.condition_data.condition(1).no > 0 Then
 Exit Function
 ElseIf th_chose(156).chose = 0 And _
     th_chose(155).chose = 0 And _
      th_chose(2).chose = 0 Then
   Exit Function
End If
temp_record.record_data = re.record_data
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
temp_no% = last_conditions.last_cond(1).area_of_element_no
For i% = 1 To temp_no%
area_of_element(i%).record_.index = area_of_element(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).area_of_element_no Mod 10 = 0 Then
ReDim Preserve area_of_element(last_conditions.last_cond(1).area_of_element_no + 10) As area_of_element_type
End If
last_conditions.last_cond(1).area_of_element_no = last_conditions.last_cond(1).area_of_element_no + 1
set_new_data = True
'area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0) = dpolygon4_data_0
area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).element.no = poly4_no%
area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).element.ty = polygon_
area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).value = value
area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).value_ = value
If Dpolygon4(poly4_no%).data(0).condition.no > 0 Then
Call add_conditions_to_record(Dpolygon4(poly4_no%).data(0).condition.ty, _
                               Dpolygon4(poly4_no%).data(0).condition.no, _
                                0, 0, temp_record.record_data.data0.condition_data)
End If
area_of_element(last_conditions.last_cond(1).area_of_element_no).data(0).record = temp_record.record_data
area_of_element(last_conditions.last_cond(1).area_of_element_no).record_ = re.record_
area_of_element(last_conditions.last_cond(1).area_of_element_no).record_.no_reduce = 0
'area_of_polygon(last_conditions.last_cond(1).area_of_polygon_no).data(0).area_value = value
For i% = last_conditions.last_cond(1).area_of_element_no To no% + 2 Step -1
area_of_element(i%).data(0).record.data1.index.i(0) = _
 area_of_element(i% - 1).data(0).record.data1.index.i(0)
Next i%
area_of_element(no% + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).area_of_element_no
 no% = last_conditions.last_cond(1).area_of_element_no
If last_conditions_for_aid_no > 0 Then
 If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
  If Dpolygon4(poly4_no%).data(0).poi(0) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      Dpolygon4(poly4_no%).data(0).poi(1) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       Dpolygon4(poly4_no%).data(0).poi(2) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        Dpolygon4(poly4_no%).data(0).poi(3) <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
  last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
  End If
 End If
End If
ts$ = LoadResString_(595, "\\1\\" + LoadResString_(1800, "\\1\\" + _
           m_poi(Dpolygon4(poly4_no%).data(0).poi(0)).data(0).data0.name + _
            m_poi(Dpolygon4(poly4_no%).data(0).poi(1)).data(0).data0.name + _
             m_poi(Dpolygon4(poly4_no%).data(0).poi(2)).data(0).data0.name + _
              m_poi(Dpolygon4(poly4_no%).data(0).poi(3)).data(0).data0.name) + _
               "\\2\\=" + display_string_(value, 0))
set_area_of_polygon0 = set_prove_proccess(ts$, area_of_element_, no%, area_of_element(no%).data(0).record.display_string)
For i% = 1 To last_conditions.last_cond(1).tixing_no
   If Dtixing(i%).data(0).poly4_no = poly4_no% Then
      Dtixing(i%).data(0).area_value_no = last_conditions.last_cond(1).area_of_element_no
   End If
Next i%
 temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
 temp_record.record_data.data0.condition_data.condition(1).no = no%
If Dpolygon4(poly4_no%).data(0).ty = long_squre_ Then
  set_area_of_polygon0 = set_item0(Dpolygon4(poly4_no%).data(0).poi(0), _
      Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(1), _
        Dpolygon4(poly4_no%).data(0).poi(2), "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
         value, "1", 0, temp_record.record_data.data0.condition_data, -1, 0, _
           0, 0, c_data, False)
   If set_area_of_polygon0 > 1 Then
       Exit Function
   End If
  set_area_of_polygon0 = set_item0(Dpolygon4(poly4_no%).data(0).poi(0), _
      Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(0), _
        Dpolygon4(poly4_no%).data(0).poi(3), "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
         value, "1", 0, temp_record.record_data.data0.condition_data, -1, 0, _
           0, 0, c_data, False)
   If set_area_of_polygon0 > 1 Then
       Exit Function
   End If
  set_area_of_polygon0 = set_item0(Dpolygon4(poly4_no%).data(0).poi(2), _
      Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(1), _
        Dpolygon4(poly4_no%).data(0).poi(2), "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
         value, "1", 0, temp_record.record_data.data0.condition_data, -1, 0, _
           0, 0, c_data, False)
   If set_area_of_polygon0 > 1 Then
       Exit Function
   End If
  set_area_of_polygon0 = set_item0(Dpolygon4(poly4_no%).data(0).poi(2), _
      Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(0), _
        Dpolygon4(poly4_no%).data(0).poi(3), "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
         value, "1", 0, temp_record.record_data.data0.condition_data, -1, 0, _
           0, 0, c_data, False)
   If set_area_of_polygon0 > 1 Then
       Exit Function
   End If
ElseIf Dpolygon4(poly4_no%).data(0).ty = Squre Then
  value = sqr_string(value, True, False)
   set_area_of_polygon0 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(0), _
       Dpolygon4(poly4_no%).data(0).poi(1), value, 0, 0, 0, temp_record, 0, 0, False)
   If set_area_of_polygon0 > 1 Then
       Exit Function
   End If
   set_area_of_polygon0 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(1), _
       Dpolygon4(poly4_no%).data(0).poi(2), value, 0, 0, 0, temp_record, 0, 0, False)
   If set_area_of_polygon0 > 1 Then
       Exit Function
   End If
   set_area_of_polygon0 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(2), _
       Dpolygon4(poly4_no%).data(0).poi(3), value, 0, 0, 0, temp_record, 0, 0, False)
   If set_area_of_polygon0 > 1 Then
       Exit Function
   End If
   set_area_of_polygon0 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(0), _
       Dpolygon4(poly4_no%).data(0).poi(3), value, 0, 0, 0, temp_record, 0, 0, False)
   If set_area_of_polygon0 > 1 Then
       Exit Function
   End If
ElseIf Dpolygon4(poly4_no%).data(0).ty = rhombus_ Then
  set_area_of_polygon0 = set_item0(Dpolygon4(poly4_no%).data(0).poi(0), _
      Dpolygon4(poly4_no%).data(0).poi(2), Dpolygon4(poly4_no%).data(0).poi(1), _
        Dpolygon4(poly4_no%).data(0).poi(3), "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
         divide_string(value, "2", True, False), "1", 0, temp_record.record_data.data0.condition_data, -1, 0, _
           0, 0, c_data, False)
   If set_area_of_polygon0 > 1 Then
       Exit Function
   End If
End If
Exit Function
set_area_of_polygon0_error:
set_area_of_polygon0 = 0
If set_new_data Then
 last_conditions.last_cond(1).area_of_element_no = temp_no%
For i% = 1 To temp_no%
area_of_element(i%).data(0).record.data1.index = area_of_element(i%).record_.index
Next i%
End If
End Function

Public Function set_sides_length_of_triangle(ByVal tri As Integer, _
         v As String, no%, re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim ts$
Dim i%, n_%, temp_no%
Dim set_new_data As Boolean
If no_reduce = 255 Then
 Exit Function
End If
'On Error GoTo set_sides_length_of_triangle_error
temp_no% = last_conditions.last_cond(1).sides_length_of_triangle_no
For i% = 1 To temp_no%
Sides_length_of_triangle(i%).record_.index = _
  Sides_length_of_triangle(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).sides_length_of_triangle_no Mod 10 = 0 Then
ReDim Preserve Sides_length_of_triangle( _
     last_conditions.last_cond(1).sides_length_of_triangle_no + 10) As sides_length_of_triangle_type
End If
last_conditions.last_cond(1).sides_length_of_triangle_no = last_conditions.last_cond(1).sides_length_of_triangle_no + 1
set_new_data = True
set_new_data = True
Sides_length_of_triangle(last_conditions.last_cond(1).sides_length_of_triangle_no).data(0) = sides_length_of_triangle_data_0
 Sides_length_of_triangle(last_conditions.last_cond(1).sides_length_of_triangle_no).data(0).triangle = tri
  Sides_length_of_triangle(last_conditions.last_cond(1).sides_length_of_triangle_no).data(0).value = v
   Sides_length_of_triangle(last_conditions.last_cond(1).sides_length_of_triangle_no).data(0).record = re.record_data
    Sides_length_of_triangle(last_conditions.last_cond(1).sides_length_of_triangle_no).record_ = re.record_
      Sides_length_of_triangle(last_conditions.last_cond(1).sides_length_of_triangle_no).record_.no_reduce = 0
For i% = last_conditions.last_cond(1).sides_length_of_triangle_no To n_% + 2 Step -1
Sides_length_of_triangle(i%).data(0).record.data1.index.i(0) = _
 Sides_length_of_triangle(i% - 1).data(0).record.data1.index.i(0)
Next i%
Sides_length_of_triangle(n_% + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).sides_length_of_triangle_no
 no% = last_conditions.last_cond(1).sides_length_of_triangle_no
If last_conditions_for_aid_no > 0 Then
  If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
   If tri <= last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).triangle_no Then
    last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
   End If
  End If
   End If
   ts$ = LoadResString_from_inpcond(6, set_triangle_display_string(tri, 1, no_display, False, 1, 0) + _
                                     "\\1\\" + display_string_(v, 0))
          set_sides_length_of_triangle = set_prove_proccess(ts$, _
           sides_length_of_triangle_, no%, Sides_length_of_triangle(no%).data(0).record.display_string)
If set_sides_length_of_triangle > 1 Then
Exit Function
End If
set_sides_length_of_triangle_error:
 set_sides_length_of_triangle = 0
If set_new_data Then
 For i% = 1 To temp_no%
Sides_length_of_triangle(i%).data(0) = _
  Sides_length_of_triangle(i%).data(1)
 Next i%
End If
End Function
Public Function set_four_sides_polygon_for_mid_paral(ByVal p1%, _
      ByVal p2%, ByVal p3%, ByVal p4%, re As total_record_type, _
       ByVal no_reduce As Byte) As Byte
Dim tm(1) As Integer
Dim i%, l%, tp%, n%
Dim temp_record As total_record_type
'On Error GoTo set_four_sides_polygon_for_mid_paral_error
 Call get_midpoint(p1%, 0, p4%, 0, 0, 0, 0, tm(0))
  Call get_midpoint(p2%, 0, p3%, 0, 0, 0, 0, tm(1))
If tm(0) > 0 And tm(1) > 0 Then
 If th_chose(98).chose = 1 Then
 temp_record = re
  temp_record.record_data.data0.theorem_no = 98
 Call add_conditions_to_record(midpoint_, tm(0), tm(1), 0, temp_record.record_data.data0.condition_data)
set_four_sides_polygon_for_mid_paral = _
  set_mid_position_line(p1%, p2%, p3%, p4%, Dmid_point(tm(0)).data(0).data0.poi(1), _
    Dmid_point(tm(1)).data(0).data0.poi(1), 0, 0, temp_record, 0, no_reduce)
      Exit Function
End If
End If
 Call get_midpoint(p1%, 0, p3%, 0, 0, 0, 0, tm(0))
  Call get_midpoint(p2%, 0, p4%, 0, 0, 0, 0, tm(1))
If tm(0) > 0 And tm(1) > 0 Then
 If th_chose(98).chose = 1 Then
 temp_record = re
  temp_record.record_data.data0.theorem_no = 98
 Call add_conditions_to_record(midpoint_, tm(0), tm(1), 0, temp_record.record_data.data0.condition_data)
set_four_sides_polygon_for_mid_paral = _
  set_mid_position_line(p1%, p2%, p3%, p4%, 0, 0, Dmid_point(tm(0)).data(0).data0.poi(1), _
    Dmid_point(tm(1)).data(0).data0.poi(1), temp_record, 0, no_reduce)
      Exit Function
End If
End If
If th_chose(95).chose = 1 Then
 temp_record = re
  temp_record.record_data.data0.theorem_no = 95
   For n% = 1 + last_conditions.last_cond(0).paral_no To last_conditions.last_cond(1).paral_no
    i% = Dparal(n%).data(0).data0.record.data1.index.i(0)
    If Dparal(i%).data(0).data0.line_no(0) = line_number0(p1%, p2%, 0, 0) Or _
         Dparal(i%).data(0).data0.line_no(0) = line_number0(p3%, p4%, 0, 0) Then
     l% = Dparal(i%).data(0).data0.line_no(1)
    ElseIf Dparal(i%).data(0).data0.line_no(1) = line_number0(p1%, p2%, 0, 0) Or _
         Dparal(i%).data(0).data0.line_no(1) = line_number0(p3%, p4%, 0, 0) Then
     l% = Dparal(i%).data(0).data0.line_no(0)
    Else
    GoTo set_four_sides_po_mark1
    End If
     Call add_conditions_to_record(paral_, i%, 0, 0, re.record_data.data0.condition_data)
     If tm(0) > 0 And tm(1) = 0 Then
     Call add_conditions_to_record(midpoint_, tm(0), 0, 0, temp_record.record_data.data0.condition_data)
     If is_point_in_line3(Dmid_point(tm(0)).data(0).data0.poi(1), m_lin(l%).data(0).data0, 0) Then
      tp% = is_line_line_intersect(l%, _
             line_number0(p2%, p3%, 0, 0), 0, 0, False)
      If tp% > 0 Then
       set_four_sides_polygon_for_mid_paral = set_mid_point(p2%, tp%, p3%, _
        0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce)
          Exit Function
        End If
     End If
     ElseIf tm(0) = 0 And tm(1) > 0 Then 'And TH_CHOSE(95).chose = 1 Then
      're.data(0).data0.theorem_no = 95
     Call add_conditions_to_record(midpoint_, tm(1), 0, 0, temp_record.record_data.data0.condition_data)
     If is_point_in_line3(Dmid_point(tm(1)).data(0).data0.poi(1), m_lin(l%).data(0).data0, 0) Then
      tp% = is_line_line_intersect(l%, _
                    line_number0(p1%, p4%, 0, 0), 0, 0, False)
              If tp% > 0 Then
           set_four_sides_polygon_for_mid_paral = set_mid_point(p1%, tp%, p4%, _
            0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce)
          Exit Function
       End If

     End If
     
     End If
set_four_sides_po_mark1:
   Next n%
End If
Exit Function
set_four_sides_polygon_for_mid_paral_error:
set_four_sides_polygon_for_mid_paral = 0
End Function

Public Function set_eangle_from_paral_verti(ByVal l1%, ByVal l2%, _
 ByVal l3%, ByVal l4%, re As total_record_type, cond_ty As Byte, _
    ByVal no_reduce As Byte) As Byte
'两角的对应边相互平行(垂直),两角相等或互补
Dim i%, j%, k%, l%
Dim A(1) As Integer
Dim tp(3) As Integer
Dim temp_record As total_record_type
'On Error GoTo set_eangle_from_paral_verti_error
If re.record_data.data0.condition_data.condition(1).ty = paral_ Then
 If l1% = l3% Or l1% = l4% Or l2% = l3% Or l2% = l4% Then '共线
   Exit Function
 ElseIf is_line_line_intersect(l1%, l2%, 0, 0, False) > 0 Then
   Exit Function
 ElseIf is_line_line_intersect(l3%, l4%, 0, 0, False) > 0 Then
   Exit Function
 End If
Else
 If l1% = l3% Then
    If is_line_line_intersect(l2%, l4%, 0, 0, False) > 0 Then
     Exit Function
    End If
 ElseIf l1% = l4% Then
    If is_line_line_intersect(l2%, l3%, 0, 0, False) > 0 Then
     Exit Function
    End If
 ElseIf l2% = l3% Then
    If is_line_line_intersect(l1%, l4%, 0, 0, False) > 0 Then
     Exit Function
    End If
 ElseIf l2% = l4% Then
    If is_line_line_intersect(l1%, l3%, 0, 0, False) > 0 Then
     Exit Function
    End If
 End If
End If
temp_record = re
If (th_chose(14).chose = 1 And cond_ty = paral_) Or _
     (th_chose(17).chose = 1 And cond_ty = verti_) Then
If cond_ty = paral_ Then
 temp_record.record_data.data0.theorem_no = 14
Else
 temp_record.record_data.data0.theorem_no = 17
End If
tp(0) = is_line_line_intersect(l1%, l3%, 0, 0, False)
tp(1) = is_line_line_intersect(l2%, l4%, 0, 0, False)
tp(2) = is_line_line_intersect(l1%, l4%, 0, 0, False)
tp(3) = is_line_line_intersect(l2%, l3%, 0, 0, False)
If tp(0) > 0 And tp(1) > 0 Then
For i% = 0 To 1
For j% = 0 To 1
For k% = 0 To 1
For l% = 0 To 1
A(0) = angle_number(m_lin(l1%).data(0).data0.poi(i%), tp(0), _
     m_lin(l3%).data(0).data0.poi(j%), 0, 0)
A(1) = angle_number(m_lin(l2%).data(0).data0.poi(k%), tp(1), _
     m_lin(l4%).data(0).data0.poi(l%), 0, 0)
If ((A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0)) _
     And ((i% = k% And j% = k%) Or (Abs(i% - k%) = 1 And Abs(j% - l%) = 1)) Then
 set_eangle_from_paral_verti = _
    set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "-1", "0", "0", _
      0, temp_record, 0, 0, 0, 5, 0, 0, False)
  If set_eangle_from_paral_verti > 1 Then
   Exit Function
  End If
ElseIf ((A(0) > 0 And A(1) < 0) Or (A(0) > 0 And A(1) < 0)) And _
        ((Abs(i% - k%) = 1 And j% = k%) Or (i% = k% And Abs(j% - k%) = 1)) Then
  set_eangle_from_paral_verti = _
    set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "1", "0", _
     "180", 0, temp_record, 0, 0, 0, 5, 0, 0, False)
  If set_eangle_from_paral_verti > 1 Then
   Exit Function
  End If
End If
Next l%
Next k%
Next j%
Next i%
End If
If tp(2) > 0 And tp(3) > 0 Then
For i% = 0 To 1
For j% = 0 To 1
For k% = 0 To 1
For l% = 0 To 1
A(0) = angle_number(m_lin(l1%).data(0).data0.poi(i%), tp(2), _
     m_lin(l4%).data(0).data0.poi(j%), 0, 0)
A(1) = angle_number(m_lin(l2%).data(0).data0.poi(k%), tp(3), _
     m_lin(l3%).data(0).data0.poi(l%), 0, 0)
If ((A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0)) Then
  set_eangle_from_paral_verti = set_three_angle_value(Abs(A(0)), Abs(A(1)), _
   0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 5, 0, 0, False)
  If set_eangle_from_paral_verti > 1 Then
   Exit Function
  End If
ElseIf ((A(0) > 0 And A(1) < 0) Or (A(0) > 0 And A(1) < 0)) Then
  set_eangle_from_paral_verti = _
   set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, "1", "1", "0", _
     "180", 0, temp_record, 0, 0, 0, 5, 0, 0, False)
  If set_eangle_from_paral_verti > 1 Then
   Exit Function
  End If
End If
Next l%
Next k%
Next j%
Next i%
End If
End If
Exit Function
set_eangle_from_paral_verti_error:
set_eangle_from_paral_verti = 0
End Function




Public Function set_simple_polygon_from_eline(ByVal no_reduce As Byte) As Byte
Dim i%
Dim dn(2) As Integer
Dim tp(3) As Integer
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
'Dim po As polygon
temp_record.record_data.data0.condition_data.condition_no = 0
For i% = 1 To last_conditions.last_cond(1).tixing_no
 'If Dtixing(i%).record_.no_reduce < 2 Then
temp_record.record_data.data0.condition_data.condition_no = 0
temp_record1.record_data.data0.condition_data.condition_no = 0
tp(0) = Dtixing(i%).data(0).poi(0)
 tp(1) = Dtixing(i%).data(0).poi(1)
  tp(2) = Dtixing(i%).data(0).poi(2)
   tp(3) = Dtixing(i%).data(0).poi(3)
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(tp(3), tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, _
      0, 0, eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
  temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.condition_data.condition(1).ty = tixing_
    temp_record.record_data.data0.condition_data.condition(1).no = i%
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
 End If
record_0.data0.condition_data.condition_no = 0 'record0
 If is_equal_dline(tp(3), tp(1), tp(0), tp(2), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, _
       0, 0, eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
  temp_record1.record_data.data0.condition_data.condition_no = 1
   temp_record1.record_data.data0.condition_data.condition(1).ty = tixing_
    temp_record1.record_data.data0.condition_data.condition(1).no = i%
    Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
 End If
 Call set_level(temp_record.record_data.data0.condition_data)
 Call set_level(temp_record1.record_data.data0.condition_data)
  If temp_record.record_data.data0.condition_data.condition_no = 0 And _
       temp_record1.record_data.data0.condition_data.condition_no > 0 Then
   temp_record = temp_record1
  ElseIf temp_record.record_data.data0.condition_data.condition_no > 0 And _
       temp_record1.record_data.data0.condition_data.condition_no > 0 Then
       If temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
        temp_record = temp_record1
       End If
   ElseIf temp_record.record_data.data0.condition_data.condition_no = 0 And temp_record1.record_data.data0.condition_data.condition_no = 0 Then
    GoTo set_simple_polygon_from_eline_mark0
   End If
  If Sgn(P_diffrence(m_poi(tp(0)).data(0).data0.coordinate, m_poi(tp(3)).data(0).data0.coordinate, m_poi(tp(2)).data(0).data0.coordinate)) * _
      Sgn(P_diffrence(m_poi(tp(1)).data(0).data0.coordinate, m_poi(tp(2)).data(0).data0.coordinate, m_poi(tp(3)).data(0).data0.coordinate)) > 0 Then
       temp_record.record_data.data0.theorem_no = 90
     set_simple_polygon_from_eline = set_tixing(tp(0), tp(1), tp(2), tp(3), equal_side_tixing_, _
         temp_record, 0, no_reduce)
    Call set_level_(Dtixing(i%).record_.no_reduce, 4)
     If set_simple_polygon_from_eline > 1 Then
      Exit Function
    End If
   End If
   If Dtixing(i%).record_.no_reduce < 2 Then
   record_0.data0.condition_data.condition_no = 0 ' record0
   If is_equal_dline(tp(0), tp(1), tp(2), tp(3), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
        eline_data0, dn(1), dn(2), cond_type, "", _
      record_0.data0.condition_data) Then
     temp_record.record_data = Dtixing(i%).data(0).record
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
    set_simple_polygon_from_eline = _
        set_parallelogram(tp(0), _
       tp(1), tp(2), tp(3), temp_record, 0, no_reduce)
        Call set_level_(Dtixing(i%).record_.no_reduce, 4)
   If set_simple_polygon_from_eline > 1 Then
   Exit Function
   End If
    
 End If

   End If
'End If

set_simple_polygon_from_eline_mark0:
Next i%
'******************************************
temp_record.record_data.data0.condition_data.condition_no = 0
For i% = 1 To last_conditions.last_cond(1).long_squre_no
 ' If Dlong_squre(i%).record_.no_reduce < 2 Then
 tp(0) = Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(0)
 tp(1) = Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(1)
 tp(2) = Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(2)
 tp(3) = Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(3)
record_0.data0.condition_data.condition_no = 0 'record0
If is_equal_dline(tp(3), tp(0), tp(0), tp(1), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
      eline_data0, dn(1), dn(2), cond_type, "", _
  record_0.data0.condition_data) Then
  temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.condition_data.condition(1).ty = long_squre_
    temp_record.record_data.data0.condition_data.condition(1).no = i%
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
     Call set_level(temp_record.record_data.data0.condition_data)
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(tp(0), tp(1), tp(1), tp(2), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
       eline_data0, dn(1), dn(2), cond_type, "", _
  record_0.data0.condition_data) Then
    temp_record1.record_data.data0.condition_data.condition_no = 1
   temp_record1.record_data.data0.condition_data.condition(1).ty = long_squre_
    temp_record1.record_data.data0.condition_data.condition(1).no = i%
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
     Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(tp(1), tp(2), tp(2), tp(3), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
     eline_data0, dn(1), dn(2), cond_type, "", _
   record_0.data0.condition_data) Then
    temp_record1.record_data.data0.condition_data.condition_no = 1
   temp_record1.record_data.data0.condition_data.condition(1).ty = long_squre_
    temp_record1.record_data.data0.condition_data.condition(1).no = i%
  Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
End If
record_0.data0.condition_data.condition_no = 0 'record0
If is_equal_dline(tp(2), tp(3), tp(3), tp(0), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
      eline_data0, dn(1), dn(2), cond_type, "", _
  record_0.data0.condition_data) Then
    temp_record1.record_data.data0.condition_data.condition_no = 1
   temp_record1.record_data.data0.condition_data.condition(1).ty = long_squre_
    temp_record1.record_data.data0.condition_data.condition(1).no = i%
 Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
End If
If temp_record.record_data.data0.condition_data.condition_no > 0 Then
'po.total_v = 4
' po.v(0) = tp(0)
'  po.v(1) = tp(1)
'   po.v(2) = tp(2)
'    po.v(3) = tp(3)
set_simple_polygon_from_eline = set_squre(tp(0), tp(1), tp(2), tp(3), 0, _
            temp_record, 1, False)
 Call set_level_(Dlong_squre(i%).record_.no_reduce, 4)
 If set_simple_polygon_from_eline > 1 Then
  Exit Function
 End If
End If
'End If
Next i%
temp_record.record_data.data0.condition_data.condition_no = 0
For i% = 1 To last_conditions.last_cond(1).parallelogram_no
' If Dparallelogram(i%).record_.no_reduce < 2 Then
 tp(0) = Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(0)
 tp(1) = Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(1)
 tp(2) = Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(2)
 tp(3) = Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(3)
record_0.data0.condition_data.condition_no = 0 'record0
temp_record.record_data.data0.condition_data.condition_no = 0
If is_equal_dline(tp(3), tp(0), tp(0), tp(1), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
      eline_data0, dn(1), dn(2), cond_type, "", _
  record_0.data0.condition_data) Then
  temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.condition_data.condition(1).ty = parallelogram_
    temp_record.record_data.data0.condition_data.condition(1).no = i%
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
     Call set_level(temp_record.record_data.data0.condition_data)
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(tp(0), tp(1), tp(1), tp(2), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
      eline_data0, dn(1), dn(2), cond_type, "", _
       record_0.data0.condition_data) Then
  temp_record1.record_data.data0.condition_data.condition_no = 1
   temp_record1.record_data.data0.condition_data.condition(1).ty = parallelogram_
    temp_record1.record_data.data0.condition_data.condition(1).no = i%
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
     Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(tp(1), tp(2), tp(2), tp(3), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
      eline_data0, dn(1), dn(2), cond_type, "", _
  record_0.data0.condition_data) Then
  temp_record1.record_data.data0.condition_data.condition_no = 1
   temp_record1.record_data.data0.condition_data.condition(1).ty = parallelogram_
    temp_record1.record_data.data0.condition_data.condition(1).no = i%
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
 
End If
record_0.data0.condition_data.condition_no = 0 ' record0
If is_equal_dline(tp(2), tp(3), tp(3), tp(0), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
       eline_data0, dn(1), dn(2), cond_type, "", _
  record_0.data0.condition_data) Then
  temp_record1.record_data.data0.condition_data.condition_no = 1
   temp_record1.record_data.data0.condition_data.condition(1).ty = parallelogram_
    temp_record1.record_data.data0.condition_data.condition(1).no = i%
   Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
    Call set_level(temp_record1.record_data.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
           temp_record = temp_record1
      End If
End If
If temp_record.record_data.data0.condition_data.condition_no > 0 Then
set_simple_polygon_from_eline = _
   set_rhombus(tp(0), tp(1), tp(2), tp(3), _
  temp_record, 0, no_reduce)
   Call set_level_(Dparallelogram(i%).record_.no_reduce, 4)
End If
'End If
Next i%
Exit Function
set_eangle_from_para_verti_error:
End Function

Public Function set_simple_polygon_from_paral(ByVal no_reduce As Byte) As Byte
Dim i%, tn%
Dim temp_record As total_record_type
'On Error GoTo set_simple_polygon_from_paral_error
If th_chose(66).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 66
For i% = 1 To last_conditions.last_cond(1).tixing_no
 If Dtixing(i%).record_.no_reduce < 2 Then
 If is_dparal(line_number0(Dtixing(i%).data(0).poi(3), Dtixing(i%).data(0).poi(0), 0, 0), _
       line_number0(Dtixing(i%).data(0).poi(1), Dtixing(i%).data(0).poi(2), 0, 0), _
        tn%, -1000, 0, 0, 0, 0) Then
    temp_record.record_data = Dtixing(i%).data(0).record
     Call add_conditions_to_record(paral_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
      set_simple_polygon_from_paral = _
       set_parallelogram(Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1), _
         Dtixing(i%).data(0).poi(2), Dtixing(i%).data(0).poi(3), temp_record, 0, no_reduce)
          Call set_level_(Dtixing(i%).record_.no_reduce, 4)
   End If
   End If
Next i%
End If
Exit Function
set_simple_polygon_from_paral_error:
End Function

Public Function set_simple_polygon_from_right_angle(ByVal A%, _
       ByVal tn%, ByVal no_reduce As Byte) As Byte
Dim i%, tA%
Dim tp(3) As Integer
'Dim po As polygon
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
Dim re As record_data_type
'On Error GoTo set_simple_polygon_from_right_angle_error
For i% = 1 To last_conditions.last_cond(1).parallelogram_no
If Dparallelogram(i%).record_.no_reduce < 2 Then
temp_record.record_data.data0.condition_data.condition_no = 0
 temp_record1.data0.condition_data.condition_no = 0
tp(0) = Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(0)
tp(1) = Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(1)
tp(2) = Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(2)
tp(3) = Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(3)
re.data0.condition_data.condition_no = 1
 re.data0.condition_data.condition(1).ty = parallelogram_
  re.data0.condition_data.condition(1).no = i%
tA% = angle_number(tp(2), tp(3), tp(0), 0, 0)
If Abs(tA%) = A% Then
 temp_record.record_data = re
  Call set_level(temp_record.record_data.data0.condition_data)
  Call add_conditions_to_record(angle3_value_, _
   tn%, 0, 0, temp_record.record_data.data0.condition_data)
End If
tA% = angle_number(tp(3), tp(0), tp(1), 0, 0)
If Abs(tA%) = A% Then
 temp_record1 = re
  Call add_conditions_to_record(angle3_value_, _
   tn%, 0, 0, temp_record.record_data.data0.condition_data)
    Call set_level(temp_record1.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.data0.condition_data.level Then
           temp_record.record_data = temp_record1
      End If
End If
tA% = angle_number(tp(0), tp(1), tp(2), 0, 0)
If Abs(tA%) = A% Then
 temp_record1 = re
  Call add_conditions_to_record(angle3_value_, _
   tn%, 0, 0, temp_record1.data0.condition_data)
    Call set_level(temp_record1.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.data0.condition_data.level Then
           temp_record.record_data = temp_record1
      End If
    End If
tA% = angle_number(tp(1), tp(2), tp(3), 0, 0)
If Abs(tA%) = A% Then
 temp_record1 = re
  Call add_conditions_to_record(angle3_value_, _
   tn%, 0, 0, temp_record.record_data.data0.condition_data)
    Call set_level(temp_record1.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.data0.condition_data.level Then
           temp_record.record_data = temp_record1
      End If
 End If
If temp_record.record_data.data0.condition_data.condition_no > 0 Then
 set_simple_polygon_from_right_angle = set_long_squre( _
   tp(0), tp(1), tp(2), tp(3), temp_record, 0, no_reduce, 1, False)
       Call set_level_(Dparallelogram(i%).record_.no_reduce, 4)
  If set_simple_polygon_from_right_angle > 1 Then
   Exit Function
   End If
 End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).rhombus_no
 If rhombus(i%).record_.no_reduce < 2 Then
temp_record.record_data.data0.condition_data.condition_no = 0
 temp_record1.data0.condition_data.condition_no = 0
tp(0) = Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0)
tp(1) = Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1)
tp(2) = Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(2)
tp(3) = Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(3)
re.data0.condition_data.condition_no = 1
 re.data0.condition_data.condition(1).ty = rhombus_
  re.data0.condition_data.condition(1).no = i%
tA% = angle_number(tp(2), tp(3), tp(0), 0, 0)
If Abs(tA%) = A% Then
  Call set_level(temp_record.record_data.data0.condition_data)
  Call add_conditions_to_record(angle3_value_, _
   tn%, 0, 0, temp_record.record_data.data0.condition_data)
End If
tA% = angle_number(tp(3), tp(0), tp(1), 0, 0)
If Abs(tA%) = A% Then
 temp_record1 = re
  Call add_conditions_to_record(angle3_value_, _
   tn%, 0, 0, temp_record.record_data.data0.condition_data)
    Call set_level(temp_record1.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.data0.condition_data.level Then
           temp_record.record_data = temp_record1
      End If
End If
tA% = angle_number(tp(0), tp(1), tp(2), 0, 0)
If Abs(tA%) = A% Then
 temp_record1 = re
  Call add_conditions_to_record(angle3_value_, _
   tn%, 0, 0, temp_record1.data0.condition_data)
    Call set_level(temp_record1.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.data0.condition_data.level Then
           temp_record.record_data = temp_record1
      End If
End If
tA% = angle_number(tp(1), tp(2), tp(3), 0, 0)
If Abs(tA%) = A% Then
 temp_record1 = re
  Call add_conditions_to_record(angle3_value_, _
   tn%, 0, 0, temp_record.record_data.data0.condition_data)
    Call set_level(temp_record1.data0.condition_data)
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.data0.condition_data.level Then
           temp_record.record_data = temp_record1
      End If
End If
If temp_record.record_data.data0.condition_data.condition_no > 0 Then
' po.total_v = 4
 ' po.v(0) = tp(0)
  'po.v(1) = tp(1)
  'po.v(2) = tp(2)
  'po.v(3) = tp(3)
  
 set_simple_polygon_from_right_angle = _
    set_squre(tp(0), tp(1), tp(2), tp(3), 0, temp_record, 1, False)
     Call set_level_(rhombus(i%).record_.no_reduce, 4)
  If set_simple_polygon_from_right_angle > 1 Then
   Exit Function
   End If
 End If
 
End If
Next i%
Exit Function
set_simple_polygon_from_right_angle_error:
End Function

Public Function set_eline_with_common_point(ByVal p1%, ByVal p2%, ByVal p3%, _
   re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim i%, A%, tn%
Dim dn(2) As Integer
Dim po As polygon
Dim v$
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
A% = angle_number(p1%, p2%, p3%, 0, 0)
v$ = ""
If is_angle_value(Abs(A%), v$, "", tn%, temp_record1.data0.condition_data) Then
  If v$ = "60" Then
   temp_record = re
    Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
  Else
   A% = angle_number(p2%, p3%, p1%, 0, 0)
    v$ = ""
    If is_angle_value(Abs(A%), v$, "", tn%, temp_record1.data0.condition_data) Then
     If v$ = "60" Then
      temp_record = re
       Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
     Else
      A% = angle_number(p3%, p1%, p2%, 0, 0)
       v$ = ""
       If is_angle_value(Abs(A%), v$, "", tn%, temp_record1.data0.condition_data) Then
        If v$ = "60" Then
          temp_record = re
            Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
  End If
End If

     End If
End If

  End If
Else 'End If
End If
If temp_record.record_data.data0.condition_data.condition_no > 0 Then
po.total_v = 3
 po.v(0) = p1%
  po.v(1) = p2%
   po.v(2) = p3%
 set_eline_with_common_point = _
    set_Epolygon(po, temp_record, 0, no_reduce, 1, 0, False)
  If set_eline_with_common_point > 1 Then
   Exit Function
  End If
 End If
 temp_record.record_data.data0.condition_data.condition_no = 0
 temp_record1.data0.condition_data.condition_no = 0
 record_0.data0.condition_data.condition_no = 0 ' record0
 If is_equal_dline(p2%, p3%, p3%, p1%, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
        eline_data0, dn(1), dn(2), cond_type, "", _
      record_0.data0.condition_data) Then
 temp_record = re
 Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
 Call set_level(temp_record.record_data.data0.condition_data)
 End If
 record_0.data0.condition_data.condition_no = 0 ' record0
 If is_equal_dline(p2%, p1%, p3%, p1%, 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, _
       eline_data0, dn(1), dn(2), cond_type, "", _
      record_0.data0.condition_data) Then
 temp_record1 = re.record_data
 Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.data0.condition_data)
 Call set_level(temp_record1.data0.condition_data)
 If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
        temp_record.record_data.data0.condition_data.level > temp_record1.data0.condition_data.level Then
  temp_record.record_data = temp_record1
  End If
 End If
 If temp_record.record_data.data0.condition_data.condition_no > 0 Then
po.total_v = 3
 po.v(0) = p1%
  po.v(1) = p2%
   po.v(2) = p3%
 set_eline_with_common_point = _
     set_Epolygon(po, temp_record, 0, no_reduce, 1, 0, False)
  If set_eline_with_common_point > 1 Then
   Exit Function
  End If
 End If
End Function
Public Function set_area_of_polygon(ByVal p1%, ByVal p2%, _
  ByVal p3%, ByVal p4%, ByVal v$, _
   re As total_record_type, no%, ByVal no_reduce As Byte) As Byte
Dim i%, j%, k%, l%, m%, dn%
Dim tv As String
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
Dim ty As Integer
Dim tl(1) As Integer
Dim tp(3) As Integer
Dim po(2) As polygon
Dim level As Byte
Dim poly4_no%
Dim ty_ As Byte
If no_reduce = 255 Or InStr(1, v$, "F", 0) > 0 Or _
            using_area_th = 0 And run_statue > 1 Then '12.10
 Exit Function
End If
display_inform = 0
If no% > 0 And draw_or_prove = 1 Then
If area_of_element(no%).record_.no_reduce > 2 Then
 Exit Function
Else
GoTo set_area_of_polygon_mark0
End If
ElseIf no% = -1 Then
display_inform = 1
End If
'***************************************************************
temp_record.record_data = re.record_data
Call set_level(temp_record.record_data.data0.condition_data)
'**********************************************************
set_area_of_polygon = is_area_of_polygon(p1%, p2%, p3%, p4%, no%, v$, poly4_no%)
If set_area_of_polygon > 0 Then
 If set_area_of_polygon > 1 And finish_prove = 2 Then
     Exit Function
 End If
 If no% > 0 And run_type < 10 Then
 temp_record1 = re.record_data
 'Call add_conditions_to_record(area_of_polygon_, no%, 0, 0, _
              temp_record1.data0.condition_data)
set_area_of_polygon = set_string_value_(Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value, _
                       v$, area_of_element_, no%, temp_record1, no_reduce)
If set_area_of_polygon > 1 Then
 Exit Function
End If
   level = area_of_element(no%).data(0).record.data0.condition_data.level
 If set_prove_type(area_of_element_, no%, temp_record.record_data, _
      area_of_element(no%).data(0).record) And set_or_prove < 2 Then
   Call simple_record(area_of_element_, no%, area_of_element(no%).data(0).record.data0.condition_data.level, _
             level)
   If InStr(1, Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value, ".", 0) > 0 Then
   If InStr(1, v$, ".", 0) = 0 Then
    Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value = v$
   End If
   End If
     If no_reduce = 0 Then 'Or run_type <= 1 Then
       set_area_of_polygon = 0
      Exit Function
     Else
     no_reduce = 2
      GoTo set_area_of_polygon_mark0
     End If
 End If
 End If
   If set_or_prove < 2 Then
   If no_reduce = 0 Then
   no% = 0
  End If
      set_area_of_polygon = 0
    Exit Function
   Else
    If display_inform = 1 Then
     set_area_of_polygon = 0
    If conclusion_data(0).ty = area_of_element_ And conclusion_data(0).no(0) = no% Then
     prove_type = 0
    End If
     Call display_prove_inform(modify_wenti_no, display)
    Else
     Exit Function
    End If
    End If
  Exit Function
Else
 If draw_or_prove = 1 And display_inform = 1 Then
  prove_type = 0
     Call display_prove_inform(modify_wenti_no, display)
   Exit Function
 End If
End If
'设置新数据
'*******************************************
set_area_of_polygon = set_area_of_polygon0(poly4_no%, v$, re, no%, 0)
If set_area_of_polygon > 1 Then
    Exit Function
End If
If no_reduce = 0 Then
 Exit Function
End If
set_area_of_polygon_mark0:
If area_of_element(no%).record_.no_reduce = 0 Then
      area_of_element(no%).record_.no_reduce = 255
      Call set_level_(area_of_element(no%).record_.no_reduce, 1)
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
tp(0) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(0)
tp(1) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(1)
tp(2) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(2)
tp(3) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(3)
po(0).total_v = 4
 po(0).v(0) = tp(0)
  po(0).v(1) = tp(1)
 po(0).v(2) = tp(2)
  po(0).v(3) = tp(3)
 If Dpolygon4(area_of_element(no%).data(0).element.no).data(0).ty = tixing_ Then
  dn% = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).no
 ElseIf Dpolygon4(area_of_element(no%).data(0).element.no).data(0).ty = Squre Then
  dn% = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).no
 ElseIf Dpolygon4(area_of_element(no%).data(0).element.no).data(0).ty = long_squre_ Then
  dn% = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).no
 ElseIf Dpolygon4(area_of_element(no%).data(0).element.no).data(0).ty = rhombus_ Then
  dn% = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).no
 ElseIf Dpolygon4(area_of_element(no%).data(0).element.no).data(0).ty = parallelogram_ Then
  dn% = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).no
 'If is_parallelogram0(area_of_element(no%).data(0).element.no, dn%, -1000, ty_) Then
  temp_record.record_data.data0.condition_data.condition_no = 2
  temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
  temp_record.record_data.data0.condition_data.condition(1).no = no%
  temp_record.record_data.data0.condition_data.condition(2).ty = ty_
  temp_record.record_data.data0.condition_data.condition(2).no = dn%
   tv = divide_string(Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value, _
           "2", True, False)
    set_area_of_polygon = set_area_of_element(triangle_, triangle_number(tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0), _
           tv, 0, temp_record)
    If set_area_of_polygon > 1 Then
     Exit Function
    End If
    set_area_of_polygon = set_area_of_element(triangle_, triangle_number(tp(1), tp(2), tp(3), 0, 0, 0, 0, 0, 0, 0), _
           tv, 0, temp_record)
    If set_area_of_polygon > 1 Then
     Exit Function
    End If
    set_area_of_polygon = set_area_of_element(triangle_, triangle_number(tp(2), tp(3), tp(1), 0, 0, 0, 0, 0, 0, 0), _
           tv, 0, temp_record)
    If set_area_of_polygon > 1 Then
     Exit Function
    End If
    set_area_of_polygon = set_area_of_element(triangle_, triangle_number(tp(3), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0), _
           tv, 0, temp_record)
    If set_area_of_polygon > 1 Then
     Exit Function
    End If
 Else
  
 End If
 'For i% = 1 To last_conditions.last_cond(1).area_of_element_no
 'If area_of_element(i%).data(0).element.ty = triangle_ Then
 'po(1).total_v = 3
 '  po(1).v(0) = triangle(area_of_element(i%).data(0).element.no).data(0).poi(0)
 '   po(1).v(1) = triangle(area_of_element(i%).data(0).element.no).data(0).poi(1)
 '    po(1).v(2) = triangle(area_of_element(i%).data(0).element.no).data(0).poi(2)
 'ty = combine_two_polygon(po(0), po(1), po(2), po(3), po(4), po(5))
 ' TriA = triangle_number(po(2).v(0), po(2).v(1), po(2).v(2), 0, 0, 0, 0)
 'If is_area_of_element(TriA, 0) = False Then
 ' If ty = 1 Then
 '  tv$ = add_string(area_of_element(i%).data(0).value, _
          Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value, True, False)
'  ElseIf ty = -1 Then
'   tv$ = minus_string(Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value, _
        area_of_element(i%).data(0).value, True, False)
'  ElseIf ty = -2 Then
'   tv$ = minus_string(area_of_element(i%).data(0).value, _
        Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value, True, False)
'  Else
'GoTo set_area_of_polygon_mark1
 ' End If
  'temp_record.record_data.data0.condition_data.condition_no = 0 'record0
   ' temp_record.record_data.data0.condition_data.condition_no = 2
   'temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
    'temp_record.record_data.data0.condition_data.condition(2).ty = area_of_element_
     'temp_record.record_data.data0.condition_data.condition(1).no = no%
     ' temp_record.record_data.data0.condition_data.condition(2).no = i%
  'If po(2).total_v = 3 Then
   ' set_area_of_polygon = set_area_of_element(triangle_, triangle_number(po(2).v(0), _
    '  po(2).v(1), po(2).v(2), 0, 0, 0, 0, 0, 0, 0), _
     '  tv$, 0, temp_record)
      'If set_area_of_polygon > 1 Then
       'Exit Function
      'End If
   'ElseIf po(2).total_v = 4 Then
   'set_area_of_polygon = set_area_of_polygon(po(2).v(0), _
   ' po(2).v(1), po(2).v(2), po(2).v(3), tv$, temp_record, 0, no_reduce)
    '  If set_area_of_polygon > 1 Then
     '  Exit Function
     ' End If
   'End If
   'End If
'set_area_of_polygon_mark1:
 ' Next i%
' For i% = 1 To last_conditions.last_cond(1).area_of_element_no
' If area_of_element(i%).data(0).element.ty = polygon_ Then
'  If i% <> no% Then
'  po(1).total_v = 4
'   po(1).v(0) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(0)
'    po(1).v(1) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(1)
'     po(1).v(2) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(2)
'      po(1).v(3) = Dpolygon4(area_of_element(no%).data(0).element.no).data(0).poi(3)
'   ty = combine_two_polygon(po(0), po(1), po(2), po(3), po(4), po(5))
'  If ty = 1 Then
'   tv$ = add_string(Dpolygon4(area_of_element(i%).data(0).element.no).data(0).area_value, _
'         Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value, True, False)
'  ElseIf ty = -1 Then
'   tv$ = minus_string(Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value, _
'        Dpolygon4(area_of_element(i%).data(0).element.no).data(0).area_value, True, False)
'  ElseIf ty = -2 Then
'   tv$ = minus_string(Dpolygon4(area_of_element(i%).data(0).element.no).data(0).area_value, _
'                Dpolygon4(area_of_element(no%).data(0).element.no).data(0).area_value, True, False)
'  Else
'GoTo set_area_of_polygon_mark2
'  End If
'  temp_record.record_data.data0.condition_data.condition_no = 2
'   temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
'    temp_record.record_data.data0.condition_data.condition(2).ty = area_of_element_
'     temp_record.record_data.data0.condition_data.condition(1).no = no%
'      temp_record.record_data.data0.condition_data.condition(2).no = i%
'  If po(2).total_v = 3 Then
'   set_area_of_polygon = set_area_of_element(triangle_, triangle_number(po(2).v(0), _
'     po(2).v(1), po(2).v(2), 0, 0, 0, 0, 0, 0, 0), _
'      tv$, 0, temp_record)
'      If set_area_of_polygon > 1 Then
'       Exit Function
'      End If
'   ElseIf po(2).total_v = 4 Then
'   set_area_of_polygon = set_area_of_polygon(po(2).v(0), _
'    po(2).v(1), po(2).v(2), po(2).v(3), tv$, temp_record, 0, no_reduce)
'      If set_area_of_polygon > 1 Then
'       Exit Function
'      End If
'   End If
'   End If
'End If
'set_area_of_polygon_mark2:
'Next i%
End If
End Function

Public Function set_prove_proccess(s$, con_type As Byte, con_no%, set_display_string As String) As Byte
set_display_string = s$
If last_add_condition > 0 Then
 s = s + LoadResString_(470, "\\1\\" + str(last_add_condition))
End If
last_conditions.last_cond(1).total_condition = last_conditions.last_cond(1).total_condition + 1
If s$ <> "" Then
MDIForm1.StatusBar1.Panels(1).text = _
  LoadResString_(730, "\\1\\" + str(last_conditions.last_cond(1).total_condition) + _
                      "\\2\\" + s$)
End If
  If finish_prove < 2 Then
   set_prove_proccess = find_conclusion1(con_type, con_no%, False)
  End If
  If set_prove_proccess = 0 Then
     set_prove_proccess = 1
  Else
   '添加辅助线,完成一结论证明
   If last_conditions_for_aid_no > 0 Then
   last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
   End If
  End If
Call UpdateWindow(MDIForm1.StatusBar1.hwnd)
  If set_prove_proccess = 2 Then
    Exit Function
  End If
 Do While DoEvents()
  If contro_process = postpone_ Then '等待事件发生
 Else
 If contro_process = stop_ Then
  set_prove_proccess = 5
 End If
 Exit Function
 End If
 Loop
End Function

Public Function set_total_equal_triangle_from_SSA(ByVal p1%, ByVal p2%, _
     ByVal p3%, ByVal p4%, ByVal p5%, ByVal p6%, re As total_record_type, _
       ByVal no_reduce As Byte) As Byte
Dim i%, j%, k%, l%, t_n%
Dim tn(3) As Integer
Dim dn(1) As Integer
Dim tl(1) As Integer
Dim triA(1) As Integer
Dim dir(1) As Integer
Dim t!
Dim v As String
Dim t_p(1) As Integer
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
Dim sp(1) As Integer
Dim p_c As POINTAPI
'On Error GoTo set_total_equal_triangle_from_SSA_error
'已知两边一对角'
'If P_diffrence(p1%, p2%, p3%) > 0 And P_diffrence(p4%, p5%, p6%) > 0 Then
' 同是锐(钝)角
'If is_same_two_point(p1%, p2%, p4%, p5%) = True Then
'平行或等腰三角形
' Exit Function
If run_type = 10 Then
 Exit Function
ElseIf line_number0(p1%, p2%, 0, 0) = line_number0(p4%, p5%, 0, 0) Then
 Exit Function
ElseIf angle(Abs(angle_number(p2%, p1%, p3%, 0, 0))).data(0).value = "90" Then
 Exit Function
End If
    tl(0) = line_number0(p1%, p3%, 0, 0)
     tl(1) = line_number0(p4%, p6%, 0, 0)
If tn(1) > tn(0) Then
 sp(0) = 1
ElseIf tn(1) < tn(0) Then
 sp(0) = -1
End If
If tn(3) > tn(2) Then
 sp(1) = 1
ElseIf tn(3) < tn(2) Then
 sp(1) = -1
End If
For i% = tn(0) + sp(0) To tn(1) Step sp(0)
For k% = tn(2) + sp(1) To tn(3) Step sp(1)
  If is_equal_dline(p1%, m_lin(tl(0)).data(0).data0.in_point(i%), _
    p4%, m_lin(tl(1)).data(0).data0.in_point(k%), 0, 0, 0, 0, 0, 0, 0, -1000, 0, 0, 0, _
        eline_data0, 0, 0, 0, "", record0.data0.condition_data) Then
      Exit Function
  Else
   triA(0) = triangle_number(p1%, p2%, m_lin(tl(0)).data(0).data0.in_point(i%), _
     0, 0, 0, 0, 0, 0, dir(0))
   triA(1) = triangle_number(p4%, p5%, m_lin(tl(1)).data(0).data0.in_point(k%), _
     0, 0, 0, 0, 0, 0, dir(1))
   If is_total_equal_Triangle(triA(0), triA(1), dir(0), dir(1), 0, _
        -1000, 0, 0, two_triangle0, record_0, 0) Then
         Exit Function
   End If
   End If
    
Next k%
   Next i%
     For i% = 1 To m_lin(tl(0)).data(0).data0.in_point(0)
      If i% <> tn(0) Then
       If is_dverti(line_number0(p2%, m_lin(tl(0)).data(0).data0.in_point(i%), 0, 0), tl(0), _
         0, -1000, 0, 0, 0, 0) Then
            t_p(0) = m_lin(tl(0)).data(0).data0.in_point(i%)
           GoTo set_total_equal_triangle_from_SSA_mark0
       End If
      End If
     Next i%
t! = -((m_poi(p1%).data(0).data0.coordinate.X - m_poi(p2%).data(0).data0.coordinate.X) * _
   (m_poi(p3%).data(0).data0.coordinate.X - m_poi(p1%).data(0).data0.coordinate.X) + _
    (m_poi(p1%).data(0).data0.coordinate.Y - m_poi(p2%).data(0).data0.coordinate.Y) * _
      (m_poi(p3%).data(0).data0.coordinate.Y - m_poi(p1%).data(0).data0.coordinate.Y)) / _
       ((m_poi(p3%).data(0).data0.coordinate.X - m_poi(p1%).data(0).data0.coordinate.X) ^ 2 + _
          (m_poi(p3%).data(0).data0.coordinate.Y - m_poi(p1%).data(0).data0.coordinate.Y) ^ 2)
   p_c.X = m_poi(p1%).data(0).data0.coordinate.X + _
         t! * (m_poi(p3%).data(0).data0.coordinate.X - m_poi(p1%).data(0).data0.coordinate.X)
   p_c.Y = m_poi(p1%).data(0).data0.coordinate.Y + _
         t! * (m_poi(p3%).data(0).data0.coordinate.Y - m_poi(p1%).data(0).data0.coordinate.Y)
   If read_point(p_c, 0) > 0 Then
    Exit Function
   End If
   last_conditions.last_cond(1).point_no = last_conditions.last_cond(1).point_no + 1
   'MDIForm1.Toolbar1.Buttons(21).Image = 33
    t_p(0) = last_conditions.last_cond(1).point_no
   Call set_point_name(t_p(0), next_char(t_p(0), "", 0, 0))
   'poi(t_p(0)).data(0).data0.coordinate.X = p_c.X
   'poi(t_p(0)).data(0).data0.coordinate.Y = p_c.Y
   Call set_point_coordinate(t_p(0), p_c, False)
   record_0.data0.condition_data.condition_no = 0
   Call add_point_to_line(t_p(0), tl(0), t_n%, display, False, 0)
   Call set_two_point_line_for_line(tl(0), temp_record.record_data)
Call set_New_point(t_p(0), temp_record, tl(0), 0, 0, t_n%, 0, 0, 0, 1)
   Call set_dverti(line_number0(p2%, t_p(0), 0, 0), tl(0), temp_record, 0, no_reduce, False)
   Call set_point_visible(t_p(0), 1, False)
   'Call draw_point(Draw_form, poi(t_p(0)), 0, display)
set_total_equal_triangle_from_SSA_mark0:
     For i% = 1 To m_lin(tl(1)).data(0).data0.in_point(0)
      If i% <> tn(2) Then
       If is_dverti(line_number0(p5%, m_lin(tl(1)).data(0).data0.in_point(i%), 0, 0), tl(1), _
         0, -1000, 0, 0, 0, 0) Then
            t_p(1) = m_lin(tl(1)).data(0).data0.in_point(i%)
           GoTo set_total_equal_triangle_from_SSA_mark1
       End If
      End If
     Next i%
  t! = -((m_poi(p4%).data(0).data0.coordinate.X - m_poi(p5%).data(0).data0.coordinate.X) * _
   (m_poi(p6%).data(0).data0.coordinate.X - m_poi(p4%).data(0).data0.coordinate.X) + _
    (m_poi(p4%).data(0).data0.coordinate.Y - m_poi(p5%).data(0).data0.coordinate.Y) * _
      (m_poi(p6%).data(0).data0.coordinate.Y - m_poi(p4%).data(0).data0.coordinate.Y)) / _
       ((m_poi(p6%).data(0).data0.coordinate.X - m_poi(p4%).data(0).data0.coordinate.X) ^ 2 + _
          (m_poi(p6%).data(0).data0.coordinate.Y - m_poi(p4%).data(0).data0.coordinate.Y) ^ 2)
   p_c.X = m_poi(p4%).data(0).data0.coordinate.X + _
         t! * (m_poi(p6%).data(0).data0.coordinate.X - m_poi(p4%).data(0).data0.coordinate.X)
   p_c.Y = m_poi(p4%).data(0).data0.coordinate.Y + _
         t! * (m_poi(p6%).data(0).data0.coordinate.Y - m_poi(p4%).data(0).data0.coordinate.Y)
   If read_point(p_c, 0) > 0 Then
   Exit Function
   End If
   last_conditions.last_cond(1).point_no = last_conditions.last_cond(1).point_no + 1
   'MDIForm1.Toolbar1.Buttons(21).Image = 33
   'Call init_Point0(last_conditions.last_cond(1).point_no)
   t_p(1) = last_conditions.last_cond(1).point_no
   Call set_point_name(t_p(1), next_char(t_p(1), "", 0, 0))
   'poi(t_p(1)).data(0).data0.coordinate.X = p_c.X
   'poi(t_p(1)).data(0).data0.coordinate.Y = p_c.Y
   Call set_point_coordinate(t_p(1), p_c, False)
   record_0.data0.condition_data.condition_no = 0
   Call add_point_to_line(t_p(1), tl(1), t_n%, display, False, 0)
   Call set_two_point_line_for_line(tl(1), temp_record.record_data)
   Call set_New_point(t_p(0), temp_record, tl(1), 0, 0, t_n%, 0, 0, 0, 1)
   Call set_point_visible(t_p(1), 1, False)
  ' Call draw_point(Draw_form, poi(t_p(1)), 0, display)
set_total_equal_triangle_from_SSA = _
  set_dverti(line_number0(p5%, t_p(1), 0, 0), tl(1), _
   temp_record, 0, no_reduce, False)
  If set_total_equal_triangle_from_SSA > 1 Then
   Exit Function
  End If
set_total_equal_triangle_from_SSA_mark1:
temp_record = re
Call is_angle_value(Abs(angle_number(p1%, t_p(0), p2%, 0, 0)), "90", "", t_n%, temp_record1.data0.condition_data)
Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
Call is_angle_value(Abs(angle_number(p4%, t_p(1), p5%, 0, 0)), "90", "", t_n%, temp_record1.data0.condition_data)
Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
set_total_equal_triangle_from_SSA = _
     set_total_equal_triangle(p1%, p2%, t_p(0), p4%, p5%, t_p(1), temp_record, _
      0, no_reduce)
 If set_total_equal_triangle_from_SSA > 1 Then
  Exit Function
 End If
set_total_equal_triangle_from_SSA_error:
End Function

Public Function set_display_angle(ByVal A%, is_depend As Boolean) As String
Dim i%
set_display_angle = set_display_angle0(m_poi(m_lin(angle(A%).data(0).line_no(0)).data(0).data0.poi(angle(A%).data(0).te(0))).data(0).data0.name + _
      m_poi(angle(A%).data(0).poi(1)).data(0).data0.name + _
       m_poi(m_lin(angle(A%).data(0).line_no(1)).data(0).data0.poi(angle(A%).data(0).te(1))).data(0).data0.name)
If is_depend Then
   For i% = 0 To 2
    Call set_depend_from_point(angle(A%).data(0).poi(i%))
   Next i%
End If
End Function
Public Function set_display_angle0(trString As String) As String
 set_display_angle0 = LoadResString_(1380, "") + trString
End Function
Public Function add_degree_mark(ByVal s$) As String
Dim i%
If s$ = "0" Then
add_degree_mark = s$
End If
 For i% = 1 To Len(s$)
 If Mid$(s$, i%, 1) > "A" Then
  add_degree_mark = s$
  Exit Function
 End If
 Next i%
add_degree_mark = s$ + LoadResString_(735, "")
End Function

Public Function set_display_two_angle_value(ByVal A1%, ByVal A2%, ByVal s1$, _
    ByVal S2$, v$, is_depend As Boolean) As String
 If s1$ = "1" Then
 set_display_two_angle_value = set_display_angle(A1%, is_depend)
 Else
 set_display_two_angle_value = s1$ + set_display_angle(A1%, is_depend)
 End If
If v$ = "0" Then
 S2$ = time_string("-1", S2$, True, False)
 If S2$ = "1" Then
 set_display_two_angle_value = set_display_two_angle_value + "=" + _
      set_display_angle(A2%, is_depend)
 ElseIf S2$ = "-1" Or S2$ = "@1" Then
set_display_two_angle_value = set_display_two_angle_value + "=" + "-" + _
       set_display_angle(A2%, is_depend)
 Else
  set_display_two_angle_value = set_display_two_angle_value = _
      S2$ + set_display_angle(A2%, is_depend)
 End If
Else
 If S2$ = "1" Then
  set_display_two_angle_value = set_display_two_angle_value + _
      "+" + set_display_angle(A2%, is_depend)
 ElseIf S2$ = "-1" Or S2$ = "@1" Then
  set_display_two_angle_value = set_display_two_angle_value + "-" + _
   set_display_angle(A2%, is_depend)
 ElseIf Mid$(S2$, 1, 1) = "-" Then
  set_display_two_angle_value = set_display_two_angle_value + _
   S2$ + set_display_angle(A2%, is_depend)
 Else
  set_display_two_angle_value = set_display_two_angle_value + "+" + _
   S2$ + set_display_angle(A2%, is_depend)
 End If
  set_display_two_angle_value = set_display_two_angle_value + _
     "=" + display_string_(add_degree_mark(v$), 0)
End If
End Function

Public Function set_display_tixing(tix As tixing_data_type, is_depend As Boolean) As String
set_display_tixing = "\\0\\" + m_poi(tix.poi(0)).data(0).data0.name + _
                     "\\1\\" + m_poi(tix.poi(1)).data(0).data0.name + _
                     "\\2\\" + m_poi(tix.poi(2)).data(0).data0.name + _
                     "\\3\\" + m_poi(tix.poi(3)).data(0).data0.name
If tix.ty = equal_side_tixing_ Then
set_display_tixing = LoadResString_from_inpcond(49, "\\1\\" + set_display_tixing)
Else
set_display_tixing = LoadResString_from_inpcond(48, "\\1\\" + set_display_tixing)
End If
If is_depend Then
   Call set_depend_from_point(tix.poi(0))
   Call set_depend_from_point(tix.poi(1))
   Call set_depend_from_point(tix.poi(2))
   Call set_depend_from_point(tix.poi(3))
End If
End Function
Public Function set_display_three_angle_value(tA As angle3_value_data_type, _
     is_display As Boolean, dis_ty As Byte, is_depend As Boolean) As String
Dim i%
Dim tv As String
Dim A(2) As Integer
Dim s(2) As String
Dim sig(2) As String * 1
If tA.record.data0.condition_data.condition(1).ty = new_point_ And _
      tA.record.data0.condition_data.condition_no = 1 Then
   set_display_three_angle_value = _
     new_point(tA.record.data0.condition_data.condition(1).no).data(0).display_string
     If is_display Then
      Call draw_aid_point(tA.record.data0.condition_data.condition(1).no)
     End If
Else
A(0) = tA.data0.angle(0)
A(1) = tA.data0.angle(1)
A(2) = tA.data0.angle(2)
s(0) = tA.data0.para(0)
s(1) = tA.data0.para(1)
s(2) = tA.data0.para(2)
tv = tA.data0.value
For i% = 0 To 2
 sig(i%) = Mid$(s(i%), 1, 1)
  If sig(i%) = "#" Then
    sig(i%) = "+"
  ElseIf sig(i%) = "@" Then
    sig(i%) = "-"
  End If
  If sig(i%) = "-" Or sig(i%) = "+" Or sig(i%) = "#" Or sig(i%) = "@" Then
   s(i%) = Mid$(s(i%), 2, Len(s(i%)) - 1)
  Else
   sig(i%) = "+"
  End If
  If s(i%) = "" Then
   s(i%) = "1"
  End If
Next i%
'********
If tA.data0.para(1) = "0" Or (tA.data0.para(2) = "0" And tA.data0.value = "0") Then
 If s(0) <> "1" Then
   s(1) = divide_string(s(1), s(0), True, False)
    tv = divide_string(tv, s(0), True, False)
     s(0) = "1"
 End If
End If
'******
For i% = 0 To 2
 If s(i%) = "1" Then
  s(i%) = ""
 Else
  s(i%) = display_string_(s(i%), dis_ty)
 End If
Next i%
'tv = display_string_(tA.data0.value, dis_ty)
tv = set_display_string_for_set_value(tA.data0.value, 0, is_depend)
'********
If tA.data0.para(1) = "0" Then
 set_display_three_angle_value = set_display_angle(A(0), is_depend) + _
   "=" + add_degree_mark(tv)
ElseIf tA.data0.para(2) = "0" Then
 If tA.data0.value = "0" Then
  If sig(1) = "-" Then
   If s(1) = "" Then
    set_display_three_angle_value = set_display_angle(A(0), is_depend) + _
     "=" + set_display_angle(A(1), is_depend)
   Else
     set_display_three_angle_value = set_display_angle(A(0), is_depend) + _
      "/" + set_display_angle(A(1), is_depend) + "=" + s(1)
   End If
  Else
     set_display_three_angle_value = set_display_angle(A(0), is_depend) + _
                  sig(1) + s(1) + set_display_angle(A(1), is_depend) + " = 0"
  End If
 Else 's(2)="0" and tv<>"0"
     set_display_three_angle_value = s(0) + set_display_angle(A(0), is_depend) + _
           sig(1) + s(1) + set_display_angle(A(1), is_depend) + "=" + add_degree_mark(tv)
 End If
Else 's(2)<>"0"
'*********************
s(0) = display_string_(s(0), dis_ty)
s(1) = display_string_(s(1), dis_ty)
s(2) = display_string_(s(2), dis_ty)
 If tA.data0.value = "0" Then
  If sig(1) = "+" And sig(2) = "+" Then
     set_display_three_angle_value = s(0) + set_display_angle(A(0), is_depend) + _
                 sig(1) + s(1) + set_display_angle(A(1), is_depend) + _
                  sig(2) + s(2) + set_display_angle(A(2), is_depend) + _
                 " = 0"
   ElseIf sig(1) = "-" And sig(2) = "+" Then
     set_display_three_angle_value = s(1) + set_display_angle(A(1), is_depend) + _
               "=" + s(0) + set_display_angle(A(0), is_depend) + _
                    "+" + s(2) + set_display_angle(A(2), is_depend)
   ElseIf sig(1) = "-" And sig(2) = "-" Then
     set_display_three_angle_value = s(0) + set_display_angle(A(0), is_depend) + _
               "=" + s(1) + set_display_angle(A(1), is_depend) + _
                      "+" + s(2) + set_display_angle(A(2), is_depend)
   ElseIf sig(1) = "+" And sig(2) = "-" Then
     set_display_three_angle_value = s(2) + set_display_angle(A(2), is_depend) + _
               "=" + s(0) + set_display_angle(A(0), is_depend) + _
                   "+" + s(1) + set_display_angle(A(1), is_depend)
   End If
 Else
     set_display_three_angle_value = s(0) + set_display_angle(A(0), is_depend) + _
                sig(1) + s(1) + set_display_angle(A(1), is_depend) + _
                 sig(2) + s(2) + set_display_angle(A(2), is_depend) + _
                 "=" + add_degree_mark(tv)
 End If
End If
End If
End Function

Public Function set_display_point_pair(point_p As point_pair_data0_type, re As record_data_type, _
    is_display As Boolean, is_depend As Boolean) As String
Dim i%
If is_depend Then
For i% = 0 To 7
 Call set_depend_from_point(point_p.poi(i%))
Next i%
End If
If re.data0.condition_data.condition(1).ty = new_point_ And _
     re.data0.condition_data.condition_no = 1 Then
   set_display_point_pair = _
     new_point(re.data0.condition_data.condition(1).no).data(0).display_string
     If is_display Then
      Call draw_aid_point(re.data0.condition_data.condition(1).no)
     End If
Else
If re.data1.display_type = 0 Then
 If point_p.poi(0) = point_p.poi(6) And point_p.poi(1) = point_p.poi(7) Then
  GoTo set_display_point_pair_mark2
 ElseIf point_p.poi(2) = point_p.poi(4) And point_p.poi(3) = point_p.poi(5) Then
  GoTo set_display_point_pair_mark3
 Else
 set_display_point_pair = m_poi(point_p.poi(0)).data(0).data0.name + _
  m_poi(point_p.poi(1)).data(0).data0.name + "/" + _
   m_poi(point_p.poi(2)).data(0).data0.name + _
    m_poi(point_p.poi(3)).data(0).data0.name + "=" + _
     m_poi(point_p.poi(4)).data(0).data0.name + _
      m_poi(point_p.poi(5)).data(0).data0.name + "/" + _
       m_poi(point_p.poi(6)).data(0).data0.name + _
        m_poi(point_p.poi(7)).data(0).data0.name
  End If
Else
 If point_p.poi(0) = point_p.poi(6) And point_p.poi(1) = point_p.poi(7) Then
set_display_point_pair_mark2:
  set_display_point_pair = m_poi(point_p.poi(0)).data(0).data0.name + m_poi(point_p.poi(1)).data(0).data0.name + _
        "^2" + "=" + m_poi(point_p.poi(2)).data(0).data0.name + m_poi(point_p.poi(3)).data(0).data0.name + "*" + _
        m_poi(point_p.poi(4)).data(0).data0.name + m_poi(point_p.poi(5)).data(0).data0.name
 ElseIf point_p.poi(2) = point_p.poi(4) And point_p.poi(3) = point_p.poi(5) Then
set_display_point_pair_mark3:
  set_display_point_pair = m_poi(point_p.poi(2)).data(0).data0.name + m_poi(point_p.poi(3)).data(0).data0.name + _
      "^2" + "=" + m_poi(point_p.poi(0)).data(0).data0.name + m_poi(point_p.poi(1)).data(0).data0.name + "*" + _
        m_poi(point_p.poi(6)).data(0).data0.name + m_poi(point_p.poi(7)).data(0).data0.name
 Else
  set_display_point_pair = m_poi(point_p.poi(0)).data(0).data0.name + m_poi(point_p.poi(1)).data(0).data0.name + "*" + _
      m_poi(point_p.poi(6)).data(0).data0.name + m_poi(point_p.poi(7)).data(0).data0.name + "=" + _
       m_poi(point_p.poi(2)).data(0).data0.name + m_poi(point_p.poi(3)).data(0).data0.name + "*" + _
        m_poi(point_p.poi(4)).data(0).data0.name + m_poi(point_p.poi(5)).data(0).data0.name
 End If
End If
End If
End Function

Public Function set_display_relation(d As relation_type, concl_or_cond As Byte, _
   is_display As Boolean, ty As Byte, dis_ty As Byte, is_depend As Boolean) As String
Dim n%
If is_depend Then
 For n% = 0 To 3
  Call set_depend_from_point(d.data(0).data0.poi(n%))
 Next n%
End If
If d.data(0).record.data0.condition_data.condition(1).ty = new_point_ And _
       d.data(0).record.data0.condition_data.condition_no = 1 Then
   set_display_relation = _
     new_point(d.data(0).record.data0.condition_data.condition(1).no).data(0).display_string
      If is_display Then
      Call draw_aid_point(d.data(0).record.data0.condition_data.condition(1).no)
      End If
Else
If ty = 0 Then
If concl_or_cond > 0 Then
 n% = d.record_.conclusion_no - 1
set_display_relation = m_poi(con_relation(n%).data(1).poi(0)).data(0).data0.name + _
      m_poi(con_relation(n%).data(1).poi(1)).data(0).data0.name + _
  "/" + m_poi(con_relation(n%).data(1).poi(2)).data(0).data0.name + _
       m_poi(con_relation(n%).data(1).poi(3)).data(0).data0.name + "=" + _
        display_string_(con_relation(n%).data(1).value, dis_ty)
Else
set_display_relation = m_poi(d.data(0).data0.poi(0)).data(0).data0.name + m_poi(d.data(0).data0.poi(1)).data(0).data0.name + _
  "/" + m_poi(d.data(0).data0.poi(2)).data(0).data0.name + m_poi(d.data(0).data0.poi(3)).data(0).data0.name + "=" + _
   display_string_(d.data(0).data0.value, dis_ty)
End If
Else
If concl_or_cond > 0 Then
 n% = d.record_.conclusion_no '- 1
set_display_relation = m_poi(con_relation(n%).data(1).poi(0)).data(0).data0.name + _
      m_poi(con_relation(n%).data(1).poi(1)).data(0).data0.name + _
  "/" + m_poi(con_relation(n%).data(1).poi(2)).data(0).data0.name + _
       m_poi(con_relation(n%).data(1).poi(3)).data(0).data0.name + "=" + _
        display_string_(con_relation(n%).data(1).value, dis_ty) '"!" + con_relation(n%).data(1).value + "~"
Else
set_display_relation = m_poi(d.data(0).data0.poi(0)).data(0).data0.name + m_poi(d.data(0).data0.poi(1)).data(0).data0.name + _
  "/" + m_poi(d.data(0).data0.poi(2)).data(0).data0.name + m_poi(d.data(0).data0.poi(3)).data(0).data0.name + "=" + _
        display_string_(d.data(0).data0.value, dis_ty) '"!" + D.data(0).data0.value + "~"
End If
End If
End If
End Function

Public Function set_display_line_value(l_v As line_value_type, is_display As Boolean, _
              dis_ty As Byte) As String    'ty=0 证明过程,1,结果,ty_ 0 value_ 1,value_
Dim l As line_value_data0_type
l = l_v.data(0).data0
If l_v.data(0).record.data0.condition_data.condition(1).ty = new_point_ And _
            l_v.data(0).record.data0.condition_data.condition_no = 1 Then
    set_display_line_value = _
     new_point(l_v.data(0).record.data0.condition_data.condition(1).no).data(0).display_string
     If is_display Then
      Call draw_aid_point(l_v.data(0).record.data0.condition_data.condition(1).no)
     End If
Else
   set_display_line_value = m_poi(l.poi(0)).data(0).data0.name + m_poi(l.poi(1)).data(0).data0.name + _
    "=" + display_string_(l.value_, dis_ty)
End If
End Function
Public Function set_display_mid_point(md_ As mid_point_type, ty As Byte, _
    is_display As Boolean, is_depend As Boolean) As String
Dim i%
Dim md As mid_point_data0_type
md = md_.data(0).data0
If is_depend Then
   For i% = 0 To 2
    Call set_depend_from_point(md.poi(i%))
   Next i%
End If
If md_.data(0).record.data0.condition_data.condition(1).ty = new_point_ And _
           md_.data(0).record.data0.condition_data.condition_no = 1 Then
   set_display_mid_point = _
     new_point(md_.data(0).record.data0.condition_data.condition(1).no).data(0).display_string
      If is_display Then
      Call draw_aid_point(md_.data(0).record.data0.condition_data.condition(1).no)
      End If
Else
If ty = 0 Then
set_display_mid_point = LoadResString_from_inpcond(26, "\\0\\" + m_poi(md.poi(1)).data(0).data0.name + _
            "\\1\\" + m_poi(md.poi(0)).data(0).data0.name + "\\2\\" + m_poi(md.poi(2)).data(0).data0.name)
Else
set_display_mid_point = _
 m_poi(md.poi(0)).data(0).data0.name + m_poi(md.poi(1)).data(0).data0.name + "=" + _
  m_poi(md.poi(1)).data(0).data0.name + m_poi(md.poi(2)).data(0).data0.name
End If
End If
End Function
Public Function read_ratio_of_similar_triangle(ByVal n%, v$, ByVal p11%, ByVal p12%, ByVal p13%, _
                        ByVal p21%, ByVal p22%, ByVal p23%, re As record_data_type) As Boolean
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
Dim i%
Dim dn(2) As Integer
Dim ty As Boolean
Dim tp1(2) As Integer
Dim tp2(2) As Integer
Dim cond_ty  As Byte
Dim tv$
v$ = ""
If p11% > 0 Then
tp1(0) = p11%
tp1(1) = p12%
tp1(2) = p13%
tp2(0) = p21%
tp2(1) = p22%
tp2(2) = p23%
Else
For i% = 0 To 2
tp1(i%) = triangle(Dsimilar_triangle(n%).data(0).triangle(0)).data(0).poi(i%)
Next i%
Call read_triangle_element(Dsimilar_triangle(n%).data(0).triangle(1), _
    Dsimilar_triangle(n%).data(0).direction, tp2(0), _
              tp2(1), tp2(2), 0, 0, 0, 0, 0, 0, 0, 0, 0)
End If
're.data0.condition_data.condition_no = 0
For i% = 0 To 2
record0.record_data.data0.condition_data.condition_no = 0
 If is_relation(tp1(i%), tp1((i% + 1) Mod 3), _
   tp2(i%), tp2((i + 1) Mod 3), 0, 0, 0, 0, 0, 0, tv$, _
      dn(0), -1000, 0, 0, 0, relation_data0, _
       dn(1), dn(2), cond_ty, record0.record_data.data0.condition_data, 0) Then
   temp_record1.data0.condition_data.condition_no = 0
   Call add_conditions_to_record(cond_ty, dn(0), dn(1), dn(2), temp_record1.data0.condition_data)
    Call set_level(temp_record1.data0.condition_data)
     v$ = tv$
     If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
         (temp_record.record_data.data0.condition_data.level > _
                      temp_record1.data0.condition_data.level) Or _
          (temp_record.record_data.data0.condition_data.level = temp_record1.data0.condition_data.level And _
            re.data0.condition_data.condition_no > _
             temp_record1.data0.condition_data.condition_no) Then
         temp_record.record_data = temp_record1
     End If
     ty = True
     'GoTo read_ratio_of_similar_triangle_markout
   End If
Next i%
'read_ratio_of_similar_triangle_markout:
If ty = True Then
Call add_record_to_record(temp_record.record_data.data0.condition_data, re.data0.condition_data)
End If
read_ratio_of_similar_triangle = ty
End Function


Public Function set_verti_mid_line(ByVal p1%, ByVal p2%, _
                 ByVal p3%, ByVal l%, re As total_record_type, no%, _
                  no_reduce As Byte) As Byte
Dim i%, j%, temp_no%
Dim level As Byte
Dim n_(1) As Integer
Dim temp_record As total_record_type
Dim v_m_line As verti_mid_line_data0_type
Dim set_new_data As Boolean
'On Error GoTo set_verti_mid_line_error
If no% > 0 Then
GoTo set_verti_mid_line_mark0
End If
temp_record = re
Call set_level(temp_record.record_data.data0.condition_data)
If is_verti_mid_line(p1%, p2%, p3%, l%, no%, n_(0), n_(1), _
               v_m_line) Then
 If no% > 0 And run_type < 10 And run_type <> 3 Then
 level = verti_mid_line(no%).data(0).record.data0.condition_data.level
 If set_prove_type(verti_mid_line_, no%, re.record_data, _
        verti_mid_line(no%).data(0).record) And set_or_prove < 2 Then
  Call simple_record(verti_mid_line_, no%, verti_mid_line(no%).data(0).record.data0.condition_data.level, level)
     If no_reduce = 0 Then 'Or run_type <= 1 Then
       set_verti_mid_line = 0
      Exit Function
     Else
      no_reduce = 2
       verti_mid_line(no%).record_.no_reduce = 0
        GoTo set_verti_mid_line_mark0
     End If
 ElseIf no_reduce > 0 Then
      GoTo set_verti_mid_line_mark0
 End If
 End If
Else
temp_no% = last_conditions.last_cond(1).verti_mid_line_no
For i% = 1 To temp_no%
verti_mid_line(i%).record_.index = verti_mid_line(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).verti_mid_line_no Mod 10 = 0 Then
ReDim Preserve verti_mid_line(last_conditions.last_cond(1).verti_mid_line_no + 10) As verti_mid_line_type
End If
last_conditions.last_cond(1).verti_mid_line_no = last_conditions.last_cond(1).verti_mid_line_no + 1
set_new_data = True
verti_mid_line(last_conditions.last_cond(1).verti_mid_line_no).data(0).data0 = v_m_line
verti_mid_line(last_conditions.last_cond(1).verti_mid_line_no).data(0).record = temp_record.record_data
verti_mid_line(last_conditions.last_cond(1).verti_mid_line_no).record_ = temp_record.record_
For j% = 0 To 1
For i% = last_conditions.last_cond(1).verti_mid_line_no To n_(j%) + 2 Step -1
verti_mid_line(i%).data(0).record.data1.index.i(j%) = _
   verti_mid_line(i% - 1).data(0).record.data1.index.i(j%)
Next i%
verti_mid_line(no% + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).verti_mid_line_no
Next j%
no% = last_conditions.last_cond(1).verti_mid_line_no
If no_reduce = 0 Then
 Exit Function
End If
set_verti_mid_line_mark0:
temp_record.record_data.data0.condition_data.condition_no = 1
temp_record.record_data.data0.condition_data.condition(1).ty = verti_mid_line_
temp_record.record_data.data0.condition_data.condition(1).no = no%
If verti_mid_line(no%).data(0).data0.verti_no = 0 Then
set_verti_mid_line = set_dverti(verti_mid_line(no%).data(0).data0.line_no(1), _
            verti_mid_line(no%).data(0).data0.line_no(0), temp_record, _
               verti_mid_line(no%).data(0).data0.verti_no, no_reduce, False)
If set_verti_mid_line > 1 Then
 Exit Function
End If
End If
If verti_mid_line(no%).data(0).data0.mid_point_no = 0 Then
 If verti_mid_line(no%).data(0).data0.poi(1) > 0 Then
  set_verti_mid_line = set_mid_point(verti_mid_line(no%).data(0).data0.poi(0), _
    verti_mid_line(no%).data(0).data0.poi(1), verti_mid_line(no%).data(0).data0.poi(2), _
     verti_mid_line(no%).data(0).data0.n(0), verti_mid_line(no%).data(0).data0.n(1), _
      verti_mid_line(no%).data(0).data0.n(2), verti_mid_line(no%).data(0).data0.line_no(1), _
       0, temp_record, verti_mid_line(no%).data(0).data0.mid_point_no, 0, 0, 0, no_reduce)
  If set_verti_mid_line > 1 Then
    Exit Function
  End If
 ElseIf Dverti(verti_mid_line(no%).data(0).data0.verti_no).data(0).inter_poi > 0 Then
   verti_mid_line(no%).data(0).data0.poi(1) = _
     Dverti(verti_mid_line(no%).data(0).data0.verti_no).data(0).inter_poi
   Call is_point_in_line3(verti_mid_line(no%).data(0).data0.poi(1), _
             m_lin(verti_mid_line(no%).data(0).data0.line_no(1)).data(0).data0, _
              verti_mid_line(no%).data(0).data0.n(1))
  set_verti_mid_line = set_mid_point(verti_mid_line(no%).data(0).data0.poi(0), _
    verti_mid_line(no%).data(0).data0.poi(1), verti_mid_line(no%).data(0).data0.poi(2), _
     verti_mid_line(no%).data(0).data0.n(0), verti_mid_line(no%).data(0).data0.n(1), _
      verti_mid_line(no%).data(0).data0.n(2), verti_mid_line(no%).data(0).data0.line_no(1), _
       0, temp_record, verti_mid_line(no%).data(0).data0.mid_point_no, 0, 0, 0, no_reduce)
  If set_verti_mid_line > 1 Then
    Exit Function
  End If
 End If
End If
If th_chose(44).chose = 1 Then
temp_record.record_data.data0.theorem_no = 44
For i% = 1 To m_lin(verti_mid_line(no%).data(0).data0.line_no(0)).data(0).data0.in_point(0)
 set_verti_mid_line = set_equal_dline(verti_mid_line(no%).data(0).data0.poi(0), _
     m_lin(verti_mid_line(no%).data(0).data0.line_no(0)).data(0).data0.in_point(i%), _
      m_lin(verti_mid_line(no%).data(0).data0.line_no(0)).data(0).data0.in_point(i%), _
       verti_mid_line(no%).data(0).data0.poi(2), 0, 0, 0, 0, 0, 0, 0, _
        temp_record, 0, 0, 0, 0, no_reduce, False)
 If set_verti_mid_line > 1 Then
  Exit Function
 End If
Next i%
End If
End If
Exit Function
set_verti_mid_line_error:
set_verti_mid_line = 0
If set_new_data Then
last_conditions.last_cond(1).verti_mid_line_no = temp_no%
For i% = 1 To temp_no%
verti_mid_line(i%).data(0).record.data1.index = verti_mid_line(i%).record_.index
Next i%
End If
End Function

Public Function set_display_polygon(p As polygon, is_depend As Boolean, ty As Byte, st%) As String
Dim i%
For i% = 0 To p.total_v - 1
If ty = 0 Then
set_display_polygon = set_display_polygon + m_poi(p.v(i%)).data(0).data0.name
Else
set_display_polygon = set_display_polygon + "\\" + Trim(str(st% + i%)) + "\\" + m_poi(p.v(i%)).data(0).data0.name
End If
 If is_depend Then
    Call set_depend_from_point(p.v(i%))
 End If
Next i%
End Function
Public Function set_display_Epolygon(ep As epolygon_data_type, is_depend As Boolean, ty As Byte, st%) As String
Dim ts$
ts$ = set_display_polygon(ep.p, is_depend, ty, st%)
If ep.p.total_v = 3 Then
set_display_Epolygon = LoadResString_from_inpcond(-17, ts$)
ElseIf ep.p.total_v = 4 Then
set_display_Epolygon = LoadResString_from_inpcond(-12, ts$)
ElseIf ep.p.total_v = 5 Then
set_display_Epolygon = LoadResString_from_inpcond(-9, ts$)
ElseIf ep.p.total_v = 6 Then
set_display_Epolygon = LoadResString_from_inpcond(-8, ts$)
End If
End Function
Public Function set_display_polygon0(p As String) As String
Dim k%
k% = Len(p)
If k% = 3 Then
set_display_polygon0 = set_display_triangle0(p, 0, 0)
ElseIf k = 4 Then
set_display_polygon0 = set_display_polygon40(p)
Else
set_display_polygon0 = LoadResString_(430, p)

End If
End Function

Public Function acsin_(A As String) As String
Dim p%
Dim v!
Dim A_!
If A = "0" Then
 acsin_ = "0"
ElseIf A = "1&2" Or A = "1/2" Then
 acsin_ = "30"
ElseIf A = "'2&2" Or A = "'2/2" Then
 acsin_ = "45"
ElseIf A = "'3&2" Or A = "'3/2" Then
 acsin_ = "60"
ElseIf A = "1" Then
 acsin_ = "90"
ElseIf is_uselly_degree_for_angle = False Then
 If th_chose(-5).chose = 1 Then
  v! = val_(A)
   If v! <> 0 Then
   v! = v! / sqr(1 - v! ^ 2)
    A_! = Atn(v!)
     A_! = A_! * 180 / PI
      acsin_ = Trim(str(A_!))
   Else
     acsin_ = "F"
   End If
 Else
 acsin_ = "F"
 End If
Else
 acsin_ = "F"
End If
End Function

Public Function accos_(A As String) As String
Dim p%
Dim v!
Dim A_!
'On Error GoTo accos_error
If A = "1" Then
 accos_ = "0"
ElseIf A = "'3&2" Or A = "'3/2" Then
 accos_ = "30"
ElseIf A = "'2&2" Or A = "'2/2" Then
 accos_ = "45"
ElseIf A = "1&2" Or A = "1/2" Then
 accos_ = "60"
ElseIf A = "0" Then
 accos_ = "90"
ElseIf A = "-1&/2" Or A = "-1/2" Then
 accos_ = "120"
ElseIf A = "-'2/2" Then
 accos_ = "135"
ElseIf A = "-'3/2" Then
 accos_ = "150"
ElseIf A = "-1" Or A = "@1" Then
 accos_ = "180"
ElseIf is_uselly_degree_for_angle = False Then
 If th_chose(-5).chose = 1 Then
  v! = val_(A)
   If v! <> "0" Then
    v! = sqr(1 - v! ^ 2) / v
    A_! = Atn(v!)
     A_! = A_! * 180 / PI
      accos_ = Trim(str(A_!))
   Else
    accos_ = "F"
   End If
 Else
  accos_ = "F"
 End If
Else
 accos_ = "F"
End If
Exit Function
accos_error:
 accos_ = "F"
End Function

Public Function actan_(A As String) As String
Dim p%
Dim v!
Dim A_!
'On Error GoTo actan_error
If A = "0" Then
 actan_ = "0"
ElseIf A = "'3/3" Then
 actan_ = "30"
ElseIf A = "1" Then
 actan_ = "45"
ElseIf A = "'3" Then
 actan_ = "60"
ElseIf is_uselly_degree_for_angle = False Then
 If th_chose(-5).chose = 1 Then
  v! = val_(A)
   If v! <> 0 Then
    A_! = Atn(v!)
     A_! = A_! * 180 / PI
      actan_ = Trim(str(A_!))
    Else
     actan_ = "F"
    End If
   Else
  actan_ = "F"
 End If
Else
 actan_ = "F"
End If
Exit Function
actan_error:
actan_ = "F"
End Function

Public Function set_relation_of_triangle_from_relation(ByVal p1%, ByVal p2%, _
  ByVal p3%, ByVal p4%, ByVal value$, re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim i%, j%, k%, n%
Dim dn(1) As Integer
Dim l(1) As Integer
Dim ele(1) As condition_type
Dim temp_record As total_record_type
l(0) = line_number0(p1%, p2%, 0, 0)
 l(1) = line_number0(p3%, p4%, 0, 0)
If l(0) = l(1) Then
  If th_chose(157).chose = 1 Then
  temp_record = re
   temp_record.record_data.data0.theorem_no = 157 '共边定理
 If p2% = p3% Then
  For i% = 1 To last_conditions.last_cond(1).line_no 'poi(Drelation(no%).DATA(0).poi(1)).data(0).in_line(0)
   If i% <> l(0) Then
    If is_point_in_line3(p2%, m_lin(i%).data(0).data0, 0) Then
     For j% = 2 To m_lin(i%).data(0).data0.in_point(0)
      For k% = 1 To j% - 1
        dn(0) = triangle_number(m_lin(i%).data(0).data0.in_point(j%), _
        m_lin(i%).data(0).data0.in_point(k%), _
         p1%, 0, 0, 0, 0, 0, 0, 0)
        dn(1) = triangle_number(m_lin(i%).data(0).data0.in_point(j%), _
        m_lin(i%).data(0).data0.in_point(k%), _
         p4%, 0, 0, 0, 0, 0, 0, 0)
  If dn(0) > 0 And dn(1) > 0 Then
   If value = "1" Then
     set_relation_of_triangle_from_relation = _
       set_equal_area_triangle(dn(0), dn(1), _
          temp_record, 0, 1, no_reduce)
   Else
    ele(0).ty = triangle_
    ele(1).ty = triangle_
    ele(0).no = dn(0)
    ele(1).no = dn(1)
    set_relation_of_triangle_from_relation = _
      set_area_relation(ele(0), ele(1), _
         value, temp_record, 0, 1, no_reduce)
   End If
    If set_relation_of_triangle_from_relation > 1 Then
       Exit Function
      End If
  End If
    Next k%
   Next j%
    End If
    End If
  Next i%
  End If
  End If
 If th_chose(157).chose = 1 Then
 temp_record = re
  temp_record.record_data.data0.theorem_no = 157
 For i% = 1 To last_conditions.last_cond(1).point_no
 If i% <> p1% And i% <> p2% And _
      i% <> p3% And i% <> p4% Then
  dn(0) = triangle_number(p1%, p2%, _
         i%, 0, 0, 0, 0, 0, 0, 0)
  dn(1) = triangle_number(p3%, p4%, _
         i%, 0, 0, 0, 0, 0, 0, 0)
 If dn(0) > 0 And dn(1) > 0 Then
   If value = "1" Then
     set_relation_of_triangle_from_relation = _
        set_equal_area_triangle(dn(0), dn(1), _
          temp_record, 0, 1, no_reduce)
   Else
    ele(0).ty = triangle_
    ele(1).ty = triangle_
    ele(0).no = dn(0)
    ele(1).no = dn(1)
    set_relation_of_triangle_from_relation = _
       set_area_relation(ele(0), ele(1), _
        value, temp_record, 0, 1, no_reduce)
   End If
    If set_relation_of_triangle_from_relation > 1 Then
       Exit Function
    End If
  End If
End If
Next i%
End If
ElseIf is_dparal(l(0), l(1), n%, -1000, 0, 0, 0, 0) Then
If th_chose(157).chose = 1 Then
  temp_record.record_data.data0.theorem_no = 157
 For i% = 1 To m_lin(l(0)).data(0).data0.in_point(0)
 For j% = 1 To m_lin(l(1)).data(0).data0.in_point(0)
 record0.record_data.data0.condition_data.condition_no = 0
  dn(0) = triangle_number(m_lin(l(0)).data(0).data0.in_point(i%), _
    p3%, p4%, 0, 0, 0, 0, 0, 0, 0)
  dn(1) = triangle_number(m_lin(l(1)).data(0).data0.in_point(j%), _
    p1%, p2%, 0, 0, 0, 0, 0, 0, 0)
 temp_record.record_data.data0.condition_data.condition_no = 2
  temp_record.record_data.data0.condition_data.condition(2).ty = paral_
   temp_record.record_data.data0.condition_data.condition(2).no = n%
   If value = "1" Then
     set_relation_of_triangle_from_relation = _
        set_equal_area_triangle(dn(0), dn(1), _
          temp_record, 0, 1, no_reduce)
   Else
    ele(0).ty = triangle_
    ele(1).ty = triangle_
    ele(0).no = dn(0)
    ele(1).no = dn(1)
    set_relation_of_triangle_from_relation = _
       set_area_relation(ele(1), ele(0), _
     value, temp_record, 0, 1, no_reduce)
   End If
   If set_relation_of_triangle_from_relation > 1 Then
       Exit Function
   End If
 Next j%
 Next i%
End If
End If

End Function

Public Function set_property_of_parallelogram(ByVal no%, ByVal no_reduce As Byte) As Byte
Dim p%, tn%, t_n%
Dim tA(3) As Integer
Dim n_(5) As Integer
Dim tl(5) As Integer
Dim tp(5) As Integer
Dim temp_record As total_record_type
 temp_record.record_data.data0.condition_data.condition_no = 1
      temp_record.record_data.data0.condition_data.condition(1).ty = parallelogram_
       temp_record.record_data.data0.condition_data.condition(1).no = no%
'********************************************
 tp(0) = Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(0)
 tp(1) = Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(1)
 tp(2) = Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(2)
 tp(3) = Dpolygon4(Dparallelogram(no%).data(0).polygon4_no).data(0).poi(3)
'**********************************************************
'If TH_CHOSE(14).chose = 1 Then
 If using_area_th > 0 Then
   tA(0) = triangle_number(tp(1), tp(2), tp(3), 0, 0, 0, 0, 0, 0, 0)
   tA(1) = triangle_number(tp(0), tp(2), tp(3), 0, 0, 0, 0, 0, 0, 0)
   tA(2) = triangle_number(tp(0), tp(1), tp(3), 0, 0, 0, 0, 0, 0, 0)
   tA(3) = triangle_number(tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0)
   set_property_of_parallelogram = set_equal_area_triangle(tA(0), tA(1), temp_record, 0, 1, 0)
   If set_property_of_parallelogram > 1 Then
      Exit Function
   End If
   set_property_of_parallelogram = set_equal_area_triangle(tA(1), tA(2), temp_record, 0, 1, 0)
   If set_property_of_parallelogram > 1 Then
      Exit Function
   End If
   set_property_of_parallelogram = set_equal_area_triangle(tA(2), tA(3), temp_record, 0, 1, 0)
   If set_property_of_parallelogram > 1 Then
      Exit Function
   End If
   set_property_of_parallelogram = set_equal_area_triangle(tA(3), tA(0), temp_record, 0, 1, 0)
   If set_property_of_parallelogram > 1 Then
      Exit Function
   End If
 End If
 tl(0) = line_number0(tp(0), tp(2), 0, 0)
  tl(1) = line_number0(tp(1), tp(3), 0, 0)
 If is_dverti(tl(0), tl(1), t_n%, -1000, 0, 0, 0, 0) Then
  Call add_conditions_to_record(verti_, t_n%, 0, 0, temp_record.record_data.data0.condition_data)
  set_property_of_parallelogram = set_rhombus(tp(0), tp(1), tp(2), tp(3), temp_record, 0, 0)
       If set_property_of_parallelogram > 1 Then
        Exit Function
       End If
 End If
    tl(0) = line_number0(tp(0), tp(1), 0, 0)
     tl(1) = line_number0(tp(1), tp(2), 0, 0)
      tl(2) = line_number0(tp(2), tp(3), 0, 0)
       tl(3) = line_number0(tp(3), tp(0), 0, 0)
 If th_chose(59).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 59
   set_property_of_parallelogram = _
     set_dparal0(tp(0), tp(1), tp(2), tp(3), temp_record, no_reduce)
       If set_property_of_parallelogram > 1 Then
        Exit Function
       End If
   set_property_of_parallelogram = _
     set_dparal0(tp(1), tp(2), tp(3), tp(0), temp_record, no_reduce)
       If set_property_of_parallelogram > 1 Then
        Exit Function
       End If
   set_property_of_parallelogram = _
     set_equal_dline(tp(0), tp(1), tp(2), tp(3), _
       0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce, False)
       If set_property_of_parallelogram > 1 Then
        Exit Function
       End If
   set_property_of_parallelogram = _
     set_equal_dline(tp(1), tp(2), tp(3), tp(0), _
      0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce, False)
       If set_property_of_parallelogram > 1 Then
        Exit Function
       End If
  End If
  If th_chose(61).chose = 1 Then
     tl(4) = line_number0(tp(0), tp(2), n_(0), n_(2))
      tl(5) = line_number0(tp(1), tp(3), n_(1), n_(3))
    p% = is_line_line_intersect(tl(4), tl(5), n_(4), n_(5), False)
    temp_record.record_data.data0.theorem_no = 61
     If p% > 0 Then
       set_property_of_parallelogram = _
         set_mid_point(tp(0), p%, tp(2), n_(0), _
          n_(4), n_(2), tl(4), 0, temp_record, 0, 0, 0, 0, no_reduce)
       If set_property_of_parallelogram > 1 Then
        Exit Function
       End If
       set_property_of_parallelogram = _
         set_mid_point(tp(1), p%, tp(3), n_(1), _
           n_(5), n_(3), tl(5), 0, temp_record, 0, 0, 0, 0, no_reduce)
        If set_property_of_parallelogram > 1 Then
         Exit Function
        End If
      Else
       tp(4) = get_midpoint(tp(0), 0, tp(2), 0, 0, 0, 0, n_(4))
       tp(5) = get_midpoint(tp(1), 0, tp(3), 0, 0, 0, 0, n_(5))
       If tp(4) > 0 Then
        Call add_conditions_to_record(midpoint_, n_(4), 0, 0, temp_record.record_data.data0.condition_data)
        record_0.data0.condition_data.condition_no = 0
         Call add_point_to_line(tp(4), tl(5), n_(5), no_display, False, 0)
          Call set_two_point_line_for_line(tl(5), temp_record.record_data)
         set_property_of_parallelogram = set_New_point(tp(4), temp_record, tl(5), 0, 0, n_(5), 0, 0, 0, 1) ' True, no_display)
          If set_property_of_parallelogram > 1 Then
           Exit Function
          End If
         set_property_of_parallelogram = set_mid_point(tp(1), tp(4), _
            tp(3), 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce)
         If set_property_of_parallelogram > 1 Then
          Exit Function
         End If
       ElseIf tp(5) > 0 Then
        Call add_conditions_to_record(midpoint_, n_(5), 0, 0, temp_record.record_data.data0.condition_data)
        record_0.data0.condition_data.condition_no = 0
         Call add_point_to_line(tp(5), tl(4), n_(4), no_display, False, 0)
          Call set_two_point_line_for_line(tl(5), temp_record.record_data)
         set_property_of_parallelogram = set_New_point(tp(5), temp_record, tl(4), 0, 0, n_(4), 0, 0, 0, 1) ' True, no_display)
         If set_property_of_parallelogram > 1 Then
          Exit Function
         End If
         set_property_of_parallelogram = set_mid_point(tp(0), tp(5), _
            tp(2), 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce)
         If set_property_of_parallelogram > 1 Then
          Exit Function
         End If
       End If
      End If
If th_chose(58).chose = 1 Then
   temp_record.record_data.data0.theorem_no = 58
    tA(0) = angle_number(tp(0), tp(1), tp(2), 0, 0)
     tA(1) = angle_number(tp(2), tp(3), tp(0), 0, 0)
      If tA(0) <> 0 And tA(1) <> 0 Then
       set_property_of_parallelogram = _
        set_three_angle_value(Abs(tA(0)), Abs(tA(1)), 0, "1", "-1", "0", "0", _
          0, temp_record, 0, 0, 0, 5, 0, 0, False)
           If set_property_of_parallelogram > 1 Then
            Exit Function
           End If
      End If
    tA(0) = angle_number(tp(1), tp(2), tp(3), 0, 0)
     tA(1) = angle_number(tp(3), tp(0), tp(1), 0, 0)
      If tA(0) <> 0 And tA(1) <> 0 Then
       set_property_of_parallelogram = _
        set_three_angle_value(Abs(tA(0)), Abs(tA(1)), 0, "1", "-1", "0", "0", _
         0, temp_record, 0, 0, 0, 5, 0, 0, False)
          If set_property_of_parallelogram > 1 Then
           Exit Function
          End If
      End If
 End If
End If
   temp_record.record_data.data0.condition_data.condition_no = 1
    set_property_of_parallelogram = _
      set_four_sides_polygon_for_mid_paral(tp(0), tp(1), tp(2), tp(3), _
       temp_record, 0)
    If set_property_of_parallelogram > 1 Then
     Exit Function
    End If
  temp_record.record_data.data0.condition_data.condition_no = 1
    set_property_of_parallelogram = _
      set_four_sides_polygon_for_mid_paral(tp(1), tp(2), tp(3), tp(3), _
          temp_record, 0)
    If set_property_of_parallelogram > 1 Then
     Exit Function
    End If
End Function
Public Function set_property_of_two_angle_value(ByVal A1%, ByVal A2%, _
        ByVal s1 As String, ByVal S2 As String, ByVal value$, _
         re As total_record_type, ty_ As Byte, ByVal reduce As Byte) As Byte
         'ty_=0  是全角,is_angle_value 两角值已知
Dim i%, j%, tn%, A3%
Dim ty As Byte
Dim v As String
Dim tn1(1) As Integer
Dim tn2(1) As Integer
Dim A(3) As Integer
Dim tA(1) As Integer
Dim tp(1) As Integer
Dim angle_data(2) As angle_data_type
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
If s1 <> "1" Or S2 <> "1" Then
 Exit Function
ElseIf A1% = 0 Or A2% = 0 Then
  Exit Function
ElseIf A1% = A2% Then
 set_property_of_two_angle_value = set_angle_value(A1%, divide_string(value$, "2", True, False), re, 0, 0, False)
  Exit Function
End If
'两角和
temp_record = re
angle_data(0) = angle(A1%).data(0)
angle_data(1) = angle(A2%).data(0)
'互补角
If value$ = "180" Then
  set_property_of_two_angle_value = set_property_of_two_angle_180(A1%, A2%, temp_record, 0)
   If set_property_of_two_angle_value > 1 Then
    Exit Function
   End If
End If
'两角合并
If ty_ = 0 And angle(A1%).data(0).value <> "" And _
                           angle(A2%).data(0).value <> "" Then
If combine_two_Tangle(A1%, A2%, A3%, 0, ty, 0, 0, 1) Then
 If angle(A3%).data(0).value = "" Then
    temp_record.record_data.data0.condition_data.condition_no = 0
     temp_record.record_data.data0.theorem_no = 1
      Call add_conditions_to_record(angle3_value_, angle(A1%).data(0).value_no, _
             angle(A2%).data(0).value_no, 0, temp_record.record_data.data0.condition_data)
If ty = 3 Or ty = 5 Then
set_property_of_two_angle_value = set_angle_value(A3%, _
        value$, temp_record, 0, 0, False)
If set_property_of_two_angle_value > 1 Then
  Exit Function
End If
ElseIf ty = 4 Or ty = 8 Then
v = minus_string(angle(A1%).data(0).value, angle(A2%).data(0).value, _
             True, False)
set_property_of_two_angle_value = set_angle_value(A3%, v, _
             temp_record, 0, 0, False)
If set_property_of_two_angle_value > 1 Then
  Exit Function
End If
 If v = "60" Then
     set_property_of_two_angle_value = set_total_equal_triangle_from_two_angle_value(A1%, A2%, 1, 0, temp_record)
      If set_property_of_two_angle_value > 1 Then
       Exit Function
      End If
 End If
ElseIf ty = 6 Or ty = 7 Then
v = minus_string(angle(A2%).data(0).value, angle(A1%).data(0).value, _
             True, False)
set_property_of_two_angle_value = set_angle_value(A3%, v, temp_record, 0, 0, False)
If set_property_of_two_angle_value > 1 Then
  Exit Function
End If
 If v = "60" Then
      set_property_of_two_angle_value = set_total_equal_triangle_from_two_angle_value(A2%, A1%, 1, 0, temp_record)
     If set_property_of_two_angle_value > 1 Then
       Exit Function
      End If
 End If
ElseIf ty = 15 Or ty = 17 Then
set_property_of_two_angle_value = set_angle_value(A3%, _
        minus_string("180", value$, True, False), temp_record, 0, 0, False)
If set_property_of_two_angle_value > 1 Then
  Exit Function
End If
ElseIf ty = 16 Or ty = 18 Then
set_property_of_two_angle_value = set_angle_value(A3%, _
        minus_string(value$, "180", True, False), temp_record, 0, 0, False)
If set_property_of_two_angle_value > 1 Then
  Exit Function
End If
'ElseIf ty = 19 Or ty = 20 Then
ElseIf ty = 23 Then
v = minus_string("180", angle(A1%).data(0).value, True, False)
v = add_string(v, angle(A2%).data(0).value, True, False)
set_property_of_two_angle_value = set_angle_value(A3%, _
        v, temp_record, 0, 0, False)
If set_property_of_two_angle_value > 1 Then
  Exit Function
End If
ElseIf ty = 24 Then
v = add_string("180", angle(A2%).data(0).value, True, False)
v = minus_string(angle(A1%).data(0).value, v, True, False)
set_property_of_two_angle_value = set_angle_value(A3%, _
        v, temp_record, 0, 0, False)
If set_property_of_two_angle_value > 1 Then
  Exit Function
End If
End If
End If
End If
End If
If angle_data(0).poi(1) <> angle_data(1).poi(1) Then
'**************************************************
'四边形内角和
'************************************************
 tp(0) = inter_point_of_segment(angle_data(0).poi(1), _
   angle_data(0).line_no(0), angle_data(0).te(0), _
    angle_data(1).poi(1), angle_data(1).line_no(1), _
   angle_data(1).te(1))
 tp(1) = inter_point_of_segment(angle_data(0).poi(1), _
   angle_data(0).line_no(1), angle_data(0).te(1), _
     angle_data(1).poi(1), angle_data(1).line_no(0), _
      angle_data(1).te(0))
 If tp(0) > 0 And tp(1) > 0 And (th_chose(53).chose = 1 _
      Or th_chose(132).chose = 1 Or _
    th_chose(131).chose = 1) Then
   temp_record = re
    temp_record.record_data.data0.theorem_no = 53 ' 四边形内角和
     tA(0) = angle_number(angle_data(1).poi(1), _
       tp(0), angle_data(0).poi(1), 0, 0)
     tA(1) = angle_number(angle_data(0).poi(1), _
       tp(1), angle_data(1).poi(1), 0, 0)
     If tA(0) > 0 And tA(1) > 0 Then
       set_property_of_two_angle_value = _
         set_three_angle_value(tA(0), _
           tA(1), 0, "1", "1", "0", minus_string("360", value$, True, False), _
             0, temp_record, 0, 0, 0, 4, 0, 0, False)
        If set_property_of_two_angle_value > 1 Then
         Exit Function
        End If
     End If
 End If
End If
End Function

Public Function set_property_of_three_angle_value(ByVal A1%, ByVal A2%, ByVal A3%, _
         value$, re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim i%, p%
Dim tA%
Dim temp_record As total_record_type
temp_record = re
For i% = 0 To 1
   If angle(A1%).data(0).line_no(i%) = angle(A2%).data(0).line_no((i% + 1) Mod 2) And _
        angle(A1%).data(0).poi(1) <> angle(A2%).data(0).poi(1) Then
    If angle(A1%).data(0).line_no((i% + 1) Mod 2) = angle(A3%).data(0).line_no(i%) And _
         angle(A1%).data(0).poi(1) <> angle(A3%).data(0).poi(1) Then
    If is_less_than("180", value) Then
     temp_record.record_data.data0.theorem_no = 53
     p% = inter_point_of_segment(angle(A2%).data(0).poi(1), _
      angle(A2%).data(0).line_no(i%), angle(A2%).data(0).te(i%), _
       angle(A3%).data(0).poi((i% + 1) Mod 2), angle(A3%).data(0).line_no((i% + 1) Mod 2), _
         angle(A3%).data(0).te((i% + 1) Mod 2))
    If p% > 0 Then '四边形的内角和
     tA = angle_number(angle(A2%).data(0).poi(1), _
                 p%, angle(A3%).data(0).poi(1), 0, 0)
     If (i% = 0 And tA% < 0) Or (i% = 1 And tA% > 0) Then
     set_property_of_three_angle_value = set_angle_value(Abs(angle_number(angle(A2%).data(0).poi(1), _
       p%, angle(A3%).data(0).poi(1), 0, 0)), minus_string("360", value, True, False), temp_record, 0, no_reduce, False)
       If set_property_of_three_angle_value > 1 Then
        Exit Function
       End If
      End If
    End If
    End If
  ElseIf angle(A2%).data(0).line_no(i%) = angle(A3%).data(0).line_no((i% + 1) Mod 2) And _
          angle(A2%).data(0).poi(1) <> angle(A3%).data(0).poi(1) Then
     If is_less_than("180", value) Then
     temp_record.record_data.data0.theorem_no = 53
     p% = inter_point_of_segment(angle(A1%).data(0).poi(1), _
      angle(A1%).data(0).line_no((i% + 1) Mod 2), angle(A1%).data(0).te((i% + 1) Mod 2), _
       angle(A3%).data(0).poi(i%), angle(A3%).data(0).line_no(i%), _
         angle(A3%).data(0).te(i%))
     If p% > 0 Then
     temp_record.record_data.data0.theorem_no = 20
     tA% = angle_number(angle(A1%).data(0).poi(1), _
            p%, angle(A3%).data(0).poi(1), 0, 0)
     If (i% = 0 And tA% > 0) Or (i% = 1 And tA% < 0) Then
      set_property_of_three_angle_value = set_angle_value(Abs(angle_number(angle(A1%).data(0).poi(1), _
       p%, angle(A3%).data(0).poi(1), 0, 0)), minus_string("360", value, True, False), temp_record, 0, no_reduce, False)
       If set_property_of_three_angle_value > 1 Then
        Exit Function
       End If
      End If
     End If
    End If
      End If
  End If
Next i%
End Function

'Public Sub copy_record(re1 As record_type, re2 As record_type)
'Dim i%
'For i% = 1 To 8
're2.data0.condition_data.condition(i%) = re1.data0.condition_data.condition(i%)
're2.data0.condition_type(i%) = re1.data0.condition_type(i%)
'Next i%
're2.data0.condition_data.condition_no = re1.data0.condition_data.condition_no
're2.display_no = re1.display_no
're2.input_to_theorem_text = re1.input_to_theorem_text
're2.is_proved = re1.is_proved
're2.data0.level = re1.data0.level
're2.data(0).no_reduce = re1.no_reduce
're2.old_level = re1.old_level
're2.data(0).data0.theorem_no = re1.data0.theorem_no
'End Sub

Public Sub set_record_for_point_pair(re As record_data_type, ty1 As Byte, ty2 As Byte, ty3 As Byte, _
    n0%, n1%, n2%, n3%, n4%, n5%, n6%)
If ty1 = dpoint_pair_ Then
 Call add_conditions_to_record(ty1, n0%, 0, 0, re.data0.condition_data)
Else
 If ty2 = line_value_ Then
 Call add_conditions_to_record(ty2, n3%, n4%, 0, re.data0.condition_data)
 Else
  Call add_conditions_to_record(ty2, n1%, 0, 0, re.data0.condition_data)
 End If
 If ty3 = line_value_ Then
 Call add_conditions_to_record(ty3, n5%, n6%, 0, re.data0.condition_data)
 Else
  Call add_conditions_to_record(ty3, n2%, 0, 0, re.data0.condition_data)
 End If
End If
End Sub

Public Function set_property_of_eangle(ByVal ty As Byte, ByVal A1%, ByVal A2%, ByVal A3%, _
          A1_%, A2_%, A3_%, re As total_record_type, ty_ As Byte) As Byte
       'ty_=0 原生数据
Dim i%, j%, k%, t_n%, t_n1%, o%, t_A%, tl_%
Dim is_equal_seperat_angle As Boolean
Dim ty0 As Byte
Dim n_(3) As Integer
Dim n(1) As Integer
Dim tA(3) As Integer
Dim tl(1) As Integer
Dim tp(1) As Integer
Dim tp1(3) As Integer
Dim tn(3) As Integer
Dim A(6) As Integer
Dim tA1(3) As Integer
Dim tA2(3) As Integer
Dim tri_f As tri_function_data_type
Dim v As String
Dim angle_data(2) As angle_data_type
Dim triA  As temp_triangle_type
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
Dim c_data0 As condition_data_type
'On Error GoTo set_property_of_eangle_error
If A1% = 0 Or A2% = 0 Or A1% = A2% Then
   Exit Function
End If
If angle(A1%).data(0).value <> "" And angle(A2%).data(0).value = "" Then '等值替换
temp_record = re
temp_record.record_data.data0.theorem_no = 1
Call add_conditions_to_record(angle3_value_, angle(A1%).data(0).value_no, 0, 0, temp_record.record_data.data0.condition_data)
set_property_of_eangle = set_three_angle_value(A2%, 0, 0, "1", "0", "0", _
    angle(A1%).data(0).value, 0, temp_record, 0, 0, 0, 4, 0, 0, False)
 If set_property_of_eangle > 1 Then
  Exit Function
 End If
ElseIf angle(A1%).data(0).value = "" And angle(A2%).data(0).value <> "" Then
Call add_conditions_to_record(angle3_value_, angle(A2%).data(0).value_no, 0, 0, temp_record.record_data.data0.condition_data)
set_property_of_eangle = set_three_angle_value(A2%, 0, 0, "1", "0", "0", _
    angle(A2%).data(0).value, 0, temp_record, 0, 0, 0, 4, 0, 0, False)
 If set_property_of_eangle > 1 Then
  Exit Function
 End If
End If
'******************************
'三角函数
temp_record = re
For i% = 1 To last_conditions.last_cond(1).tri_function_no
tri_f = tri_function(i%).data(0)
 If tri_f.A = A1% Then
  Call add_conditions_to_record(tri_function_, i%, 0, 0, temp_record.record_data.data0.condition_data)
   set_property_of_eangle = set_tri_function(A2%, "", "", "", "", 0, temp_record, False, tri_f, 0)
    If set_property_of_eangle > 1 Then
     Exit Function
    End If
 ElseIf tri_f.A = A2% Then
  Call add_conditions_to_record(tri_function_, i%, 0, 0, temp_record.record_data.data0.condition_data)
   set_property_of_eangle = set_tri_function(A2%, "", "", "", "", 0, temp_record, False, tri_f, 0)
    If set_property_of_eangle > 1 Then
     Exit Function
    End If
 End If
Next i%
'共顶点
temp_record = re
If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) Then
 If angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(0) Then
  If angle(A1%).data(0).line_no(1) <> angle(A2%).data(0).line_no(1) Then
    set_property_of_eangle = combine_two_line(angle(A1%).data(0).line_no(1), angle(A2%).data(0).line_no(1), _
        angle(A1%).data(0).poi(1), temp_record.record_data, 0, 1)
     Exit Function
  Else
     Exit Function
  End If
 ElseIf angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(1) Then
    set_property_of_eangle = combine_two_line(angle(A1%).data(0).line_no(0), angle(A2%).data(0).line_no(0), _
        angle(A1%).data(0).poi(1), temp_record.record_data, 0, 1)
     Exit Function
 ElseIf angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) Then
  is_equal_seperat_angle = True
  tl(0) = angle(A1%).data(0).line_no(0)
 ElseIf angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0) Then
  is_equal_seperat_angle = True
  tl(0) = angle(A1%).data(0).line_no(1)
 Else
 End If
'*************
End If
A(0) = A1%
 A(1) = A2%
  A(2) = A3%
   A(3) = A3_%
    A(4) = A1_%
     A(5) = A2_%
temp_record = re
'全角变换
If ty_ = 0 Then
For i% = 0 To 3
tA1(i%) = T_angle(angle(A1%).data(0).total_no).data(0).angle_no((angle(A1%).data(0).total_no_ + 4 + i%) Mod 4).no
tA2(i%) = T_angle(angle(A2%).data(0).total_no).data(0).angle_no((angle(A2%).data(0).total_no_ + 4 + i%) Mod 4).no
Next i%
For i% = 0 To 3
 For j% = 0 To 3
  If i% <> 0 Or j% <> 0 Then
    If tA1(i%) > 0 And tA2(j%) > 0 Then
       If (i% + j%) Mod 2 = 0 Then
        If is_same_two_point(tA1(i%), tA2(j%), A1%, A2%) = False Then
        set_property_of_eangle = set_property_of_eangle(0, tA1(i%), tA2(j%), 0, 0, 0, 0, temp_record, 1)
         If set_property_of_eangle > 1 Then
          Exit Function
         End If
        End If
       Else
        set_property_of_eangle = set_property_of_two_angle_180(tA1(i%), tA2(j%), temp_record, 1)
         If set_property_of_eangle > 1 Then
          Exit Function
         End If
       End If
   End If
  End If
 Next j%
Next i%
'***************************************
If A3% = 0 Then
If combine_two_angle(A1%, A2%, A(0), A(4), A(3), A(1), A(5), A(2), ty0, 0, 1) Then
   If ty0 <> 3 And ty0 <> 5 Then
    A3% = 0
   Else
    A3% = A(2)
   End If
End If
Else
 ty0 = ty
End If
angle_data(0) = angle(A(0)).data(0)
angle_data(1) = angle(A(1)).data(0)
'If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) Then
If ty0 = 16 Or ty0 = 18 Then
  set_property_of_eangle = set_three_angle_value(A(0), A(1), 0, _
     "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
     If set_property_of_eangle > 1 Then
      Exit Function
     End If
ElseIf ty0 = 19 Or ty0 = 20 Then
      set_property_of_eangle = set_angle_value(A1%, "90", _
         temp_record, 0, 0, False)
       If set_property_of_eangle > 1 Then
        Exit Function
       End If
      set_property_of_eangle = set_angle_value(A2%, "90", _
         temp_record, 0, 0, False)
       If set_property_of_eangle > 1 Then
        Exit Function
       End If
ElseIf ty0 = 3 Or ty0 = 5 Then
        v = ""
        If angle(Abs(A(2))).data(0).value <> "" Then
         temp_record = re
          v = angle(Abs(A(2))).data(0).value
          Call add_conditions_to_record(angle3_value_, angle(Abs(A(2))).data(0).value_no, _
                 0, 0, temp_record.record_data.data0.condition_data)
           v = divide_string(v, "2", True, False)
            If angle(A(0)).data(0).value = "" Then
            set_property_of_eangle = set_angle_value(A(0), v, _
             temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
            End If
            If angle(A(1)).data(0).value = "" Then
             set_property_of_eangle = set_angle_value(A(1), v, _
             temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
            End If
         ElseIf angle(A(0)).data(0).value <> "" Then
          Call add_conditions_to_record(angle3_value_, angle(A(0)).data(0).value_no, _
                 0, 0, temp_record.record_data.data0.condition_data)
           If angle(A(1)).data(0).value = "" Then
            set_property_of_eangle = set_angle_value(A(1), angle(A(0)).data(0).value, _
             temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
            End If
            If angle(A(1)).data(0).value = "" Then
             set_property_of_eangle = set_angle_value(Abs(A(2)), time_string("2", _
                 angle(A(0)).data(0).value, True, False), temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
            End If
         ElseIf angle(A(0)).data(1).value <> "" Then
          Call add_conditions_to_record(angle3_value_, angle(A(1)).data(0).value_no, _
                 0, 0, temp_record.record_data.data0.condition_data)
           If angle(A(1)).data(0).value = "" Then
            set_property_of_eangle = set_angle_value(A(0), angle(A(1)).data(0).value, _
             temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
            End If
            If angle(A(1)).data(0).value = "" Then
             set_property_of_eangle = set_angle_value(Abs(A(2)), time_string("2", _
                 angle(A(1)).data(0).value, True, False), temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
            End If
         End If
         temp_record = re
         '角平分线
         If angle(A(0)).data(0).poi(1) = angle(A(1)).data(0).poi(1) Then
         If angle(A(0)).data(0).line_no(0) = angle(A(1)).data(0).line_no(1) Then
          tl_% = angle(A(0)).data(0).line_no(0)
         Else
          tl_% = angle(A(0)).data(0).line_no(1)
         End If
         set_property_of_eangle = set_eangle_line(A(2), _
             tl_%, temp_record, 1, 0)
         If set_property_of_eangle > 1 Then
           Exit Function
         End If
         End If
ElseIf ty0 = 11 Or ty0 = 13 Then
         If ty_ = 0 Then
            set_property_of_eangle = set_property_of_eangle(0, Abs(A(4)), Abs(A(5)), 0, 0, 0, 0, _
                  temp_record, 1)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
         End If
ElseIf ty0 = 12 Or ty0 = 14 Then
         If ty_ = 0 Then
            set_property_of_eangle = set_property_of_eangle(0, Abs(A(4)), Abs(A(5)), 0, 0, 0, 0, _
                  temp_record, 1)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
         End If
ElseIf ty0 = 9 Or ty0 = 10 Then
     v = ""
        If is_angle_value(Abs(A(2)), v, "", t_n%, temp_record1.data0.condition_data) Then
         temp_record = re
          Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
           v = minus_string("360", v, False, False)
           v = divide_string(v, "2", True, False)
            set_property_of_eangle = set_angle_value(A1%, v, _
             temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
            set_property_of_eangle = set_angle_value(A2%, v, _
             temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
        End If
ElseIf ty0 = 15 Then
     v = ""
        If is_angle_value(Abs(A(2)), v, "", t_n%, temp_record1.data0.condition_data) Then
         temp_record = re
          Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
           v = minus_string("180", v, False, False)
           v = divide_string(v, "2", True, False)
            set_property_of_eangle = set_angle_value(A1%, v, _
             temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
            set_property_of_eangle = set_angle_value(A2%, v, _
             temp_record, 0, 0, False)
            If set_property_of_eangle > 1 Then
             Exit Function
            End If
        End If
     
End If
End If
'End If
'*************************
'弦切角逆定理
 If th_chose(141).chose = 1 Then
    If angle(A1%).data(0).poi(1) <> angle(A2%).data(0).poi(1) Then
       tp(0) = is_line_line_intersect(angle(A1%).data(0).line_no(0), angle(A2%).data(0).line_no(0), 0, 0, False)
       tp(1) = is_line_line_intersect(angle(A1%).data(0).line_no(1), angle(A2%).data(0).line_no(1), 0, 0, False)
       If tp(0) > 0 And tp(1) > 0 Then
          If tp(0) = angle(A1%).data(0).poi(1) Then
          tp1(0) = tp(0)
          tp1(1) = angle(A2%).data(0).poi(1)
          tp1(2) = tp(1)
          tp1(3) = 0
          tl(0) = angle(A1%).data(0).line_no(0)
          ElseIf tp(0) = angle(A2%).data(0).poi(1) Then
          tp1(0) = tp(0)
          tp1(1) = angle(A1%).data(0).poi(1)
          tp1(2) = tp(1)
          tp1(3) = 0
          tl(0) = angle(A2%).data(0).line_no(0)
          ElseIf tp(1) = angle(A1%).data(0).poi(1) Then
          tp1(0) = tp(1)
          tp1(1) = angle(A2%).data(0).poi(1)
          tp1(2) = tp(0)
          tp1(3) = 0
          tl(0) = angle(A1%).data(0).line_no(1)
          ElseIf tp(1) = angle(A2%).data(0).poi(1) Then
           tp1(0) = tp(1)
           tp1(1) = angle(A1%).data(0).poi(1)
           tp1(2) = tp(0)
           tp1(3) = 0
           tl(0) = angle(A2%).data(0).line_no(1)
          Else
           tp1(0) = tp(0)
           tp1(1) = tp(1)
           tp1(2) = angle(A1%).data(0).poi(1)
           tp1(3) = angle(A2%).data(0).poi(1)
        End If
         If tp1(3) = 0 Then
               Call is_conclusion_no(tangent_line_, tn())
         For i% = 0 To last_conclusion - 1
         If tn(i%) >= 0 Then
          If tl(0) = con_tangent_line(tn(i%)).data(0).line_no Then
          tl(1) = m_circle_number(1, 0, pointapi0, tp1(0), tp1(1), tp1(2), 0, _
                   0, 0, 1, 0, 0, 0, False)
          If tl(1) > 0 Then
            If tl(1) = con_tangent_line(tn(i%)).data(0).ele(0).no And _
                         con_tangent_line(tn(i%)).data(0).ele(0).ty = line_ Then
             If m_poi(m_Circ(tl(1)).data(0).data0.center).data(0).data0.visible = 0 Then
              set_property_of_eangle = add_aid_point_for_circle_center(tl(1))
               If set_property_of_eangle > 1 Then
                Exit Function
               End If
             End If
                set_property_of_eangle = add_interset_point_line_circle(0, _
                        0, line_number0(tp1(2), m_Circ(tl(1)).data(0).data0.center, 0, 0), tl(1), 0, c_data0, 0)
                If set_property_of_eangle > 1 Then
                 Exit Function
                End If
            End If
          End If
          End If
          End If
          Next i%
          Else
           If th_chose(133).chose = 1 Or th_chose(134).chose = 1 Then
              If re.record_data.data0.condition_data.condition(1).ty <> point4_on_circle_ Then
              temp_record = re
              temp_record.record_data.data0.theorem_no = 133
              set_property_of_eangle = set_four_point_on_circle(tp1(0), tp1(1), _
                tp1(2), tp1(3), 0, temp_record, 0, 0)
                If set_property_of_eangle > 1 Then
                 Exit Function
                End If
              End If
           End If
         End If
       End If
    End If
 End If
set_property_of_eangle_tangent_line_out:
'等角差
  temp_record.record_data.data0.theorem_no = 1
   For i% = 1 + last_conditions.last_cond(0).angle_no To last_conditions.last_cond(1).angle_no
    n(0) = angle(i%).data(0).index(0)
      If n(0) <> A(0) And n(0) <> A(1) And _
           angle(n(0)).data(0).value <> "" Then
         For j% = 1 + last_conditions.last_cond(0).angle_no To i% - 1
           n(1) = angle(j%).data(0).index(0)
             If n(1) <> A(0) And n(1) <> A(1) And angle(n(1)).data(0).value <> "" Then
               If angle(n(0)).data(0).value = angle(n(1)).data(0).value And _
                         temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_ Then
                 temp_record = re
                   Call add_conditions_to_record(angle3_value_, angle(n(0)).data(0).value_no, angle(n(1)).data(0).value_no, _
                      0, temp_record.record_data.data0.condition_data)
                    Call combine_two_angle(n(0), n(1), 0, 0, 0, 0, 0, tA(0), ty0, 0, 1)
          set_property_of_eangle = _
             set_different_of_two_eangle(ty0, ty, n(0), _
                n(1), tA(0), A(0), A(1), A(2), temp_record, 0)
          If set_property_of_eangle > 1 Then
           Exit Function
          End If
               End If
           End If
         ' End If
       Next j%
    'End If
   End If
  Next i%
For i% = 1 To last_conditions.last_cond(1).eangle_no
 '等角
 t_n% = Deangle.av_no(i%).no
 If angle3_value(t_n%).data(0).data0.angle(0) <> A(0) Or _
      angle3_value(t_n%).data(0).data0.angle(1) <> A(1) Then
         temp_record = re
       Call add_conditions_to_record(angle3_value_, t_n%, 0, 0, temp_record.record_data.data0.condition_data)
    set_property_of_eangle = _
      set_different_of_two_eangle(angle3_value(t_n%).data(0).data0.ty_(0), ty, angle3_value(t_n%).data(0).data0.angle(0), _
       angle3_value(t_n%).data(0).data0.angle(1), angle3_value(t_n%).data(0).data0.angle_(3), A(0), A(1), A(2), temp_record, 0)
    If set_property_of_eangle > 1 Then
     Exit Function
    End If
    If is_equal_seperat_angle Then
     '角平分线
     If angle(angle3_value(t_n%).data(0).data0.angle(0)).data(0).poi(1) = _
                   angle(angle3_value(t_n%).data(0).data0.angle(1)).data(0).poi(1) Then '和
        If angle(angle3_value(t_n%).data(0).data0.angle(0)).data(0).line_no(1) = _
             angle(angle3_value(t_n%).data(0).data0.angle(1)).data(0).line_no(0) Then '角平分线
          tl(1) = angle(angle3_value(t_n%).data(0).data0.angle(0)).data(0).line_no(1)
        Else
          tl(1) = angle(angle3_value(t_n%).data(0).data0.angle(0)).data(0).line_no(0)
        End If
    If angle(A(2)).data(0).line_no(0) = angle(angle3_value(t_n%).data(0).data0.angle_(3)).data(0).line_no(1) And _
          angle(A(2)).data(0).line_no(1) = angle(angle3_value(t_n%).data(0).data0.angle_(3)).data(0).line_no(0) Then
           '互补角
        temp_record.record_data.data0.theorem_no = 1
         For j% = 0 To 1
          For k% = 0 To 1
           If angle3_value(t_n%).data(0).data0.ty_(0) = 3 Or angle3_value(t_n%).data(0).data0.ty_(0) = 5 Then
           set_property_of_eangle = set_three_angle_value(A(j%), _
             angle3_value(t_n%).data(0).data0.angle(k%), 0, "1", "1", "0", "90", _
              0, temp_record, 0, 0, 0, 4, 0, 0, False)
              If set_property_of_eangle > 1 Then
               Exit Function
              End If
           ElseIf angle3_value(t_n%).data(0).data0.ty_(0) = 15 Or angle3_value(t_n%).data(0).data0.ty_(0) = 17 Then
           ElseIf angle3_value(t_n%).data(0).data0.ty_(0) = 16 Or angle3_value(t_n%).data(0).data0.ty_(0) = 18 Then
           set_property_of_eangle = set_three_angle_value(A(j%), _
             angle3_value(t_n%).data(0).data0.angle(k%), 0, "1", "1", "0", "180", _
              0, temp_record, 0, 0, 0, 4, 0, 0, False)
              If set_property_of_eangle > 1 Then
               Exit Function
              End If
           End If
          Next k%
         Next j%
     ElseIf combine_two_angle(A(2), angle3_value(t_n%).data(0).data0.angle_(3), 0, 0, 0, 0, 0, t_A%, ty0, 0, 1) Then
         If ty0 = 3 Or ty0 = 5 Then
          v = ""
           If is_angle_value(t_A%, v, "", t_n1%, temp_record1.data0.condition_data) Then
            Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
             temp_record.record_data.data0.theorem_no = 1
              For j% = 0 To 1
               For k% = 0 To 1
                set_property_of_eangle = set_three_angle_value(A(j%), _
                 angle3_value(t_n%).data(0).data0.angle(k%), 0, "1", "1", "0", _
                  divide_string(v, "2", True, False), _
                   0, temp_record, 0, 0, 0, 4, 0, 0, False)
                    If set_property_of_eangle > 1 Then
                     Exit Function
                    End If
               Next k%
              Next j%
           End If
          End If
     End If
     If tl(0) > 0 And tl(1) > 0 Then
      temp_record = re   '三条叫平分线公点
            Call add_conditions_to_record(angle3_value_, t_n%, 0, 0, temp_record.record_data.data0.condition_data)
             temp_record.record_data.data0.theorem_no = 162
      tp(0) = is_line_line_intersect(tl(0), tl(1), 0, 0, False)
      If tp(0) > 0 Then
      If angle(A(2)).data(0).line_no(0) = angle(angle3_value(t_n%).data(0).data0.angle_(3)).data(0).line_no(1) Then
       tp(1) = is_line_line_intersect(angle(A(2)).data(0).line_no(1), _
                   angle(angle3_value(t_n%).data(0).data0.angle_(3)).data(0).line_no(0), 0, 0, False)
         If tp(1) > 0 Then
          A(3) = Abs(angle_number(angle(A(2)).data(0).poi(1), tp(1), tp(0), "", 0))
          A(4) = Abs(angle_number(angle(angle3_value(t_n%).data(0).data0.angle_(3)).data(0).poi(1), _
                 tp(1), tp(0), "", 0))
          If A(3) > 0 Then
          If A(4) > 0 Then
          set_property_of_eangle = set_three_angle_value(A(3), A(4), 0, "1", "-1", "0", "0", 0, _
              temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          End If
'*******************************************
          set_property_of_eangle = set_three_angle_value(A(3), _
             A(0), angle3_value(t_n%).data(0).data0.angle(0), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(3), _
             A(0), angle3_value(t_n%).data(0).data0.angle(1), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(3), _
               A(1), angle3_value(t_n%).data(0).data0.angle(0), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(3), _
             A(1), angle3_value(t_n%).data(0).data0.angle(1), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          End If
'*********************************************
          If A(4) > 0 Then
          set_property_of_eangle = set_three_angle_value(A(4), _
            A(0), angle3_value(t_n%).data(0).data0.angle(0), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(4), _
            A(0), angle3_value(t_n%).data(0).data0.angle(1), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(4), _
            A(1), angle3_value(t_n%).data(0).data0.angle(0), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(4), _
             A(1), angle3_value(t_n%).data(0).data0.angle(1), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
         End If
      ElseIf angle(A(2)).data(0).line_no(1) = angle(angle3_value(t_n%).data(0).data0.angle_(3)).data(0).line_no(0) Then
       tp(1) = is_line_line_intersect(angle(A(2)).data(0).line_no(0), _
                  angle(angle3_value(t_n%).data(0).data0.angle_(3)).data(0).line_no(1), 0, 0, False)
         If tp(1) > 0 Then
         A(3) = Abs(angle_number(angle(A(2)).data(0).poi(1), tp(1), tp(0), "", 0))
         A(4) = Abs(angle_number(angle(angle3_value(t_n%).data(0).data0.angle_(3)).data(0).poi(1), _
              tp(1), tp(0), "", 0))
          If A(3) > 0 Then
          If A(4) > 0 Then
          set_property_of_eangle = set_three_angle_value(A(3), A(4), _
               0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          End If
  '*******************************************
          set_property_of_eangle = set_three_angle_value(A(3), _
              A(0), angle3_value(t_n%).data(0).data0.angle(0), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(3), _
             A(0), angle3_value(t_n%).data(0).data0.angle(1), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(3), _
             A(1), angle3_value(t_n%).data(0).data0.angle(0), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(3), _
            A(1), angle3_value(t_n%).data(0).data0.angle(1), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
         End If
'*********************************************
         If A(4) > 0 Then
          set_property_of_eangle = set_three_angle_value(A(4), _
             A(0), angle3_value(t_n%).data(0).data0.angle(0), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(4), _
             A(0), angle3_value(t_n%).data(0).data0.angle(1), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(4), _
             A(1), angle3_value(t_n%).data(0).data0.angle(0), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          set_property_of_eangle = set_three_angle_value(A(4), _
             A(1), angle3_value(t_n%).data(0).data0.angle(1), _
                   "1", " 1", "1", "90", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
          If set_property_of_eangle > 1 Then
              Exit Function
          End If
          End If
         End If
        End If
         End If
     End If
     End If
     End If
     End If
     End If
     Next i%
'End If
'********
'弦切角逆定理,推广的角平分线定理
 'temp_record.record_data.data0.theorem_no = 0
 'End If
 'End If
'End If
'*********
'If angle(A(0)).data(0).poi(1) = angle(A(1)).data(0).poi(1) Then
' If ty = 0 And ty_ = 0 Then
' tA(0) = Abs(angle_number(angle(A(0)).data(0).poi(0), angle(A(0)).data(0).poi(1), angle(A(1)).data(0).poi(0), 0, 0))
' tA(1) = Abs(angle_number(angle(A(0)).data(0).poi(2), angle(A(0)).data(0).poi(1), angle(A(1)).data(0).poi(2), 0, 0))
' set_property_of_eangle = set_property_of_eangle(0, Abs(tA(0)), Abs(tA(1)), 0, 0, 0, 0, re, 1)
'         If set_property_of_eangle > 1 Then
'        Exit Function
'       End If
'  v = ""
'  If is_angle_value(tA(0), "", v, t_n%, temp_record1) Then
'    temp_record = re
'      Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
'       set_property_of_eangle = set_angle_value(tA(1), v, temp_record, 0, 0)
'         If set_property_of_eangle > 1 Then
'        Exit Function
'       End If
'  Else
'   v = ""
'   If is_angle_value(tA(1), "", v, t_n%, temp_record1) Then
'     temp_record = re
'      Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
'       set_property_of_eangle = set_angle_value(tA(1), v, temp_record, 0, 0)
'         If set_property_of_eangle > 1 Then
'          Exit Function
'         End If
'   End If
' End If
' End If
' End If
'*********
temp_record = re
For j% = 0 To 1
 If angle(A(0)).data(0).line_no(j%) = angle(A(1)).data(0).line_no(j%) Then
 '一边同
'******************************************************************
 '　同位角相等

 If angle(A(0)).data(0).poi(1) <> angle(A(1)).data(0).poi(1) Then
   If (th_chose(8).chose = 1 Or th_chose(9).chose = 1) Then
   If re.record_data.data0.condition_data.condition_no = 1 And _
     re.record_data.data0.condition_data.condition(1).ty <> paral_ Then
      If angle(A(0)).data(0).te(j%) = angle(A(1)).data(0).te(j%) Then
        temp_record.record_data.data0.theorem_no = 8
      Else
        temp_record.record_data.data0.theorem_no = 9
      End If
        set_property_of_eangle = _
          set_dparal(angle(A(0)).data(0).line_no((j% + 1) Mod 2), angle(A(1)).data(0).line_no((j% + 1) Mod 2), _
          temp_record, 0, 0, False)
          If set_property_of_eangle > 1 Then
           Exit Function
          End If
    End If
   End If
 Else
         temp_record = re
         temp_record.record_data.data0.theorem_no = 0
  set_property_of_eangle = _
        combine_two_line(angle(A(0)).data(0).line_no((j% + 1) Mod 2), _
            angle(A(1)).data(0).line_no((j% + 1) Mod 2), angle(A(0)).data(0).poi(1), temp_record.record_data, 0, 0)
    If set_property_of_eangle > 1 Then
     Exit Function
    End If
  End If
'***********************************************8
 'Else '　无公共点平行
'*******************************************

'*******************************************************
ElseIf is_dparal(angle(A(0)).data(0).line_no(j%), _
  angle(A(1)).data(0).line_no(j%), t_n%, -1000, 0, 0, 0, 0) And th_chose(159).chose = 1 Then
'一边平行
    temp_record = re
     Call add_conditions_to_record(paral_, t_n%, 0, 0, temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 159
   set_property_of_eangle = _
      set_dparal(angle(A(0)).data(0).line_no((j% + 1) Mod 2), _
     angle(A(1)).data(0).line_no((j% + 1) Mod 2), temp_record, 0, 0, False)
   If set_property_of_eangle > 1 Then
    Exit Function
   End If
'**************************************************************
'一对边垂直另一对边也垂直
'****************************************************************
ElseIf is_dverti(angle(A(0)).data(0).line_no(j%), _
  angle(A(1)).data(0).line_no(j%), t_n%, -1000, 0, 0, 0, 0) And th_chose(159).chose = 1 Then
   temp_record = re
    Call add_conditions_to_record(verti_, t_n%, 0, 0, temp_record.record_data.data0.condition_data)
          temp_record.record_data.data0.theorem_no = 159
 set_property_of_eangle = set_dverti(angle(A(0)).data(0).line_no((j% + 1) Mod 2), _
     angle(A(1)).data(0).line_no((j% + 1) Mod 2), temp_record, 0, 0, False)
If set_property_of_eangle > 1 Then
 Exit Function
End If
End If
'*******************************************************
 '等角对等边
 '**************************************************
'If re.data0.condition_data.condition(1).ty <> eline Then
 If th_chose(40).chose = 1 Then
 If angle(A(0)).data(0).line_no(j%) = _
   angle(A(1)).data(0).line_no((j% + 1) Mod 2) Then
  tp(0) = inter_point_of_segment(angle(A(0)).data(0).poi(1), _
   angle(A(0)).data(0).line_no((j% + 1) Mod 2), angle(A(0)).data(0).te((j% + 1) Mod 2), _
   angle(A(1)).data(0).poi(1), angle(A(1)).data(0).line_no(j%), _
   angle(A(1)).data(0).te(j%))
If tp(0) > 0 Then
 temp_record = re
  temp_record.record_data.data0.theorem_no = 40
  set_property_of_eangle = set_equal_dline(angle(A(0)).data(0).poi(1), tp(0), _
    angle(A(1)).data(0).poi(1), tp(0), 0, 0, 0, 0, 0, 0, 0, _
     temp_record, 0, 0, 0, 0, 0, False)
If set_property_of_eangle > 1 Then
 Exit Function
End If
End If
End If
End If
'共顶角的三角性
Next j%
'****************************************************
'******************************************************
If th_chose(28).chose = 1 Or th_chose(29).chose = 1 And th_chose(30).chose = 1 Or _
     th_chose(31).chose = 1 Or th_chose(32).chose = 1 Or _
      th_chose(93).chose = 1 Or th_chose(94).chose Then
      temp_record = re
set_property_of_eangle = _
  set_total_equal_triangle_from_eangle(A(0), A(1), _
                         temp_record, 0, 0, 0, 0, 0, 0, 1)
If set_property_of_eangle > 1 Then
 Exit Function
End If
End If
'*********************************************
'等式两边加减同量
'*******************************************************************
'四点共圆
'*********************************************************
Exit Function
set_property_of_eangle_error:
End Function

Public Function solve_triangle(ByVal no%, tri_ As triangle_data0_type, _
         ByVal new_a%, ByVal new_l%, ByVal new_m%, ByVal new_re_no%, _
                         ByVal new_time_of_two_line%, ByVal area_no%, _
                          ByVal verti_no%, ByVal eangle_no%, _
                           ByVal new_t_angle_equal%, ByVal new_tri_f%, ty As Byte, _
                            ByVal no_reduce As Byte, cal_float As Boolean) As Byte
'ty=0 建立ty=1 更新
Dim i%, tp%
Dim ts$
Dim n(2) As Integer
Dim tl(1) As Integer
Dim tn%, mp%
Dim A(1) As Integer
Dim tn_(3) As Integer
Dim ep As polygon
Dim t_s(2) As String
Dim dt_s(2) As String
Dim temp_record As total_record_type
Dim triangle_data As triangle_data0_type
Dim tri As triangle_data0_type
tri = tri_
If no% = 0 And (tri.poi(0) = 0 Or tri.poi(1) = 0 Or tri.poi(2) = 0) Then
   Exit Function
End If
triangle_data = tri
If regist_data.run_type = 0 Then
If angle(tri.angle(0)).data(0).value = "90" Then
 solve_triangle = solve_right_triangle(no%, tri, 0, 1, ty, False, 0)
  Exit Function
ElseIf angle(tri.angle(1)).data(0).value = "90" Then
 solve_triangle = solve_right_triangle(no%, tri, 1, 2, ty, False, 0)
  Exit Function
ElseIf angle(tri.angle(2)).data(0).value = "90" Then
 solve_triangle = solve_right_triangle(no%, tri, 2, 0, ty, False, 0)
  Exit Function
End If
If ty = 1 Then '更新数据
 If new_t_angle_equal% > -1 Then
    tn_(0) = new_t_angle_equal%
     tn_(1) = (tn_(0) + 1) Mod 3
      tn_(2) = (tn_(0) + 2) Mod 3
  If th_chose(40).chose = 1 Then
    temp_record.record_data.data0.condition_data.condition_no = 1
     temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_
      temp_record.record_data.data0.condition_data.condition(1).no = triangle_data.two_angle_equal(tn_(0))
       temp_record.record_data.data0.theorem_no = 40
    solve_triangle = set_equal_dline(triangle_data.poi(tn_(1)), _
      triangle_data.poi(tn_(0)), triangle_data.poi(tn_(2)), _
       triangle_data.poi(tn_(0)), 0, 0, 0, 0, 0, 0, 0, _
        temp_record, 0, 0, 0, 0, no_reduce, False)
    If solve_triangle > 1 Then
     Exit Function
    End If
  End If
'*************************
 ElseIf area_no% > -1 Then
  If angle(triangle_data.angle(0)).data(0).value <> "" Or triangle_data.tri_function(0) > 0 Then
   solve_triangle = set_two_line_time_form_area(no%, triangle_data, 0, no_reduce)
   If solve_triangle > 1 Then
    Exit Function
   End If
  ElseIf angle(triangle_data.angle(1)).data(0).value <> "" Or triangle_data.tri_function(1) > 0 Then
   solve_triangle = set_two_line_time_form_area(no%, triangle_data, 1, no_reduce)
   If solve_triangle > 1 Then
    Exit Function
   End If
  ElseIf angle(triangle_data.angle(2)).data(0).value <> "" Or triangle_data.tri_function(2) > 0 Then
   solve_triangle = set_two_line_time_form_area(no%, triangle_data, 2, no_reduce)
   If solve_triangle > 1 Then
    Exit Function
   End If
  End If
'*************************
 ElseIf new_tri_f% > -1 Then
  solve_triangle = th_cos_(no%, triangle_data, new_tri_f%, 0, cal_float)
  If solve_triangle > 1 Then
    Exit Function
  End If
'*************************
 ElseIf new_m% > -1 Then  '新设中点
  solve_triangle = new_midpoint_for_triangle(no%, _
         triangle_data, new_m%, no_reduce)
  If solve_triangle > 1 Then
    Exit Function
  End If
'*****************************************
 ElseIf verti_no% > -1 Then  '新设垂线
  solve_triangle = new_verti_for_triangle(no%, triangle_data, _
      verti_no%, no_reduce)
  If solve_triangle > 1 Then
   Exit Function
  End If
 ElseIf eangle_no% > -1 Then '新设角平分线
  solve_triangle = new_eangle_no_for_triangle(no%, triangle_data, _
      eangle_no%, no_reduce)
  If solve_triangle > 1 Then
   Exit Function
  End If
'******************'
ElseIf new_a% >= 0 Then '新角
 solve_triangle = new_angle_for_triangle(no%, triangle_data, new_a%, _
        no_reduce)
 If solve_triangle > 1 Then
  Exit Function
 End If
'****************
'****************
ElseIf new_l% >= 0 Then
 solve_triangle = new_line_for_triangle(no%, triangle_data, _
     new_l%, no_reduce)
 If solve_triangle > 1 Then
    Exit Function
 End If
ElseIf new_re_no% >= 0 Then
 solve_triangle = new_re_no_for_triangle(no%, triangle_data, _
     new_re_no%, no_reduce)
 If solve_triangle > 1 Then
    Exit Function
 End If
 solve_triangle = th_cos_(no%, triangle_data, new_re_no%, no_reduce, cal_float)
 If solve_triangle > 1 Then
    Exit Function
 End If
End If
Else '开始设置
 For i% = 0 To 2
  temp_record.record_data.data0.condition_data.condition_no = 0
 If angle(triangle_data.angle(i%)).data(0).value_no > 0 And _
     angle(triangle_data.angle((i% + 1) Mod 3)).data(0).value_no > 0 And _
       angle(triangle_data.angle((i% + 2) Mod 3)).data(0).value_no = 0 Then
   Call add_conditions_to_record(angle3_value_, _
          angle(triangle_data.angle(i%)).data(0).value_no, _
           angle(triangle_data.angle((i% + 1) Mod 3)).data(0).value_no, 0, _
            temp_record.record_data.data0.condition_data)
            tn% = 0
   solve_triangle = set_angle_value( _
         triangle_data.angle((i% + 2) Mod 3), _
           minus_string(minus_string("180", angle(triangle_data.angle(i%)).data(0).value, _
            False, False), angle(triangle_data.angle((i% + 1) Mod 3)).data(0).value, True, False), _
             temp_record, tn%, 0, False)
   If solve_triangle > 1 Then
      Exit Function
   End If
    triangle_data.angle_value((i% + 2) Mod 3) = tn%
    triangle(no%).data(0).angle_value((i% + 2) Mod 3) = tn%
    GoTo solve_triangle_mark1
   End If
  Next i%
solve_triangle_mark1:
 For i% = 0 To 2
  If triangle_data.tri_function(i%) > 0 Then
   solve_triangle = solve_triangle(no%, triangle_data, -1, _
     -1, -1 - 1, -1, -1, -1, -1, -1, -1, i%, 1, no_reduce, cal_float)
     If solve_triangle > 1 Then
      Exit Function
     End If
  End If
  If triangle_data.midpoint_no(i%) > 0 Then
   solve_triangle = solve_triangle(no%, triangle_data, -1, _
     -1, i%, -1, -1, -1, -1, -1, -1, -1, 1, no_reduce, cal_float)
     If solve_triangle > 1 Then
      Exit Function
     End If
  End If
  If triangle_data.line_value(i%) > 0 Then
   solve_triangle = solve_triangle(no%, triangle_data, -1, _
     i%, -1, -1, -1, -1, -1, -1, -1, -1, 1, no_reduce, cal_float)
     If solve_triangle > 1 Then
      Exit Function
     End If
  End If
  If triangle_data.relation_no(i%, 0).ty > 0 Then
     solve_triangle = solve_triangle(no%, triangle_data, -1, _
     -1, -1, i%, -1, -1, -1, -1, -1, -1, 1, no_reduce, cal_float)
     If solve_triangle > 1 Then
      Exit Function
     End If
  End If
  If triangle_data.time_of_two_line(i%) > 0 Then
   solve_triangle = solve_triangle(no%, triangle_data, -1, _
     -1, -1, -1, i%, -1, -1, -1, -1, -1, 1, no_reduce, cal_float)
     If solve_triangle > 1 Then
      Exit Function
     End If
  End If
  If triangle_data.eangle_no(i%, 0).no > 0 Then
   solve_triangle = solve_triangle(no%, triangle_data, -1, _
     -1, -1, -1, -1, -1, -1, i%, -1, -1, 1, no_reduce, cal_float)
     If solve_triangle > 1 Then
      Exit Function
     End If
  End If
  If triangle_data.verti_no(i%) > 0 Then
    solve_triangle = solve_triangle(no%, triangle_data, -1, _
     -1, -1, -1, -1, -1, i%, -1, -1, -1, 1, no_reduce, cal_float)
     If solve_triangle > 1 Then
      Exit Function
     End If
  End If
 Next i%
  If triangle_data.area_no% > 0 Then
   solve_triangle = solve_triangle(no%, triangle_data, -1, _
     -1, -1, -1, -1, i%, -1, -1, -1, -1, 1, no_reduce, cal_float)
     If solve_triangle > 1 Then
      Exit Function
     End If
  End If
End If
Else
 If triangle_data.v_line(0) > 0 And triangle_data.v_line(1) > 0 And _
         triangle_data.v_line(2) = 0 Then
    solve_triangle = combine_two_v_line_value_0(triangle_data.v_line(0), _
         triangle_data.v_line(1), 0)
      If solve_triangle > 1 Then
       Exit Function
      End If
ElseIf triangle_data.v_line(0) = 0 And triangle_data.v_line(1) > 0 And _
         triangle_data.v_line(2) > 0 Then
    solve_triangle = combine_two_v_line_value_0(triangle_data.v_line(1), _
         triangle_data.v_line(2), 0)
      If solve_triangle > 1 Then
       Exit Function
      End If
ElseIf triangle_data.v_line(0) > 0 And triangle_data.v_line(1) = 0 And _
         triangle_data.v_line(2) > 0 Then
    solve_triangle = combine_two_v_line_value_0(triangle_data.v_line(0), _
         triangle_data.v_line(2), 0)
     If solve_triangle > 1 Then
      Exit Function
     End If
End If
End If
End Function

Public Function get_display_no(ByVal ty As Byte, _
         ByVal no As Integer) As Integer
Dim i%
For i% = 1 To display_no
If display_string(i%).display_record_type = ty And _
   Abs(display_string(i%).display_record_no) = no Then
    get_display_no = i%
  Exit Function
End If
Next i%
 get_display_no = 0
End Function

Public Function set_triangle_(ByVal p1%, ByVal p2%, ByVal p3%, _
    triA As triangle_data0_type, direction%) As Byte
Dim tp(2) As Integer
Dim A(2) As Integer
record_0.data0.condition_data.condition_no = 0 ' record0
If is_three_point_on_line(p1%, p2%, p3%, 0, -1000, 0, 0, record_0.data0.condition_data, _
    0, 0, 0) = 1 Then
 set_triangle_ = 0
  Exit Function
ElseIf p1% < p2% And p2% < p3% Then
  direction% = 1
   tp(0) = p1%
    tp(1) = p2%
     tp(2) = p3%
ElseIf p1% < p3% And p3% < p2% Then
  direction% = -1
   tp(0) = p1%
    tp(1) = p3%
     tp(2) = p2%
ElseIf p2% < p3% And p3% < p1% Then
  direction% = 3
    tp(0) = p2%
     tp(1) = p3%
      tp(2) = p1%
ElseIf p2% < p1% And p1% < p3% Then
    direction% = -2
     tp(0) = p2%
      tp(1) = p1%
       tp(2) = p3%
ElseIf p3% < p1% And p1% < p2% Then
     direction% = 2
   tp(0) = p3%
    tp(1) = p1%
     tp(2) = p2%
ElseIf p3% < p2% And p2% < p1% Then
    direction% = -3
     tp(0) = p3%
      tp(1) = p2%
       tp(2) = p1%
End If
A(0) = angle_number(tp(2), tp(0), tp(1), 0, 0)
  A(1) = angle_number(tp(0), tp(1), tp(2), 0, 0)
   A(2) = angle_number(tp(1), tp(2), tp(0), 0, 0)
If A(0) = 0 Or A(1) = 0 Or A(2) = 0 Then
 set_triangle_ = 0
Else
set_triangle_ = 1
triA.poi(0) = tp(0)
triA.poi(1) = tp(1)
triA.poi(2) = tp(2)
triA.poi(3) = tp(2)
triA.line_no(0) = line_number0(tp(1), tp(2), 0, 0)
triA.line_no(1) = line_number0(tp(0), tp(2), 0, 0)
triA.line_no(2) = line_number0(tp(1), tp(0), 0, 0)
triA.angle(0) = Abs(A(0))
triA.angle_value(0) = angle(triA.angle(0)).data(0).value_no
triA.angle(1) = Abs(A(1))
triA.angle_value(1) = angle(triA.angle(1)).data(0).value_no
triA.angle(2) = Abs(A(2))
triA.angle_value(2) = angle(triA.angle(2)).data(0).value_no
End If
End Function

Public Function set_property_of_angle_value(ByVal A%, ByVal value As String, _
    re As total_record_type, ty_ As Byte, ty2_ As Byte) As Byte
    'ty_ 邻角,ty2_ 和角
Dim i%, tp%, j%, g%, tn%, tn1%, l%, n%
Dim str1 As String
Dim str2 As String
Dim ts$
Dim ty As Byte
Dim t_y(1) As Byte
Dim t_p(1) As Integer
Dim t_n(10) As Integer
Dim dn(3) As Integer
Dim tA(4) As Integer
Dim ti(2) As Integer
Dim po As polygon
Dim tri As triangle_data0_type
Dim t_A As temp_triangle_type
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
Dim re1 As record_data_type
Dim lv_data0 As line_value_data0_type
Dim tri_f As tri_function_data_type
'On Error GoTo set_property_of_angle_value_error
 set_property_of_angle_value = combine_angle_value_with_item0( _
    A%, value, re.record_data)
 If set_property_of_angle_value > 1 Then
  Exit Function
 End If
temp_record = re
str1 = sin_(value, 0)
str2 = cos_(value, 0)
If InStr(1, str1, "F", 0) = 0 Then
set_property_of_angle_value = set_tri_function(A%, str1, str2, "", "", 0, temp_record, False, tri_f, 0)
 If set_property_of_angle_value > 1 Then
  Exit Function
 End If
End If
If value = "90" Then
  For i% = 1 To last_conditions.last_cond(1).parallelogram_no
  For j% = 0 To 3
   If A% = Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).angle(j%) Then
 temp_record = re
    Call add_conditions_to_record(parallelogram_, i%, 0, 0, temp_record.record_data.data0.condition_data)
    set_property_of_angle_value = set_long_squre( _
      Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(0), _
       Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(1), _
        Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(2), _
         Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(3), temp_record, 0, 0, 0, False)
       If set_property_of_angle_value > 1 Then
        Exit Function
       End If
       GoTo set_property_of_angle_value_next0
   End If
  Next j%
set_property_of_angle_value_next0:
  Next i%
 temp_record = re
 If re.record_data.data0.condition_data.condition(1).ty <> verti_ Then  '设置垂直关系
 set_property_of_angle_value = set_dverti(angle(A%).data(0).line_no(0), _
    angle(A%).data(0).line_no(1), temp_record, 0, 0, False)
  If set_property_of_angle_value > 1 Then
   Exit Function
  End If
 End If
  Call is_point_in_line3(angle(A%).data(0).poi(1), m_lin(angle(A%).data(0).line_no(0)).data(0).data0, _
   t_n(4))
  Call is_point_in_line3(angle(A%).data(0).poi(1), m_lin(angle(A%).data(0).line_no(1)).data(0).data0, _
   t_n(5))
 If angle(A%).data(0).te(0) = 0 Then
    dn(1) = t_n(4) - 1
     dn(0) = 1
 Else
    dn(0) = t_n(4) + 1
     dn(1) = m_lin(angle(A%).data(0).line_no(0)).data(0).data0.in_point(0)
 End If
 If angle(A%).data(0).te(1) = 0 Then
    dn(3) = t_n(5) - 1
     dn(2) = 1
 Else
    dn(2) = t_n(5) + 1
     dn(3) = m_lin(angle(A%).data(0).line_no(1)).data(0).data0.in_point(0)
 End If
 For i% = dn(0) To dn(1)
  For j% = dn(2) To dn(3)
   temp_record = re
   If is_equal_dline(angle(A%).data(0).poi(1), m_lin(angle(A%).data(0).line_no(0)).data(0).data0.in_point(i%), _
          angle(A%).data(0).poi(1), m_lin(angle(A%).data(0).line_no(1)).data(0).data0.in_point(j%), t_n(4), _
           i%, t_n(5), j%, angle(A%).data(0).line_no(0), angle(A%).data(0).line_no(1), _
             dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), t_y(0), _
               "", record_0.data0.condition_data) Then
    Call add_conditions_to_record(t_y(0), dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
    If get_midpoint(m_lin(angle(A%).data(0).line_no(0)).data(0).data0.in_point(i%), 0, _
        m_lin(angle(A%).data(0).line_no(1)).data(0).data0.in_point(j%), 0, 0, 0, 0, 0) = 0 Then
      g% = line_number0(m_lin(angle(A%).data(0).line_no(0)).data(0).data0.in_point(i%), _
             m_lin(angle(A%).data(0).line_no(1)).data(0).data0.in_point(j%), t_n(0), t_n(1))
       For n% = 1 + last_conditions.last_cond(0).paral_no To last_conditions.last_cond(1).paral_no
        tn% = Dparal(n%).data(0).data0.record.data1.index.i(0)
    Call add_conditions_to_record(paral_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
        If Dparal(tn%).data(0).data0.line_no(0) = g% Then
         l% = Dparal(tn%).data(0).data0.line_no(1)
          GoTo property_of_angle_value_mark5
        ElseIf Dparal(tn%).data(0).data0.line_no(1) = g% Then
          GoTo property_of_angle_value_mark5
        End If
       Next n%
              GoTo property_of_angle_value_mark6
property_of_angle_value_mark5:
  If is_point_in_line3(angle(A%).data(0).poi(1), m_lin(l%).data(0).data0, 0) Then
   For n% = 1 + last_conditions.last_cond(0).verti_no To last_conditions.last_cond(1).verti_no
    tn% = Dverti(n%).data(0).record.data1.index.i(0)
    If Dverti(tn%).data(0).line_no(0) = g% Then
    Call add_conditions_to_record(verti_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
     t_p(0) = is_line_line_intersect(Dverti(tn%).data(0).line_no(1), _
             l%, t_n(2), 0, False)
     t_p(1) = is_line_line_intersect(Dverti(tn%).data(0).line_no(1), _
             g%, t_n(3), 0, False)
     If t_p(0) > 0 And t_p(1) > 0 Then
      set_property_of_angle_value = set_Drelation( _
       m_lin(angle(A%).data(0).line_no(0)).data(0).data0.in_point(i%), _
        m_lin(angle(A%).data(0).line_no(1)).data(0).data0.in_point(j%), _
         t_p(0), t_p(1), t_n(0), t_n(1), t_n(2), t_n(3), _
          g, Dverti(tn%).data(0).line_no(1), "2", temp_record, 0, 0, 0, 0, 0, False)
       If set_property_of_angle_value > 1 Then
        Exit Function
       End If
     End If
    ElseIf Dverti(tn%).data(0).line_no(1) = g% Then
     t_p(0) = is_line_line_intersect(Dverti(tn%).data(0).line_no(0), _
                   l%, t_n(2), 0, False)
     t_p(1) = is_line_line_intersect(Dverti(tn%).data(0).line_no(0), _
                   g%, t_n(3), 0, False)
     If t_p(0) > 0 And t_p(1) > 0 Then
      set_property_of_angle_value = set_Drelation( _
       m_lin(angle(A%).data(0).line_no(0)).data(0).data0.in_point(i%), _
        m_lin(angle(A%).data(0).line_no(1)).data(0).data0.in_point(j%), _
         t_p(0), t_p(1), t_n(0), t_n(1), t_n(2), _
          t_n(3), g, Dverti(tn%).data(0).line_no(0), "2", temp_record, 0, 0, 0, 0, 0, False)
       If set_property_of_angle_value > 1 Then
        Exit Function
       End If
     End If
    End If
   Next n%
  End If
  End If
   End If
property_of_angle_value_mark6:
 Next j%
  Next i%
End If
If ty_ = 0 Then
For i% = 0 To 3
 If angle(A%).data(0).total_no_ <> i% Then
  If T_angle(angle(A%).data(0).total_no).data(0).angle_no(i%).no > 0 Then
   If Abs(i% - angle(A%).data(0).total_no_) = 2 Then
    set_property_of_angle_value = set_property_of_angle_value(T_angle(angle(A%).data(0).total_no).data(0).angle_no(i%).no, _
      value, re, 1, ty2_)
    If set_property_of_angle_value > 1 Then
      Exit Function
    End If
    If angle(A%).data(0).value = "90" Then
     set_property_of_angle_value = set_property_of_eangle(0, A%, T_angle(angle(A%).data(0).total_no).data(0).angle_no(i%).no, _
      0, 0, 0, 0, re, 1)
    If set_property_of_angle_value > 1 Then
      Exit Function
    End If
    End If
Else
  set_property_of_angle_value = set_property_of_angle_value(T_angle(angle(A%).data(0).total_no).data(0).angle_no(i%).no, _
    minus_string("180", value, True, False), re, 1, ty2_)
    If set_property_of_angle_value > 1 Then
      Exit Function
    End If
    If angle(A%).data(0).value = "90" Then
     set_property_of_angle_value = set_property_of_eangle(0, A%, T_angle(angle(A%).data(0).total_no).data(0).angle_no(i%).no, _
      0, 0, 0, 0, re, 1)
    If set_property_of_angle_value > 1 Then
      Exit Function
    End If
    End If
 End If
End If
End If
Next i%
End If
'************************************
re1 = re.record_data
't_A = T_angle(angle(A%).data(0).total_no).data(0).t_triangle(angle(A%).data(0).total_no_)
Call set_temp_triangle_from_angle(A%, 0, t_A, False)
 For i% = 1 To t_A.last_T
   tn% = position_from_direction(t_A.data(i%).direction, 0)
    'angle(triangle(t_A.data(i%).no).data(0).angle(tn%)).data(0).value_no = re.record_data.data0.condition_data.condition(1).no
     If value = "90" Then
       triangle(t_A.data(i%).no).data(0).right_angle_no = tn%
'        triangle(t_A.data(i%).no).
     End If
  tri = triangle(t_A.data(i%).no).data(0)
  set_property_of_angle_value = solve_triangle(t_A.data(i%).no, tri, _
                   tn%, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, False)
  If set_property_of_angle_value > 1 Then
      Exit Function
  End If
 Next i%
 '**************************************
If ty_ = 0 Then 'T_angle(angle(A%).data(0).total_no).data(0).is_used_no = A% Then
For i% = 1 + last_conditions.last_cond(0).total_angle_no To last_conditions.last_cond(1).total_angle_no
 tn% = T_angle(i%).data(0).index(0)
   If tn% > 0 And tn <> angle(A%).data(0).total_no <> tn% Then
    If T_angle(tn%).data(0).value <> "" Then
     If T_angle(tn%).data(0).value_no < angle(A%).data(0).value_no Then
      tn% = T_angle(tn%).data(0).value_no%
  '**************************
    If run_type < 5 Then '
       If angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(0) = angle(A%).data(0).line_no(0) Then
        If is_line_line_intersect(angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(1), _
                angle(A%).data(0).line_no(1), 0, 0, False) = 0 Then
          If is_line_value(angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).poi(1), angle(A%).data(0).poi(1), 0, 0, 0, "", 0, _
                -1000, 0, 0, 0, lv_data0) > 0 Then
          t_n(0) = angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(1)
          t_n(1) = angle(A%).data(0).line_no(1)
          t_n(2) = 0
          t_n(3) = 0
          t_n(4) = 0
          t_n(5) = 0
          t_n(6) = 0
           Call C_wait_for_aid_point.set_wait_for_aid_point(interset_point_line_line, t_n(), 7)
          End If
         End If
       ElseIf angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(0) = angle(A%).data(0).line_no(1) Then
        If is_line_line_intersect(angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(1), _
             angle(A%).data(0).line_no(0), 0, 0, False) = 0 Then
          If is_line_value(angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).poi(1), angle(A%).data(0).poi(1), 0, 0, 0, "", 0, _
                -1000, 0, 0, 0, lv_data0) > 0 Then
          t_n(0) = angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(1)
          t_n(1) = angle(A%).data(0).line_no(0)
          t_n(2) = 0
          t_n(3) = 0
          t_n(4) = 0
          t_n(5) = 0
          t_n(6) = 0
         Call C_wait_for_aid_point.set_wait_for_aid_point(interset_point_line_line, t_n(), 7)
        'set_property_of_angle_value = add_interset_point_line_line( _
            angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(1), angle(A%).data(0).line_no(0), _
              0, 2, 0, 0, 0, record_0.data0.condition_data)
         '  If set_property_of_angle_value > 1 Then
          '    Exit Function
          End If
         End If
       ElseIf angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(1) = angle(A%).data(0).line_no(0) Then
        If is_line_line_intersect(angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(0), _
           angle(A%).data(0).line_no(1), 0, 0, False) = 0 Then
         If is_line_value(angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).poi(1), angle(A%).data(0).poi(1), 0, 0, 0, "", 0, _
                -1000, 0, 0, 0, lv_data0) > 0 Then
          t_n(0) = angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(0)
          t_n(1) = angle(A%).data(0).line_no(1)
          t_n(2) = 0
          t_n(3) = 0
          t_n(4) = 0
          t_n(5) = 0
          t_n(6) = 0
         Call C_wait_for_aid_point.set_wait_for_aid_point(interset_point_line_line, t_n(), 7)
        'set_property_of_angle_value = add_interset_point_line_line( _
            angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(0), angle(A%).data(0).line_no(1), _
              0, 2, 0, 0, 0, record_0.data0.condition_data)
        '   If set_property_of_angle_value > 1 Then
        '      Exit Function
         End If
        End If
       ElseIf angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(1) = angle(A%).data(0).line_no(1) Then
        If is_line_line_intersect(angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(0), _
              angle(A%).data(0).line_no(0), 0, 0, False) = 0 Then
           If is_line_value(angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).poi(1), angle(A%).data(0).poi(1), 0, 0, 0, "", 0, _
                -1000, 0, 0, 0, lv_data0) > 0 Then
           t_n(0) = angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(0)
           t_n(1) = angle(A%).data(0).line_no(0)
           t_n(2) = 0
           t_n(3) = 0
           t_n(4) = 0
           t_n(5) = 0
           t_n(6) = 0
         Call C_wait_for_aid_point.set_wait_for_aid_point(interset_point_line_line, t_n(), 7)
       'set_property_of_angle_value = add_interset_point_line_line( _
           angle(angle3_value(tn%).data(0).data0.angle(0)).data(0).line_no(0), angle(A%).data(0).line_no(0), _
             0, 2, 0, 0, 0, record_0.data0.condition_data)
        '   If set_property_of_angle_value > 1 Then
        '      Exit Function
        '  End If
         End If
        End If
       End If
    End If
    ts$ = add_string(angle3_value(tn%).data(0).data0.value, value, True, False)
      temp_record.record_data = re1
       Call add_conditions_to_record(angle3_value_, tn%, 0, 0, _
                                    temp_record.record_data.data0.condition_data)
      set_property_of_angle_value = set_property_of_two_angle_value(angle3_value(tn%).data(0).data0.angle(0), _
        A%, "1", "1", ts$, temp_record, 0, 0)
      If set_property_of_angle_value > 1 Then
        Exit Function
      End If
    ts$ = minus_string(angle3_value(tn%).data(0).data0.value, value, True, False)
     record_0.data0.condition_data.condition_no = 0
     If ts$ = "60" Then
      set_property_of_angle_value = set_total_equal_triangle_from_two_angle_value( _
        angle3_value(tn%).data(0).data0.angle(0), A%, 1, 0, temp_record)
       If set_property_of_angle_value > 1 Then
        Exit Function
       End If
     ElseIf ts$ = "-60" Then
      set_property_of_angle_value = set_total_equal_triangle_from_two_angle_value(A%, _
          angle3_value(tn%).data(0).data0.angle(0), 1, 0, temp_record)
       If set_property_of_angle_value > 1 Then
        Exit Function
       End If
     End If
'***************
 '  temp_record.record_data = re1
 '  Call add_conditions_to_record(angle3_value_, angle(tn%).data(0).value_no, 0, 0, temp_record.record_data.data0.condition_data)
    tA(0) = A%
     tA(1) = angle3_value(tn%).data(0).data0.angle(0)
' Call combine_two_angle(tA(0), tA(1), tA(2), 0, 0, tA(3), 0, tA(4), ty, 0, 1)
'    If combine_two_angle_with_para(tA(0), tA(1), tA(2), 0, "1", "1", "", ts$, ty, 0, 1, temp_record.record_data) Then
   '  If ty = 3 Or ty = 5 Then
   '  If angle(tA(4)).data(0).value = "" And tA(4) > 0 Then
    '   ts$ = add_string(angle(tn%).data(0).value, value, True, False)
     '   set_property_of_angle_value = set_angle_value(tA(4), ts$, temp_record, _
           0, 1)
     '  If set_property_of_angle_value > 1 Then
     '   Exit Function
     '  End If
     'End If
     'ElseIf ty = 4 Or ty = 6 Then
     'If angle(tA(2)).data(0).value = "" And tA(2) > 0 Then
     'ts$ = minus_string(value, angle(tn%).data(0).value, True, False)
     '  set_property_of_angle_value = set_angle_value(tA(2), ts$, temp_record, _
           0, 1)
     '  If set_property_of_angle_value > 1 Then
     '   Exit Function
     '  End If
     'End If
     'ElseIf ty = 8 Or ty = 7 Then
     '       ts$ = minus_string(angle(tn%).data(0).value, value, True, False)
     'If angle(tA(1)).data(0).value = "" And tA(1) > 0 Then
     '  set_property_of_angle_value = set_angle_value(tA(1), ts$, temp_record, _
           0, 1)
     '  If set_property_of_angle_value > 1 Then
     '   Exit Function
     '  End If
     'End If
     'End If

'*************************   'End If
If angle3_value(tn%).data(0).data0.value = value$ Then
 temp_record.record_data = re1
  Call add_conditions_to_record(angle3_value_, tn%, 0, 0, _
         temp_record.record_data.data0.condition_data)
      set_property_of_angle_value = set_property_of_eangle(ty, _
                     angle3_value(tn%).data(0).data0.angle(0), A%, 0, 0, 0, 0, temp_record, 0)
   If set_property_of_angle_value > 1 Then
    Exit Function
   End If
 End If
End If
End If
End If
Next i%
End If
Exit Function
set_property_of_angle_value_error:
set_property_of_angle_value = 0
End Function
Public Sub set_line_from_two_point(ByVal p1%, ByVal p2%, _
           ByVal in1%, ByVal in2%, ByVal l%, no%, dir As String, re As record_data_type)
Dim i%, j%, tl%
'If p1% < 30 And p2% < 30 Then
If p1% > 90 Or p2% > 90 Or p1 <= 0 Or p2 <= 0 Or l% = 0 Then
 Exit Sub
End If
dir = "1"
If p1% > p2% Then
Call exchange_two_integer(p1%, p2%)
Call exchange_two_integer(in1%, in2%)
dir = "-1"
End If
If search_for_two_point_line(p1%, p2%, no%, 0) = False Then
If last_conditions.last_cond(1).line_from_two_point_no Mod 10 = 0 Then
  ReDim Preserve Dtwo_point_line( _
    last_conditions.last_cond(1).line_from_two_point_no + 10) As _
     line_from_two_point
End If
 last_conditions.last_cond(1).line_from_two_point_no = last_conditions.last_cond(1).line_from_two_point_no + 1
  Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0) = line_from_two_point_data_0
  Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).poi(0) = p1%
   Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).poi(1) = p2%
  Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).n(0) = in1%
   Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).n(1) = in2%
    Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).line_no = l%
'        If m_lin(l%).data(0).data0.in_point(10) = 0 Then
'           m_lin(l%).data(0).data0.in_point(10) = 1
           'm_lin(l%).data(0).is_change = True
'               Call C_display_picture.set_m_line_data0(l%, 0, 0)
'        End If
        Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).dir = _
             m_lin(l%).data(0).data0.in_point(10)
        If (m_lin(l%).data(0).data0.in_point(10) = 1 And in1% < in2%) Or _
             (m_lin(l%).data(0).data0.in_point(10) = -1 And in1% > in2%) Then
         Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).v_poi(0) = p1%
          Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).v_poi(1) = p2%
         Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).v_n(0) = in1%
          Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).v_n(1) = in2%
        Else
         Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).v_poi(1) = p1%
          Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).v_poi(0) = p2%
         Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).v_n(1) = in1%
          Dtwo_point_line(last_conditions.last_cond(1).line_from_two_point_no).data(0).v_n(0) = in2%
          dir = time_string("-", dir, True, False)
         End If
     ' End If
 For i% = last_conditions.last_cond(1).line_from_two_point_no To no% + 2 Step -1
  Dtwo_point_line(i%).data(0).index = Dtwo_point_line(i% - 1).data(0).index
 Next i%
     Dtwo_point_line(no% + 1).data(0).index = last_conditions.last_cond(1).line_from_two_point_no
                  no% = last_conditions.last_cond(1).line_from_two_point_no
Else
 If Dtwo_point_line(no%).data(0).v_poi(0) <> p1% Then
    dir = time_string("-1", dir, True, False)
 End If
 If Dtwo_point_line(no%).data(0).line_no <> l% Then
    tl% = Dtwo_point_line(no%).data(0).line_no
    If m_lin(l%).data(0).data0.in_point(0) > _
        m_lin(Dtwo_point_line(no%).data(0).line_no).data(0).data0.in_point(0) Then
        For i% = 1 To m_lin(Dtwo_point_line(no%).data(0).line_no).data(0).data0.in_point(0)
         For j% = 1 To m_lin(l%).data(0).data0.in_point(0)
          If m_lin(l%).data(0).data0.in_point(j%) = _
           m_lin(Dtwo_point_line(no%).data(0).line_no).data(0).data0.in_point(i%) Then
            GoTo set_line_from_two_point_next
          End If
         Next j%
GoTo set_line_from_two_point_next1
set_line_from_two_point_next:
        Next i%
         Dtwo_point_line(no%).data(0).n(0) = in1%
         Dtwo_point_line(no%).data(0).n(1) = in2%
         Dtwo_point_line(no%).data(0).line_no = l%
        'If m_lin(l%).data(0).data0.in_point(10) = 0 Then
        '   m_lin(l%).data(0).data0.in_point(10) = 1
        '   m_lin(l%).data(0).data0.in_point(10) = 1
            'm_lin(l%).data(0).is_change = True
        '     Call C_display_picture.set_m_line_data0(l%, 0, 0)
        ' End If
        Dtwo_point_line(no%).data(0).dir = m_lin(l%).data(0).data0.in_point(10)
        If (m_lin(l%).data(0).data0.in_point(10) = 1 And _
              Dtwo_point_line(no%).data(0).n(0) < Dtwo_point_line(no%).data(0).n(1)) Or _
           (m_lin(l%).data(0).data0.in_point(10) = -1 And _
              Dtwo_point_line(no%).data(0).n(0) > Dtwo_point_line(no%).data(0).n(1)) Then
         Dtwo_point_line(no%).data(0).v_poi(0) = Dtwo_point_line(no%).poi(0)
          Dtwo_point_line(no%).data(0).v_poi(1) = Dtwo_point_line(no%).poi(1)
         Dtwo_point_line(no%).data(0).v_n(0) = Dtwo_point_line(no%).data(0).n(0)
          Dtwo_point_line(no%).data(0).v_n(1) = Dtwo_point_line(no%).data(0).n(1)
        Else
         Dtwo_point_line(no%).data(0).v_poi(0) = Dtwo_point_line(no%).poi(1)
          Dtwo_point_line(no%).data(0).v_poi(1) = Dtwo_point_line(no%).poi(0)
         Dtwo_point_line(no%).data(0).v_n(0) = Dtwo_point_line(no%).data(0).n(1)
          Dtwo_point_line(no%).data(0).v_n(1) = Dtwo_point_line(no%).data(0).n(0)
         End If
    End If
   If l% > 0 And tl% > 0 Then
   Call combine_two_line(l%, tl%, m_lin(l%).data(0).data0.in_point(j%), re, 0, 1)
   End If
 End If
set_line_from_two_point_next1:
End If
End Sub
Public Function add_point_to_circle_for_prove(ByVal p1%, _
    ByVal p2%, ByVal p3%, re As total_record_type, no_reduce As Byte) As Byte
Dim i%, j%, k%, n%, m%
Dim temp_record As total_record_type
'On Error GoTo add_point_to_circle_for_prove_error
temp_record = re
n% = m_circle_number(1, p1%, pointapi0, p2%, 0, 0, 0, 0, 0, 1, 0, 0, 0, False)
m% = m_circle_number(1, p3%, pointapi0, p2%, 0, 0, 0, 0, 0, 1, 0, 0, 0, False)
If n% > 0 And m% = 0 Then
 input_record0 = temp_record.record_data.data0
 add_point_to_circle_for_prove = add_point_to_m_circle(p3%, _
                                         n%, temp_record, True)
ElseIf n% = 0 And m% > 0 Then
 input_record0 = temp_record.record_data.data0
 add_point_to_circle_for_prove = add_point_to_m_circle(p1%, _
                                       n%, re, True)
End If
Exit Function
add_point_to_circle_for_prove_error:
End Function

Public Function set_general_string_from_relation( _
  ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, _
   ByVal p5%, ByVal p6%, ByVal p7%, ByVal p8%, _
  ByVal n1%, ByVal n2%, ByVal n3%, ByVal n4%, _
   ByVal n5%, ByVal n6%, ByVal n7%, ByVal n8%, _
  ByVal l1%, ByVal l2%, ByVal l3%, ByVal l4%, _
    ByVal s1$, ByVal S2$, re As total_record_type, _
  ByVal no_reduce As Byte) As Byte
Dim temp_record As total_record_type
Dim it(1) As Integer
Dim tv(2) As String
Dim para(3) As String
'If p1% = 0 Or p2% = 0 Or p3% = 0 Or p4% = 0 Or s1$ <> s2$ Then
temp_record = re
set_general_string_from_relation = set_item0(p1%, p2%, p7%, p8%, "*", n1%, n2%, n7%, n8%, _
         l1%, l4%, "1", "1", "1", "", para(0), 0, record_data0.data0.condition_data, _
           0, it(0), no_reduce, 0, condition_data0, False)
           If set_general_string_from_relation > 1 Then
            Exit Function
           End If
set_general_string_from_relation = set_item0(p3%, p4%, p5%, p6%, "*", n3%, n4%, n5%, n6%, _
         l2%, l3%, "1", "1", "1", "", para(1), 0, record_data0.data0.condition_data, _
           0, it(1), no_reduce, 0, condition_data0, False)
           If set_general_string_from_relation > 1 Then
            Exit Function
           End If
If s1$ = S2$ And item0(it(0)).data(0).sig = "*" And item0(it(1)).data(0).sig = "*" Then
set_general_string_from_relation = set_dpoint_pair( _
 p1%, p2%, p3%, p4%, p5%, p6%, p7%, p8%, n1%, n2%, n3%, n4%, _
    n5%, n6%, n7%, n8%, l1%, l2%, l3%, l4%, _
      0, temp_record, False, 0, 0, 0, no_reduce, False)
 If set_general_string_from_relation > 1 Then
  Exit Function
 End If
Else
 tv(0) = s1$
 tv(1) = time_string("-1", S2$, True, False)
set_general_string_from_relation = _
  set_general_string(it(0), it(1), 0, 0, time_string(tv(0), para(0), True, False), _
      time_string(tv(1), para(1), True, False), "0", "0", _
         "0", 0, 0, 1, temp_record, 0, no_reduce)
End If
End Function


Public Sub add_record_to_record(re1 As condition_data_type, _
         re2 As condition_data_type)
Dim i%
If re1.condition_no = 0 Or re1.condition_no > 8 Then
 Exit Sub
Else
For i% = 1 To re1.condition_no
Call add_conditions_to_record(re1.condition(i%).ty, _
       re1.condition(i%).no, 0, 0, re2)
Next i%
End If
End Sub
Public Function set_display_total_equal_triangle(t_triA As two_triangle_type, _
     is_display As Boolean, is_depend As Boolean) As String
If t_triA.record.data0.condition_data.condition(1).ty = new_point_ And _
          t_triA.record.data0.condition_data.condition_no = 1 Then
   set_display_total_equal_triangle = _
     new_point(t_triA.record.data0.condition_data.condition(1).no).data(0).display_string
     If is_display Then
      Call draw_aid_point(t_triA.record.data0.condition_data.condition(1).no)
     End If
Else
set_display_total_equal_triangle = LoadResString_from_inpcond(-37, _
          set_triangle_display_string(t_triA.triangle(0), _
                  1, no_display, is_depend, 1, 0) + _
          set_triangle_display_string(t_triA.triangle(1), _
                   t_triA.direction, no_display, is_depend, 1, 3))
End If
End Function

Public Function set_display_similar_triangle(s_triA As two_triangle_type, _
    is_display As Boolean, is_depend As Boolean) As String
Dim i%
If s_triA.record.data0.condition_data.condition(1).ty = new_point_ And _
     s_triA.record.data0.condition_data.condition_no = 1 Then
   set_display_similar_triangle = _
     new_point(s_triA.record.data0.condition_data.condition(1).no).data(0).display_string
      If is_display Then
      Call draw_aid_point(s_triA.record.data0.condition_data.condition(1).no)
      End If
      If is_depend Then
       For i% = 0 To 2
        Call set_depend_from_point(triangle(s_triA.triangle(0)).data(0).poi(i%))
        Call set_depend_from_point(triangle(s_triA.triangle(1)).data(0).poi(i%))
       Next i%
      End If
Else
set_display_similar_triangle = LoadResString_from_inpcond(-36, _
              set_triangle_display_string(s_triA.triangle(0), _
               1, no_display, is_depend, 1, 0) + _
             set_triangle_display_string(s_triA.triangle(1), _
                 s_triA.direction, no_display, is_depend, 1, 3))
End If
End Function

Public Function set_display_verti(vl As two_line_type, is_display As Boolean, is_depend As Boolean) As String
Dim i%
If vl.record.data0.condition_data.condition(1).ty = new_point_ And _
       vl.record.data0.condition_data.condition_no = 1 Then
   set_display_verti = _
     new_point(vl.record.data0.condition_data.condition(1).no).data(0).display_string
      If is_display Then
       Call draw_aid_point(vl.record.data0.condition_data.condition(1).no)
      End If
Else
set_display_verti = LoadResString_from_inpcond(3, _
     "\\0\\" + m_poi(m_lin(vl.line_no(0)).data(0).data0.poi(0)).data(0).data0.name + _
     "\\1\\" + m_poi(m_lin(vl.line_no(0)).data(0).data0.poi(1)).data(0).data0.name + _
     "\\2\\" + m_poi(m_lin(vl.line_no(1)).data(0).data0.poi(0)).data(0).data0.name + _
     "\\3\\" + m_poi(m_lin(vl.line_no(1)).data(0).data0.poi(1)).data(0).data0.name)
End If
If is_depend Then
 For i% = 0 To 1
  Call set_depend_from_point(m_lin(vl.line_no(i%)).data(0).data0.poi(0))
  Call set_depend_from_point(m_lin(vl.line_no(i%)).data(0).data0.poi(1))
 Next i%
End If
End Function

Public Function set_display_paral(pl As two_line_type, is_display As Boolean, ty As Byte, is_depend As Boolean) As String
Dim i%
If pl.record.data0.condition_data.condition(1).ty = new_point_ And _
     pl.record.data0.condition_data.condition_no = 1 Then
   set_display_paral = _
     new_point(pl.record.data0.condition_data.condition(1).no).data(0).display_string
      If is_display Then
      Call draw_aid_point(pl.record.data0.condition_data.condition(1).no)
      End If
      ty = new_point_
Else
   set_display_paral = m_poi(m_lin(pl.line_no(0)).data(0).data0.poi(0)).data(0).data0.name + _
    m_poi(m_lin(pl.line_no(0)).data(0).data0.poi(1)).data(0).data0.name + LoadResString_(1400, "") + _
     m_poi(m_lin(pl.line_no(1)).data(0).data0.poi(0)).data(0).data0.name + _
      m_poi(m_lin(pl.line_no(1)).data(0).data0.poi(1)).data(0).data0.name + "."
End If
If is_depend Then
  For i% = 0 To 1
  Call set_depend_from_point(m_lin(pl.line_no(0)).data(0).data0.poi(i%))
  Call set_depend_from_point(m_lin(pl.line_no(1)).data(0).data0.poi(i%))
  Next i%
End If
End Function

Public Function set_item0_(ByVal p1%, ByVal p2%, _
                 ByVal p3%, ByVal p4%, sig As String, _
                  ByVal in1%, ByVal in2%, ByVal in3%, _
                   ByVal in4%, ByVal il1%, ByVal il2%, _
                    ByVal para1$, ByVal para2$, para3$, _
                     is_no_initial As Integer, v$, c_data As condition_data_type) As item0_data_type
'设置item0 , p1%...p4%>0 线段item0,p2%=-1 sin,p2%=-2 cos,p2%=-3 tan ,p2%=-4 tan ,p2%=-5,area,
' p2%=- 6  < ;p2%=-7,item0
Dim i%, j%
Dim tp(3) As Integer
Dim p(3) As Integer
Dim n(3) As Integer
Dim l(1) As Integer
Dim tn(3) As Integer
Dim ty As Byte
Dim te_s(1) As String
Dim tv$
Dim t_v_s As v_string
Dim lv As line_value_data0_type
Dim v_lv As V_line_value_data0_type
Dim is_t(1) As Boolean
te_s(0) = para1$
te_s(1) = para2$
If sig = "" Then
      Exit Function
ElseIf sig = "*" Or sig = "/" Or sig = "~" Or sig = "+" Or sig = "-" Then
 If (p1% = 0 And p2% = 0 And p3% = 0 And p4% = 0) Or _
    (sig = "/" And is_same_two_point(p1%, p2%, p3%, p4%)) Then
    Exit Function
 'ElseIf p1% > 0 And p2% > 0 And p3% > 0 And p4% > 0 Then
  'If m_poi(p1%).data(0).no_reduce Or m_poi(p2%).data(0).no_reduce > 0 Or _
         m_poi(p3%).data(0).no_reduce Or m_poi(p4%).data(0).no_reduce > 0 Then
   '   Exit Function
  'End If
 ElseIf (p1% > 0 And p2% > 0) And (p3% = 0 And p4% = 0) And sig$ = "~" Then
  'If m_poi(p1%).data(0).no_reduce Or m_poi(p2%).data(0).no_reduce > 0 Then
  ' Exit Function
  'Else
   para3 = para1
    sig = "~"
  'End If
 ElseIf p1% = 0 And p2% = 0 And p3% > 0 And p4% > 0 And sig$ = "*" Then
  'If m_poi(p3%).data(0).no_reduce Or m_poi(p4%).data(0).no_reduce > 0 Then
  ' Exit Function
  'Else
   sig$ = "~"
    p1% = p3%
    p2% = p4%
    p3% = 0
    p4% = 0
    Call exchange_string(para1, para2)
  'End If
 End If
ElseIf sig = "C" Then 'cross_time
 If p1% > p3% Then
    para3$ = "-1"
 End If
    para3$ = "1"
End If
'*******************************
'If (p2% >= 0 And p4 >= 0) And (p1% >= 0 Or p3% >= 0) Then
 ' If sig = "*" Or sig = "/" Then
'设置直线
  If p4% >= 0 And p2% >= 0 Then
    il1% = line_number0(p1%, p2%, in1%, in2%)  ', 1, False)  ' in1%, in2%)
    il2% = line_number0(p3%, p4%, in3%, in4%)  ', 1, False) 'in3%, in4%)
  If in1% > in2% Then
   Call exchange_two_integer(in1%, in2%)
   Call exchange_two_integer(p1%, p2%)
  End If
  If in3% > in4% Then
   Call exchange_two_integer(in3%, in4%)
   Call exchange_two_integer(p3%, p4%)
  End If
  End If
 '线段
 If il2% > 0 And il1% > 0 Then
  Call arrange_four_point(p1%, p2%, p3%, p4%, in1%, in2%, in3%, in4%, _
        il1%, il2%, tp(0), tp(1), tp(2), tp(3), 0, 0, tn(0), tn(1), _
         tn(2), tn(3), 0, 0, l(0), l(1), 0, ty, c_data, is_no_initial)
 ElseIf p1% = 0 And sig = "~" Then
  tp(0) = p3%
  tp(1) = p4%
  tp(2) = p1%
  tp(3) = p2%
  tn(2) = in1%
  tn(3) = in2%
  l(1) = il1%
  Call exchange_string(te_s(0), te_s(1))
 Else
  tp(0) = p1%
  tp(1) = p2%
  tp(2) = p3%
  tp(3) = p4%
  tn(0) = in1%
  tn(1) = in2%
  l(0) = il1%
 End If
  '******************
If ty = 0 Or ty = 2 Or ty = 3 Then
  p(0) = tp(0)
  p(1) = tp(1)
  p(2) = tp(2)
  p(3) = tp(3)
  n(0) = tn(0)
  n(1) = tn(1)
  n(2) = tn(2)
  n(3) = tn(3)
ElseIf ty = 1 Or ty = 5 Then
  p(0) = tp(2)
  p(1) = tp(3)
  p(2) = tp(0)
  p(3) = tp(1)
  n(0) = tn(2)
  n(1) = tn(3)
  n(2) = tn(0)
  n(3) = tn(1)
   Call exchange_two_integer(l(0), l(1))
ElseIf ty = 4 Then
  p(0) = tp(0)
  p(1) = tp(3)
  p(2) = tp(2)
  p(3) = tp(3)
  n(0) = tn(0)
  n(1) = tn(3)
  n(2) = tn(2)
  n(3) = tn(3)
ElseIf ty = 6 Then
  p(0) = tp(2)
  p(1) = tp(3)
  p(2) = tp(0)
  p(3) = tp(3)
  n(0) = tn(2)
  n(1) = tn(3)
  n(2) = tn(0)
  n(3) = tn(3)
ElseIf ty = 7 Then
  p(0) = tp(0)
  p(1) = tp(1)
  p(2) = tp(0)
  p(3) = tp(3)
  n(0) = tn(0)
  n(1) = tn(1)
  n(2) = tn(0)
  n(3) = tn(3)
ElseIf ty = 8 Then
 p(0) = tp(0)
 p(1) = tp(3)
 p(2) = tp(0)
 p(3) = tp(1)
 n(0) = tn(0)
 n(1) = tn(3)
 n(2) = tn(0)
 n(3) = tn(1)
End If
'********************
set_item0_.sig = sig
If sig = "~" Then
  set_item0_.poi(0) = p(0)
   set_item0_.poi(1) = p(1)
    set_item0_.n(0) = n(0)
     set_item0_.n(1) = n(1)
      set_item0_.line_no(0) = il1%
       set_item0_.sig = "~"
 ElseIf sig = "*" Or sig = "+" Then
     'If sig = "-" Then
      '  sig = "+"
       ' te_s(1) = time_string("-1", te_s(1), True, False)
     'End If
        'set_item0_.sig = sig
    If il1% > 0 And il2% > 0 Then
     If (il1% < il2%) Or (il1% = il2% And _
       (n(0) < n(2) Or (n(0) = n(2) And n(1) <= n(3)))) Then
       set_item0_.poi(0) = p(0)
       set_item0_.poi(1) = p(1)
       set_item0_.poi(2) = p(2)
       set_item0_.poi(3) = p(3)
       set_item0_.n(0) = n(0)
       set_item0_.n(1) = n(1)
       set_item0_.line_no(0) = il1%
       set_item0_.n(2) = n(2)
       set_item0_.n(3) = n(3)
       set_item0_.line_no(1) = il2%
      ElseIf il1% > il2% Or (il1% = il2% And _
        (n(0) > n(2) Or (n(0) = n(2) And n(1) > n(3)))) Then
       set_item0_.poi(0) = p(2)
       set_item0_.poi(1) = p(3)
       set_item0_.poi(2) = p(0)
       set_item0_.poi(3) = p(1)
       set_item0_.n(0) = n(2)
       set_item0_.n(1) = n(3)
       set_item0_.line_no(0) = il2%
       set_item0_.n(2) = n(0)
       set_item0_.n(3) = n(1)
       set_item0_.line_no(1) = il1%
      End If
     Else '
      If p(1) = p(3) Then
       If p(0) < p(2) Then
       set_item0_.poi(0) = p(0)
       set_item0_.poi(1) = p(1)
       set_item0_.poi(2) = p(2)
       set_item0_.poi(3) = p(3)
       ElseIf p(0) = p(2) Then
       If sig = "*" Then
       set_item0_.poi(0) = p(0)
       set_item0_.poi(1) = p(1)
       set_item0_.poi(2) = p(2)
       set_item0_.poi(3) = p(3)
       Else
       set_item0_.poi(0) = p(0)
       set_item0_.poi(1) = p(1)
       set_item0_.poi(2) = 0
       set_item0_.poi(3) = 0
         If sig = "+" Then
          te_s(0) = add_string(te_s(0), te_s(1), True, False)
          set_item0_.sig = "~"
         End If
        End If
       Else
       set_item0_.poi(0) = p(2)
       set_item0_.poi(1) = p(3)
       set_item0_.poi(2) = p(0)
       set_item0_.poi(3) = p(1)
       Call exchange_string(te_s(0), te_s(1))
       End If
      ElseIf p(1) > p(3) Then
       set_item0_.poi(0) = p(0)
       set_item0_.poi(1) = p(1)
       set_item0_.poi(2) = p(2)
       set_item0_.poi(3) = p(3)
      Else
       set_item0_.poi(0) = p(2)
       set_item0_.poi(1) = p(3)
       set_item0_.poi(2) = p(0)
       set_item0_.poi(3) = p(1)
       Call exchange_string(te_s(0), te_s(1))
      End If
     End If
     '*****************
   If ty = 3 Or ty = 5 Then
    set_item0_.diff_type = 3
    set_item0_.poi(4) = tp(0)
    set_item0_.poi(5) = tp(3)
    set_item0_.n(4) = tn(0)
    set_item0_.n(5) = tn(3)
    set_item0_.line_no(2) = set_item0_.line_no(0)
    If ty = 5 Then
     Call exchange_string(te_s(0), te_s(1))
    End If
   ElseIf ty = 4 Or ty = 6 Then
    set_item0_.diff_type = 4
    set_item0_.poi(4) = tp(0)
    set_item0_.poi(5) = tp(1)
    set_item0_.n(4) = tn(0)
    set_item0_.n(5) = tn(1)
    set_item0_.line_no(2) = set_item0_.line_no(0)
    If ty = 6 Then
     Call exchange_string(te_s(0), te_s(1))
    End If
   ElseIf ty = 7 Or ty = 8 Then
    set_item0_.diff_type = 7
    set_item0_.poi(4) = tp(2)
    set_item0_.poi(5) = tp(3)
    set_item0_.n(4) = tn(2)
    set_item0_.n(5) = tn(3)
    set_item0_.line_no(2) = set_item0_.line_no(1)
    If ty = 9 Then
     Call exchange_string(te_s(0), te_s(1))
    End If
   End If
 'End If
ElseIf sig = "/" Or sig = "-" Then
  set_item0_.poi(0) = p1%
   set_item0_.poi(1) = p2%
  set_item0_.poi(2) = p3%
   set_item0_.poi(3) = p4%
    set_item0_.n(0) = in1%
     set_item0_.n(1) = in2%
      set_item0_.line_no(0) = il1%
    set_item0_.n(2) = in3%
     set_item0_.n(3) = in4%
      set_item0_.line_no(1) = il2%
    set_item0_.sig = sig
    set_item0_.diff_type = ty
   If ty = 3 Or ty = 5 Then
    set_item0_.poi(4) = tp(0)
    set_item0_.poi(5) = tp(3)
    set_item0_.n(4) = tn(0)
    set_item0_.n(5) = tn(3)
    set_item0_.line_no(2) = set_item0_.line_no(0)
   ElseIf ty = 4 Or ty = 6 Then
    set_item0_.diff_type = 4
    set_item0_.poi(4) = tp(0)
    set_item0_.poi(5) = tp(1)
    set_item0_.n(4) = tn(0)
    set_item0_.n(5) = tn(1)
    set_item0_.line_no(2) = set_item0_.line_no(0)
   ElseIf ty = 7 Or ty = 8 Then
    set_item0_.diff_type = 3
    set_item0_.poi(4) = tp(2)
    set_item0_.poi(5) = tp(3)
    set_item0_.n(4) = tn(2)
    set_item0_.n(5) = tn(3)
    set_item0_.line_no(2) = set_item0_.line_no(1)
   End If
ElseIf sig = "C" Then
    set_item0_.poi(0) = p1%
    set_item0_.poi(1) = -10
    set_item0_.poi(2) = p3%
    set_item0_.poi(3) = -10
End If
'**********
'设置系数
'**********
If is_no_initial = 1 Then
set_item0_.record_for_initial = c_data
End If
 If te_s(0) <> "" And te_s(1) <> "" Then
       If sig = "+" Then
        Call simple_multi_string0(te_s(0), te_s(1), "", "", para3, True)
         set_item0_.para(0) = te_s(0)
          set_item0_.para(1) = te_s(1)
       Else
        set_item0_.para(0) = "1"
        set_item0_.para(1) = "1"
        If sig = "*" Then
         para3$ = time_string(te_s(0), te_s(1), True, False)
        ElseIf sig = "/" Then
         para3$ = divide_string(te_s(0), te_s(1), True, False)
        ElseIf sig = "~" Then
         para3$ = te_s(0)
        End If
       End If
 Else
         set_item0_.para(0) = "1"
         set_item0_.para(1) = "1"
         para3$ = "1"
 End If
 If set_item0_.sig = "~" Then
    If set_item0_.poi(1) > 0 Then
       If is_line_value(set_item0_.poi(0), set_item0_.poi(1), set_item0_.n(0), _
           set_item0_.n(1), set_item0_.line_no(0), tv$, tn(0), -1000, 0, 0, 0, _
            lv) Then
        Call add_conditions_to_record(line_value_, tn(0), 0, 0, c_data)
        set_item0_.sig = ""
        set_item0_.poi(0) = 0
        set_item0_.poi(1) = 0
        set_item0_.n(0) = 0
        set_item0_.n(1) = 0
        set_item0_.line_no(0) = 0
        para3$ = time_string(para3$, line_value(tn(0)).data(0).data0.value, True, False)
            set_item0_.record_for_value.data0.condition_data.condition_no = 1
            set_item0_.record_for_value.data0.condition_data.condition(1).ty = line_value_
            set_item0_.record_for_value.data0.condition_data.condition(1).no = tn(0)
       End If
    ElseIf set_item0_.poi(1) = -10 Then
       If is_V_line_value(Dtwo_point_line(set_item0_.poi(0)).data(0).v_poi(0), _
              Dtwo_point_line(set_item0_.poi(0)).data(0).v_poi(1), 0, 0, 0, _
                "", tn(0), -1000, 0, 0, 0, v_lv, False) Then
        Call add_conditions_to_record(V_line_value_, tn(0), 0, 0, c_data)
        set_item0_.sig = ""
        set_item0_.poi(0) = 0
        set_item0_.poi(1) = 0
        set_item0_.n(0) = 0
        set_item0_.n(1) = 0
        set_item0_.line_no(0) = 0
        para3$ = time_string(para3$, V_line_value(tn(0)).data(0).value, True, False)
        Call add_conditions_to_record(V_line_value_, tn(0), 0, 0, _
                                       set_item0_.record_for_value.data0.condition_data)
       End If
    End If
 ElseIf set_item0_.sig = "*" Then
  If (is_same_two_point(set_item0_.poi(0), set_item0_.poi(1), p1%, p2%) And _
        is_same_two_point(set_item0_.poi(2), set_item0_.poi(3), p3%, p4%)) Or _
     (is_same_two_point(set_item0_.poi(0), set_item0_.poi(1), p3%, p4%) And _
        is_same_two_point(set_item0_.poi(2), set_item0_.poi(3), p1%, p3%)) Then
  Else
   v$ = ""
  End If
  If set_item0_.poi(1) >= 0 And set_item0_.poi(3) >= 0 Then
     is_t(0) = is_line_value(set_item0_.poi(0), set_item0_.poi(1), set_item0_.n(0), _
           set_item0_.n(1), set_item0_.line_no(0), tv$, tn(0), -1000, 0, 0, 0, _
            lv)
     is_t(1) = is_line_value(set_item0_.poi(2), set_item0_.poi(3), set_item0_.n(2), _
           set_item0_.n(3), set_item0_.line_no(1), tv$, tn(1), -1000, 0, 0, 0, _
            lv)
     If is_t(0) And is_t(1) Then
      Call add_conditions_to_record(line_value_, tn(0), tn(1), 0, c_data)
        set_item0_.sig = ""
        set_item0_.poi(0) = 0
        set_item0_.poi(1) = 0
        set_item0_.n(0) = 0
        set_item0_.n(1) = 0
        set_item0_.line_no(0) = 0
        set_item0_.poi(2) = 0
        set_item0_.poi(3) = 0
        set_item0_.n(2) = 0
        set_item0_.n(3) = 0
        set_item0_.line_no(2) = 0
        set_item0_.value = time_string(line_value(tn(0)).data(0).data0.value, _
                line_value(tn(1)).data(0).data0.value, True, False)
                para3$ = time_string(para3$, line_value(tn(0)).data(0).data0.value, False, False)
                para3$ = time_string(para3$, line_value(tn(1)).data(0).data0.value, True, False)
             Call add_conditions_to_record(line_value_, tn(0), tn(1), 0, _
                                              set_item0_.record_for_value.data0.condition_data)
     ElseIf is_t(0) Then
      Call add_conditions_to_record(line_value_, tn(0), 0, 0, c_data)
        set_item0_.sig = "~"
        set_item0_.poi(0) = set_item0_.poi(2)
        set_item0_.poi(1) = set_item0_.poi(3)
        set_item0_.n(0) = set_item0_.n(2)
        set_item0_.n(1) = set_item0_.n(3)
        set_item0_.line_no(0) = set_item0_.line_no(2)
        set_item0_.poi(2) = 0
        set_item0_.poi(3) = 0
        set_item0_.n(2) = 0
        set_item0_.n(3) = 0
        set_item0_.line_no(2) = 0
        set_item0_.para(0) = set_item0_.para(1)
        set_item0_.para(1) = "1"
                para3$ = time_string(para3$, line_value(tn(0)).data(0).data0.value, True, False)
     ElseIf is_t(1) Then
      Call add_conditions_to_record(line_value_, tn(1), 0, 0, c_data)
        set_item0_.sig = "~"
        set_item0_.poi(2) = 0
        set_item0_.poi(3) = 0
        set_item0_.n(2) = 0
        set_item0_.n(3) = 0
        set_item0_.line_no(2) = 0
        set_item0_.para(1) = "1"
                para3$ = time_string(para3$, line_value(tn(1)).data(0).data0.value, True, False)
     End If
  ElseIf set_item0_.poi(1) = -10 Or set_item0_.poi(3) = -10 Then
     is_t(0) = is_V_line_value(Dtwo_point_line(set_item0_.poi(0)).data(0).v_poi(0), _
                Dtwo_point_line(set_item0_.poi(0)).data(0).v_poi(1), 0, 0, 0, _
                   "", tn(0), -1000, 0, 0, 0, v_lv, False)
     is_t(1) = is_V_line_value(Dtwo_point_line(set_item0_.poi(2)).data(0).v_poi(0), _
                Dtwo_point_line(set_item0_.poi(2)).data(0).v_poi(1), 0, 0, 0, _
                  "", tn(1), -1000, 0, 0, 0, v_lv, False)
     If is_t(0) And is_t(1) Then
      Call add_conditions_to_record(V_line_value_, tn(0), tn(1), 0, c_data)
        set_item0_.sig = ""
        set_item0_.poi(0) = 0
        set_item0_.poi(1) = 0
        set_item0_.n(0) = 0
        set_item0_.n(1) = 0
        set_item0_.line_no(0) = 0
        set_item0_.poi(2) = 0
        set_item0_.poi(3) = 0
        set_item0_.n(2) = 0
        set_item0_.n(3) = 0
        set_item0_.line_no(2) = 0
        set_item0_.value = time_string(V_line_value(tn(0)).data(0).value, _
            V_line_value(tn(1)).data(0).value, True, False)
                para3$ = time_string(para3$, V_line_value(tn(0)).data(0).value, False, False)
                para3$ = time_string(para3$, V_line_value(tn(1)).data(0).value, True, False)
        Call add_conditions_to_record(V_line_value_, tn(0), tn(1), 0, _
                                          set_item0_.record_for_value.data0.condition_data)
     ElseIf is_t(0) Then
      Call add_conditions_to_record(V_line_value_, tn(0), 0, 0, c_data)
        set_item0_.sig = "~"
        set_item0_.poi(0) = set_item0_.poi(2)
        set_item0_.poi(1) = set_item0_.poi(3)
        set_item0_.n(0) = set_item0_.n(2)
        set_item0_.n(1) = set_item0_.n(3)
        set_item0_.line_no(0) = set_item0_.line_no(2)
        set_item0_.poi(2) = 0
        set_item0_.poi(3) = 0
        set_item0_.n(2) = 0
        set_item0_.n(3) = 0
        set_item0_.line_no(2) = 0
        set_item0_.para(0) = set_item0_.para(1)
        set_item0_.para(1) = "1"
                para3$ = time_string(para3$, V_line_value(tn(0)).data(0).value, True, False)
     ElseIf is_t(1) Then
      Call add_conditions_to_record(V_line_value_, tn(1), 0, 0, c_data)
        set_item0_.sig = "~"
        set_item0_.poi(2) = 0
        set_item0_.poi(3) = 0
        set_item0_.n(2) = 0
        set_item0_.n(3) = 0
        set_item0_.line_no(2) = 0
        set_item0_.para(1) = "1"
                para3$ = time_string(para3$, V_line_value(tn(1)).data(0).value, True, False)
     End If
  End If
 ElseIf set_item0_.sig = "/" Then
  If set_item0_.poi(1) >= 0 And set_item0_.poi(3) >= 0 Then
     is_t(0) = is_line_value(set_item0_.poi(0), set_item0_.poi(1), set_item0_.n(0), _
           set_item0_.n(1), set_item0_.line_no(0), tv$, tn(0), -1000, 0, 0, 0, _
            lv)
     is_t(1) = is_line_value(set_item0_.poi(2), set_item0_.poi(3), set_item0_.n(2), _
           set_item0_.n(3), set_item0_.line_no(1), tv$, tn(1), -1000, 0, 0, 0, _
            lv)
     If is_t(0) And is_t(1) Then
      Call add_conditions_to_record(line_value_, tn(0), tn(1), 0, c_data)
         set_item0_.sig = ""
        set_item0_.poi(0) = 0
        set_item0_.poi(1) = 0
        set_item0_.n(0) = 0
        set_item0_.n(1) = 0
        set_item0_.line_no(0) = 0
        set_item0_.para(0) = "1"
        set_item0_.poi(2) = 0
        set_item0_.poi(3) = 0
        set_item0_.n(2) = 0
        set_item0_.n(3) = 0
        set_item0_.line_no(2) = 0
        set_item0_.para(1) = "1"
        set_item0_.value = divide_string(line_value(tn(0)).data(0).data0.value, _
                             line_value(tn(1)).data(0).data0.value, True, False)
         para3$ = time_string(para3$, line_value(tn(0)).data(0).data0.value, False, False)
         para3$ = divide_string(para3$, line_value(tn(1)).data(0).data0.value, True, False)
         Call add_conditions_to_record(line_value_, tn(0), tn(1), 0, _
                                          set_item0_.record_for_value.data0.condition_data)
    ElseIf is_t(0) Then
      Call add_conditions_to_record(line_value_, tn(0), 0, 0, c_data)
        set_item0_.poi(0) = 0
        set_item0_.poi(1) = 0
        set_item0_.n(0) = 0
        set_item0_.n(1) = 0
        set_item0_.line_no(0) = 0
        set_item0_.para(0) = "1"
         para3$ = time_string(para3$, line_value(tn(0)).data(0).data0.value, True, False)
     ElseIf is_t(1) Then
      Call add_conditions_to_record(line_value_, tn(1), 0, 0, c_data)
         set_item0_.sig = "~"
        set_item0_.poi(2) = 0
        set_item0_.poi(3) = 0
        set_item0_.n(2) = 0
        set_item0_.n(3) = 0
        set_item0_.line_no(2) = 0
        set_item0_.para(1) = "1"
        para3$ = divide_string(para3$, line_value(tn(1)).data(0).data0.value, True, False)
     End If
  End If
 End If
End Function
Public Function set_item0_value0(p1%, p2%, p3%, p4%, sig As String, it_v$, re As condition_data_type) As Byte
Dim no%
Dim it As item0_data_type
Dim temp_record As total_record_type
Dim ts$
If is_item0(p1%, p2%, p3%, p4%, sig, 0, 0, 0, 0, 0, 0, no%, -1000, 0, 0, it_v$, it) Then
      If it_v$ <> "" Then
       If item0(no%).data(0).value = "" Then
        set_item0_value0 = set_item0_value(no%, 0, 0, "", "", "", it_v$, 0, re)
       Else
        ts$ = minus_string(it_v$, item0(no%).data(0).value, True, False)
        If ts$ <> "0" Then
         temp_record.record_data.data0.condition_data = re
          Call add_conditions_to_record(item0_, no%, 0, 0, temp_record.record_data.data0.condition_data)
           set_item0_value0 = set_relation_string(ts$, 0, temp_record)
        End If
       End If
     End If
End If
End Function


Public Function set_item0_value(ByVal it%, k%, l%, _
     ByVal v1$, ByVal v2$, v3$, it_v$, ty As Byte, re As condition_data_type) As Byte
'ty = 0 relation_, ty =1 line_value,s3$ 先知值
Dim tv(2) As String
Dim tv_$
Dim s(1) As String
Dim tn%
Dim tn_(2) As Integer
Dim dr As relation_data0_type
Dim tlv As two_line_value_data0_type
Dim tri_f As tri_function_data_type
Dim temp_record As total_record_type
temp_record.record_data.data0.condition_data = re
  Call set_level(temp_record.record_data.data0.condition_data)
If item0(it%).data(0).value <> "" Then
    If item0(it%).data(0).record_for_value.data0.condition_data.level > temp_record.record_data.data0.condition_data.level Then
       item0(it%).data(0).record_for_value = temp_record.record_data
    End If
   Exit Function
End If
If InStr(1, v1$, "F", 0) > 0 Or InStr(1, v2$, "F", 0) > 0 Or _
     InStr(1, v3$, "F", 0) > 0 Or item0(it%).data(0).value <> "" Then
 Exit Function
End If
If it_v$ = "" Then
If v3$ = "" Then
If v1$ <> "" And v2$ <> "" And item0(it%).data(0).value = "" Then
If k% = 0 And l% = 1 Then
 tv(0) = v1$
  tv(1) = v2$
ElseIf k% = 0 And l% = 2 Then
  tv(0) = v1$
 Select Case item0(it%).data(0).diff_type
  Case 3, 5
   tv(1) = minus_string(v2$, v1$, True, False)
  Case 4, 8
   tv(1) = minus_string(v1$, v2$, True, False)
  Case 6, 7
   tv(1) = add_string(v1$, v2$, True, False)
  End Select
ElseIf k% = 1 And l% = 0 Then
 tv(0) = v2$
  tv(1) = v1$
ElseIf k% = 1 And l% = 2 Then
   tv(1) = v1$
 Select Case item0(it%).data(0).diff_type
  Case 3, 5
   tv(0) = minus_string(v2$, v1$, True, False)
  Case 4, 8
   tv(0) = add_string(v1$, v2$, True, False)
  Case 6, 7
   tv(0) = minus_string(v1$, v2$, True, False)
  End Select
ElseIf k% = 2 And l% = 0 Then
  tv(0) = v2$
 Select Case item0(it%).data(0).diff_type
  Case 3, 5
   tv(1) = minus_string(v1$, v2$, True, False)
  Case 4, 8
   tv(1) = minus_string(v2$, v1$, True, False)
  Case 6, 7
   tv(1) = add_string(v1$, v2$, True, False)
  End Select
ElseIf k% = 2 And l% = 1 Then
  tv(1) = v2$
 Select Case item0(it%).data(0).diff_type
  Case 3, 5
   tv(0) = minus_string(v1$, v2$, True, False)
  Case 4, 8
   tv(0) = add_string(v2$, v1$, True, False)
  Case 6, 7
   tv(0) = minus_string(v2$, v1$, True, False)
End Select
End If
End If
If ty = 1 And item0(it%).data(0).sig = "*" Then
 item0(it%).data(0).value = time_string(tv(0), tv(1), True, False)
ElseIf ty = 1 And item0(it%).data(0).sig = "~" Then
 item0(it%).data(0).value = v1$
ElseIf item0(it%).data(0).sig = "/" Then
 item0(it%).data(0).value = divide_string(tv(0), tv(1), True, False)
 item0(it%).data(0).is_const = 2
End If
ElseIf item0(it%).data(0).value = "" Then
 item0(it%).data(0).value = v3$
  item0(it%).data(0).record_for_value.data0.condition_data = re
  temp_record.record_data.data0.condition_data = re
   If item0(it%).data(0).sig = "~" Then
    If item0(it%).data(0).poi(1) > 0 Then
     set_item0_value = set_line_value(item0(it%).data(0).poi(0), _
       item0(it%).data(0).poi(1), v3$, item0(it%).data(0).n(0), _
        item0(it%).data(0).n(1), item0(it%).data(0).line_no(0), temp_record, _
         0, 0, False)
     If set_item0_value > 1 Then
       Exit Function
     End If
    ElseIf item0(it%).data(0).poi(1) = -1 Then
     set_item0_value = set_tri_function(item0(it%).data(0).poi(0), v3$, "", "", "", 0, _
         temp_record, False, tri_f, 0)
     If set_item0_value > 1 Then
       Exit Function
     End If
    ElseIf item0(it%).data(0).poi(1) = -2 Then
     set_item0_value = set_tri_function(item0(it%).data(0).poi(0), "", v3$, "", "", 0, _
        temp_record, False, tri_f, 0)
     If set_item0_value > 1 Then
       Exit Function
     End If
    ElseIf item0(it%).data(0).poi(1) = -3 Then
     set_item0_value = set_tri_function(item0(it%).data(0).poi(0), "", "", v3$, "", 0, _
        temp_record, False, tri_f, 0)
     If set_item0_value > 1 Then
       Exit Function
     End If
    ElseIf item0(it%).data(0).poi(1) = -4 Then
     set_item0_value = set_tri_function(item0(it%).data(0).poi(0), "", "", "", v3$, 0, _
        temp_record, False, tri_f, 0)
     If set_item0_value > 1 Then
       Exit Function
     End If
    ElseIf item0(it%).data(0).poi(1) = -6 Then
     set_item0_value = set_angle_value(item0(it%).data(0).poi(0), v3$, _
        temp_record, 0, 0, False)
     If set_item0_value > 1 Then
       Exit Function
     End If
    ElseIf item0(it%).data(0).poi(1) = -10 Then
     set_item0_value = set_V_line_value(Dtwo_point_line(item0(it%).data(0).poi(0)).data(0).v_poi(0), _
          Dtwo_point_line(item0(it%).data(0).poi(0)).data(0).v_poi(1), 0, 0, 0, _
             v3$, temp_record, 0, 0)
     If set_item0_value > 1 Then
       Exit Function
     End If
    End If
   ElseIf item0(it%).data(0).sig = "*" Then
    If item0(it%).data(0).poi(0) = item0(it%).data(0).poi(2) And _
        item0(it%).data(0).poi(1) = item0(it%).data(0).poi(3) And _
           item0(it%).data(0).poi(1) > 0 Then
      set_item0_value = set_element_value(it%, 0, _
        sqr_string(v3$, False, False), temp_record, 0)
    If set_item0_value > 1 Then
     Exit Function
    End If
    ElseIf is_line_value(item0(it%).data(0).poi(0), item0(it%).data(0).poi(1), _
     item0(it%).data(0).n(0), item0(it%).data(0).n(1), item0(it%).data(0).line_no(0), _
      "", tn%, -1000, 0, 0, 0, line_value_data0) = 1 Then
      Call add_conditions_to_record(line_value_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
      set_item0_value = set_element_value(it%, 1, _
        divide_string(v3$, line_value(tn%).data(0).data0.value, True, False), _
          temp_record, 0)
    If set_item0_value > 1 Then
     Exit Function
    End If
    ElseIf is_line_value(item0(it%).data(0).poi(2), item0(it%).data(0).poi(3), _
     item0(it%).data(0).n(2), item0(it%).data(0).n(3), item0(it%).data(0).line_no(2), _
      "", tn%, -1000, 0, 0, 0, line_value_data0) = 1 Then
      Call add_conditions_to_record(line_value_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
      set_item0_value = set_element_value(it%, 0, _
        divide_string(v3$, line_value(tn%).data(0).data0.value, True, False), _
         temp_record, 0)
    If set_item0_value > 1 Then
     Exit Function
    End If
    ElseIf is_line_value(item0(it%).data(0).poi(4), item0(it%).data(0).poi(5), _
     item0(it%).data(0).n(4), item0(it%).data(0).n(5), item0(it%).data(0).line_no(0), _
      "", tn%, -1000, 0, 0, 0, line_value_data0) = 1 Then
      Call add_conditions_to_record(line_value_, tn%, 0, 0, temp_record.record_data.data0.condition_data)
     If item0(it%).data(0).diff_type = 3 Then
      Call solut_2order_equation("1", time_string("-1", line_value(tn%).data(0).data0.value, False, False), _
             v3$, s(0), s(1), True)
      If squre_distance_point_point(m_poi(item0(it%).data(0).poi(0)).data(0).data0.coordinate, _
           m_poi(item0(it%).data(0).poi(1)).data(0).data0.coordinate) > _
             squre_distance_point_point(m_poi(item0(it%).data(0).poi(2)).data(0).data0.coordinate, _
                m_poi(item0(it%).data(0).poi(3)).data(0).data0.coordinate) Then
     set_item0_value = set_element_value(it%, 0, s(0), temp_record, 0)
       If set_item0_value > 1 Then
        Exit Function
       End If
      set_item0_value = set_element_value(it%, 1, s(1), temp_record, 0)
       If set_item0_value > 1 Then
        Exit Function
       End If
      Else
       set_item0_value = set_element_value(it%, 0, s(1), temp_record, 0)
       If set_item0_value > 1 Then
        Exit Function
       End If
      set_item0_value = set_element_value(it%, 1, s(0), temp_record, 0)
       If set_item0_value > 1 Then
        Exit Function
       End If
      End If
     ElseIf item0(it%).data(0).diff_type = 4 Or item0(it%).data(0).diff_type = 8 Then
      Call solut_2order_equation("1", line_value(tn%).data(0).data0.value, _
                      time_string("-1", v3$, True, False), s(0), s(1), True)
       set_item0_value = set_element_value(it%, 1, s(0), temp_record, 0)
        If set_item0_value > 1 Then
         Exit Function
        End If
     ElseIf item0(it%).data(0).diff_type = 6 Or item0(it%).data(0).diff_type = 7 Then
      Call solut_2order_equation("1", line_value(tn%).data(0).data0.value, _
                      time_string("-1", v3$, True, False), s(0), s(1), True)
       set_item0_value = set_element_value(it%, 0, s(0), temp_record, 0)
        If set_item0_value > 1 Then
         Exit Function
        End If
 '     If item0(it%).data(0).diff_type = 4 Or item0(it%).data(0).diff_type = 8 Then
 '    End If
     End If
 '   ElseIf is_relation(item0(it%).data(0).poi(0), item0(it%).data(0).poi(1), _
              item0(it%).data(0).poi(2), item0(it%).data(0).poi(3), item0(it%).data(0).n(0), _
                item0(it%).data(0).n(1), item0(it%).data(0).poi(2), item0(it%).data(0).n(3), _
                 item0(it%).data(0).line_no(0), item0(it%).data(0).line_no(1), tv_$, tn_(0), -1000, 0, 0, _
                   0, dr, tn_(1), tn_(2), ty, record_0.data0.condition_data) Then
 '   ElseIf is_two_line_value(item0(it%).data(0).poi(0), item0(it%).data(0).poi(1), _
              item0(it%).data(0).poi(2), item0(it%).data(0).poi(3), item0(it%).data(0).n(0), _
                item0(it%).data(0).n(1), item0(it%).data(0).poi(2), item0(it%).data(0).n(3), _
                 item0(it%).data(0).line_no(0), item0(it%).data(0).line_no(1), "1", "1", tv_$, tn_(0), -1000, _
                    0, 0, 0, tlv, ty, record_0.data0.condition_data) Then
   '           If ty = line_value_ Then
   '               Exit Function
   '           Else
   '           End If
  '  ElseIf is_two_line_value(item0(it%).data(0).poi(0), item0(it%).data(0).poi(1), _
  '            item0(it%).data(0).poi(2), item0(it%).data(0).poi(3), item0(it%).data(0).n(0), _
                item0(it%).data(0).n(1), item0(it%).data(0).poi(2), item0(it%).data(0).n(3), _
                 item0(it%).data(0).line_no(0), item0(it%).data(0).line_no(1), "1", "-1", tv_$, tn_(0), -1000, _
                    0, 0, 0, tlv, ty, record_0.data0.condition_data) Then
  '            If ty = line_value_ Then
  '                Exit Function
  '            Else
  '            End If
    End If
   ElseIf item0(it%).data(0).sig = "/" Then
    set_item0_value = set_Drelation(item0(it%).data(0).poi(0), item0(it%).data(0).poi(1), _
         item0(it%).data(0).poi(2), item0(it%).data(0).poi(3), item0(it%).data(0).n(0), _
          item0(it%).data(0).n(1), item0(it%).data(0).n(2), item0(it%).data(0).n(3), _
           item0(it%).data(0).line_no(0), item0(it%).data(0).line_no(1), v3$, temp_record, 0, _
             0, 0, 0, 0, False)
    If set_item0_value > 1 Then
     Exit Function
    End If
   End If
End If
Else
 item0(it%).data(0).value = it_v$
 item0(it%).data(0).record_for_value = temp_record.record_data
 If item0(it%).data(0).sig = "~" Then
    set_item0_value = set_element_value(it%, 0, it_v$, temp_record, 0)
    If set_item0_value > 1 Then
       Exit Function
    End If
 End If
End If
 item0(it%).data(0).record_for_value = temp_record.record_data
  set_item0_value = combine_item_with_general_string_(it%, -1)
  If set_item0_value > 1 Then
     Exit Function
  End If
  set_item0_value = combine_general_string_with_item_value(0, it%)
   If set_item0_value > 1 Then
      Exit Function
   End If
  set_item0_value = combine_item0_value_and_two_line_value_and_relation( _
        it%, 0, 0)
   If set_item0_value > 1 Then
      Exit Function
   End If
  set_item0_value = combine_item0_value_with_two_line_value(0, it%)
End Function
Public Function set_display_item0_for_diff(it As item0_type) As String
Select Case it.data(0).diff_type
Case 4, 8
 If it.data(0).sig = "*" Then
   set_display_item0_for_diff = m_poi(it.data(0).poi(0)).data(0).data0.name + m_poi(it.data(0).poi(1)).data(0).data0.name + _
    "*" + "(" + m_poi(it.data(0).poi(0)).data(0).data0.name + m_poi(it.data(0).poi(1)).data(0).data0.name + "-" + _
              m_poi(it.data(0).poi(4)).data(0).data0.name + m_poi(it.data(0).poi(5)).data(0).data0.name + ")"
 ElseIf it.data(0).sig = "/" Then
   set_display_item0_for_diff = "(" + m_poi(it.data(0).poi(2)).data(0).data0.name + _
     m_poi(it.data(0).poi(3)).data(0).data0.name + "+" + m_poi(it.data(0).poi(4)).data(0).data0.name + _
        m_poi(it.data(0).poi(5)).data(0).data0.name + ")" + "/" + _
          m_poi(it.data(0).poi(2)).data(0).data0.name + m_poi(it.data(0).poi(3)).data(0).data0.name
 End If
Case 6, 7
 If it.data(0).sig = "*" Then
   set_display_item0_for_diff = m_poi(it.data(0).poi(0)).data(0).data0.name + m_poi(it.data(0).poi(1)).data(0).data0.name + _
    "*" + "(" + m_poi(it.data(0).poi(0)).data(0).data0.name + m_poi(it.data(0).poi(1)).data(0).data0.name + "+" + _
              m_poi(it.data(0).poi(4)).data(0).data0.name + m_poi(it.data(0).poi(5)).data(0).data0.name + ")"
 ElseIf it.data(0).sig = "/" Then
   set_display_item0_for_diff = "(" + m_poi(it.data(0).poi(4)).data(0).data0.name + _
     m_poi(it.data(0).poi(5)).data(0).data0.name + "-" + m_poi(it.data(0).poi(0)).data(0).data0.name + _
        m_poi(it.data(0).poi(1)).data(0).data0.name + ")" + "/" + _
          m_poi(it.data(0).poi(2)).data(0).data0.name + m_poi(it.data(0).poi(3)).data(0).data0.name
 End If
End Select
End Function
Public Function set_property_of_line_value(ByVal l%, no_reduce As Byte) As Byte
Dim i%, j%, k%, q%, p%, no%, tn_%, last_tn%
Dim tp(3) As Integer
Dim tl(1) As Integer
Dim it(1) As Integer
Dim A(2) As Integer
Dim ty As Byte
Dim t_y(1) As Boolean
Dim dn(2) As Integer
Dim n(3) As Integer
Dim m(1) As Integer
Dim n_(1) As Integer
Dim tn() As Integer
Dim tv$
Dim vl As two_line_type 'verti_type
Dim l_v As line_value_type
Dim s(2) As String
Dim lv As String
Dim triA(1) As Integer
Dim tri As triangle_data0_type
Dim tA As temp_triangle_type
Dim re As total_record_type
Dim re1 As record_type0
Dim verti_data As two_line_type
Dim temp_record As total_record_type
Dim t_l2 As two_line_value_data0_type
Dim tre As condition_data_type
  If no_reduce > 0 And no_reduce < 255 Then
   no_reduce = no_reduce - 1
  End If
'*************************
'将相关数据加入有关的三角形
'*************************
For i% = 1 To last_conditions.last_cond(1).squre_no
  If is_squre_length(i%, l%) Then
   set_property_of_line_value = set_squre_length(i%)
    If set_property_of_line_value > 1 Then
       Exit Function
    End If
  End If
Next i%
For i% = 1 To last_conditions.last_cond(1).tixing_no
    If is_same_two_point(Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1), _
         line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
          Dtixing(i%).data(0).line_value_no(0) = l%
    ElseIf is_same_two_point(Dtixing(i%).data(0).poi(1), Dtixing(i%).data(0).poi(2), _
         line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
          Dtixing(i%).data(0).line_value_no(1) = l%
    ElseIf is_same_two_point(Dtixing(i%).data(0).poi(2), Dtixing(i%).data(0).poi(3), _
         line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
          Dtixing(i%).data(0).line_value_no(2) = l%
    ElseIf is_same_two_point(Dtixing(i%).data(0).poi(3), Dtixing(i%).data(0).poi(0), _
         line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
          Dtixing(i%).data(0).line_value_no(3) = l%
    ElseIf is_same_two_point(Dtixing(i%).data(0).mid_poi(0), Dtixing(i%).data(0).mid_poi(1), _
         line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
          Dtixing(i%).data(0).mid_position_line_value_no = l%
    End If
Next i%
Call set_temp_triangle_from_lin(line_value(l%).data(0).data0.poi(0), _
         line_value(l%).data(0).data0.poi(1), 0, tA, False)
For i% = 1 To tA.last_T
  tn_% = position_from_direction(tA.data(i%).direction, 0)
     If triangle(tA.data(i%).no).data(0).length_of_sides_value = "" Then
       n_(0) = 0
       If is_two_line_value(tA.data(i%).poi(0), tA.data(i%).poi(1), tA.data(i%).poi(0), _
          tA.data(i%).poi(2), 0, 0, 0, 0, 0, 0, "1", "1", tv$, n_(0), -1000, 0, 0, 0, t_l2, 0, tre) = 1 Then
             Call add_conditions_to_record(line_value_, l%, 0, 0, tre)
             Call add_conditions_to_record(two_line_value_, tn_%, 0, 0, tre)
              triangle(tA.data(i%).no).data(0).length_of_sides = tre
              triangle(tA.data(i%).no).data(0).length_of_sides_value = add_string( _
               line_value(l%).data(0).data0.value, two_line_value(n_(0)).data(0).data0.value, True, False)
         set_property_of_line_value = set_length_of_sides_from_length_of_sides(tA.data(i%).no)
          If set_property_of_line_value > 1 Then
           Exit Function
          End If
        End If
    End If
    If triangle(tA.data(i%).no).data(0).line_value(tn_%) = 0 Then
     triangle(tA.data(i%).no).data(0).line_value(tn_%) = l%
    End If
    tri = triangle(tA.data(i%).no).data(0)
      set_property_of_line_value = solve_triangle(tA.data(i%).no, tri, -1, _
        tn_%, -1, -1, -1, -1, -1, -1, -1, -1, 1, no_reduce, False)
         If set_property_of_line_value > 1 Then
            Exit Function
         End If
 Next i%
 '***************************
 For i% = 1 To last_conditions.last_cond(1).tixing_no
 '设置底长
  If Dpolygon4(Dtixing(i%).data(0).poly4_no).data(0).area_value = "" Then
   If Dtixing(i%).data(0).buttom_(0).ty <> two_line_value_ Then
    If is_same_two_point(Dtixing(i%).data(0).poi(0), Dtixing(i%).data(0).poi(1), _
         line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Or _
         is_same_two_point(Dtixing(i%).data(0).poi(2), Dtixing(i%).data(0).poi(3), _
           line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
          If Dtixing(i%).data(0).buttom_(0).no = 0 Then
             Dtixing(i%).data(0).buttom_(0).ty = line_value_
             Dtixing(i%).data(0).buttom_(0).no = l%
          ElseIf Dtixing(i%).data(0).buttom_(0).no <> l% Then
             Dtixing(i%).data(0).buttom_(1).ty = line_value_
             Dtixing(i%).data(0).buttom_(1).no = l%
           If Dparal(Dtixing(i%).data(0).paral_no).data(0).distance_no > 0 Then
            temp_record.record_data.data0.condition_data.condition_no = 0
             Call add_record_to_record(Ddistance_of_paral_line(Dparal(Dtixing(i%).data(0).paral_no).data(0).distance_no).data(0).record.data0.condition_data, _
                      temp_record.record_data.data0.condition_data)
             Call add_conditions_to_record(Dtixing(i%).data(0).buttom_(0).ty, _
                       Dtixing(i%).data(0).buttom_(0).no, Dtixing(i%).data(0).buttom_(1).no, 0, _
                  temp_record.record_data.data0.condition_data)
             s(0) = add_string(line_value(Dtixing(i%).data(0).buttom_(0).no).data(0).data0.value_, _
                   line_value(Dtixing(i%).data(0).buttom_(1).no).data(0).data0.value_, False, False)
             s(0) = divide_string(s(0), "2", False, False)
             s(0) = time_string(s(0), Ddistance_of_paral_line(Dparal(Dtixing(i%).data(0).paral_no).data(0).distance_no).data(0).value, _
                    True, False)
             set_property_of_line_value = set_area_of_polygon0( _
                 Dtixing(i%).data(0).poly4_no, s(0), temp_record, 0, 0)
             If set_property_of_line_value > 1 Then
              Exit Function
             End If
           End If
          End If
    End If
   End If
   If Dtixing(i%).data(0).mid_position_line_value_no = 0 Then
       If is_same_two_point(Dtixing(i%).data(0).mid_poi(0), Dtixing(i%).data(0).mid_poi(1), _
         line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
          Dtixing(i%).data(0).mid_position_line_value_no = l%
           If Dparal(Dtixing(i%).data(0).paral_no).data(0).distance_no > 0 Then
            temp_record.record_data.data0.condition_data.condition_no = 0
             Call add_record_to_record(Ddistance_of_paral_line(Dparal(Dtixing(i%).data(0).paral_no).data(0).distance_no).data(0).record.data0.condition_data, _
                  temp_record.record_data.data0.condition_data)
             Call add_conditions_to_record(line_value_, Dtixing(i%).data(0).mid_position_line_value_no, 0, 0, _
                  temp_record.record_data.data0.condition_data)
             Call add_conditions_to_record(Dtixing(i%).data(1).mid_point_no(0).ty, _
                       Dtixing(i%).data(0).mid_point_no(1).no, Dtixing(i%).data(1).mid_point_no(1).no, 0, _
                         temp_record.record_data.data0.condition_data)
             Call add_conditions_to_record(Dtixing(i%).data(1).mid_point_no(2).ty, _
                       Dtixing(i%).data(2).mid_point_no(1).no, Dtixing(i%).data(3).mid_point_no(1).no, 0, _
                         temp_record.record_data.data0.condition_data)
              s(0) = time_string(line_value(Dtixing(i%).data(0).mid_position_line_value_no).data(0).data0.value_, _
                        Ddistance_of_paral_line(Dparal(Dtixing(i%).data(0).paral_no).data(0).distance_no).data(0).value, _
                    True, False)
             set_property_of_line_value = set_area_of_polygon0( _
                 Dtixing(i%).data(0).poly4_no, s(0), temp_record, 0, 0)
             If set_property_of_line_value > 1 Then
              Exit Function
             End If
           End If
       End If
   End If
  End If
 Next i%
 '****************************
 If th_chose(51).chose = 1 Then
  temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
    temp_record.record_data.data0.condition_data.condition(1).no = l%
  temp_record.record_data.data0.theorem_no = 51
   For i% = 1 To last_conditions.last_cond(0).rhombus_no '已知菱形一边长
    If is_same_two_point(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
                          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), _
          line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
       If is_line_value(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
              Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(2), 0, 0, 0, "", _
           n_(0), -1000, 0, 0, 0, l_v.data(0).data0) = 1 Then
        Call add_conditions_to_record(line_value_, n_(0), 0, 0, temp_record.record_data.data0.condition_data)
         set_property_of_line_value = set_line_value( _
             Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), _
              Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(3), _
           sqr_string(minus_string(time_string("4", line_value(l%).data(0).data0.squar_value, False, False), _
              line_value(n_(0)).data(0).data0.squar_value, False, False), True, False), _
               0, 0, 0, temp_record, 0, 0, False)
        If set_property_of_line_value > 1 Then
         Exit Function
        End If
       ElseIf is_line_value(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), _
             Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(3), 0, 0, 0, "", _
           n_(0), -1000, 0, 0, 0, l_v.data(0).data0) = 1 Then
        Call add_conditions_to_record(line_value_, n_(0), 0, 0, temp_record.record_data.data0.condition_data)
         set_property_of_line_value = set_line_value( _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
           Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(2), _
           sqr_string(minus_string(time_string("4", line_value(l%).data(0).data0.squar_value, False, False), _
              line_value(n_(0)).data(0).data0.squar_value, False, False), True, False), _
               0, 0, 0, temp_record, 0, 0, False)
        If set_property_of_line_value > 1 Then
         Exit Function
        End If
       End If
    ElseIf is_same_two_point(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
         Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(2), _
          line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
       If is_line_value(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
         Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), 0, 0, 0, "", _
           n_(0), -1000, 0, 0, 0, l_v.data(0).data0) = 1 Then
        Call add_conditions_to_record(line_value_, n_(0), 0, 0, temp_record.record_data.data0.condition_data)
         set_property_of_line_value = set_line_value( _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
           Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(2), _
           sqr_string(minus_string(time_string("4", line_value(n_(0)).data(0).data0.squar_value, False, False), _
              line_value(l%).data(0).data0.squar_value, False, False), True, False), _
               0, 0, 0, temp_record, 0, 0, False)
        If set_property_of_line_value > 1 Then
         Exit Function
        End If
       ElseIf is_line_value(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), _
        Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(3), 0, 0, 0, "", _
           n_(0), -1000, 0, 0, 0, l_v.data(0).data0) = 1 Then
        Call add_conditions_to_record(line_value_, n_(0), 0, 0, temp_record.record_data.data0.condition_data)
         set_property_of_line_value = set_line_value( _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
           Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), _
           time_string("2", sqr_string(add_string(line_value(l%).data(0).data0.squar_value, _
              line_value(n_(0)).data(0).data0.squar_value, False, False), False, False), True, False), _
               0, 0, 0, temp_record, 0, 0, False)
        If set_property_of_line_value > 1 Then
         Exit Function
        End If
       End If
    ElseIf is_same_two_point(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), _
         Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(3), _
          line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1)) Then
       If is_line_value(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(2), 0, 0, 0, "", _
           n_(0), -1000, 0, 0, 0, l_v.data(0).data0) = 1 Then
        Call add_conditions_to_record(line_value_, n_(0), 0, 0, temp_record.record_data.data0.condition_data)
         set_property_of_line_value = set_line_value( _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
           Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), _
            time_string("2", sqr_string(add_string(line_value(l%).data(0).data0.squar_value, _
              line_value(n_(0)).data(0).data0.squar_value, False, False), False, False), True, False), _
               0, 0, 0, temp_record, 0, 0, False)
        If set_property_of_line_value > 1 Then
         Exit Function
        End If
       ElseIf is_line_value(Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(1), 0, 0, 0, "", _
           n_(0), -1000, 0, 0, 0, l_v.data(0).data0) = 1 Then
        Call add_conditions_to_record(line_value_, n_(0), 0, 0, temp_record.record_data.data0.condition_data)
         set_property_of_line_value = set_line_value( _
          Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(0), _
           Dpolygon4(rhombus(i%).data(0).polygon4_no).data(0).poi(2), _
           sqr_string(minus_string(time_string("4", line_value(n_(0)).data(0).data0.squar_value, False, False), _
              line_value(l%).data(0).data0.squar_value, False, False), True, False), _
               0, 0, 0, temp_record, 0, 0, False)
        If set_property_of_line_value > 1 Then
         Exit Function
        End If
       End If
    End If
   Next i%
 End If
 '********************************************
 For i% = 1 To last_conditions.last_cond(1).epolygon_no '已知等边多边形一边长
  If epolygon(i%).data(0).p.total_v = 4 Then
   For j% = 0 To 3
    If is_same_two_point(epolygon(i%).data(0).p.v(j%), _
         epolygon(i%).data(0).p.v((j% + 1) Mod 4), _
           line_value(l%).data(0).data0.poi(0), _
             line_value(l%).data(0).data0.poi(1)) Then
        temp_record.record_data.data0.condition_data.condition_no = 1
         temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
          temp_record.record_data.data0.condition_data.condition(1).no = l%
           Call add_conditions_to_record(epolygon_, i%, 0, 0, temp_record.record_data.data0.condition_data)
           set_property_of_line_value = set_area_of_polygon( _
             epolygon(i%).data(0).p.v(0), epolygon(i%).data(0).p.v(1), _
              epolygon(i%).data(0).p.v(2), epolygon(i%).data(0).p.v(3), _
               line_value(l%).data(0).data0.squar_value, temp_record, _
                0, 0)
           If set_property_of_line_value > 1 Then
            Exit Function
           Else
            GoTo set_property_of_line_value_next1
           End If
      End If
   Next j%
  End If
set_property_of_line_value_next1:
 Next i%
        If is_distance_of_paral(l%, no%, q%, 0) Then
         set_property_of_line_value = set_height_of_tixing(no%)
          If set_property_of_line_value > 1 Then
           Exit Function
          End If
          set_property_of_line_value = set_height_of_triangle(tl(0), tl(1), i%, j%, l%)
          If set_property_of_line_value > 1 Then
           Exit Function
          End If
         ElseIf no% = 0 And q% > 0 Then
         
         End If
set_property_of_line_value_next_out:
  For i% = 1 + last_conditions.last_cond(0).line_value_no To l% - 1
 'If line_value(i%).data(0).data0.value = line_value(l%).data(0).data0.value Then
 temp_record.record_data.data0.condition_data.condition_no = 2
  temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
   temp_record.record_data.data0.condition_data.condition(1).no = i%
  temp_record.record_data.data0.condition_data.condition(2).ty = line_value_
   temp_record.record_data.data0.condition_data.condition(2).no = l%
  set_property_of_line_value = set_property_of_relation( _
    line_value(i%).data(0).data0.poi(0), line_value(i%).data(0).data0.poi(1), _
      line_value(l%).data(0).data0.poi(0), line_value(l%).data(0).data0.poi(1), _
       divide_string(line_value(i%).data(0).data0.value, line_value(l%).data(0).data0.value, _
         True, False), line_value(i%).data(0).data0.n(0), line_value(i%).data(0).data0.n(1), _
          line_value(l%).data(0).data0.n(0), line_value(l%).data(0).data0.n(1), _
           line_value(i%).data(0).data0.line_no, line_value(l%).data(0).data0.line_no, _
             temp_record, 0)
 If set_property_of_line_value > 1 Then
  Exit Function
 End If
 'End If
 Next i%
 For j% = 1 To C_display_picture.m_circle.Count
    If m_Circ(j%).data(0).data0.center > 0 Then
     If m_poi(m_Circ(j%).data(0).data0.center).data(0).data0.visible > 0 Then
      If is_kwon_radii_for_circle(j%, l%) Then
       temp_record.record_data.data0.condition_data.condition_no = 1
      temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
       temp_record.record_data.data0.condition_data.condition(1).no = l%
        For i% = 1 To m_Circ(j%).data(0).data0.in_point(0)
         set_property_of_line_value = set_line_value(m_Circ(j%).data(0).data0.in_point(i%), _
           m_Circ(j%).data(0).data0.center, _
            line_value(l%).data(0).data0.value, 0, 0, 0, temp_record, 0, 0, False)
             If set_property_of_line_value > 1 Then
                Exit Function
             End If
        Next i%
     End If
  End If
End If
Next j%
'**********************************
End Function

Public Function set_property_of_eline(ByVal p1%, ByVal p2%, _
          ByVal p3%, ByVal p4%, ByVal n1%, ByVal n2%, _
           ByVal n3%, ByVal n4%, ByVal l1%, ByVal l2%, _
            ByVal eside_str_p1%, ByVal eside_str_p2%, _
             ByVal eside_str_p3%, re As total_record_type, _
              ty_ As Byte, no_reduce As Byte) As Byte
Dim i%, j%, n%, n_%, tn_%, di%, l%, tp_%
Dim dn(3) As Integer
Dim con_ty As Byte
Dim tv$
Dim ty As Byte
Dim tn(3) As Integer
Dim po As polygon
Dim A(2) As Integer
Dim tl(2) As Integer
Dim tp(5) As Integer
Dim t_n(5) As Integer
Dim v  As String
Dim triA As temp_triangle_type
Dim temp_record As total_record_type
Dim temp_record1 As record_data_type
Dim eside_triangle_p(2) As Integer
Dim is_no_initial As Integer
Dim c_data As condition_data_type
Dim p4_on_circle As four_point_on_circle_data_type
'On Error GoTo set_property_of_eline_error
If is_same_two_point(p1%, p2%, p3%, p4%) Then
   Exit Function
End If
If l1% = 0 Then
l1% = line_number0(p1%, p2%, n1%, n2%)
End If
If l2% = 0 Then
l2% = line_number0(p3%, p4%, n3%, n4%)
End If
If l1% = l2% And l1% > 0 Then '圆的弦有中点的对称点
      tn_% = m_circle_number(1, 0, pointapi0, p1%, p4%, 0, 0, 0, 0, 1, 0, 0, 0, False)
   If tn_% > 0 Then
      set_property_of_eline = add_mid_point(p1%, 0, p4%, 2)
      If set_property_of_eline > 1 Then
         Exit Function
      Else
       GoTo set_property_of_eline_out1
     End If
   End If
      tn_% = m_circle_number(1, 0, pointapi0, p2%, p3%, 0, 0, 0, 0, 1, 0, 0, 0, False)
   If tn_% > 0 Then
      set_property_of_eline = add_mid_point(p2%, 0, p3%, 2)
      If set_property_of_eline > 1 Then
         Exit Function
      Else
       GoTo set_property_of_eline_out1
      End If
   End If
End If
For i% = 1 To C_display_picture.m_circle.Count
    If p1% = p3% Then
       If m_Circ(i%).data(0).data0.center = p1% Then
        set_property_of_eline = set_equal_chord(i%, p1%, p2%, p4%, l1%, l2%, re)
         If set_property_of_eline > 1 Then
            Exit Function
         End If
       End If
    ElseIf p1% = p4% Then
       If m_Circ(i%).data(0).data0.center = p1% Then
        set_property_of_eline = set_equal_chord(i%, p1%, p2%, p3%, l1%, l2%, re)
         If set_property_of_eline > 1 Then
            Exit Function
         End If
       End If
    ElseIf p2% = p3% Then
       If m_Circ(i%).data(0).data0.center = p2% Then
        set_property_of_eline = set_equal_chord(i%, p2%, p1%, p4%, l1%, l2%, re)
         If set_property_of_eline > 1 Then
            Exit Function
         End If
       End If
    ElseIf p2% = p4% Then
       If m_Circ(i%).data(0).data0.center = p2% Then
        set_property_of_eline = set_equal_chord(i%, p2%, p1%, p3%, l1%, l2%, re)
         If set_property_of_eline > 1 Then
            Exit Function
         End If
       End If
    End If
Next i%
set_property_of_eline_out1:
temp_record = re
   set_property_of_eline = simple_polygon_from_eline(p1%, p2%, p3%, p4%, temp_record)
    If set_property_of_eline > 1 Then
     Exit Function
    End If
 If re.record_data.data0.condition_data.condition_no > 1 Then
  If arrange_four_point(p1%, p2%, p3%, p4%, n1%, n2%, n3%, n4%, l1%, l2%, _
       tp(0), tp(1), tp(2), tp(3), 0, 0, t_n(0), t_n(1), t_n(2), t_n(3), 0, 0, tl(0), _
        tl(1), 0, ty, c_data, is_no_initial) Then
    If ty = 3 Or ty = 5 Then
      If re.record_data.data0.condition_data.condition_no = 2 Then
      If is_no_initial = 1 Then
      Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
      End If
      set_property_of_eline = set_property_of_mid_point(tp(0), tp(1), _
        tp(3), t_n(0), t_n(1), t_n(3), tl(0), temp_record, 0, no_reduce)
         Exit Function
      End If
    tp(4) = tp(0)
    tp(5) = tp(3)
    t_n(4) = t_n(0)
    t_n(5) = t_n(3)
    End If
  End If
Else
temp_record = re
tp(0) = p1%
tp(1) = p2%
tp(2) = p3%
tp(3) = p4%
t_n(0) = n1%
t_n(1) = n2%
t_n(2) = n3%
t_n(3) = n4%
tl(0) = l1%
tl(1) = l2%
End If
If eside_str_p1% > 0 Then
   tp(0) = eside_str_p2%
   tp(1) = eside_str_p1%
   tp(2) = eside_str_p1%
   tp(3) = eside_str_p3%
Else
If tp(0) = tp(2) Then
    Call exchange_two_integer(tp(0), tp(1))
    eside_str_p1% = tp(1)
    eside_str_p2% = tp(0)
    eside_str_p3% = tp(3)
ElseIf tp(0) = tp(3) Then
    Call exchange_two_integer(tp(0), tp(1))
     Call exchange_two_integer(tp(2), tp(3))
    eside_str_p1% = tp(1)
    eside_str_p2% = tp(0)
    eside_str_p3% = tp(3)
ElseIf tp(1) = tp(3) Then
    Call exchange_two_integer(tp(2), tp(3))
    eside_str_p1% = tp(1)
    eside_str_p2% = tp(0)
    eside_str_p3% = tp(3)
End If
End If
If eside_str_p1% > 0 And eside_str_p2% > 0 And eside_str_p3% > 0 Then
n% = triangle_number(eside_str_p1%, eside_str_p2%, eside_str_p3%, 0, 0, 0, 0, 0, 0, di)
  If triangle(n%).data(0).eangle_line(position_from_direction(di%, 0)) > 0 Then
     temp_record = re
     Call add_conditions_to_record(angle3_value_, _
       triangle(n%).data(0).eangle_no(position_from_direction(di%, 0), 0).no, _
        triangle(n%).data(0).eangle_no(position_from_direction(di%, 0), 1).no, _
         0, temp_record.record_data.data0.condition_data)
          temp_record.record_data.data0.theorem_no = 37
    l% = line_number0(eside_str_p2%, eside_str_p3%, 0, 0)
    set_property_of_eline = set_dverti(triangle(n%).data(0).eangle_line(position_from_direction(di%, 0)), _
         l%, temp_record, 0, 0, False)
         If set_property_of_eline > 1 Then
            Exit Function
         End If
    tp_% = is_line_line_intersect(l%, triangle(n%).data(0).eangle_line(position_from_direction(di%, 0)), 0, 0, False)
    If tp_% > 0 Then
     temp_record.record_data.data0.theorem_no = 39
     set_property_of_eline = set_mid_point(eside_str_p2%, tp_%, eside_str_p2%, 0, 0, 0, 0, 0, temp_record, 0, _
            0, 0, 0, 0)
         If set_property_of_eline > 1 Then
            Exit Function
         End If
     End If
  End If
End If
If tp(1) = tp(2) Then
     set_property_of_eline = _
       add_point_to_circle_for_prove(tp(0), tp(1), tp(3), temp_record, _
         no_reduce)
      If set_property_of_eline > 1 Then
       Exit Function
      End If
         po.total_v = 3
          po.v(0) = tp(0)
           po.v(1) = tp(1)
            po.v(2) = tp(3)
   set_property_of_eline = set_relation_for_triangle(tp(0), tp(1), tp(3), _
         re, "1")
         If set_property_of_eline > 1 Then
          Exit Function
         End If
'****
 A(0) = Abs(angle_number(tp(1), tp(0), tp(3), 0, 0))
 A(1) = Abs(angle_number(tp(0), tp(1), tp(3), 0, 0))
 A(2) = Abs(angle_number(tp(1), tp(3), tp(0), 0, 0))
  temp_record = re
If th_chose(40).chose = 1 Then
  temp_record.record_data.data0.theorem_no = 40
 set_property_of_eline = set_three_angle_value(A(0), A(2), 0, "1", "-1", "0", _
       "0", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
       If set_property_of_eline > 1 Then
          Exit Function
       End If
 set_property_of_eline = set_three_angle_value(A(1), A(0), 0, "1", "2", "180", _
       "0", 0, temp_record, 0, 0, 0, 4, 0, 0, False)
       If set_property_of_eline > 1 Then
          Exit Function
       End If
 set_property_of_eline = set_three_angle_value(A(2), A(0), 0, "1", "2", "180", _
       "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
       If set_property_of_eline > 1 Then
          Exit Function
       End If
End If
If th_chose(36).chose = 1 Or th_chose(62).chose = 1 Then
 If angle(A(0)).data(0).value = "90" Then
  Call add_conditions_to_record(angle3_value_, angle(A(0)).data(0).value_no, _
        0, 0, temp_record.record_data.data0.condition_data)
   tl(0) = line_number0(tp(0), tp(3), tn(0), tn(1))
    If get_midpoint(tp(0), 0, tp(3), 0, 0, 0, 0, 0) = 0 Then
  For n% = 1 + last_conditions.last_cond(0).paral_no To last_conditions.last_cond(1).paral_no
   i% = Dparal(n%).data(0).data0.record.data1.index.i(0)
   If Dparal(i%).data(0).data0.line_no(0) = tl(0) Then
    tl(1) = Dparal(i%).data(0).data0.line_no(1)
     If is_point_in_line3(tp(1), m_lin(tl(1)).data(0).data0, 0) Then
      GoTo set_property_of_eline_mark5
     End If
   ElseIf Dparal(i%).data(0).data0.line_no(1) = tl(0) Then
    tl(1) = Dparal(i%).data(0).data0.line_no(0)
     If is_point_in_line3(tp(1), m_lin(tl(1)).data(0).data0, 0) Then
      GoTo set_property_of_eline_mark5
     End If
   End If
  Next n%
      GoTo set_property_of_eline_mark6
set_property_of_eline_mark5:
 Call add_conditions_to_record(paral_, i%, 0, 0, temp_record.record_data.data0.condition_data)
 For n% = 1 + last_conditions.last_cond(0).verti_no To last_conditions.last_cond(1).verti_no
 i% = Dverti(n%).data(0).record.data1.index.i(0)
 Call add_conditions_to_record(verti_, i%, 0, 0, temp_record.record_data.data0.condition_data)
  If Dverti(i%).data(0).line_no(0) = tl(0) Then
   tl(2) = Dverti(i%).data(0).line_no(1)
    tp(4) = is_line_line_intersect(tl(2), tl(0), _
          tn(2), 0, False)
    tp(5) = is_line_line_intersect(tl(2), tl(1), _
          tn(3), 0, False)
   If tp(4) > 0 And tp(5) > 0 Then
   set_property_of_eline = set_Drelation(tp(0), tp(3), _
    tp(4), tp(5), tn(0), tn(1), tn(2), tn(3), tl(0), tl(2), _
     "2", temp_record, 0, 0, 0, 0, no_reduce, False)
    If set_property_of_eline > 1 Then
     Exit Function
    End If
   End If
  ElseIf Dverti(i%).data(0).line_no(1) = tl(0) Then
   tl(2) = Dverti(i%).data(0).line_no(0)
    tp(4) = is_line_line_intersect(tl(2), tl(0), _
          tn(2), 0, False)
    tp(5) = is_line_line_intersect(tl(2), tl(1), _
          tn(3), 0, False)
   If tp(4) > 0 And tp(5) > 0 Then
   set_property_of_eline = set_Drelation(tp(0), tp(3), _
    tp(4), tp(5), tn(0), tn(1), tn(2), tn(3), tl(0), tl(2), _
     "2", temp_record, 0, 0, 0, 0, no_reduce, False)
    If set_property_of_eline > 1 Then
     Exit Function
    End If
  End If
  End If
 Next n%
set_property_of_eline_mark6:
 End If
 End If
    If th_chose(36).chose = 1 And A(0) > 0 And A(2) > 0 Then
       temp_record.record_data.data0.theorem_no = 36
      set_property_of_eline = set_three_angle_value(A(0), A(2), 0, _
       "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
       If set_property_of_eline > 1 Then
        Exit Function
       End If
    End If
     v = ""
      If is_angle_value(A(1), v, "", dn(1), temp_record1.data0.condition_data) Then
       temp_record = re
       Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
         tv$ = divide_string(minus_string("180", v, False, False), _
                 "2", True, False)
          set_property_of_eline = set_angle_value(A(0), tv$, temp_record, 0, no_reduce, False)
           If set_property_of_eline > 1 Then
            Exit Function
           End If
          set_property_of_eline = set_angle_value(A(2), tv$, temp_record, 0, no_reduce, False)
           If set_property_of_eline > 1 Then
            Exit Function
           End If
          End If
       If v = "60" Then
         temp_record.record_data.data0.theorem_no = 62
            set_property_of_eline = set_Epolygon(po, temp_record, 0, no_reduce, 1, 0, False)
             If set_property_of_eline > 1 Then
              Exit Function
             End If
       End If
      Else
       v = ""
       If is_angle_value(A(0), v, "", dn(0), temp_record1.data0.condition_data) Then
        temp_record = re
         Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
          set_property_of_eline = set_angle_value(A(2), v, temp_record, 0, 0, False)
          If set_property_of_eline > 1 Then
           Exit Function
          End If
          set_property_of_eline = set_angle_value(A(1), minus_string("180", _
                  time_string("2", v, False, False), True, False), temp_record, 0, 0, False)
          If set_property_of_eline > 1 Then
           Exit Function
          End If
         If v = "60" Then
                  temp_record.record_data.data0.theorem_no = 62
            set_property_of_eline = set_Epolygon(po, temp_record, 0, no_reduce, 1, 0, False)
             If set_property_of_eline > 1 Then
              Exit Function
             End If
         End If
       Else
        v = ""
        If is_angle_value(A(2), v, "", dn(2), temp_record1.data0.condition_data) Then
        temp_record = re
         Call add_record_to_record(temp_record1.data0.condition_data, temp_record.record_data.data0.condition_data)
          set_property_of_eline = set_angle_value(A(0), v, temp_record, 0, 0, False)
          If set_property_of_eline > 1 Then
           Exit Function
          End If
          set_property_of_eline = set_angle_value(A(1), minus_string("180", _
                  time_string("2", v, False, False), True, False), temp_record, 0, 0, False)
          If set_property_of_eline > 1 Then
           Exit Function
          End If
         If v = "60" Then
                  temp_record.record_data.data0.theorem_no = 62
            set_property_of_eline = set_Epolygon(po, temp_record, 0, no_reduce, 1, 0, False)
             If set_property_of_eline > 1 Then
              Exit Function
             End If
         End If
        End If
       End If
        
     '***********************
     record_0.data0.condition_data.condition_no = 0 ' record0
      If is_equal_dline(tp(0), tp(1), tp(0), tp(3), 0, 0, 0, 0, 0, 0, _
        dn(0), -1000, 0, 0, 0, _
         eline_data0, dn(1), dn(2), con_ty, "", record_0.data0.condition_data) Then
        '等边三角形
      temp_record = re
       Call add_conditions_to_record(con_ty, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
        temp_record.record_data.data0.theorem_no = 0
       set_property_of_eline = set_Epolygon(po, temp_record, 0, no_reduce, 1, 0, False)
        If set_property_of_eline > 1 Then
         Exit Function
        End If
     ElseIf is_equal_dline(tp(2), tp(3), tp(0), tp(3), 0, 0, 0, 0, 0, 0, _
         dn(0), -1000, _
           0, 0, 0, eline_data0, dn(1), dn(2), con_ty, "", record_0.data0.condition_data) Then
          temp_record.record_data.data0.condition_data.condition_no = 1
           Call add_conditions_to_record(con_ty, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
         set_property_of_eline = set_Epolygon(po, temp_record, 0, no_reduce, 1, 0, False)
          If set_property_of_eline > 1 Then
           Exit Function
          End If
       End If
End If
End If
'**********************************
If l1% = l2% Then
If ty_ = 0 Then
set_property_of_eline = set_property_of_eline(p1%, p3%, p2%, p4%, n1%, n3%, n2%, n4%, _
                     l1%, l2%, eside_str_p1%, eside_str_p2%, eside_str_p3%, re, 1, 0)
If set_property_of_eline > 1 Then
   Exit Function
End If
End If
End If
'**********************************
If th_chose(28).chose = 1 Or th_chose(29).chose = 1 Or _
    th_chose(30).chose = 1 Or th_chose(31).chose = 1 Or th_chose(32).chose = 1 Then
temp_record = re
set_property_of_eline = set_total_equal_triangle_from_eline( _
     tp(0), tp(1), tp(2), tp(3), temp_record, 0, no_reduce)
If set_property_of_eline > 1 Then
 Exit Function
End If
End If
set_property_of_eline = set_simple_polygon_from_eline(no_reduce)
If set_property_of_eline > 1 Then
 Exit Function
End If
If th_chose(65).chose = 1 Then '平行四边形
If is_dparal(tl(0), tl(1), dn(0), 0, 0, 0, 0, 0) Then
 If dn(0) > 0 Then
  temp_record = re
   Call add_conditions_to_record(paral_, dn(0), 0, 0, temp_record.record_data.data0.condition_data)
     temp_record.record_data.data0.theorem_no = 65
  set_property_of_eline = set_parallelogram(tp(0), tp(1), tp(3), tp(2), _
    temp_record, 0, no_reduce)
   If set_property_of_eline > 1 Then
    Exit Function
   End If
 End If
 End If
If th_chose(63).chose = 1 Then
 If is_equal_dline(tp(0), tp(2), tp(1), tp(3), 0, 0, 0, 0, 0, 0, dn(0), -1000, _
       0, 0, 0, eline_data0, dn(1), dn(2), _
      con_ty, "", record_0.data0.condition_data) Then
  If CLng(angle_number(tp(0), tp(1), tp(3), 0, 0)) * _
   angle_number(tp(3), tp(2), tp(0), 0, 0) > 0 Then
    temp_record = re
     temp_record.record_data.data0.theorem_no = 63
 Call add_conditions_to_record(con_ty, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
 A(0) = angle_number(tp(0), tp(1), tp(2), 0, 0)
  A(1) = angle_number(tp(0), tp(3), tp(2), 0, 0)
If (A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0) Then
  set_property_of_eline = set_parallelogram(tp(0), tp(1), tp(3), tp(2), _
    temp_record, 0, no_reduce)
   If set_property_of_eline > 1 Then
    Exit Function
   End If
Else
set_property_of_eline = set_parallelogram(tp(0), tp(1), tp(2), tp(3), _
   temp_record, 0, no_reduce)
 If set_property_of_eline > 1 Then
  Exit Function
 End If
End If
 End If
 End If
End If
End If
'等腰梯形
If is_dparal(line_number0(tp(0), tp(2), tn(0), tn(1)), line_number0(tp(1), tp(3), tn(2), tn(3)), _
  dn(0), -1000, 0, 0, 0, 0) Then
   If (tn(0) > tn(1) And tn(2) > tn(3)) Or (tn(0) < tn(1) And tn(2) < tn(3)) Then
    If Sgn(P_diffrence(m_poi(tp(0)).data(0).data0.coordinate, m_poi(tp(2)).data(0).data0.coordinate, m_poi(tp(3)).data(0).data0.coordinate)) * _
        Sgn(P_diffrence(m_poi(tp(2)).data(0).data0.coordinate, m_poi(tp(0)).data(0).data0.coordinate, m_poi(tp(1)).data(0).data0.coordinate)) > 0 Then
         temp_record = re
          Call add_conditions_to_record(paral_, dn(0), 0, 0, temp_record.record_data.data0.condition_data)
           temp_record.record_data.data0.theorem_no = 90
    set_property_of_eline = set_tixing(tp(0), tp(2), tp(3), tp(1), equal_side_tixing_, _
     temp_record, 0, no_reduce)
      If set_property_of_eline > 1 Then
       Exit Function
      End If
    End If
   End If
End If
set_property_of_eline = set_relation_of_triangle_from_relation(tp(0), tp(1), _
  tp(2), tp(3), "1", re, no_reduce)
If set_property_of_eline > 1 Then
 Exit Function
End If
If th_chose(126).chose = 1 Then
 temp_record = re
  temp_record.record_data.data0.theorem_no = 126
  If is_four_point_on_circle(tp(0), tp(1), tp(2), tp(3), dn(0), -1000, 0, 0, 0, _
     0, 0, 0, 0, 0, 0, p4_on_C, False) Then
   If dn(0) > 0 Then
    A(0) = arc_no(tp(0), four_point_on_circle(dn(0)).data(0).circ, tp(1))
     A(1) = arc_no(tp(2), four_point_on_circle(dn(0)).data(0).circ, tp(3))
   If A(0) > 0 And A(1) > 0 Then
    Call add_conditions_to_record(point4_on_circle_, dn(0), 0, 0, temp_record.record_data.data0.condition_data)
    set_property_of_eline = set_equal_arc(A(0), A(1), temp_record, 0, no_reduce)
     If set_property_of_eline > 1 Then
      Exit Function
     End If
   End If
   End If
  End If
 End If
If th_chose(158).chose = 1 Then 'And Deline(no%).data(0).record.data0.condition_data.condition(1).ty <> equal_area_triangle_ Then
 If tl(0) = tl(1) Then
   temp_record = re
    temp_record.record_data.data0.theorem_no = 0
  set_property_of_eline = set_equal_dline(tp(0), tp(2), tp(1), tp(3), _
        0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce, False)
     If set_property_of_eline > 1 Then
      Exit Function
     End If
  For i% = 1 To last_conditions.last_cond(1).point_no
  If is_point_in_line3(i%, m_lin(tl(0)).data(0).data0, 0) = False Then
    A(0) = triangle_number(tp(0), tp(1), i%, 0, 0, 0, 0, 0, 0, 0)
     A(1) = triangle_number(tp(2), tp(3), i%, 0, 0, 0, 0, 0, 0, 0)
    If A(0) > 0 And A(1) > 0 Then
     temp_record = re
      temp_record.record_data.data0.theorem_no = 158
    set_property_of_eline = set_equal_area_triangle(A(0), A(1), temp_record, 0, 1, no_reduce)
     If set_property_of_eline > 1 Then
      Exit Function
     End If
    End If
   End If
  Next i%
 End If
End If
Exit Function
set_property_of_eline_error:
set_property_of_eline = 0
'****************************************************
'三角形中等边对等角
'**************************************************
End Function
Public Function set_different_of_two_angle_value(ByVal A1%, ByVal A2%, _
         ByVal v1$, ByVal v2$, re As total_record_type, no_reduce As Byte) As Byte
Dim A(2) As Integer
Dim ty As Byte
Dim tv$
Dim temp_record As total_record_type
temp_record = re
If combine_two_angle(A1%, A2%, 0, A(0), 0, 0, A(1), A(2), ty, 0, 1) Then
 Select Case ty
 Case 3, 5
  tv$ = add_string(v1$, v2$, True, False)
   set_different_of_two_angle_value = _
    set_angle_value(A(2), tv$, temp_record, 0, no_reduce, False)
 Case 9, 10
  tv$ = add_string(v1$, v2$, False, False)
   tv$ = minus_string("360", tv$, True, False)
    set_different_of_two_angle_value = _
     set_angle_value(Abs(A(2)), tv$, temp_record, 0, no_reduce, False)
 Case 4
  tv$ = minus_string(v1$, v2$, True, False)
    set_different_of_two_angle_value = _
     set_angle_value(A(0), tv$, temp_record, 0, no_reduce, False)
 Case 6
  tv$ = minus_string(v2$, v1$, True, False)
    set_different_of_two_angle_value = _
     set_angle_value(A(0), tv$, temp_record, 0, no_reduce, False)
 Case 7
   tv$ = minus_string(v2$, v1$, True, False)
    set_different_of_two_angle_value = _
     set_angle_value(A(1), tv$, temp_record, 0, no_reduce, False)
Case 8
  tv$ = minus_string(v1$, v2$, True, False)
    set_different_of_two_angle_value = _
     set_angle_value(A(1), tv$, temp_record, 0, no_reduce, False)
End Select
End If
If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) Then
    If v1$ = v2$ Then
     A(0) = Abs(angle_number(angle(A1%).data(0).poi(0), angle(A1%).data(0).poi(1), _
                angle(A2%).data(0).poi(0), 0, 0))
     A(1) = Abs(angle_number(angle(A1%).data(0).poi(2), angle(A1%).data(0).poi(1), _
                angle(A2%).data(0).poi(2), 0, 0))
     If A(0) > 0 And A(1) > 0 Then
     set_different_of_two_angle_value = set_three_angle_value(A(0), A(1), 0, "1", "-1", _
        "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
        If set_different_of_two_angle_value > 1 Then
         Exit Function
        End If
     End If
    End If
End If
End Function
Public Function set_different_of_two_eangle(ByVal ty1 As Byte, ByVal ty2 As Byte, ByVal A1%, _
   ByVal A2%, ByVal A01%, ByVal A3%, ByVal A4%, ByVal A02%, _
      re As total_record_type, ByVal no_reduce As Byte) As Byte
Dim ty(1) As Byte
Dim A(7) As Integer
Dim is_equal As Boolean
Dim temp_record As total_record_type
Dim tn(2) As Integer
Dim A3_v As angle3_value_data0_type
temp_record = re
temp_record.record_data.data0.theorem_no = 1
If is_same_two_point(A1%, A2%, A3%, A4%) Then '同角
 Exit Function
ElseIf A1% = A3% Then
 is_equal = True
 set_different_of_two_eangle = set_three_angle_value(A2%, A4%, 0, "1", "-1", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_equal_3angle(A1%, A2%, A4%, temp_record.record_data)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
ElseIf A1% = A4% Then
 is_equal = True
 set_different_of_two_eangle = set_three_angle_value(A2%, A3%, 0, "1", "-1", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_equal_3angle(A1%, A2%, A3%, temp_record.record_data)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
ElseIf A2% = A3% Then
 is_equal = True
 set_different_of_two_eangle = set_three_angle_value(A1%, A4%, 0, "1", "-1", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_equal_3angle(A1%, A2%, A4%, temp_record.record_data)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
ElseIf A2% = A4% Then
 is_equal = True
 set_different_of_two_eangle = set_three_angle_value(A1%, A3%, 0, "1", "-1", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_equal_3angle(A1%, A2%, A3%, temp_record.record_data)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
End If
If ty1 = 3 Or ty1 = 5 Then
 If A1% = A3% Or A1% = A4% Or A2% = A3% Or A2% = A4% Then
 set_different_of_two_eangle = set_three_angle_value(A01%, A3%, 0, "1", "-2", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_three_angle_value(A01%, A4%, 0, "1", "-2", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 ElseIf A01% = A3% Or A01% = A4% Then
 set_different_of_two_eangle = set_three_angle_value(A1%, A3%, 0, "2", "-1", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_three_angle_value(A1%, A4%, 0, "2", "-1", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_three_angle_value(A2%, A3%, 0, "2", "-1", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_three_angle_value(A2%, A4%, 0, "2", "-1", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
    If ty2 = 3 Or ty2 = 5 Then
      set_different_of_two_eangle = set_three_angle_value(A2%, A02%, 0, "4", "-1", "0", _
        "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
          If set_different_of_two_eangle > 1 Then
           Exit Function
          End If
      set_different_of_two_eangle = set_three_angle_value(A2%, A02%, 0, "4", "-1", "0", _
        "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
          If set_different_of_two_eangle > 1 Then
           Exit Function
          End If
     End If
 End If
End If
If ty2 = 3 Or ty2 = 5 Then
 If A1% = A3% Or A1% = A4% Or A2% = A3% Or A2% = A4% Then
 set_different_of_two_eangle = set_three_angle_value(A02%, A1%, 0, "1", "-2", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_three_angle_value(A02%, A1%, 0, "1", "-2", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 ElseIf A02% = A1% Or A02% = A2% Then
 set_different_of_two_eangle = set_three_angle_value(A1%, A3%, 0, "1", "-2", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_three_angle_value(A1%, A4%, 0, "1", "-2", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_three_angle_value(A2%, A3%, 0, "1", "-2", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
 set_different_of_two_eangle = set_three_angle_value(A2%, A4%, 0, "1", "-2", "0", _
      "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
      If set_different_of_two_eangle > 1 Then
        Exit Function
      End If
    If ty1 = 3 Or ty1 = 5 Then
      set_different_of_two_eangle = set_three_angle_value(A01%, A3%, 0, "1", "-4", "0", _
       "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
        If set_different_of_two_eangle > 1 Then
         Exit Function
        End If
      set_different_of_two_eangle = set_three_angle_value(A01%, A4%, 0, "1", "-4", "0", _
       "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
        If set_different_of_two_eangle > 1 Then
         Exit Function
        End If
    End If
 End If
End If
If (ty1 = 3 Or ty1 = 5) And (ty2 = 3 Or ty2 = 5) Then
  If is_three_angle_value(A01%, A02%, 0, "1", "-1", "0", "0", "0", tn(0), tn(1), tn(2), -1000, 0, 0, _
       0, 0, 0, 0, 0, A3_v, record_0.data0.condition_data, 0) Then
    temp_record = re
    Call add_conditions_to_record(angle3_value_, tn(0), tn(1), tn(2), temp_record.record_data.data0.condition_data)
    set_different_of_two_eangle = set_three_angle_value(A1%, A3%, 0, "1", "-1", "0", "0", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A1%, A4%, 0, "1", "-1", "0", "0", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A2%, A3%, 0, "1", "-1", "0", "0", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A2%, A4%, 0, "1", "-1", "0", "0", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A01%, A3%, 0, "1", "-2", "0", "0", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A01%, A4%, 0, "1", "-2", "0", "0", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A02%, A1%, 0, "1", "-2", "0", "0", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A02%, A2%, 0, "1", "-2", "0", "0", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
ElseIf is_three_angle_value(A01%, A02%, 0, "1", "1", "0", "180", "180", tn(0), tn(1), tn(2), -1000, 0, _
       0, 0, 0, 0, 0, 0, A3_v, record_0.data0.condition_data, 0) Then
    temp_record = re
    Call add_conditions_to_record(angle3_value_, tn(0), tn(1), tn(2), temp_record.record_data.data0.condition_data)
    set_different_of_two_eangle = set_three_angle_value(A1%, A3%, 0, "1", "1", "0", "90", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A1%, A4%, 0, "1", "1", "0", "90", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A2%, A3%, 0, "1", "1", "0", "90", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
    set_different_of_two_eangle = set_three_angle_value(A2%, A4%, 0, "1", "1", "0", "90", False, temp_record, 0, 0, _
       0, 0, 0, 0, False)
    If set_different_of_two_eangle > 1 Then
       Exit Function
    End If
End If
Call combine_two_angle(A1%, A3%, 0, A(0), A(6), 0, A(1), A(2), ty(0), 0, 1)
 Call combine_two_angle(A2%, A4%, 0, A(3), A(7), 0, A(4), A(5), ty(1), 0, 1)
 If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) And _
     angle(A3%).data(0).poi(1) = angle(A4%).data(0).poi(1) Then
  If ty(0) = 15 Then
         set_different_of_two_eangle = set_three_angle_value(A2%, A4%, A(6), "1", "1", "1", "180", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
         set_different_of_two_eangle = set_three_angle_value(A01%, A02%, A(6), "1", "1", "2", "360", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
   ElseIf ty(0) = 3 Or ty(0) = 5 Then
    set_different_of_two_eangle = set_three_angle_value(A2%, A4%, A(2), "1", "1", "-1", "0", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
    set_different_of_two_eangle = set_three_angle_value(A01%, A02%, A(2), "1", "1", "-2", "0", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
   End If
   If ty(1) = 15 Then
         set_different_of_two_eangle = set_three_angle_value(A1%, A3%, A(7), "1", "1", "1", "180", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
         set_different_of_two_eangle = set_three_angle_value(A01%, A02%, A(7), "1", "1", "2", "360", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
   ElseIf ty(1) = 3 Or ty(1) = 5 Then
    set_different_of_two_eangle = set_three_angle_value(A1%, A3%, A(5), "1", "1", "-1", "0", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
    set_different_of_two_eangle = set_three_angle_value(A01%, A02%, A(5), "1", "1", "-2", "0", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
   End If
  End If
End If
set_different_of_two_eangle = set_different_of_two_eangle0( _
  ty(0), ty(1), A(0), A(1), A(2), A(6), _
     A(3), A(4), A(5), A(7), temp_record, no_reduce)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
'ElseIf ty(0) > 0 Then
'ElseIf ty(1) > 0 Then
'End If
Call combine_two_angle(A1%, A4%, 0, A(0), A(6), 0, A(1), A(2), ty(0), 0, 1)
 Call combine_two_angle(A2%, A3%, 0, A(3), A(7), 0, A(4), A(5), ty(1), 0, 1)
'If ty(0) > 0 And ty(1) > 0 Then
If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) And _
     angle(A3%).data(0).poi(1) = angle(A4%).data(0).poi(1) Then
 If ty(0) = 15 And (ty(1) = 3 Or ty(1) = 5) Then
         set_different_of_two_eangle = set_three_angle_value(A2%, A3%, A(6), "1", "1", "1", "180", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
         set_different_of_two_eangle = set_three_angle_value(A01%, A02%, A(6), "1", "1", "2", "360", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
ElseIf (ty1 = 3 Or ty1 = 5) And (ty2 = 3 Or ty2 = 5) Then
   If ty(0) = 3 Or ty(0) = 5 Then
    set_different_of_two_eangle = set_three_angle_value(A2%, A3%, A(2), "1", "1", "-1", "0", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
    set_different_of_two_eangle = set_three_angle_value(A01%, A02%, A(2), "1", "1", "-2", "0", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
   End If
    If ty(1) = 15 And (ty(0) = 3 Or ty(0) = 5) Then
         set_different_of_two_eangle = set_three_angle_value(A2%, A3%, A(7), "1", "1", "1", "180", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
         set_different_of_two_eangle = set_three_angle_value(A01%, A02%, A(7), "1", "1", "2", "360", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
   ElseIf ty(1) = 3 Or ty(1) = 5 Then
    set_different_of_two_eangle = set_three_angle_value(A1%, A4%, A(5), "1", "1", "-1", "0", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
    set_different_of_two_eangle = set_three_angle_value(A01%, A02%, A(5), "1", "1", "-2", "0", _
         0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If set_different_of_two_eangle > 1 Then
      Exit Function
     End If
   End If
  End If
End If
set_different_of_two_eangle = set_different_of_two_eangle0( _
  ty(0), ty(1), A(0), A(1), A(2), A(6), _
     A(3), A(4), A(5), A(7), temp_record, no_reduce)
      If set_different_of_two_eangle > 1 Then
       Exit Function
     End If
'ElseIf ty(0) > 0 Then
'ElseIf ty(1) > 0 Then
'End If
'End If

End Function
Public Function set_different_of_two_eangle0_(ByVal ty1 As Byte, _
 ByVal ty2 As Byte, ByVal A1%, ByVal A2%, ByVal A3%, ByVal A7%, ByVal A4%, _
   ByVal A5%, ByVal A6%, ByVal A8%, re As total_record_type, _
   ByVal no_reduce As Byte)
   'A1%,A2% A3%和,A7%缝
Dim i%
Dim ty(1) As Byte
Dim A(1, 3) As Integer
Dim tA(1) As Integer
Dim temp_record As total_record_type
temp_record = re
temp_record.record_data.data0.theorem_no = 1
 ty(0) = ty1
  ty(1) = ty2
   A(0, 0) = A1%
    A(0, 1) = A2%
     A(0, 2) = Abs(A3%)
      A(0, 3) = A7%
   A(1, 0) = A4%
    A(1, 1) = A5%
     A(1, 2) = Abs(A6%)
      A(1, 3) = Abs(A8%)
For i% = 0 To 1
If ty(i%) = 3 Or ty(i%) = 5 Then
 tA(i%) = A(i%, 2)
ElseIf ty(i%) = 4 Or ty(i%) = 6 Then
 tA(i%) = A(i%, 0)
ElseIf ty(i%) = 7 Or ty(i%) = 8 Then
 tA(i%) = A(i%, 1)
ElseIf ty(i%) = 15 Or ty(i%) = 17 Then
 tA(i%) = A(i%, 3)
Else
 Exit Function
End If
Next i%
If ty(0) = 3 Or ty(0) = 5 Then
set_different_of_two_eangle0_ = set_three_angle_value(tA(0), A4%, A5%, "1", "-1", "-1", "0", 0, _
    temp_record, 0, 0, 0, 0, 0, 0, False)
If set_different_of_two_eangle0_ > 1 Then
    Exit Function
End If
ElseIf ty(0) = 4 Or ty(0) = 6 Then
ElseIf ty(0) = 7 Or ty(0) = 8 Then
ElseIf ty(0) = 15 Or ty(0) = 17 Then
set_different_of_two_eangle0_ = set_three_angle_value(tA(0), A4%, A5%, "1", "1", "1", "180", 0, _
    temp_record, 0, 0, 0, 0, 0, 0, False)
If set_different_of_two_eangle0_ > 1 Then
    Exit Function
End If
End If
If ty(1) = 3 Or ty(1) = 5 Then
set_different_of_two_eangle0_ = set_three_angle_value(tA(1), A1%, A2%, "1", "-1", "-1", "0", 0, _
    temp_record, 0, 0, 0, 0, 0, 0, False)
If set_different_of_two_eangle0_ > 1 Then
    Exit Function
End If
ElseIf ty(1) = 4 Or ty(1) = 6 Then
ElseIf ty(1) = 7 Or ty(1) = 8 Then
ElseIf ty(1) = 15 Or ty(1) = 17 Then
set_different_of_two_eangle0_ = set_three_angle_value(tA(1), A1%, A2%, "1", "1", "1", "180", 0, _
    temp_record, 0, 0, 0, 0, 0, 0, False)
If set_different_of_two_eangle0_ > 1 Then
    Exit Function
End If
End If
End Function
Public Function set_different_of_two_eangle0(ByVal ty1 As Byte, _
 ByVal ty2 As Byte, ByVal A1%, ByVal A2%, ByVal A3%, ByVal A7%, ByVal A4%, _
  ByVal A5%, ByVal A6%, ByVal A8%, re As total_record_type, _
   ByVal no_reduce As Byte)
Dim i%
Dim ty(1) As Byte
Dim A(1, 3) As Integer
Dim tA(1) As Integer
Dim temp_record As total_record_type
'On Error GoTo set_different_of_two_eangle0_error
If ty1 < 3 Or ty2 < 3 Then
 Exit Function
End If
temp_record = re
temp_record.record_data.data0.theorem_no = 1
 ty(0) = ty1
  ty(1) = ty2
   A(0, 0) = A1%
    A(0, 1) = A2%
     A(0, 2) = Abs(A3%)
      A(0, 3) = A7%
   A(1, 0) = A4%
    A(1, 1) = A5%
     A(1, 2) = Abs(A6%)
      A(1, 3) = Abs(A8%)
For i% = 0 To 1
If ty(i%) = 3 Or ty(i%) = 5 Then
 tA(i%) = A(i%, 2)
ElseIf ty(i%) = 4 Or ty(i%) = 6 Then
 tA(i%) = A(i%, 0)
ElseIf ty(i%) = 7 Or ty(i%) = 8 Then
 tA(i%) = A(i%, 1)
ElseIf ty(i%) = 15 Or ty(i%) = 17 Then
 tA(i%) = A(i%, 3)
Else
 set_different_of_two_eangle0 = set_different_of_two_eangle0_(ty(0), ty(1), A1%, A2%, A3%, A7%, _
      A4%, A5%, A6%, A8%, re, 0)
  Exit Function
End If
Next i%
If (ty(0) = 3 Or ty(0) = 5) And (ty(1) = 3 Or ty(1) = 5) Then
temp_record = re
 set_different_of_two_eangle0 = set_three_angle_value(tA(0), tA(1), 0, _
  "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
   If set_different_of_two_eangle0 > 1 Then
    Exit Function
   End If
ElseIf (ty(0) = 4 Or ty(0) = 8) And (ty(1) = 4 Or ty(1) = 8) Then
 temp_record = re
set_different_of_two_eangle0 = set_three_angle_value(tA(0), tA(1), 0, _
  "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
   If set_different_of_two_eangle0 > 1 Then
    Exit Function
   End If
ElseIf (ty(0) = 6 Or ty(0) = 7) And (ty(1) = 6 Or ty(1) = 7) Then
temp_record = re
 set_different_of_two_eangle0 = set_three_angle_value(tA(0), tA(1), 0, _
  "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
   If set_different_of_two_eangle0 > 1 Then
    Exit Function
   End If
ElseIf ((ty(0) = 3 Or ty(0) = 5) And (ty(1) = 15 Or ty(1) = 17)) Or _
        ((ty(1) = 3 Or ty(1) = 5) And (ty(0) = 15 Or ty(0) = 17)) Then
temp_record = re
 set_different_of_two_eangle0 = set_three_angle_value(tA(0), tA(1), 0, _
  "1", "1", "0", "180", 0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
   If set_different_of_two_eangle0 > 1 Then
    Exit Function
   End If
End If
Exit Function
set_different_of_two_eangle0_error:
End Function
Public Sub simple_record(ByVal ty As Byte, ByVal no%, ByVal level As Byte, _
            old_level As Byte)
Dim i%
Dim level1 As Byte
For i% = 1 To last_conditions.last_cond(0).area_of_element_no
level = area_of_element(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, area_of_element(i%).data(0).record) Then
  Call set_level(area_of_element(i%).data(0).record.data0.condition_data)
   If area_of_element(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(area_of_element_, i%, area_of_element(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(0).four_point_on_circle_no  '9
level = four_point_on_circle(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, four_point_on_circle(i%).data(0).record) Then
  Call set_level(four_point_on_circle(i%).data(0).record.data0.condition_data)
   If four_point_on_circle(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(point4_on_circle_, i%, four_point_on_circle(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).verti_no  '24
level = Dverti(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Dverti(i%).data(0).record) Then
  Call set_level(Dverti(i%).data(0).record.data0.condition_data)
   If Dverti(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(verti_, i%, Dverti(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).epolygon_no
level = epolygon(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, epolygon(i%).data(0).record) Then
  Call set_level(epolygon(i%).data(0).record.data0.condition_data)
   If epolygon(start_no%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(epolygon_, i%, epolygon(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).tixing_no
level = Dtixing(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Dtixing(i%).data(0).record) Then
  Call set_level(Dtixing(i%).data(0).record.data0.condition_data)
   If Dtixing(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(tixing_, i%, Dtixing(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
'For i% = 1 To last_conditions.last_cond(1).equal_side_tixing_no
'level = Dequal_side_tixing(i%).data(0).record.data0.level
'If is_condition_in_record1(ty, no, level, old_level, Dequal_side_tixing(i%).data(0).record) Then
 ' Call set_level(Dequal_side_tixing(i%).data(0).record)
  ' If Dequal_side_tixing(i%).data(0).record.data0.level < level1 Then
   ' Call simple_record(equal_side_tixing_, i%, Dequal_side_tixing(i%).data(0).record.data0.level, level)
   'End If
'End If
'Next i%
For i% = 1 To last_conditions.last_cond(1).rhombus_no
level = rhombus(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, rhombus(i%).data(0).record) Then
  Call set_level(rhombus(i%).data(0).record.data0.condition_data)
   If rhombus(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(rhombus_, i%, rhombus(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).long_squre_no
level = Dlong_squre(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Dlong_squre(i%).data(0).record) Then
  Call set_level(Dlong_squre(i%).data(0).record.data0.condition_data)
   If Dlong_squre(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(long_squre_, i%, Dlong_squre(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).dpoint_pair_no  '3
level = Ddpoint_pair(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Ddpoint_pair(i%).data(0).record) Then
  Call set_level(Ddpoint_pair(i%).data(0).record.data0.condition_data)
   If Ddpoint_pair(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(dpoint_pair_, i%, Ddpoint_pair(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).area_relation_no  '4
level = Darea_relation(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Darea_relation(i%).data(0).record) Then
  Call set_level(Darea_relation(i%).data(0).record.data0.condition_data)
   If Darea_relation(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(area_relation_, i%, Darea_relation(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).mid_point_line_no   '7
level = mid_point_line(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, mid_point_line(i%).data(0).record) Then
  Call set_level(mid_point_line(i%).data(0).record.data0.condition_data)
   If mid_point_line(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(mid_point_line_, i%, mid_point_line(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).eline_no '8
level = Deline(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Deline(i%).data(0).record) Then
  Call set_level(Deline(i%).data(0).record.data0.condition_data)
   If Deline(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(eline_, i%, Deline(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).mid_point_no '12
level = Dmid_point(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Dmid_point(i%).data(0).record) Then
  Call set_level(Dmid_point(i%).data(0).record.data0.condition_data)
   If Dmid_point(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(midpoint_, i%, Dmid_point(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).paral_no
level = Dparal(i%).data(0).data0.record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Dparal(i%).data(0).data0.record) Then
  Call set_level(Dparal(i%).data(0).data0.record.data0.condition_data)
   If Dparal(start_no%).data(0).data0.record.data0.condition_data.level < level1 Then
    Call simple_record(paral_, i%, Dparal(i%).data(0).data0.record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).parallelogram_no  '14
level = Dparallelogram(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Dparallelogram(i%).data(0).record) Then
  Call set_level(Dparallelogram(i%).data(0).record.data0.condition_data)
   If Dparallelogram(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(parallelogram_, i%, Dparallelogram(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).relation_no  '16
level = Drelation(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Drelation(i%).data(0).record) Then
  Call set_level(Drelation(i%).data(0).record.data0.condition_data)
   If Drelation(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(relation_, i%, Drelation(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).similar_triangle_no  '17
level = Dsimilar_triangle(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Dsimilar_triangle(i%).data(0).record) Then
  Call set_level(Dsimilar_triangle(i%).data(0).record.data0.condition_data)
   If Dsimilar_triangle(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(similar_triangle_, i%, Dsimilar_triangle(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).total_equal_triangle_no   '18
level = Dtotal_equal_triangle(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, Dtotal_equal_triangle(i%).data(0).record) Then
  Call set_level(Dtotal_equal_triangle(i%).data(0).record.data0.condition_data)
   If Dtotal_equal_triangle(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(total_equal_triangle_, i%, Dtotal_equal_triangle(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).three_point_on_line_no '20
level = three_point_on_line(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, three_point_on_line(i%).data(0).record) Then
  Call set_level(three_point_on_line(start_no%).data(0).record.data0.condition_data)
   If three_point_on_line(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(point3_on_line_, i%, three_point_on_line(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).two_line_value_no '21
level = two_line_value(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, two_line_value(i%).data(0).record) Then
  Call set_level(two_line_value(i%).data(0).record.data0.condition_data)
   If two_line_value(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(two_line_value_, i%, two_line_value(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).angle3_value_no '22
level = angle3_value(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, angle3_value(i%).data(0).record) Then
  Call set_level(angle3_value(i%).data(0).record.data0.condition_data)
   If angle3_value(start_no%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(angle3_value_, i%, angle3_value(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).arc_value_no '25
level = arc_value(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, arc_value(i%).data(0).record) Then
  Call set_level(arc_value(i%).data(0).record.data0.condition_data)
   If arc_value(start_no%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(arc_value_, i%, arc_value(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).equal_arc_no '26
level = equal_arc(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, equal_arc(i%).data(0).record) Then
  Call set_level(equal_arc(i%).data(0).record.data0.condition_data)
   If equal_arc(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(equal_arc_, i%, equal_arc(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).line_value_no  '33
level = line_value(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, line_value(i%).data(0).record) Then
  Call set_level(line_value(i%).data(0).record.data0.condition_data)
   If line_value(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(line_value_, i%, line_value(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).tangent_line_no '34
level = tangent_line(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, tangent_line(i%).data(0).record) Then
  Call set_level(tangent_line(i%).data(0).record.data0.condition_data)
   If tangent_line(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(tangent_line_, i%, tangent_line(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
'For i% = 1 To last_conditions.last_cond(1).equal_area_triangle_no '36
'level = equal_area_triangle(i%).data(0).record.data0.level
'If is_condition_in_record1(ty, no, level, old_level, equal_area_triangle(i%).data(0).record) Then
'  Call set_level(equal_area_triangle(i%).data(0).record)
'   If equal_area_triangle(i%).data(0).record.data0.level < level1 Then
'    Call simple_record(equal_area_triangle_, i%, equal_area_triangle(i%).data(0).record.data0.level, level)
'   End If
'End If
'Next i%
For i% = 1 To last_conditions.last_cond(1).general_string_no  '37
level = general_string(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, general_string(i%).data(0).record) Then
  Call set_level(general_string(i%).data(0).record.data0.condition_data)
   If general_string(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(general_string_, i%, general_string(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
For i% = 1 To last_conditions.last_cond(1).verti_mid_line_no   '49
level = verti_mid_line(i%).data(0).record.data0.condition_data.level
If is_condition_in_record1(ty, no, level, old_level, verti_mid_line(i%).data(0).record) Then
  Call set_level(verti_mid_line(i%).data(0).record.data0.condition_data)
   If verti_mid_line(i%).data(0).record.data0.condition_data.level < level1 Then
    Call simple_record(verti_mid_line_, i%, verti_mid_line(i%).data(0).record.data0.condition_data.level, level)
   End If
End If
Next i%
End Sub

Public Function set_property_of_relation(ByVal p1%, ByVal p2%, _
               ByVal p3%, ByVal p4%, ByVal r_v As String, ByVal n1%, _
                ByVal n2%, ByVal n3%, ByVal n4%, ByVal l1%, _
                 ByVal l2%, re As total_record_type, _
                  no_reduce As Byte) As Byte
 Dim i%, j%, k%, n%, dir%, triA%
 Dim dn(1) As Integer
 Dim A(2) As Integer
 Dim temp_record As total_record_type
 Dim tp(3) As Integer
 Dim tp_(3) As Integer
 Dim tn(3) As Integer
 Dim tl(1) As Integer
 Dim tl_(1) As Integer
 Dim num_string As String
 Dim re_value As String
 Dim ty As Byte
 Dim triA_(1) As temp_triangle_type
 Dim t_triA As two_triangle_type
 Dim c_data As condition_data_type
 Dim is_no_initial As Integer
 tp(0) = p1%
 tp(1) = p2%
 tp(2) = p3%
 tp(3) = p4%
 tn(0) = n1%
 tn(1) = n2%
 tn(2) = n3%
 tn(3) = n4%
  temp_record = re
   num_string = r_v
'***************
'比值等于一，二
'***************
 If l1% = l2% Then
  If arrange_four_point(p1%, p2%, p3%, p4%, n1%, n2%, _
      n3%, n4%, l1%, l2%, tp_(0), tp_(1), tp_(2), tp_(3), 0, 0, _
       0, 0, 0, 0, 0, 0, tl_(0), tl_(1), 0, ty, c_data, is_no_initial) Then
        temp_record = re
        If is_no_initial = 1 Then
         Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
        End If
    If ty > 2 Then
      Call ratio_value1(r_v, ty, re_value)
        set_property_of_relation = set_relation_on_line(tp_(0), tp_(1), tp_(3), tl_(0), _
            re_value, temp_record)
       If set_property_of_relation > 1 Then
          Exit Function
       End If
    End If
  End If
 ElseIf re.record_data.data0.condition_data.condition_no = 1 Then
  If tp(0) = tp(2) Then
  tp_(0) = tp(0)
  tp_(2) = tp(1)
  tp_(1) = tp(3)
  ElseIf tp(0) = tp(3) Then
  tp_(0) = tp(0)
  tp_(2) = tp(1)
  tp_(1) = tp(2)
  ElseIf tp(1) = tp(2) Then
  tp_(0) = tp(1)
  tp_(2) = tp(0)
  tp_(1) = tp(3)
  ElseIf tp(1) = tp(3) Then
  tp_(0) = tp(1)
  tp_(2) = tp(0)
  tp_(1) = tp(2)
  Else
   GoTo set_property_of_relation_mark10
  End If
   triA% = triangle_number(tp_(0), tp_(1), tp_(2), 0, 0, 0, 0, 0, 0, dir%)
   If dir% = 1 Then
    dir% = 0
    re_value = divide_string("1", r_v, True, False) '后/前
   ElseIf dir = 2 Then
    dir% = 1
    re_value = divide_string("1", r_v, True, False)
   ElseIf dir = 3 Then
    re_value = divide_string("1", r_v, True, False)
    dir% = 2
   ElseIf dir = -1 Then
    dir% = 0
    re_value = r_v
   ElseIf dir = -2 Then
    dir% = 1
    re_value = r_v
   ElseIf dir = -3 Then
    dir% = 2
    re_value = r_v
   End If
   If triangle(triA%).data(0).re_value(dir%) = "" Then
     triangle(triA%).data(0).re_value(dir%) = re_value
     For i% = 1 To re.record_data.data0.condition_data.condition_no
      triangle(triA%).data(0).relation_no(dir%, i% - 1) = re.record_data.data0.condition_data.condition(i%)
     Next i%
   set_property_of_relation = solve_triangle(triA%, triangle(triA%).data(0), -1, -1, -1, _
       dir%, -1, -1, -1, -1, -1, -1, 1, 0, False)
   If set_property_of_relation > 1 Then
    Exit Function
   End If
   End If
 End If
set_property_of_relation_mark10:
 '**********************
   tl(0) = l1%
   tl(1) = l2%
If num_string = "1" Then
  set_property_of_relation = set_property_of_eline(tp(0), tp(1), tp(2), tp(3), _
         tn(0), tn(1), tn(2), tn(3), tl(0), tl(1), 0, 0, 0, temp_record, 0, no_reduce)
  If set_property_of_relation > 1 Then
   Exit Function
  End If
 End If
 If num_string = "2" Then
  set_property_of_relation = set_right_triangle_from_mid_line(tp(2), tp(3), _
   tp(0), tp(1), temp_record)
    If set_property_of_relation > 1 Then
     Exit Function
    End If
 ElseIf num_string = "1/2" Then
   set_property_of_relation = set_right_triangle_from_mid_line(tp(0), tp(1), _
   tp(2), tp(3), temp_record)
    If set_property_of_relation > 1 Then
     Exit Function
    End If
End If
'*****************************************
'设置相应的三角形边比值
'*****************************************
set_property_of_relation = set_area_relation_from_relation(p1%, p2%, p3%, p4%, l1%, l2%, r_v, temp_record)
If set_property_of_relation > 1 Then
   Exit Function
End If
  If l1% = l2% Then
     If tp(1) = tp(2) Then
       n% = m_circle_number(1, 0, pointapi0, tp(0), tp(3), 0, 0, 0, 0, 1, 0, 0, 0, False)
        If n% > 0 Then
           If m_Circ(n%).data(0).data0.center > 0 And _
               tp(1) <> m_Circ(n%).data(0).data0.center And _
                m_poi(m_Circ(n%).data(0).data0.center).data(0).data0.visible > 0 Then
              i% = line_number0(m_Circ(n%).data(0).data0.center, tp(1), 0, 0)
               If m_lin(i%).data(0).data0.visible > 0 Then
                set_property_of_relation = add_interset_point_line_circle( _
                    tp(1), m_Circ(n%).data(0).data0.center, i%, n%, 0, c_data, 0)
               End If
           End If
        End If
     End If
  End If
End Function

Public Function set_function_of_angle(ByVal angle_no%, _
       ByVal s1$, ByVal S2$, ByVal s3$, ByVal S4$, no%, _
       re As total_record_type) As Byte
Dim i%, n_%, temp_no%
Dim temp_record As total_record_type
Dim set_new_data As Boolean
'On Error GoTo set_function_of_angle_error
If angle_no% = 0 And no% > 0 Then
 GoTo function_of_angle_mark0
End If
temp_record = re
If set_level(temp_record.record_data.data0.condition_data) > 30 Then
 Exit Function
End If
temp_no% = last_conditions.last_cond(1).function_of_angle_no
For i% = 1 To temp_no%
function_of_angle(i%).record_.index = _
   function_of_angle(i%).data(0).record.data1.index
Next i%
If last_conditions.last_cond(1).function_of_angle_no Mod 10 = 0 Then
ReDim Preserve function_of_angle(last_conditions.last_cond(1).function_of_angle_no + 10) As function_of_angle_type
End If
last_conditions.last_cond(1).function_of_angle_no = last_conditions.last_cond(1).function_of_angle_no + 1
set_new_data = True
no% = last_conditions.last_cond(1).function_of_angle_no
function_of_angle(no%).data(0) = function_of_angle_data_0
function_of_angle(no).data(0).angle_no = angle_no
function_of_angle(no).data(0).value(0) = s1$
function_of_angle(no).data(0).value(1) = S2$
function_of_angle(no).data(0).value(2) = s3$
function_of_angle(no).data(0).value(3) = S4$
function_of_angle(no).data(0).record = temp_record.record_data
For i% = no% To n_ + 2 Step -1
 function_of_angle(i%).data(0).record.data1.index.i(0) = _
    function_of_angle(i% - 1).data(0).record.data1.index.i(0)
Next i%
 function_of_angle(n_ + 1).data(0).record.data1.index.i(0) = no%
function_of_angle_mark0:
Exit Function
set_function_of_angle_error:
set_function_of_angle = 0
If set_new_data Then
 last_conditions.last_cond(1).function_of_angle_no = temp_no%
For i% = 1 To temp_no%
   function_of_angle(i%).data(0).record.data1.index = _
    function_of_angle(i%).record_.index
Next i%
End If
End Function
Public Sub exchange_string(s1$, S2$)
Dim s$
s$ = s1$
s1$ = S2$
S2$ = s$
End Sub
Public Function set_similar_triangle_from_point_pair(dp As point_pair_data0_type, _
       no%, re As total_record_type, no_reduce As Byte) As Byte
Dim i%, n%, p1%, p2%, p3%, p4%, p5%, p6%, p7%, p8%
Dim triA(1) As Integer
Dim A(2) As Integer
Dim A1(2) As Integer
Dim tp(5) As Integer
Dim de(1) As Integer
Dim dn(6) As Integer
Dim con_y(1) As Byte
Dim cond_type As Byte
Dim temp_record As total_record_type
Dim re_(1) As record_data_type
'On Error GoTo set_similar_triangle_from_point_pair_error
For i% = 0 To 1
 If i% = 0 Then
  p1% = dp.poi(0)
  p2% = dp.poi(1)
  p3% = dp.poi(2)
  p4% = dp.poi(3)
  p5% = dp.poi(4)
  p6% = dp.poi(5)
  p7% = dp.poi(6)
  p8% = dp.poi(7)
 Else
  p1% = dp.poi(0)
  p2% = dp.poi(1)
  p3% = dp.poi(4)
  p4% = dp.poi(5)
  p5% = dp.poi(2)
  p6% = dp.poi(3)
  p7% = dp.poi(6)
  p8% = dp.poi(7)
 End If
temp_record = re
  If set_triangle0(p1%, p2%, p3%, p4%, triA(0), de(0), _
         tp(0), tp(1), tp(2), A(0), A(1), A(2)) = 1 And _
     set_triangle0(p5%, p6%, p7%, p8%, triA(1), de(1), _
         tp(3), tp(4), tp(5), A1(0), A1(1), A1(2)) = 1 Then
   GoTo set_similar_triangle_from_point_pair_mark1
  ElseIf set_triangle0(p1%, p2%, p5%, p6%, triA(0), de(0), _
         tp(0), tp(1), tp(2), A(0), A(1), A(2)) = 1 And _
     set_triangle0(p3%, p4%, p7%, p8%, triA(1), de(1), _
         tp(3), tp(4), tp(5), A1(0), A1(1), A1(2)) = 1 Then
   GoTo set_similar_triangle_from_point_pair_mark1
  End If
   Exit Function
set_similar_triangle_from_point_pair_mark1:
   If is_equal_angle(A(0), A1(0), dn(0), dn(1)) And _
         th_chose(106).chose = 1 Then '两边夹一角
    temp_record.record_data.data0.theorem_no = 106
      Call add_conditions_to_record(angle3_value_, dn(0), dn(1), _
        0, temp_record.record_data.data0.condition_data)
     n% = 0
      set_similar_triangle_from_point_pair = _
       set_similar_triangle0(triA(0), _
         triA(1), de(0), de(1), temp_record, n%, no_reduce, 1)
          If no% > 0 And n% > 0 Then
           Ddpoint_pair(no%).similar_triangle_no = n%
          End If
       If set_similar_triangle_from_point_pair > 1 Then
        Exit Function
       End If
    ElseIf angle(A(1)).data(0).value = "90" And _
              angle(A1(1)).data(0).value = "90" Then '两边一对角(直角)
    temp_record.record_data.data0.theorem_no = 106
      Call add_conditions_to_record(angle3_value_, angle(A(0)).data(0).value_no, _
               angle(A1(0)).data(0).value_no, 0, temp_record.record_data.data0.condition_data)
     n% = 0
      set_similar_triangle_from_point_pair = _
       set_similar_triangle0(triA(0), _
         triA(1), de(0), de(1), temp_record, n%, no_reduce, 1)
          If no% > 0 And n% > 0 Then
           Ddpoint_pair(no%).similar_triangle_no = n%
          End If
       If set_similar_triangle_from_point_pair > 1 Then
        Exit Function
       End If
    ElseIf angle(A(2)).data(0).value = "90" And _
              angle(A1(2)).data(0).value = "90" Then '两边一对角(直角)
    temp_record.record_data.data0.theorem_no = 106
      Call add_conditions_to_record(angle3_value_, angle(A(2)).data(0).value_no, _
              angle(A1(2)).data(0).value_no, 0, temp_record.record_data.data0.condition_data)
     n% = 0
      set_similar_triangle_from_point_pair = _
       set_similar_triangle0(triA(0), _
         triA(1), de(0), de(1), temp_record, n%, no_reduce, 1)
          If no% > 0 And n% > 0 Then
           Ddpoint_pair(no%).similar_triangle_no = n%
          End If
       If set_similar_triangle_from_point_pair > 1 Then
        Exit Function
       End If
'*******
    ElseIf is_point_pair(tp(1), tp(0), tp(1), tp(2), _
       tp(4), tp(3), tp(4), tp(5), 0, 0, 0, 0, 0, 0, _
        0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, _
         0, 0, 0, dp_data0, cond_type, dn(1), dn(2), _
          con_y(0), con_y(1), dn(3), dn(4), dn(5), _
          dn(6), "", "", record0.record_data) And th_chose(107).chose = 1 Then
     If dn(0) = 0 Or Ddpoint_pair(dn(0)).similar_triangle_no = 0 Then
       temp_record.record_data.data0.condition_data.condition_no = 1
        temp_record.record_data.data0.theorem_no = 107
         Call set_record_for_point_pair(temp_record.record_data, cond_type, con_y(0), con_y(1), _
          dn(0), dn(1), dn(2), dn(3), dn(4), dn(5), dn(6))
        n% = 0
        set_similar_triangle_from_point_pair = _
         set_similar_triangle0(triA(0), _
           triA(1), de(0), de(1), temp_record, n%, no_reduce, 1)
          Ddpoint_pair(no%).similar_triangle_no = n%
          If dn(0) > 0 Then
          Ddpoint_pair(dn(0)).similar_triangle_no = n%
          End If
         If set_similar_triangle_from_point_pair > 1 Then
           Exit Function
         End If
     End If
   ElseIf is_point_pair(tp(0), tp(2), tp(1), tp(2), tp(3), _
      tp(5), tp(4), tp(5), 0, 0, 0, 0, 0, 0, _
       0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, 0, 0, _
        dp_data0, cond_type, dn(1), dn(2), con_y(0), con_y(1), _
         dn(3), dn(4), dn(5), dn(6), "", "", record_0) And _
          th_chose(107).chose = 1 Then
         If dn(0) = 0 Or Ddpoint_pair(dn(0)).similar_triangle_no = 0 Then
      temp_record.record_data.data0.condition_data.condition_no = 1
       temp_record.record_data.data0.theorem_no = 107
        Call set_record_for_point_pair(temp_record.record_data, cond_type, _
          con_y(0), con_y(1), dn(0), dn(1), dn(2), _
           dn(3), dn(4), dn(5), dn(6))
       n% = 0
      set_similar_triangle_from_point_pair = set_similar_triangle0(triA(0), _
         triA(1), de(0), de(1), temp_record, n%, no_reduce, 1)
          Ddpoint_pair(no%).similar_triangle_no = n%
          If dn(0) > 0 Then
           Ddpoint_pair(dn(0)).similar_triangle_no = n%
          End If
       If set_similar_triangle_from_point_pair > 1 Then
        Exit Function
       End If
     End If
    End If
 Next i%
    Exit Function
set_similar_triangle_from_point_pair_error:
End Function

Public Function set_paral_for_polygon_(ByVal n%, ByVal p1%, ByVal p2%, _
           ByVal p3%, ByVal p4%, ty As Byte, _
                 re As total_record_type, no_reduce As Byte) As Byte
Dim t_n%, t_p%
Dim tl(1) As Integer
Dim tl1(1) As Integer
Dim n_(5) As Integer
Dim l_(1) As Integer
Dim tn(1) As Integer
Dim temp_record As total_record_type
Dim i As Byte
Dim tp(5) As Byte
temp_record = re
Call add_conditions_to_record(paral_, n%, 0, 0, temp_record.record_data.data0.condition_data)
temp_record.record_data.data0.theorem_no = 95
For i = 0 To ty
If ty = 0 Then
tp(0) = p1%
 tp(1) = p2%
  tp(2) = p3%
   tp(3) = p4%
Else
tp(1) = p1%
 tp(2) = p2%
  tp(3) = p3%
   tp(0) = p4%
End If
    tl1(0) = line_number0(tp(0), tp(1), 0, 0)
    tl1(1) = line_number0(tp(2), tp(3), 0, 0)
   If tl1(0) = Dparal(n%).data(0).data0.line_no(0) Then
        tl(0) = Dparal(n%).data(0).data0.line_no(0)
         tl(1) = Dparal(n%).data(0).data0.line_no(1)
   ElseIf tl1(1) = Dparal(n%).data(0).data0.line_no(0) Then
        tl(0) = Dparal(n%).data(0).data0.line_no(0)
         tl(1) = Dparal(n%).data(0).data0.line_no(1)
      Call exchange_two_integer(tl1(0), tl1(1))
   ElseIf tl1(0) = Dparal(n%).data(0).data0.line_no(1) Then
        tl(0) = Dparal(n%).data(0).data0.line_no(1)
         tl(1) = Dparal(n%).data(0).data0.line_no(0)
   ElseIf tl1(1) = Dparal(n%).data(0).data0.line_no(1) Then
        tl(0) = Dparal(n%).data(0).data0.line_no(1)
         tl(1) = Dparal(n%).data(0).data0.line_no(0)
      Call exchange_two_integer(tl1(0), tl1(1))
   Else
    Exit Function
   End If
   tp(4) = get_midpoint(tp(0), 0, tp(3), n_(0), 0, n_(1), _
                       l_(0), tn(0))
   tp(5) = get_midpoint(tp(1), 0, tp(2), n_(2), 0, n_(3), _
                       l_(1), tn(1))
   If tp(4) = 0 And tp(5) = 0 Then
    Exit Function
   ElseIf tp(4) > 0 Then
    If is_point_in_line3(tp(4), m_lin(tl(1)).data(0).data0, 0) Then
      Call add_conditions_to_record(midpoint_, tn(0), 0, 0, temp_record.record_data.data0.condition_data)
       l_(1) = line_number0(tp(1), tp(2), 0, 0)
       t_p% = is_line_line_intersect(tl(1), _
                            l_(1), n_(4), n_(5), False)
     If t_p% > 0 Then
       set_paral_for_polygon_ = _
        set_mid_point(tp(1), t_p%, tp(2), n_(2), n_(5), n_(3), _
         l_(1), 0, temp_record, 0, 0, 0, 0, no_reduce)
        If set_paral_for_polygon_ > 1 Then
         Exit Function
        End If
     End If
    Else
     Exit Function
    End If
   ElseIf tp(5) > 0 Then
    If is_point_in_line3(tp(5), m_lin(tl(1)).data(0).data0, 0) Then
      Call add_conditions_to_record(midpoint_, tn(1), 0, 0, temp_record.record_data.data0.condition_data)
       l_(1) = line_number0(tp(0), tp(3), 0, 0)
       t_p% = is_line_line_intersect(tl(1), _
                            l_(1), n_(4), n_(5), False)
     If t_p% > 0 Then
       set_paral_for_polygon_ = _
        set_mid_point(tp(0), t_p%, tp(3), n_(2), n_(5), n_(3), _
         l_(1), 0, temp_record, 0, 0, 0, 0, no_reduce)
        If set_paral_for_polygon_ > 1 Then
         Exit Function
        End If
     End If
    Else
     Exit Function
    End If
   End If
Next i
End Function
Public Function position_from_direction(ByVal direction%, n%) As Integer
If direction% = 1 Then
 position_from_direction = n%
ElseIf direction% = -1 Then
 If n% = 0 Then
 position_from_direction = 0
 ElseIf n% = 1 Then
 position_from_direction = 2
 Else 'If n% = 2 Then
 position_from_direction = 1
 End If
ElseIf direction% = 2 Then
 If n% = 0 Then
 position_from_direction = 1
 ElseIf n% = 1 Then
 position_from_direction = 2
 Else 'If n% = 2 Then
 position_from_direction = 0
 End If
ElseIf direction% = -2 Then
 If n% = 0 Then
 position_from_direction = 1
 ElseIf n% = 1 Then
 position_from_direction = 0
 Else 'If n% = 2 Then
 position_from_direction = 2
 End If
ElseIf direction% = 3 Then
 If n% = 0 Then
 position_from_direction = 2
 ElseIf n% = 1 Then
 position_from_direction = 0
 Else 'If n% = 2 Then
 position_from_direction = 1
 End If
ElseIf direction% = -3 Then
 If n% = 0 Then
 position_from_direction = 2
 ElseIf n% = 1 Then
 position_from_direction = 1
 Else 'If n% = 2 Then
 position_from_direction = 0
 End If
End If
End Function

Public Function set_epolygon3_from_angle60(ByVal p1%, ByVal p2%, ByVal p3%, _
         ByVal aV%, no_reduce As Byte) As Byte
Dim po As polygon
Dim dn(2) As Integer
Dim cond_type As Byte
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim re1 As total_record_type
If th_chose(42).chose = 1 Then
   re1.record_data.data0.theorem_no = 42
   re1.record_data.data0.condition_data.condition(1).ty = angle3_value_
   re1.record_data.data0.condition_data.condition(1).no = aV%
   re1.record_data.data0.condition_data.condition_no = 1
  If is_equal_dline(p1%, p2%, p2%, p3%, 0, 0, 0, 0, 0, 0, dn(0), -1000, _
      0, 0, 0, eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
    temp_record = re1
     Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
      Call set_level(temp_record.record_data.data0.condition_data)
       End If
    record_0.data0.condition_data.condition_no = 0 'record0
  If is_equal_dline(p2%, p3%, p3%, p1%, 0, 0, 0, 0, 0, 0, dn(0), -1000, _
       0, 0, 0, eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
   temp_record1.record_data = re1.record_data
     Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
     Call set_level(temp_record1.record_data.data0.condition_data)
      If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
          temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
       temp_record = temp_record1
      End If
   End If
    record_0.data0.condition_data.condition_no = 0 ' record0
   If is_equal_dline(p3%, p1%, p1%, p2%, 0, 0, 0, 0, 0, 0, dn(0), -1000, _
       0, 0, 0, eline_data0, dn(1), dn(2), cond_type, "", record_0.data0.condition_data) Then
       temp_record1.record_data = re1.record_data
      Call add_conditions_to_record(cond_type, dn(0), dn(1), dn(2), temp_record1.record_data.data0.condition_data)
      Call set_level(temp_record1.record_data.data0.condition_data)
      If temp_record.record_data.data0.condition_data.condition_no = 0 Or _
            temp_record.record_data.data0.condition_data.level > temp_record1.record_data.data0.condition_data.level Then
      temp_record = temp_record1
      End If
    End If
     If temp_record.record_data.data0.condition_data.condition_no > 1 Then
      po.total_v = 3
       po.v(0) = p1%
        po.v(1) = p2%
         po.v(2) = p3%
     set_epolygon3_from_angle60 = set_Epolygon(po, temp_record, 0, no_reduce, 1, 0, False)
      If set_epolygon3_from_angle60 > 1 Then
       Exit Function
      End If
     End If
     End If
End Function

Public Function set_mid_point_from_mid_paral(ByVal p1%, ByVal p2%, _
              ByVal p3%, m_no%, no_reduce As Byte) As Byte
Dim k%, j%, l%, tp%, n%
Dim tl(1) As Integer
Dim temp_record As total_record_type
'On Error GoTo set_mid_point_from_mid_paral_error
If th_chose(96).chose = 1 Then
   temp_record.record_data.data0.condition_data.condition_no = 2
    temp_record.record_data.data0.condition_data.condition(1).ty = midpoint_
     temp_record.record_data.data0.condition_data.condition(1).no = m_no%
      temp_record.record_data.data0.theorem_no = 96
     For n% = 1 + last_conditions.last_cond(0).paral_no To last_conditions.last_cond(1).paral_no
      j% = Dparal(n%).data(0).data0.record.data1.index.i(0)
      For k% = 0 To 1
       For l% = 0 To 1
        If tl(k%) = Dparal(j%).data(0).data0.line_no(l%) And _
         is_point_in_line3(Dmid_point(m_no%).data(0).data0.poi(1), _
          m_lin(Dparal(j%).data(0).data0.line_no((l% + 1) Mod 2)).data(0).data0, 0) Then
           tp% = is_line_line_intersect(tl((k% + 1) Mod 2), _
                    Dparal(j%).data(0).data0.line_no((l% + 1) Mod 2), 0, 0, False)
       If tp% > 0 Then
        temp_record.record_data.data0.condition_data.condition(2).ty = paral_
         temp_record.record_data.data0.condition_data.condition(2).no = j%
          set_mid_point_from_mid_paral = set_mid_point( _
           p2%, tp%, p3%, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, no_reduce)
            If set_mid_point_from_mid_paral > 1 Then
               Exit Function
            End If
       End If
      End If
     Next l%
    Next k%
  Next n%
  End If
  Exit Function
set_mid_point_from_mid_paral_error:
  set_mid_point_from_mid_paral = 0
End Function

Public Function set_string_value(ByVal str As String, ByVal v As String, _
                          re As record_data_type, no%, no_reduce As Byte) As Byte
Dim i%, j%, k%, l%, m%, tc%, n%, p%, temp_no%
Dim temp_record As total_record_type
Dim level As Byte
Dim set_new_data As Boolean
'On Error GoTo set_string_value_error
If no_reduce = 255 Or InStr(1, v, "F", 0) > 0 Then
 Exit Function
End If
display_inform = 0
If no% > 0 Then
 Exit Function
ElseIf no% = -1 Then
display_inform = 1
End If
temp_record.record_data = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
 Exit Function
End If
If is_string_value(str, v, no%) Then
If no% > 0 And run_type < 10 Then
level = string_value(no%).data(0).record.data0.condition_data.level
If set_prove_type(string_value_, no%, temp_record.record_data, _
     string_value(no%).data(0).record) And set_or_prove < 2 Then
    Call simple_record(string_value_, no%, _
        string_value(no%).data(0).record.data0.condition_data.level, level)
    If no_reduce = 0 Then 'Or run_type = 1 Then
      Exit Function
    Else
     no_reduce = 2
    End If
End If
  If set_or_prove < 2 Then
  If no_reduce = 0 Then
   no% = 0
  End If
       set_string_value = 0
  Exit Function
  End If
 End If
   Exit Function
 Else
 End If
 temp_no% = last_conditions.last_cond(1).string_value_no
 For i% = 1 To temp_no%
  string_value(i%).data(1) = string_value(i%).data(0)
 Next i%
 If last_conditions.last_cond(1).string_value_no Mod 10 = 0 Then
    ReDim Preserve string_value(last_conditions.last_cond(1).string_value_no + 10) _
           As string_value_type
 End If
 last_conditions.last_cond(1).string_value_no = last_conditions.last_cond(1).string_value_no + 1
 set_new_data = True
   string_value(last_conditions.last_cond(1).string_value_no).data(0) = string_value_data_0
   string_value(last_conditions.last_cond(1).string_value_no).data(0).s = str
   string_value(last_conditions.last_cond(1).string_value_no).data(0).value = v
   string_value(last_conditions.last_cond(1).string_value_no).data(0).record = re
Exit Function
set_string_value_error:
If temp_no% < last_conditions.last_cond(1).string_value_no Then
 last_conditions.last_cond(1).string_value_no = temp_no
  For i% = 1 To temp_no%
   string_value(i%).data(0) = string_value(i%).data(1)
  Next i%
End If
End Function
Public Function set_string_value_(ByVal s1 As String, ByVal S2 As String, _
                          ByVal con_ty As Byte, ByVal con_no%, re As record_data_type, _
                            no_reduce As Byte) As Byte
                          '两次推出同一量的值 如果含"x",建立方程,解未知数,如果不含"x",选取简单的表达式
Dim ty(1) As Byte
Dim s(6) As String
Dim e_v As String
Dim temp_record As total_record_type
'On Error GoTo set_string_value_error_
If s1 = "" Or S2 = "" Or s1 = S2 Or InStr(1, s1, "F", 0) > 0 Or _
      InStr(1, S2, "F", 0) > 0 Or s1 = "0" Or S2 = "0" Then
 Exit Function
Else
 e_v = minus_string(s1, S2, True, False)
 If e_v = "0" Then
   Exit Function
 End If
 temp_record.record_data = re
 If e_v <> "0" Then
 If is_contain_two_nukwon_element(e_v, "") = False Then
 Call add_conditions_to_record(con_ty, con_no%, 0, 0, temp_record.record_data.data0.condition_data)
 If is_contain_x(e_v, "x", 1) Then   'InStr(1, s1, "x", 0) > 0 Or InStr(1, S2, "x", 0) > 0 Then
    If is_contain_x(e_v, "F", 1) = False Then 'InStr(1, e_v, "F", 0) = 0 Then
     set_string_value_ = set_equation(e_v, 0, temp_record)
     If set_string_value_ >= 1 Then
      Exit Function
     End If
    End If
 ElseIf InStr(1, e_v, ".", 0) = 0 And InStr(1, e_v, "[", 0) = 0 And th_chose(-5).chose = 0 Then          '不是浮点
  error_of_wenti = 1
   set_string_value_ = 2
    Exit Function
 End If
 End If
 End If
 End If
 Exit Function
set_string_value_error_:
  set_string_value_ = 0
End Function
Public Function set_V_string_value_(v_s1 As v_string, v_s2 As v_string, _
                          ByVal con_ty As Byte, ByVal con_no%, re As record_data_type, _
                                                     no_reduce As Byte) As Byte
                          '两次推出同一量的值 如果含"x",建立方程,解未知数,如果不含"x",选取简单的表达式
Call set_string_value_(v_s1.coord(0), v_s2.coord(0), con_ty, con_no%, re, 0)
Call set_string_value_(v_s1.coord(1), v_s2.coord(1), con_ty, con_no%, re, 0)
End Function
                          

Public Function set_property_of_dpoint_pair(dp As point_pair_data0_type, _
            ByVal no%, ByVal similar_triangle_no As Integer, _
             re As total_record_type, no_reduce As Byte) As Byte
Dim temp_record As total_record_type
Dim v$
Dim t_p(3) As Integer
Dim it(3) As Integer
Dim tn(3) As Integer
Dim dn(2) As Integer
Dim n(1) As Integer
Dim A(1) As Integer
Dim t_p1(2) As Integer
Dim cond_ty As Byte
Dim ty(1) As Integer
Dim para(3) As String
Dim re_data0 As relation_data0_type
Dim A3_v As angle3_value_data0_type
Dim re_data As record_data_type
Dim cond_data0 As condition_data_type
Dim el As eline_data0_type
'******************************************************************
'设置与比例线段有关的三角形
'********************************************************************
'因式分解
'On Error GoTo set_property_of_dpoint_pair_mark10
temp_record = re
'set_property_of_dpoint_pair = set_similar_triangle_from_point_pair(dp, 0, re, 0)
'If set_property_of_dpoint_pair > 1 Then
'   Exit Function
'End If
it(0) = 0
it(1) = 0
it(2) = 0
it(3) = 0
'*********************
If dp.line_no(0) = dp.line_no(1) Then
 If dp.line_no(2) = dp.line_no(3) Then
  If dp.poi(8) > 0 And dp.poi(9) > 0 And dp.poi(10) > 0 And dp.poi(11) > 0 Then
    If is_equal_dline(dp.poi(8), dp.poi(9), dp.poi(10), dp.poi(11), dp.n(8), _
         dp.n(9), dp.n(10), dp.n(11), dp.line_no(4), dp.line_no(5), tn(0), -1000, 0, 0, 0, el, dn(1), dn(2), _
          cond_ty, "", cond_data0) Then
           temp_record = re
            temp_record.record_data.data0.theorem_no = 1
             Call add_conditions_to_record(cond_ty, dn(0), dn(1), dn(2), _
                temp_record.record_data.data0.condition_data)
       set_property_of_dpoint_pair = set_equal_dline(dp.poi(0), dp.poi(2), _
           dp.poi(4), dp.poi(5), dp.n(0), dp.n(1), dp.n(4), dp.n(5), dp.line_no(0), dp.line_no(2), _
              0, temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
           Exit Function
        End If
         set_property_of_dpoint_pair = set_equal_dline(dp.poi(2), dp.poi(3), _
           dp.poi(6), dp.poi(7), dp.n(2), dp.n(3), dp.n(6), dp.n(7), dp.line_no(1), dp.line_no(3), _
              0, temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
           Exit Function
        End If
     Else
         Call different_two_line(dp.poi(0), dp.poi(1), dp.n(0), dp.n(1), dp.poi(2), dp.poi(3), _
          dp.n(2), dp.n(3), t_p(0), t_p(1), tn(0), tn(1), ty(0))
         Call different_two_line(dp.poi(4), dp.poi(5), dp.n(4), dp.n(5), dp.poi(6), dp.poi(7), _
          dp.n(6), dp.n(7), t_p(2), t_p(3), tn(2), tn(3), ty(1))
       If ty(0) = ty(1) And ty(0) <> 0 Then
         If is_equal_dline(t_p(0), t_p(1), t_p(2), t_p(3), tn(0), tn(1), tn(2), _
          tn(3), dp.line_no(0), dp.line_no(1), tn(0), -1000, 0, 0, 0, el, dn(1), dn(2), _
           cond_ty, "", cond_data0) Then
            temp_record = re
            temp_record.record_data.data0.theorem_no = 1
             Call add_conditions_to_record(cond_ty, dn(0), dn(1), dn(2), _
                temp_record.record_data.data0.condition_data)
         set_property_of_dpoint_pair = set_equal_dline(dp.poi(0), dp.poi(2), _
           dp.poi(4), dp.poi(5), dp.n(0), dp.n(1), dp.n(4), dp.n(5), dp.line_no(0), dp.line_no(2), _
              0, temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
           Exit Function
        End If
         set_property_of_dpoint_pair = set_equal_dline(dp.poi(2), dp.poi(3), _
           dp.poi(6), dp.poi(7), dp.n(2), dp.n(3), dp.n(6), dp.n(7), dp.line_no(1), dp.line_no(3), _
              0, temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
           Exit Function
        End If
       End If
      End If
     End If
  End If
  If dp.line_no(0) = dp.line_no(3) Then
   Call different_two_line(dp.poi(0), dp.poi(1), dp.n(0), dp.n(1), dp.poi(6), dp.poi(7), _
          dp.n(6), dp.n(7), t_p(0), t_p(1), tn(0), tn(1), ty(0))
   Call different_two_line(dp.poi(4), dp.poi(5), dp.n(4), dp.n(5), dp.poi(2), dp.poi(3), _
          dp.n(2), dp.n(3), t_p(2), t_p(3), tn(2), tn(3), ty(1))
   If ty(0) = ty(1) And ty(0) <> 0 Then
    If is_equal_dline(t_p(0), t_p(1), t_p(2), t_p(3), tn(0), tn(1), tn(2), _
         tn(3), dp.line_no(0), dp.line_no(1), tn(0), -1000, 0, 0, 0, el, dn(1), dn(2), _
          cond_ty, "", cond_data0) Then
           temp_record = re
            temp_record.record_data.data0.theorem_no = 1
             Call add_conditions_to_record(cond_ty, dn(0), dn(1), dn(2), _
                temp_record.record_data.data0.condition_data)
       set_property_of_dpoint_pair = set_equal_dline(dp.poi(0), dp.poi(2), _
           dp.poi(4), dp.poi(5), dp.n(0), dp.n(1), dp.n(4), dp.n(5), dp.line_no(0), dp.line_no(2), _
              0, temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
           Exit Function
        End If
       set_property_of_dpoint_pair = set_equal_dline(dp.poi(2), dp.poi(3), _
           dp.poi(6), dp.poi(7), dp.n(2), dp.n(3), dp.n(6), dp.n(7), dp.line_no(1), dp.line_no(3), _
              0, temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
           Exit Function
        End If
    End If
   End If
   If dp.poi(0) = dp.poi(6) And dp.poi(1) = dp.poi(7) Then '外项
       If dp.con_line_type(0) = 3 And dp.con_line_type(1) = 8 Then
          condition_data0.condition_no = 0
         set_property_of_dpoint_pair = set_item0(dp.poi(0), dp.poi(1), dp.poi(2), dp.poi(3), "/", dp.n(0), dp.n(1), _
               dp.n(2), dp.n(3), dp.line_no(0), dp.line_no(1), "1", "1", "1", "", para(0), 0, condition_data0, 0, it(0), _
                0, 0, cond_data0, False)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
          condition_data0.condition_no = 0
         set_property_of_dpoint_pair = set_item0(it(0), -7, it(0), -7, "*", 0, _
                 0, 0, 0, 0, 0, "1", "1", "1", "", para(1), 0, condition_data0, 0, it(1), _
                  0, 0, cond_data0, False)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
          set_property_of_dpoint_pair = set_general_string(it(1), it(0), 0, 0, para(0), _
                    time_string("-1", para(1), True, False), "0", "0", _
                 "1", 0, 0, 0, temp_record, 0, 0)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
       ElseIf dp.con_line_type(0) = 7 And dp.con_line_type(1) = 5 Then
          condition_data0.condition_no = 0
          set_property_of_dpoint_pair = set_item0(dp.poi(4), dp.poi(5), dp.poi(6), dp.poi(7), "/", dp.n(4), dp.n(5), _
               dp.n(6), dp.n(7), dp.line_no(2), dp.line_no(3), "1", "1", "1", "", para(0), 0, condition_data0, 0, it(0), _
                 0, 0, cond_data0, False)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
          condition_data0.condition_no = 0
          set_property_of_dpoint_pair = set_item0(it(0), -7, it(0), -7, "*", 0, _
                 0, 0, 0, 0, 0, "1", "1", "1", "", para(1), 0, condition_data0, 0, it(1), _
                   0, 0, cond_data0, False)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
          set_property_of_dpoint_pair = set_general_string(it(1), it(0), 0, 0, para(0), _
                  time_string("-1", para(1), True, False), "0", "0", _
                 "1", 0, 0, 0, temp_record, 0, 0)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
       End If
   ElseIf dp.poi(2) = dp.poi(4) And dp.poi(3) = dp.poi(5) Then
       If dp.con_line_type(0) = 3 And dp.con_line_type(1) = 6 Then
          condition_data0.condition_no = 0
          set_property_of_dpoint_pair = set_item0(dp.poi(0), dp.poi(1), dp.poi(2), dp.poi(3), "/", dp.n(0), dp.n(1), _
               dp.n(2), dp.n(3), dp.line_no(0), dp.line_no(1), "1", "1", "1", "", para(0), 0, condition_data0, 0, it(0), _
                 0, 0, cond_data0, False)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
          condition_data0.condition_no = 0
          set_property_of_dpoint_pair = set_item0(it(0), -7, it(0), -7, "*", 0, _
                 0, 0, 0, 0, 0, "1", "1", "1", "", para(1), 0, condition_data0, 0, it(1), _
                   0, 0, cond_data0, False)
           set_property_of_dpoint_pair = set_general_string(it(1), it(0), 0, 0, para(0), para(1), "0", "0", _
                 "1", 0, 0, 0, temp_record, 0, 0)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
         If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
      ElseIf dp.con_line_type(0) = 4 And dp.con_line_type(1) = 5 Then
          condition_data0.condition_no = 0
          Call set_item0(dp.poi(4), dp.poi(5), dp.poi(6), dp.poi(7), "/", dp.n(4), dp.n(5), _
               dp.n(6), dp.n(7), dp.line_no(2), dp.line_no(3), "1", "1", "1", "", para(0), 0, condition_data0, 0, it(0), _
                0, 0, cond_data0, False)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
          condition_data0.condition_no = 0
          set_property_of_dpoint_pair = set_item0(it(0), -7, it(0), -7, "*", 0, _
                 0, 0, 0, 0, 0, "1", "1", "1", "", para(1), 0, condition_data0, 0, it(1), _
                  0, 0, cond_data0, False)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
          set_property_of_dpoint_pair = set_general_string(it(1), it(0), 0, 0, para(0), para(1), "0", "0", _
                 "1", 0, 0, 0, temp_record, 0, 0)
          If set_property_of_dpoint_pair > 1 Then
             Exit Function
          End If
       End If
   End If
  End If
 End If
End If
If dp.con_line_type(0) = 3 And (dp.con_line_type(1) = 3 Or _
      dp.con_line_type(1) = 5) Then
    t_p(0) = get_midpoint(dp.poi(8), t_p(0), dp.poi(9), 0, _
       tn(0), 0, 0, n(0))
    If t_p(0) > 0 Then
     If t_p(0) <> dp.poi(1) Then
      t_p(1) = get_midpoint(dp.poi(10), t_p(1), dp.poi(11), 0, _
        tn(1), 0, 0, n(1))
       If t_p(1) > 0 Then
       temp_record = re
        Call add_conditions_to_record(midpoint_, n(0), n(1), _
          0, temp_record.record_data.data0.condition_data)
          temp_record.record_data.data0.theorem_no = -3
     If dp.con_line_type(1) = 3 Then
       set_property_of_dpoint_pair = _
        set_dpoint_pair(dp.poi(1), t_p(0), dp.poi(8), t_p(0), _
           dp.poi(5), t_p(1), dp.poi(10), t_p(1), dp.n(1), tn(0), _
            dp.n(8), tn(0), dp.n(5), tn(1), dp.n(10), tn(1), _
             dp.line_no(0), dp.line_no(0), dp.line_no(2), dp.line_no(2), _
              0, temp_record, False, 0, 0, 0, no_reduce, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       set_property_of_dpoint_pair = _
        set_dpoint_pair(dp.poi(1), t_p(0), dp.poi(9), t_p(0), _
           dp.poi(5), t_p(1), dp.poi(10), t_p(1), dp.n(1), tn(0), _
            dp.n(9), tn(0), dp.n(5), tn(1), dp.n(10), tn(1), _
             dp.line_no(0), dp.line_no(0), dp.line_no(2), dp.line_no(2), _
              0, temp_record, False, 0, 0, 0, no_reduce, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       set_property_of_dpoint_pair = _
        set_dpoint_pair(dp.poi(1), t_p(0), dp.poi(8), t_p(0), _
           dp.poi(5), t_p(1), dp.poi(11), t_p(1), dp.n(1), tn(0), _
            dp.n(8), tn(0), dp.n(5), tn(1), dp.n(11), tn(1), _
             dp.line_no(0), dp.line_no(0), dp.line_no(2), dp.line_no(2), _
              0, temp_record, False, 0, 0, 0, no_reduce, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       set_property_of_dpoint_pair = _
        set_dpoint_pair(dp.poi(1), t_p(0), dp.poi(9), t_p(0), _
           dp.poi(5), t_p(1), dp.poi(11), t_p(1), dp.n(1), tn(0), _
            dp.n(9), tn(0), dp.n(5), tn(1), dp.n(11), tn(1), _
             dp.line_no(0), dp.line_no(0), dp.line_no(2), dp.line_no(2), _
              0, temp_record, False, 0, 0, 0, no_reduce, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       Else '=5
       set_property_of_dpoint_pair = _
        set_dpoint_pair(dp.poi(1), t_p(0), dp.poi(8), t_p(0), _
           dp.poi(4), t_p(1), dp.poi(10), t_p(1), dp.n(1), tn(0), _
            dp.n(8), tn(0), dp.n(4), tn(1), dp.n(10), tn(1), _
             dp.line_no(0), dp.line_no(0), dp.line_no(2), dp.line_no(2), _
              0, temp_record, False, 0, 0, 0, no_reduce, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       set_property_of_dpoint_pair = _
        set_dpoint_pair(dp.poi(1), t_p(0), dp.poi(9), t_p(0), _
           dp.poi(4), t_p(1), dp.poi(10), t_p(1), dp.n(1), tn(0), _
            dp.n(9), tn(0), dp.n(4), tn(1), dp.n(10), tn(1), _
             dp.line_no(0), dp.line_no(0), dp.line_no(2), dp.line_no(2), _
              0, temp_record, False, 0, 0, 0, no_reduce, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       set_property_of_dpoint_pair = _
        set_dpoint_pair(dp.poi(1), t_p(0), dp.poi(8), t_p(0), _
           dp.poi(4), t_p(1), dp.poi(11), t_p(1), dp.n(1), tn(0), _
            dp.n(8), tn(0), dp.n(4), tn(1), dp.n(11), tn(1), _
             dp.line_no(0), dp.line_no(0), dp.line_no(2), dp.line_no(2), _
              0, temp_record, False, 0, 0, 0, no_reduce, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       set_property_of_dpoint_pair = _
        set_dpoint_pair(dp.poi(1), t_p(0), dp.poi(9), t_p(0), _
           dp.poi(4), t_p(1), dp.poi(11), t_p(1), dp.n(1), tn(0), _
            dp.n(9), tn(0), dp.n(4), tn(1), dp.n(11), tn(1), _
             dp.line_no(0), dp.line_no(0), dp.line_no(2), dp.line_no(2), _
              0, temp_record, False, 0, 0, 0, no_reduce, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       End If
       End If
     End If
    End If
 '合比定理
 If is_relation(dp.poi(8), dp.poi(9), dp.poi(10), dp.poi(11), _
     dp.n(8), dp.n(9), dp.n(10), dp.n(11), dp.line_no(4), dp.line_no(5), _
      v$, tn(0), -1000, 0, 0, 0, re_data0, tn(1), tn(2), cond_ty, cond_data0, 0) Then
     Call add_conditions_to_record(cond_ty, tn(0), tn(1), tn(2), temp_record.record_data.data0.condition_data)
      set_property_of_dpoint_pair = set_Drelation(dp.poi(0), dp.poi(1), dp.poi(4), dp.poi(5), _
           dp.n(0), dp.n(1), dp.n(4), dp.n(5), dp.line_no(0), dp.line_no(2), v$, temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
      set_property_of_dpoint_pair = set_Drelation(dp.poi(2), dp.poi(3), dp.poi(6), dp.poi(7), _
           dp.n(2), dp.n(3), dp.n(6), dp.n(7), dp.line_no(1), dp.line_no(3), v$, temp_record, 0, 0, 0, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
 End If
ElseIf dp.con_line_type(0) = 3 Then
 If th_chose(113).chose = 1 Then
 temp_record = re  '角平分线定理113
 temp_record.record_data.data0.theorem_no = 113
 If dp.con_line_type(1) < 3 Then
     If dp.poi(4) = dp.poi(6) Then
      If dp.poi(5) = dp.poi(0) And dp.poi(7) = dp.poi(3) Then
       A(0) = angle_number(dp.poi(5), dp.poi(4), dp.poi(1), 0, 0)
       A(1) = angle_number(dp.poi(7), dp.poi(4), dp.poi(1), 0, 0)
       If A(0) <> 0 And A(1) <> 0 Then
        set_property_of_dpoint_pair = set_three_angle_value( _
         Abs(A(0)), Abs(A(1)), 0, "1", "-1", "0", "0", _
          0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       End If
      End If
     ElseIf dp.poi(4) = dp.poi(7) Then
      If dp.poi(5) = dp.poi(0) And dp.poi(6) = dp.poi(3) Then
       A(0) = angle_number(dp.poi(5), dp.poi(4), dp.poi(1), 0, 0)
       A(1) = angle_number(dp.poi(6), dp.poi(4), dp.poi(1), 0, 0)
       If A(0) <> 0 And A(1) <> 0 Then
        set_property_of_dpoint_pair = set_three_angle_value( _
         Abs(A(0)), Abs(A(1)), 0, "1", "-1", "0", "0", _
          0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       End If
      End If
     ElseIf dp.poi(5) = dp.poi(6) Then
      If dp.poi(4) = dp.poi(0) And dp.poi(7) = dp.poi(3) Then
       A(0) = angle_number(dp.poi(4), dp.poi(5), dp.poi(1), 0, 0)
       A(1) = angle_number(dp.poi(7), dp.poi(5), dp.poi(1), 0, 0)
       If A(0) <> 0 And A(1) <> 0 Then
        set_property_of_dpoint_pair = set_three_angle_value( _
         Abs(A(0)), Abs(A(1)), 0, "1", "-1", "0", "0", _
          0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       End If
      End If
     ElseIf dp.poi(5) = dp.poi(7) Then
      If dp.poi(4) = dp.poi(0) And dp.poi(6) = dp.poi(3) Then
       A(0) = angle_number(dp.poi(4), dp.poi(5), dp.poi(1), 0, 0)
       A(1) = angle_number(dp.poi(6), dp.poi(5), dp.poi(1), 0, 0)
       If A(0) <> 0 And A(1) <> 0 Then
        set_property_of_dpoint_pair = set_three_angle_value( _
         Abs(A(0)), Abs(A(1)), 0, "1", "-1", "0", "0", _
          0, temp_record, 0, 0, 0, no_reduce, 0, 0, False)
        If set_property_of_dpoint_pair > 1 Then
         Exit Function
        End If
       End If
      End If
     End If
   End If
 End If
ElseIf dp.con_line_type(0) = 4 Then
 If dp.con_line_type(0) < 3 Then
     If dp.poi(4) = dp.poi(6) Then
      If dp.poi(5) = dp.poi(0) And dp.poi(7) = dp.poi(3) Then
       
      End If
     ElseIf dp.poi(4) = dp.poi(7) Then
      If dp.poi(5) = dp.poi(0) And dp.poi(6) = dp.poi(3) Then
      End If
     ElseIf dp.poi(5) = dp.poi(6) Then
      If dp.poi(4) = dp.poi(0) And dp.poi(7) = dp.poi(3) Then
      End If
     ElseIf dp.poi(5) = dp.poi(7) Then
      If dp.poi(4) = dp.poi(0) And dp.poi(3) = dp.poi(3) Then
      End If
     End If
 End If
ElseIf dp.con_line_type(0) = 7 Then
 If dp.con_line_type(0) < 3 Then
     If dp.poi(4) = dp.poi(6) Then
      If dp.poi(5) = dp.poi(0) And dp.poi(7) = dp.poi(3) Then
      End If
     ElseIf dp.poi(4) = dp.poi(7) Then
      If dp.poi(5) = dp.poi(0) And dp.poi(6) = dp.poi(3) Then
      End If
     ElseIf dp.poi(5) = dp.poi(6) Then
      If dp.poi(4) = dp.poi(0) And dp.poi(7) = dp.poi(3) Then
      End If
     ElseIf dp.poi(5) = dp.poi(7) Then
      If dp.poi(4) = dp.poi(0) And dp.poi(3) = dp.poi(3) Then
      End If
     End If
 End If
End If
If th_chose(101).chose = 1 Or th_chose(106).chose = 1 Or _
       th_chose(107).chose = 1 Then
 If dp.con_line_type(0) = 3 And _
       dp.con_line_type(1) = 3 Then
  If dp.poi(0) = dp.poi(4) Then
  temp_record.record_data.data0.theorem_no = 101
  set_property_of_dpoint_pair = set_dparal0(dp.poi(1), dp.poi(5), dp.poi(3), _
        dp.poi(7), temp_record, no_reduce)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  temp_record.record_data.data0.theorem_no = 106
  set_property_of_dpoint_pair = set_similar_triangle(dp.poi(0), dp.poi(1), dp.poi(5), _
   dp.poi(0), dp.poi(3), dp.poi(7), temp_record, 0, no_reduce, 1)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  ElseIf dp.poi(1) = dp.poi(5) Then
  temp_record.record_data.data0.theorem_no = 101
  set_property_of_dpoint_pair = set_dparal0(dp.poi(0), dp.poi(4), dp.poi(3), _
        dp.poi(7), temp_record, no_reduce)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  temp_record.record_data.data0.theorem_no = 106
  set_property_of_dpoint_pair = set_similar_triangle(dp.poi(0), dp.poi(1), dp.poi(4), _
   dp.poi(3), dp.poi(1), dp.poi(7), temp_record, 0, no_reduce, 1)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  ElseIf dp.poi(3) = dp.poi(7) Then
    temp_record.record_data.data0.theorem_no = 101
  set_property_of_dpoint_pair = set_dparal0(dp.poi(1), dp.poi(5), dp.poi(0), _
        dp.poi(4), temp_record, no_reduce)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  temp_record.record_data.data0.theorem_no = 106
  set_property_of_dpoint_pair = set_similar_triangle(dp.poi(0), dp.poi(7), dp.poi(4), _
   dp.poi(1), dp.poi(7), dp.poi(5), temp_record, 0, no_reduce, 1)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
 End If
 ElseIf dp.con_line_type(0) = 3 And _
           dp.con_line_type(1) = 5 Then
'****
  If dp.poi(0) = dp.poi(5) Then
  temp_record.record_data.data0.theorem_no = 101
  set_property_of_dpoint_pair = set_dparal0(dp.poi(1), dp.poi(4), dp.poi(3), _
        dp.poi(6), temp_record, no_reduce)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  temp_record.record_data.data0.theorem_no = 106
  set_property_of_dpoint_pair = set_similar_triangle(dp.poi(0), dp.poi(1), dp.poi(4), _
   dp.poi(0), dp.poi(3), dp.poi(6), temp_record, 0, no_reduce, 1)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  ElseIf dp.poi(1) = dp.poi(4) Then
  temp_record.record_data.data0.theorem_no = 101
  set_property_of_dpoint_pair = set_dparal0(dp.poi(0), dp.poi(5), dp.poi(3), _
        dp.poi(6), temp_record, no_reduce)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  temp_record.record_data.data0.theorem_no = 106
  set_property_of_dpoint_pair = set_similar_triangle(dp.poi(0), dp.poi(1), dp.poi(5), _
   dp.poi(3), dp.poi(1), dp.poi(6), temp_record, 0, no_reduce, 1)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  ElseIf dp.poi(3) = dp.poi(6) Then
    temp_record.record_data.data0.theorem_no = 101
  set_property_of_dpoint_pair = set_dparal0(dp.poi(1), dp.poi(4), dp.poi(0), _
        dp.poi(5), temp_record, no_reduce)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
  temp_record.record_data.data0.theorem_no = 106
  set_property_of_dpoint_pair = set_similar_triangle(dp.poi(0), dp.poi(6), dp.poi(5), _
   dp.poi(1), dp.poi(6), dp.poi(4), temp_record, 0, no_reduce, 1)
  If set_property_of_dpoint_pair > 1 Then
   Exit Function
  End If
 End If
'****
 Else
  If similar_triangle_no = 0 Then
  
   set_property_of_dpoint_pair = set_similar_triangle_from_point_pair( _
      dp, no%, temp_record, no_reduce)
       If set_property_of_dpoint_pair > 1 Then
        Exit Function
       End If
  End If
 End If
 End If
 '****************************************************
 If th_chose(106).chose = 1 Then
  If dp.poi(0) = dp.poi(6) Then
    If dp.poi(1) = dp.poi(7) Then
     GoTo set_property_of_dpoint_pair_mark10
    End If
     t_p(1) = dp.poi(0)
     t_p(0) = dp.poi(1)
     t_p(2) = dp.poi(7)
  ElseIf dp.poi(0) = dp.poi(7) Then
    If dp.poi(1) = dp.poi(6) Then
       GoTo set_property_of_dpoint_pair_mark10
    End If
     t_p(1) = dp.poi(0)
     t_p(0) = dp.poi(1)
     t_p(2) = dp.poi(6)
  ElseIf dp.poi(1) = dp.poi(6) Then
     If dp.poi(0) = dp.poi(7) Then
      GoTo set_property_of_dpoint_pair_mark10
     End If
      t_p(1) = dp.poi(1)
      t_p(0) = dp.poi(0)
      t_p(2) = dp.poi(7)
  ElseIf dp.poi(1) = dp.poi(7) Then
      If dp.poi(0) = dp.poi(6) Then
       GoTo set_property_of_dpoint_pair_mark10
      End If
       t_p(1) = dp.poi(1)
       t_p(0) = dp.poi(0)
       t_p(2) = dp.poi(6)
  Else
       GoTo set_property_of_dpoint_pair_mark10
  End If
  If dp.poi(2) = dp.poi(4) Then
     If dp.poi(3) = dp.poi(5) Then
      GoTo set_property_of_dpoint_pair_mark10
     End If
      t_p1(1) = dp.poi(2)
      t_p1(0) = dp.poi(3)
      t_p1(2) = dp.poi(5)
  ElseIf dp.poi(2) = dp.poi(5) Then
    If dp.poi(3) = dp.poi(4) Then
     GoTo set_property_of_dpoint_pair_mark10
    End If
     t_p1(1) = dp.poi(2)
     t_p1(0) = dp.poi(3)
     t_p1(2) = dp.poi(4)
  ElseIf dp.poi(3) = dp.poi(4) Then
    If dp.poi(2) = dp.poi(5) Then
     GoTo set_property_of_dpoint_pair_mark10
    End If
     t_p1(1) = dp.poi(3)
     t_p1(0) = dp.poi(2)
     t_p1(2) = dp.poi(5)
  ElseIf dp.poi(3) = dp.poi(5) Then
    If dp.poi(2) = dp.poi(4) Then
       GoTo set_property_of_dpoint_pair_mark10
    End If
     t_p1(1) = dp.poi(3)
     t_p1(0) = dp.poi(2)
     t_p1(2) = dp.poi(4)
  Else
      GoTo set_property_of_dpoint_pair_mark10
  End If
  If is_three_angle_value(Abs(angle_number(t_p(0), t_p(1), t_p(2), "", 0)), _
     Abs(angle_number(t_p1(0), t_p1(1), t_p1(2), "", 0)), 0, "1", "-1", "0", "0", _
      "0", tn(0), tn(1), tn(2), -1000, 0, 0, 0, 0, 0, 0, 0, A3_v, re_data.data0.condition_data, 0) Then
     temp_record = re
     Call add_conditions_to_record(angle3_value_, tn(0), tn(1), tn(2), temp_record.record_data.data0.condition_data)
     temp_record.record_data.data0.theorem_no = 106
     set_property_of_dpoint_pair = set_equal_area_triangle(triangle_number(t_p(0), t_p(1), t_p(2), _
      0, 0, 0, 0, 0, 0, 0), triangle_number(t_p1(0), t_p1(1), t_p1(2), 0, 0, 0, 0, 0, 0, 0), temp_record, 0, 1, 0)
     If set_property_of_dpoint_pair > 1 Then
      Exit Function
     End If
  End If
  End If
set_property_of_dpoint_pair_mark10:
End Function

Public Sub set_line_value_for_measure(ByVal p1%, ByVal p2%, k%)
'On Error GoTo set_line_for_measure_error
 If is_new_length(p1%, p2%, k%) Then
      Call length_of_line(length_(k%))
        last_measur_string = last_measur_string + 1
      Measur_string(last_measur_string) = LoadResString_(1615, _
          "\\1\\" + m_poi(length_(k%).poi(0)).data(0).data0.name + _
                  m_poi(length_(k%).poi(1)).data(0).data0.name + _
          "\\2\\" + str_for_measure(length_(last_length).len / Ratio_for_measure.Ratio_for_measure))
           length_(k%).string_no = last_measur_string
             Call display_m_string(last_measur_string, display)
 End If
set_line_for_measure_error:
End Sub
Public Sub set_distence_p_line_for_measure(ByVal p1%, ByVal p2%, ByVal p3%, k%)
'On Error GoTo set_distence_p_line_measure_error
Dim vf As POINTAPI
 If is_new_length_point_to_line(p1%, p2%, p3%, k%) Then
      If distance_point_to_line( _
       m_poi(length_point_to_line(k%).poi(0)).data(0).data0.coordinate, _
        m_poi(length_point_to_line(k%).poi(1)).data(0).data0.coordinate, paral_, _
         m_poi(length_point_to_line(k%).poi(1)).data(0).data0.coordinate, _
          m_poi(length_point_to_line(k%).poi(2)).data(0).data0.coordinate, _
         length_point_to_line(k%).len, vf, 1) = False Then
       Exit Sub
      End If
   last_measur_string = last_measur_string + 1
    Measur_string(last_measur_string) = LoadResString_(1620, _
      "\\1\\" + m_poi(length_point_to_line(k%).poi(0)).data(0).data0.name + _
      "\\2\\" + m_poi(length_point_to_line(k%).poi(1)).data(0).data0.name + _
                    m_poi(length_point_to_line(k%).poi(2)).data(0).data0.name + _
      "\\3\\" + str_for_measure(Abs(length_point_to_line(k%).len) / Ratio_for_measure.Ratio_for_measure))
    length_point_to_line(k%).string_no = last_measur_string
    Call display_m_string(last_measur_string, display)
     draw_step = 0
 End If
set_distence_p_line_measure_error:
End Sub
Public Sub set_area_of_polygon_for_measure(poly As polygon, k%)
Dim i%
Dim t_s$
'On Error GoTo set_area_of_polygon_for_measure_error
If is_new_area_polygon(poly, k%) Then
      Area_polygon(k%).Area = C_Area_polygon(Area_polygon(k%).p)
       last_measur_string = last_measur_string + 1
        t_s$ = ""
      For i% = 0 To Area_polygon(k%).p.total_v - 1
       t_s$ = t_s$ + m_poi(Area_polygon(k%).p.v(i%)).data(0).data0.name
      Next i%
     If Area_polygon(k%).p.total_v >= 3 Then
      Measur_string(last_measur_string) = LoadResString_(485, _
           "\\1\\" + set_display_polygon0(t_s$))
     End If
     Measur_string(last_measur_string) = Measur_string(last_measur_string) + "=" + _
       str_for_measure(Area_polygon(k%).Area / _
       Ratio_for_measure.Ratio_for_measure ^ 2)
     Area_polygon(k%).string_no = last_measur_string
     Call display_m_string(last_measur_string, display)
End If
'       draw_step = 0
'        Call init_draw_data
set_area_of_polygon_for_measure_error:
End Sub

Public Sub arrange_data_for_new_point(ByVal l1%, ByVal l2%)
Dim i%, j%, k%, n%
'On Error GoTo arrange_data_for_new_point_error
For i% = 1 To last_conditions.last_cond(1).item0_no
 For j% = 0 To 2
  If item0(i%).data(0).line_no(j%) = l1% Or _
      (l2% > 0 And item0(i%).data(0).line_no(j%) = l2%) Then
   Call line_number0(item0(i%).data(0).poi(2 * j%), item0(i%).data(0).poi(2 * j% + 1), _
          item0(i%).data(0).n(2 * j%), item0(i%).data(0).n(2 * j% + 1))
  End If
 Next j%
Next i%
For n% = 1 + last_conditions.last_cond(0).line_value_no To last_conditions.last_cond(1).line_value_no
  i% = line_value(n%).data(0).record.data1.index.i(0)
  If line_value(i%).data(0).data0.line_no = l1% Or _
      (l2% > 0 And line_value(i%).data(0).data0.line_no = l2%) Then
   Call line_number0(line_value(i%).data(0).data0.poi(0), line_value(i%).data(0).data0.poi(1), _
          line_value(i%).data(0).data0.n(0), line_value(i%).data(0).data0.n(1))
  End If
Next n%
For n% = 1 + last_conditions.last_cond(0).two_line_value_no To last_conditions.last_cond(1).two_line_value_no
 i% = two_line_value(n%).data(0).record.data1.index.i(0)
  For j% = 0 To 1
  If two_line_value(i%).data(0).data0.line_no(j%) = l1% Or _
      (l2% > 0 And two_line_value(i%).data(0).data0.line_no(j%) = l2%) Then
   Call line_number0(two_line_value(i%).data(0).data0.poi(2 * j%), _
         two_line_value(i%).data(0).data0.poi(2 * j% + 1), _
          two_line_value(i%).data(0).data0.n(2 * j%), _
           two_line_value(i%).data(0).data0.n(2 * j% + 1))
  End If
  Next j%
Next n%
For n% = 1 + last_conditions.last_cond(0).line3_value_no To last_conditions.last_cond(1).line3_value_no
 i% = line3_value(n%).data(0).record.data1.index.i(0)
  For j% = 0 To 2
  If line3_value(i%).data(0).data0.line_no(j%) = l1% Or _
      (l2% > 0 And line3_value(i%).data(0).data0.line_no(j%) = l2%) Then
   Call line_number0(line3_value(i%).data(0).data0.poi(2 * j%), _
         line3_value(i%).data(0).data0.poi(2 * j% + 1), _
          line3_value(i%).data(0).data0.n(2 * j%), _
           line3_value(i%).data(0).data0.n(2 * j% + 1))
  End If
  Next j%
Next n%
For n% = 1 + last_conditions.last_cond(0).mid_point_no To last_conditions.last_cond(1).mid_point_no
 i% = Dmid_point(n%).data(0).record.data1.index.i(0)
  If Dmid_point(i%).data(0).data0.line_no = l1% Or _
      (l2% > 0 And Dmid_point(i%).data(0).data0.line_no = l2%) Then
   Call line_number0(Dmid_point(i%).data(0).data0.poi(0), _
         Dmid_point(i%).data(0).data0.poi(1), _
          Dmid_point(i%).data(0).data0.n(0), _
           Dmid_point(i%).data(0).data0.n(1))
   Call line_number0(Dmid_point(i%).data(0).data0.poi(1), _
         Dmid_point(i%).data(0).data0.poi(2), _
          Dmid_point(i%).data(0).data0.n(1), _
           Dmid_point(i%).data(0).data0.n(2))
  End If
Next n%
For n% = 1 + last_conditions.last_cond(0).eline_no To last_conditions.last_cond(1).eline_no
i% = Deline(n%).data(0).record.data1.index.i(0)
 For j% = 0 To 1
  If Deline(i%).data(0).data0.line_no(j%) = l1% Or _
      (l2% > 0 And Deline(i%).data(0).data0.line_no(j%) = l2%) Then
  Call line_number0(Deline(i%).data(0).data0.poi(2 * j%), Deline(i%).data(0).data0.poi(2 * j% + 1), _
        Deline(i%).data(0).data0.n(2 * j%), Deline(i%).data(0).data0.n(2 * j% + 1))
  End If
 Next j%
Next n%
For n% = 1 + last_conditions.last_cond(0).relation_no To last_conditions.last_cond(1).relation_no
i% = Drelation(n%).data(0).record.data1.index.i(0)
 For j% = 0 To 2
  If Drelation(i%).data(0).data0.line_no(j%) = l1% Or _
      (l2% > 0 And Drelation(i%).data(0).data0.line_no(j%) = l2%) Then
  Call line_number0(Drelation(i%).data(0).data0.poi(2 * j%), Drelation(i%).data(0).data0.poi(2 * j% + 1), _
        Drelation(i%).data(0).data0.n(2 * j%), Drelation(i%).data(0).data0.n(2 * j% + 1))
  End If
 Next j%
Next n%
For k% = 1 + last_conditions.last_cond(0).dpoint_pair_no To last_conditions.last_cond(1).dpoint_pair_no
 i% = Ddpoint_pair(k%).data(0).record.data1.index.i(0)
 For j% = 0 To 5
  If Ddpoint_pair(i%).data(0).data0.line_no(j%) = l1% Or _
      (l2% > 0 And Ddpoint_pair(i%).data(0).data0.line_no(j%) = l2%) Then
  Call line_number0(Ddpoint_pair(i%).data(0).data0.poi(2 * j%), Ddpoint_pair(i%).data(0).data0.poi(2 * j% + 1), _
        Ddpoint_pair(i%).data(0).data0.n(2 * j%), Ddpoint_pair(i%).data(0).data0.n(2 * j% + 1))
  End If
 Next j%
Next k%
Exit Sub
arrange_data_for_new_point_error:
End Sub
Public Function set_add_aid_point_for_eline(ByVal p1%, ByVal p2%, _
     ByVal p3%, ByVal p4%, ByVal l%, ByVal te As Byte) As Boolean
Dim n%, i%
Dim n_(1) As Integer
Dim el As add_point_for_eline_type 'paral_type
Dim temp_record As record_type
If p1% < p2% Then
el.poi(0) = p1%
el.poi(1) = p2%
Else
el.poi(1) = p1%
el.poi(0) = p2%
End If
el.poi(2) = p3%
el.line_no = l%
el.te = te
If search_for_add_aid_point_for_eline(el, n%) Then
   set_add_aid_point_for_eline = False
 If last_conditions.last_cond(1).new_midpoint_no > 0 Then
   set_add_aid_point_for_eline = True
 End If
Else
last_add_aid_point_for_eline = last_add_aid_point_for_eline + 1
ReDim Preserve add_aid_point_for_eline_(last_add_aid_point_for_eline) _
               As add_point_for_eline_type
add_aid_point_for_eline_(last_add_aid_point_for_eline) = el
For i% = last_add_aid_point_for_eline To n% + 2 Step -1
add_aid_point_for_eline_(i%).index = _
  add_aid_point_for_eline_(i% - 1).index
Next i%
add_aid_point_for_eline_(n% + 1).index = last_add_aid_point_for_eline
set_add_aid_point_for_eline = True
End If
End Function
Public Function set_add_aid_point_for_mid_point(ByVal p1%, _
   ByVal p2%, ByVal p3%) As Boolean
Dim n%, i%, l%
Dim n_(1) As Integer
Dim md  As add_point_for_mid_point_type 'paral_type
If p1% = 0 Then
 l% = line_number0(p2%, p3%, n_(0), n_(1))
 If n_(0) > n_(1) Then
  Call exchange_two_integer(p1%, p3%)
 End If
ElseIf p2% = 0 Then
 l% = line_number0(p1%, p3%, n_(0), n_(1))
 If n_(0) > n_(1) Then
  Call exchange_two_integer(p1%, p3%)
 End If
ElseIf p3% = 0 Then
 l% = line_number0(p1%, p2%, n_(0), n_(1))
 If n_(0) > n_(1) Then
  Call exchange_two_integer(p1%, p3%)
 End If
End If
md.poi(0) = p1%
md.poi(1) = p2%
md.poi(2) = p3%
md.line_no = l%
If search_for_add_aid_point_for_mid_point(md, n%) Then
 If last_conditions.last_cond(1).new_midpoint_no > 0 Then
   set_add_aid_point_for_mid_point = True
 Else
   set_add_aid_point_for_mid_point = False
 End If
Else
 For i% = 1 To last_conditions.last_cond(1).mid_point_no
  If Dmid_point(i%).data(0).data0.poi(0) = md.poi(0) And Dmid_point(i%).data(0).data0.poi(1) = md.poi(1) And _
    Dmid_point(i%).data(0).data0.poi(2) < last_conditions.last_cond(1).point_no Then
   set_add_aid_point_for_mid_point = False
    Exit Function
  ElseIf Dmid_point(i%).data(0).data0.poi(0) = md.poi(0) And Dmid_point(i%).data(0).data0.poi(2) = md.poi(2) And _
     Dmid_point(i%).data(0).data0.poi(1) < last_conditions.last_cond(1).point_no Then
   set_add_aid_point_for_mid_point = False
    Exit Function
  ElseIf Dmid_point(i%).data(0).data0.poi(1) = md.poi(1) And Dmid_point(i%).data(0).data0.poi(2) = md.poi(2) And _
     Dmid_point(i%).data(0).data0.poi(0) < last_conditions.last_cond(1).point_no Then
   set_add_aid_point_for_mid_point = False
    Exit Function
  End If
 Next i%
last_add_aid_point_for_mid_point = last_add_aid_point_for_mid_point + 1
ReDim Preserve add_aid_point_for_mid_point_(last_add_aid_point_for_mid_point) _
           As add_point_for_mid_point_type
add_aid_point_for_mid_point_(last_add_aid_point_for_mid_point) = md
For i% = last_add_aid_point_for_mid_point To n% + 2 Step -1
add_aid_point_for_mid_point_(i%).index = _
  add_aid_point_for_mid_point_(i% - 1).index
Next i%
add_aid_point_for_mid_point_(n% + 1).index = _
  last_add_aid_point_for_mid_point
set_add_aid_point_for_mid_point = True
End If
End Function
Public Function set_relation_for_triangle(ByVal p1%, ByVal p2%, ByVal p3%, _
             re As total_record_type, ByVal relation_value$) As Byte
Dim A%
Dim ty As Integer
Dim tn(1) As Integer
Dim dn(1) As Integer
Dim ty_(1) As Byte
'if is_line_value(p1%,p2%
A% = triangle_number(p1%, p2%, p3%, 0, 0, 0, 0, 0, 0, ty)
If A% > 0 Then
ty_(0) = is_line_value(p1%, p2%, 0, 0, 0, "", dn(0), 0, 0, 0, 0, line_value_data0)
ty_(1) = is_line_value(p2%, p3%, 0, 0, 0, "", dn(1), 0, 0, 0, 0, line_value_data0)
tn(0) = position_from_direction(ty, 2)
tn(1) = position_from_direction(ty, 0)
If triangle(A%).data(0).line_value(tn(0)) = 0 And ty_(0) = 1 Then
triangle(A%).data(0).line_value(tn(0)) = dn(0)
   set_relation_for_triangle = _
   solve_triangle(A%, triangle(A%).data(0), -1, tn(0), -1, 1, -1, _
     -1, -1, -1, -1, -1, 1, 0, False)
  If set_relation_for_triangle > 1 Then
   Exit Function
  End If
End If
If triangle(A%).data(0).line_value(tn(1)) = 0 And ty_(1) = 1 Then
triangle(A%).data(0).line_value(tn(1)) = dn(1)
  set_relation_for_triangle = _
   solve_triangle(A%, triangle(A%).data(0), -1, tn(1), -1, 1, -1, _
     -1, -1, -1, -1, -1, 1, 0, False)
  If set_relation_for_triangle > 1 Then
   Exit Function
  End If
End If
If ty = 1 Or ty = -3 Then
 If triangle(A%).data(0).relation_no(1, 0).ty = 0 Then
    triangle(A%).data(0).relation_no(1, 0) = re.record_data.data0.condition_data.condition(1)
  If re.record_data.data0.condition_data.condition_no > 1 Then
    triangle(A%).data(0).relation_no(1, 1) = re.record_data.data0.condition_data.condition(2)
  End If
   If ty < 0 Then
   triangle(A%).data(0).re_value(1) = relation_value$
   Else
   triangle(A%).data(0).re_value(1) = divide_string("1", relation_value$, True, False)
   End If
    triangle_data0 = triangle(A%).data(0)
  set_relation_for_triangle = _
   solve_triangle(A%, triangle_data0, -1, -1, -1, 1, -1, _
     -1, -1, -1, -1, -1, 1, 0, False)
 If set_relation_for_triangle > 1 Then
  Exit Function
 End If
 End If
ElseIf ty = 2 Or ty = -1 Then
 If triangle(A%).data(0).relation_no(2, 0).ty = 0 Then
     triangle(A%).data(0).relation_no(2, 0) = re.record_data.data0.condition_data.condition(1)
  If re.record_data.data0.condition_data.condition_no > 1 Then
    triangle(A%).data(0).relation_no(2, 1) = re.record_data.data0.condition_data.condition(2)
  End If
   If ty < 0 Then
   triangle(A%).data(0).re_value(2) = relation_value$
   Else
   triangle(A%).data(0).re_value(2) = divide_string("1", relation_value$, True, False)
   End If
    triangle_data0 = triangle(A%).data(0)
  set_relation_for_triangle = _
   solve_triangle(A%, triangle_data0, -1, -1, -1, 2, -1, -1, _
     -1, -1, -1, -1, 1, 0, False)
   If set_relation_for_triangle > 1 Then
    Exit Function
   End If
  End If
ElseIf ty = 3 Or ty = -2 Then
 If triangle(A%).data(0).relation_no(0, 0).ty = 0 Then
    triangle(A%).data(0).relation_no(0, 0) = re.record_data.data0.condition_data.condition(1)
  If re.record_data.data0.condition_data.condition_no > 1 Then
    triangle(A%).data(0).relation_no(0, 1) = re.record_data.data0.condition_data.condition(2)
  End If
   If ty < 0 Then
   triangle(A%).data(0).re_value(0) = relation_value$
   Else
   triangle(A%).data(0).re_value(0) = divide_string("1", relation_value$, True, False)
   End If
    triangle_data0 = triangle(A%).data(0)
  set_relation_for_triangle = _
   solve_triangle(A%, triangle_data0, -1, -1, -1, 0, -1, _
      -1, -1, -1, -1, -1, 1, 0, False)
  If set_relation_for_triangle > 1 Then
   Exit Function
  End If
 End If
End If
End If
End Function

Public Function set_add_aid_point_for_two_circle(ByVal c1%, ByVal c2%, n%) As Boolean
Dim i%
Dim t_c As add_point_for_two_circle_type
If c1% < c2% Then
t_c.circ(0) = c1%
t_c.circ(1) = c2%
Else
t_c.circ(1) = c1%
t_c.circ(0) = c2%
End If
If search_for_add_aid_point_for_two_circle(t_c, n%) Then
 If last_conditions.last_cond(1).new_midpoint_no > 0 Then
  set_add_aid_point_for_two_circle = True
 End If
 Exit Function
Else
last_add_aid_point_for_two_circle = last_add_aid_point_for_two_circle + 1
ReDim Preserve add_aid_point_for_two_circle_(last_add_aid_point_for_two_circle) _
      As add_point_for_two_circle_type
add_aid_point_for_two_circle_(last_add_aid_point_for_two_circle) = t_c
For i% = last_add_aid_point_for_two_circle To n% + 2 Step -1
add_aid_point_for_two_circle_(i%).index = add_aid_point_for_two_circle_(i% - 1).index
Next i%
add_aid_point_for_two_circle_(n% + 1).index = last_add_aid_point_for_two_circle
n% = last_add_aid_point_for_two_circle
set_add_aid_point_for_two_circle = True
End If

End Function
Public Function set_add_aid_point_for_line_circle(ByVal p%, ByVal l%, _
                               ByVal paral_or_verti_ As Byte, ByVal c%, n%) As Boolean
Dim i%
Dim t_l_c As add_point_for_line_circle_type
t_l_c.circ = c%
t_l_c.line_no = l%
t_l_c.paral_or_verti = paral_or_verti_
t_l_c.poi = p%
If search_for_add_aid_point_for_line_circle(t_l_c, n%) Then
 If last_conditions.last_cond(1).new_midpoint_no > 0 Then
  set_add_aid_point_for_line_circle = True
 End If
 Exit Function
Else
last_add_aid_point_for_line_circle = last_add_aid_point_for_line_circle + 1
ReDim Preserve add_aid_point_for_line_circle_(last_add_aid_point_for_line_circle) _
      As add_point_for_line_circle_type
add_aid_point_for_line_circle_(last_add_aid_point_for_line_circle) = t_l_c
For i% = last_add_aid_point_for_line_circle To n% + 2 Step -1
add_aid_point_for_line_circle_(i%).index = add_aid_point_for_line_circle_(i% - 1).index
Next i%
add_aid_point_for_line_circle_(n% + 1).index = last_add_aid_point_for_line_circle
n% = last_add_aid_point_for_line_circle
set_add_aid_point_for_line_circle = True
End If
End Function
Public Function set_eangle_line(ByVal A%, _
      ByVal l%, re As total_record_type, ty As Byte, no_reduce As Byte) As Byte
'角平分线定理
Dim i%, j%, tl%, tp%, tn%, tn1%, l_%, A_%
Dim n_(3) As Integer
Dim dn(2) As Integer
Dim con_ty As Byte
Dim el As eline_data0_type
'Dim angle_data(1) As angle_data_type
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim triA As temp_triangle_type
Dim c_data0 As condition_data_type
temp_record = re
If run_type < 5 Then
  Call record_no(re.record_data.data0.condition_data.condition(1).ty, _
         re.record_data.data0.condition_data.condition(1).no, temp_record1, False, 0, 0)
  If temp_record1.record_data.data0.condition_data.condition_no = 0 Then '为已知条件添加辅助点
   For i% = 1 To C_display_picture.m_circle.Count
    If m_Circ(i%).data(0).data0.center > 0 Then
     If is_point_in_line3(m_Circ(i%).data(0).data0.center, m_lin(l%).data(0).data0, 0) Then
      set_eangle_line = add_aid_point_for_verti0(m_Circ(i%).data(0).data0.center, angle(A%).data(0).line_no(0), _
         angle(A%).data(0).line_no(0), 0, c_data0, 2)
        If set_eangle_line > 1 Then
          Exit Function
        End If
      set_eangle_line = add_aid_point_for_verti0(m_Circ(i%).data(0).data0.center, angle(A%).data(0).line_no(1), _
         angle(A%).data(0).line_no(1), 0, c_data0, 2)
        If set_eangle_line > 1 Then
         Exit Function
        End If
 End If
End If
Next i%
End If
End If
'angle_data(0) = angle(A1%).data(0)
'angle_data(1) = angle(A2%).data(0)
'angle_data(1) = angle(A3%).data(0)
 triA.last_T = 0
 Call set_temp_triangle_from_angle(A%, 0, triA, False)
 For j% = 1 To triA.last_T
tl% = line_number0(triA.data(j%).poi(1), triA.data(j%).poi(2), n_(0), n_(1))
 triangle(triA.data(j%).no).data(0).eangle_line(position_from_direction(triA.data(j%).direction, 0)) = l%
  triangle(triA.data(j%).no).data(0).eangle_no(position_from_direction(triA.data(j%).direction, 0), 0) = _
          re.record_data.data0.condition_data.condition(1)
  triangle(triA.data(j%).no).data(0).eangle_no(position_from_direction(triA.data(j%).direction, 0), 1) = _
          re.record_data.data0.condition_data.condition(2)
   dn(0) = 0
   If is_equal_dline(triA.data(j%).poi(0), triA.data(j%).poi(1), _
        triA.data(j%).poi(0), triA.data(j%).poi(2), 0, 0, 0, 0, 0, _
         0, dn(0), -1000, 0, 0, 0, el, dn(1), dn(2), con_ty, "", record_0.data0.condition_data) Then
    temp_record = re
    temp_record.record_data.data0.theorem_no = 37 '等腰三角形的顶角平分线垂直底边
    Call add_conditions_to_record(con_ty, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
    set_eangle_line = set_dverti(tl%, l%, temp_record, 0, 0, False)
    If set_eangle_line > 1 Then
       Exit Function
    End If
   End If
   tp% = is_line_line_intersect(l%, tl, n_(2), n_(3), False)
   If tp% > 0 Then
    temp_record = re
     temp_record.record_data.data0.theorem_no = 113
      set_eangle_line = _
       set_dpoint_pair(triA.data(j%).poi(0), triA.data(j%).poi(1), _
        triA.data(j%).poi(0), triA.data(j%).poi(2), tp%, _
         triA.data(j%).poi(1), tp%, triA.data(j%).poi(2), _
          0, 0, 0, 0, n_(3), n_(0), n_(3), n_(1), _
             0, 0, tl%, tl%, 0, temp_record, 0, 0, 0, 0, no_reduce, False)
   If set_eangle_line > 1 Then
    Exit Function
   End If
  End If
If ty = 1 Then
For i% = 1 To m_lin(l%).data(0).in_verti(0).line_no
 l_% = m_lin(l%).data(0).in_verti(i%).line_no
  temp_record = re
   temp_record.record_data.data0.theorem_no = 113
    Call add_conditions_to_record(verti_, m_lin(l%).data(0).in_verti(i%).verti_no, 0, 0, _
            temp_record.record_data.data0.condition_data)
 If Dverti(m_lin(l%).data(0).in_verti(i%).verti_no).data(0).inter_poi = triA.data(j%).poi(0) Then
 tp% = is_line_line_intersect(l_%, tl%, n_(2), n_(3), False)
 If tp% > 0 Then
   set_eangle_line = _
   set_dpoint_pair(triA.data(j%).poi(0), triA.data(j%).poi(1), _
        triA.data(j%).poi(0), triA.data(j%).poi(2), tp%, _
         triA.data(j%).poi(1), tp%, triA.data(j%).poi(2), _
          0, 0, 0, 0, n_(3), n_(0), n_(3), n_(1), _
           0, 0, tl%, tl%, 0, temp_record, 0, 0, 0, 0, no_reduce, False)
  If set_eangle_line > 1 Then
   Exit Function
  End If
 End If
 End If
Next i%
End If
Next j%
'*******
' 外角平分线
 triA.last_T = 0
 A_% = Abs(angle_number(m_lin(angle(A%).data(0).line_no(0)).data(0).data0.poi((angle(A%).data(0).te(0) + 1) Mod 2), _
          angle(A%).data(0).poi(1), _
           m_lin(angle(A%).data(0).line_no(1)).data(0).data0.poi(angle(A%).data(0).te(1)), 0, 0))
If A_% > 0 Then
Call set_temp_triangle_from_angle(A_%, 0, triA, False)
 For j% = 1 To triA.last_T
tl% = line_number0(triA.data(j%).poi(1), triA.data(j%).poi(2), n_(0), n_(1))
 tp% = is_line_line_intersect(l%, tl, n_(2), n_(3), False)
 If tp% > 0 Then
  temp_record = re
   temp_record.record_data.data0.theorem_no = 113
   set_eangle_line = _
   set_dpoint_pair(triA.data(j%).poi(0), triA.data(j%).poi(1), _
        triA.data(j%).poi(0), triA.data(j%).poi(2), tp%, _
         triA.data(j%).poi(1), tp%, triA.data(j%).poi(2), _
          0, 0, 0, 0, n_(3), n_(0), n_(3), n_(1), _
           0, 0, tl%, tl%, 0, temp_record, 0, 0, 0, 0, no_reduce, False)
If set_eangle_line > 1 Then
 Exit Function
End If
  End If
 Next j%
 End If
'*******
 triA.last_T = 0
 A_% = Abs(angle_number(m_lin(angle(A%).data(0).line_no(0)).data(0).data0.poi(angle(A%).data(0).te(0)), _
     angle(A%).data(0).poi(1), _
        m_lin(angle(A%).data(0).line_no(1)).data(0).data0.poi((angle(A%).data(0).te(1) + 1) Mod 2), 0, 0))
 If A_% > 0 Then
 Call set_temp_triangle_from_angle(A_%, 0, triA, False)
 For j% = 1 To triA.last_T
  tl% = line_number0(triA.data(j%).poi(1), triA.data(j%).poi(2), n_(0), n_(1))
   tp% = is_line_line_intersect(l%, tl%, n_(2), n_(3), False)
 If tp% > 0 Then
  temp_record = re
   temp_record.record_data.data0.theorem_no = 113
    set_eangle_line = _
   set_dpoint_pair(triA.data(j%).poi(0), triA.data(j%).poi(1), _
        triA.data(j%).poi(0), triA.data(j%).poi(2), tp%, _
         triA.data(j%).poi(1), tp%, triA.data(j%).poi(2), _
          0, 0, 0, 0, n_(3), n_(0), n_(3), n_(1), 0, 0, _
            tl%, tl%, 0, temp_record, 0, 0, 0, 0, no_reduce, False)
 If set_eangle_line > 1 Then
 Exit Function
End If
  End If
 Next j%
 End If
'*******************************************************************
End Function

Public Function set_property_of_mid_point(ByVal p1%, ByVal p2%, ByVal p3%, _
           ByVal n1%, ByVal n2%, ByVal n3%, ByVal l%, re As total_record_type, _
            ty_ As Byte, no_reduce As Byte) As Byte
Dim i%, no%, t_n%, tl%, k%, tn%
Dim tA(1) As Integer
Dim md As mid_point_data0_type
Dim temp_record As total_record_type
Dim t_A As temp_triangle_type
Dim re1 As total_record_type
Dim tp(5) As Integer
Dim tn_(7) As Integer
Dim it(1) As Integer
Dim pA(2) As String
Dim tl_(1) As Integer
Dim sig As String
Dim mid_point_data0 As mid_point_data0_type
'**************
     set_property_of_mid_point = set_relation_on_line(p1%, p2%, p3%, l%, "1", re)
       If set_property_of_mid_point > 1 Then
          Exit Function
       End If
If ty_ = 0 Then
 For i% = 1 + last_conditions.last_cond(0).eline_no To last_conditions.last_cond(1).eline_no
  tn% = Deline(i%).data(0).record.data1.index.i(0)
   If Deline(tn%).data(0).data0.line_no(0) = Deline(tn%).data(0).data0.line_no(1) Then
    If Deline(tn%).data(0).data0.poi(0) = p1% And Deline(tn%).data(0).data0.poi(3) = p3% Then
     set_property_of_mid_point = set_property_of_mid_point(Deline(tn%).data(0).data0.poi(1), _
        p2%, Deline(tn%).data(0).data0.poi(2), Deline(tn%).data(0).data0.n(1), _
         n2%, Deline(tn%).data(0).data0.n(2), l%, re, 1, 0)
     If set_property_of_mid_point > 1 Then
       Exit Function
     End If
    ElseIf Deline(tn%).data(0).data0.poi(1) = p1% And Deline(tn%).data(0).data0.poi(2) = p3% Then
     set_property_of_mid_point = set_property_of_mid_point(Deline(tn%).data(0).data0.poi(0), _
        p2%, Deline(tn%).data(0).data0.poi(3), Deline(tn%).data(0).data0.n(0), _
         n2%, Deline(tn%).data(0).data0.n(3), l%, re, 1, 0)
     If set_property_of_mid_point > 1 Then
       Exit Function
     End If
    End If
   End If
 Next i%
End If
'**************
If re.record_data.data0.condition_data.condition_no = 1 Then
  no% = re.record_data.data0.condition_data.condition(1).no
   md = Dmid_point(re.record_data.data0.condition_data.condition(1).no).data(0).data0
    re1.record_data = re.record_data
Else
  temp_record = re
   no% = 0
    Call set_mid_point(p1%, p2%, p3%, n1%, n2%, n3%, l%, 1, _
     temp_record, no%, 0, 0, 0, 0)
    md = Dmid_point(no%).data(0).data0
    re1.record_data.data0.condition_data.condition_no = 1
     re1.record_data.data0.condition_data.condition(1).ty = midpoint_
      re1.record_data.data0.condition_data.condition(1).no = no%
End If
   'Call set_level_(Dmid_point(no%).record_.no_reduce, 1)
    temp_record = re
set_property_of_mid_point = add_point_to_circle_for_prove(md.poi(0), _
   md.poi(1), md.poi(2), temp_record, _
       no_reduce)
If set_property_of_mid_point > 1 Then
 Exit Function
End If
'********
Call set_temp_triangle_from_lin(md.poi(0), _
         md.poi(2), 0, t_A, False)
For i% = 1 To t_A.last_T
  t_n% = position_from_direction(t_A.data(i%).direction, 0)
   triangle(t_A.data(i%).no).data(0).midpoint_no(t_n%) = no%
 triangle_data0 = triangle(t_A.data(i%).no).data(0)
 set_property_of_mid_point = solve_triangle(t_A.data(i%).no, _
    triangle_data0, -1, -1, t_n%, -1, -1, -1, -1, -1, _
      -1, -1, 1, no_reduce, False)
  If set_property_of_mid_point > 1 Then
   Exit Function
  End If
 Next i%
'***********************************************
'三角形斜边上的中线
'中位线
For k% = 1 + last_conditions.last_cond(0).dpoint_pair_no To last_conditions.last_cond(1).dpoint_pair_no
 i% = Ddpoint_pair(k%).data(0).record.data1.index.i(0)
 If Ddpoint_pair(i%).data(0).data0.con_line_type(0) = 3 Then
  If Ddpoint_pair(i%).data(0).data0.con_line_type(1) = 3 Or _
       Ddpoint_pair(i%).data(0).data0.con_line_type(1) = 5 Then
           temp_record.record_data.data0.condition_data.condition_no = 3
           temp_record.record_data.data0.condition_data.condition(1).ty = dpoint_pair_
           temp_record.record_data.data0.condition_data.condition(1).no = i%
     If Ddpoint_pair(i%).data(0).data0.poi(8) = md.poi(0) And _
         Ddpoint_pair(i%).data(0).data0.poi(9) = md.poi(2) And _
          Ddpoint_pair(i%).data(0).data0.poi(1) <> md.poi(1) Then
         If get_midpoint(Ddpoint_pair(i%).data(0).data0.poi(10), 0, _
              Ddpoint_pair(i%).data(0).data0.poi(11), 0, 0, 0, 0, tn%) Then
           temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
            temp_record.record_data.data0.condition_data.condition(2).no = no%
             temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
              temp_record.record_data.data0.condition_data.condition(3).no = tn%
               temp_record.record_data.data0.theorem_no = -3
          If Ddpoint_pair(i%).data(0).data0.con_line_type(1) = 3 Then
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               md.poi(1), md.poi(0), md.poi(1), Ddpoint_pair(i%).data(0).data0.poi(5), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(0), _
                Dmid_point(tn%).data(0).data0.poi(1), Ddpoint_pair(i%).data(0).data0.n(1), md.n(1), _
                 md.n(0), md.n(1), Ddpoint_pair(i%).data(0).data0.n(5), Dmid_point(tn%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(0), Dmid_point(tn%).data(0).data0.n(1), md.line_no, md.line_no, _
                   Dmid_point(tn%).data(0).data0.line_no, Dmid_point(tn%).data(0).data0.line_no, 0, temp_record, _
                    False, 0, 0, 0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               md.poi(1), md.poi(1), md.poi(2), Ddpoint_pair(i%).data(0).data0.poi(5), _
                Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(0), _
                 Dmid_point(tn%).data(0).data0.poi(1), Ddpoint_pair(i%).data(0).data0.n(1), _
                  md.n(1), md.n(1), md.n(2), Ddpoint_pair(i%).data(0).data0.n(5), _
                   Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(0), _
                    Dmid_point(tn%).data(0).data0.n(1), md.line_no, md.line_no, Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, 0, temp_record, False, 0, 0, _
                      0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               md.poi(1), md.poi(0), md.poi(1), Ddpoint_pair(i%).data(0).data0.poi(5), _
                Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(1), _
                 Dmid_point(tn%).data(0).data0.poi(2), Ddpoint_pair(i%).data(0).data0.n(1), _
                  md.n(1), md.n(0), md.n(1), Ddpoint_pair(i%).data(0).data0.n(5), _
                   Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(1), _
                   Dmid_point(tn%).data(0).data0.n(2), md.line_no, md.line_no, Dmid_point(tn%).data(0).data0.line_no, _
                    Dmid_point(tn%).data(0).data0.line_no, 0, temp_record, False, 0, 0, _
                     0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               md.poi(1), md.poi(1), md.poi(2), Ddpoint_pair(i%).data(0).data0.poi(5), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(1), _
                Dmid_point(tn%).data(0).data0.poi(2), Ddpoint_pair(i%).data(0).data0.n(1), _
                 md.n(1), md.n(1), md.n(2), Ddpoint_pair(i%).data(0).data0.n(5), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(1), _
                   Dmid_point(tn%).data(0).data0.n(2), md.line_no, md.line_no, _
                    Dmid_point(tn%).data(0).data0.line_no, Dmid_point(tn%).data(0).data0.line_no, 0, temp_record, False, 0, 0, _
                     0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
          ElseIf Ddpoint_pair(i%).data(0).data0.con_line_type(1) = 5 Then
               set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               md.poi(1), md.poi(1), md.poi(1), Ddpoint_pair(i%).data(0).data0.poi(4), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(0), _
                Dmid_point(tn%).data(0).data0.poi(1), Ddpoint_pair(i%).data(0).data0.n(1), _
                 md.n(1), md.n(0), md.n(1), Ddpoint_pair(i%).data(0).data0.n(4), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(0), _
                   Dmid_point(tn%).data(0).data0.n(1), md.line_no, md.line_no, Dmid_point(tn%).data(0).data0.line_no, _
                    Dmid_point(tn%).data(0).data0.line_no, 0, temp_record, False, 0, 0, _
                     0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               md.poi(1), md.poi(1), md.poi(2), Ddpoint_pair(i%).data(0).data0.poi(4), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(0), _
                Dmid_point(tn%).data(0).data0.poi(1), Ddpoint_pair(i%).data(0).data0.n(1), _
                 md.n(1), md.n(1), md.n(2), Ddpoint_pair(i%).data(0).data0.n(4), Dmid_point(tn%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(0), Dmid_point(tn%).data(0).data0.n(1), md.line_no, md.line_no, _
                   Dmid_point(tn%).data(0).data0.line_no, Dmid_point(tn%).data(0).data0.line_no, 0, temp_record, False, 0, 0, _
                    0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               md.poi(1), md.poi(0), md.poi(1), Ddpoint_pair(i%).data(0).data0.poi(4), _
                Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(1), _
                 Dmid_point(tn%).data(0).data0.poi(2), Ddpoint_pair(i%).data(0).data0.n(1), _
                  md.n(1), md.n(0), md.n(1), Ddpoint_pair(i%).data(0).data0.n(4), _
                   Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(1), _
                    Dmid_point(tn%).data(0).data0.n(2), md.line_no, md.line_no, Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, 0, temp_record, False, 0, 0, 0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               md.poi(1), md.poi(1), md.poi(2), Ddpoint_pair(i%).data(0).data0.poi(4), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(1), _
                Dmid_point(tn%).data(0).data0.poi(2), Ddpoint_pair(i%).data(0).data0.n(1), md.n(1), md.n(1), _
                 md.n(2), Ddpoint_pair(i%).data(0).data0.n(4), Dmid_point(tn%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(2), md.line_no, md.line_no, _
                   Dmid_point(tn%).data(0).data0.line_no, Dmid_point(tn%).data(0).data0.line_no, 0, temp_record, False, 0, 0, _
                    0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
          End If
        End If
      End If
      End If
    ElseIf is_same_two_point(Ddpoint_pair(i%).data(0).data0.poi(10), _
       Ddpoint_pair(i%).data(0).data0.poi(11), md.poi(0), _
        md.poi(2)) Then
         If get_midpoint(Ddpoint_pair(i%).data(0).data0.poi(8), 0, _
              Ddpoint_pair(i%).data(0).data0.poi(11), 0, 0, 0, 0, tn%) Then
           If Ddpoint_pair(i%).data(0).data0.poi(1) <> _
               Dmid_point(tn%).data(0).data0.poi(1) Then
           temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
           temp_record.record_data.data0.condition_data.condition(2).no = no%
           temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
           temp_record.record_data.data0.condition_data.condition(3).no = tn%
           temp_record.record_data.data0.theorem_no = -3
          If Ddpoint_pair(i%).data(0).data0.con_line_type(1) = 3 Then
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(0), _
                Dmid_point(tn%).data(0).data0.poi(1), Ddpoint_pair(i%).data(0).data0.poi(5), _
                 md.poi(1), md.poi(0), md.poi(1), Ddpoint_pair(i%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(0), _
                   Dmid_point(tn%).data(0).data0.n(1), Ddpoint_pair(i%).data(0).data0.n(5), _
                    md.n(1), md.n(0), md.n(1), Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, md.line_no, md.line_no, 0, temp_record, False, 0, 0, _
                      0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(0), _
                Dmid_point(tn%).data(0).data0.poi(1), Ddpoint_pair(i%).data(0).data0.poi(5), _
                 md.poi(1), md.poi(1), md.poi(2), Ddpoint_pair(i%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(0), _
                   Dmid_point(tn%).data(0).data0.n(1), Ddpoint_pair(i%).data(0).data0.n(5), _
                    md.n(1), md.n(1), md.n(2), Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, md.line_no, md.line_no, 0, temp_record, False, 0, 0, _
                      0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(1), _
                Dmid_point(tn%).data(0).data0.poi(2), Ddpoint_pair(i%).data(0).data0.poi(5), _
                 md.poi(1), md.poi(0), md.poi(1), Ddpoint_pair(i%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(1), _
                   Dmid_point(tn%).data(0).data0.n(2), Ddpoint_pair(i%).data(0).data0.n(5), _
                    md.n(1), md.n(0), md.n(1), Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, md.line_no, md.line_no, 0, temp_record, False, 0, 0, _
                      0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
            set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(1), _
                Dmid_point(tn%).data(0).data0.poi(2), Ddpoint_pair(i%).data(0).data0.poi(5), _
                 md.poi(1), md.poi(1), md.poi(2), Ddpoint_pair(i%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(1), _
                   Dmid_point(tn%).data(0).data0.n(2), Ddpoint_pair(i%).data(0).data0.n(5), _
                    md.n(1), md.n(1), md.n(2), Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, md.line_no, md.line_no, 0, temp_record, False, 0, 0, _
                      0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
          ElseIf Ddpoint_pair(i%).data(0).data0.con_line_type(1) = 5 Then
           temp_record.record_data.data0.condition_data.condition(2).ty = midpoint_
           temp_record.record_data.data0.condition_data.condition(2).no = no%
          If Ddpoint_pair(i%).data(0).data0.con_line_type(1) = 3 Then
           temp_record.record_data.data0.condition_data.condition(3).ty = midpoint_
           temp_record.record_data.data0.condition_data.condition(3).no = tn%
           temp_record.record_data.data0.theorem_no = -3
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(0), _
                Dmid_point(tn%).data(0).data0.poi(1), Ddpoint_pair(i%).data(0).data0.poi(4), _
                 md.poi(1), md.poi(0), md.poi(1), Ddpoint_pair(i%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(0), _
                   Dmid_point(tn%).data(0).data0.n(1), Ddpoint_pair(i%).data(0).data0.n(4), _
                    md.n(1), md.n(0), md.n(1), Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, md.line_no, md.line_no, 0, temp_record, False, 0, 0, _
                      0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(1), _
                Dmid_point(tn%).data(0).data0.poi(2), Ddpoint_pair(i%).data(0).data0.poi(4), _
                 md.poi(1), md.poi(0), md.poi(1), Ddpoint_pair(i%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(1), _
                   Dmid_point(tn%).data(0).data0.n(2), Ddpoint_pair(i%).data(0).data0.n(4), _
                    md.n(1), md.n(0), md.n(1), Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, md.line_no, md.line_no, 0, temp_record, False, 0, 0, _
                      0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(0), _
                Dmid_point(tn%).data(0).data0.poi(1), Ddpoint_pair(i%).data(0).data0.poi(4), _
                 md.poi(1), md.poi(1), md.poi(2), Ddpoint_pair(i%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(0), _
                   Dmid_point(tn%).data(0).data0.n(1), Ddpoint_pair(i%).data(0).data0.n(4), _
                    md.n(1), md.n(1), md.n(2), Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, md.line_no, md.line_no, 0, temp_record, False, 0, 0, _
                      0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
           set_property_of_mid_point = set_dpoint_pair(Ddpoint_pair(i%).data(0).data0.poi(1), _
               Dmid_point(tn%).data(0).data0.poi(1), Dmid_point(tn%).data(0).data0.poi(1), _
                Dmid_point(tn%).data(0).data0.poi(2), Ddpoint_pair(i%).data(0).data0.poi(4), _
                 md.poi(1), md.poi(1), md.poi(2), Ddpoint_pair(i%).data(0).data0.n(1), _
                  Dmid_point(tn%).data(0).data0.n(1), Dmid_point(tn%).data(0).data0.n(1), _
                   Dmid_point(tn%).data(0).data0.n(2), Ddpoint_pair(i%).data(0).data0.n(4), _
                    md.n(1), md.n(1), md.n(2), Dmid_point(tn%).data(0).data0.line_no, _
                     Dmid_point(tn%).data(0).data0.line_no, md.line_no, md.line_no, 0, temp_record, False, 0, 0, _
                      0, no_reduce, False)
            If set_property_of_mid_point > 1 Then
             Exit Function
            End If
          End If
        End If
      End If
    End If
End If
Next k%
set_property_of_mid_point = set_total_equal_triangle_from_eline(p1%, p2%, p2%, p3%, re, 0, 0)
If set_property_of_mid_point > 1 Then
 Exit Function
End If
set_property_of_mid_point = set_area_relation_from_relation(p1%, p2%, p2%, p3%, l%, l%, _
                             "1", re)
If set_property_of_mid_point > 1 Then
 Exit Function
End If
set_property_of_mid_point = combine_mid_point_with_general_string(p1%, p2%, p3%, _
   0, re)
End Function

Public Function last_number_for_3number(ByVal n1%, ByVal n2%) As Integer
If (n1% = 0 And n2% = 1) Or (n1% = 1 And n2% = 0) Then
 last_number_for_3number = 2
ElseIf (n1% = 0 And n2% = 2) Or (n1% = 2 And n2% = 0) Then
 last_number_for_3number = 1
ElseIf (n1% = 1 And n2% = 2) Or (n1% = 2 And n2% = 1) Then
 last_number_for_3number = 0
End If
End Function
Public Function new_midpoint_for_triangle(ByVal no%, triA As triangle_data0_type, _
           ByVal new_m%, no_reduce As Byte) As Byte
Dim n(2) As Integer
Dim A(1) As Integer
Dim ts As String
Dim tn_(2) As Integer
Dim triangle_data As triangle_data0_type
Dim temp_record As record_type
triangle_data = triA
  tn_(0) = new_m%
   tn_(1) = (tn_(0) + 1) Mod 3
    tn_(2) = (tn_(0) + 2) Mod 3
  triangle_data.mid_point_line(tn_(0)) = _
    line_number0(triangle_data.poi(tn_(0)), _
      Dmid_point(triangle_data.midpoint_no(tn_(0))).data(0).data0.poi(1), 0, 0)
  triangle(no%).data(0).mid_point_line(tn_(0)) = _
            triangle_data.mid_point_line(tn_(0))
  new_midpoint_for_triangle = th_39(no%, triA, tn_(0), _
        tn_(1), tn_(2), no_reduce)
  If new_midpoint_for_triangle > 1 Then
   Exit Function
  End If
   new_midpoint_for_triangle = th_70(no%, triA, tn_(0), no_reduce)
    If new_midpoint_for_triangle > 1 Then
     Exit Function
    End If
   new_midpoint_for_triangle = th_160(no%, triA, tn_(0), no_reduce)
         If new_midpoint_for_triangle > 1 Then
          Exit Function
         End If
   new_midpoint_for_triangle = th_of_mid_point_for_triangle( _
      no%, triA, tn_(0), tn_(1), no_reduce)
         If new_midpoint_for_triangle > 1 Then
          Exit Function
         End If
   new_midpoint_for_triangle = th_of_mid_point_for_triangle( _
      no%, triA, tn_(0), tn_(2), no_reduce)
End Function
Public Function new_verti_for_triangle(ByVal no%, _
         triA_ As triangle_data0_type, ByVal new_verti_no%, _
           no_reduce As Byte) As Byte
Dim n(2) As Integer
Dim tp%
Dim tn_(2) As Integer
Dim A(1) As Integer
Dim temp_record As record_type
Dim triA As triangle_data0_type
triA = triA_
new_verti_for_triangle = th_161(no%, triA, new_verti_no%, _
                   no_reduce)

If new_verti_for_triangle > 1 Then
   Exit Function
End If
    tn_(0) = new_verti_no%
     tn_(1) = (tn_(0) + 1) Mod 3
      tn_(2) = (tn_(0) + 2) Mod 3
  new_verti_for_triangle = th_39(no%, triA, tn_(0), tn_(1), _
       tn_(2), no_reduce)
  If new_verti_for_triangle > 1 Then '
   Exit Function
  End If
  new_verti_for_triangle = Th_area_of_triangle1(no%, triA, _
       tn_(0), tn_(1), tn_(2), no_reduce)
  If new_verti_for_triangle > 1 Then
     Exit Function
  End If
End Function

Public Function new_eangle_no_for_triangle(ByVal no%, _
              triA_ As triangle_data0_type, ByVal eangle_no%, _
               no_reduce As Byte) As Byte
Dim tn_(2) As Integer
Dim tn(2) As Integer
Dim tl(1) As Integer
Dim A(1) As Integer
Dim tp%
Dim temp_record As total_record_type
Dim triA As triangle_data0_type
triA = triA_
Dim n(2) As Integer
    tn_(0) = eangle_no%
     tn_(1) = (tn_(0) + 1) Mod 3
      tn_(2) = (tn_(0) + 2) Mod 3
     tl(0) = line_number0(triA.poi(tn_(1)), _
         triA.poi(tn_(2)), tn(1), tn(2))
     tp% = is_line_line_intersect(tl(0), _
        triA.eangle_line(tn_(0)), tn(0), 0, False)
    new_eangle_no_for_triangle = th_39(no%, triA, tn_(0), _
        tn_(1), tn_(2), no_reduce)
    If new_eangle_no_for_triangle > 1 Then
      Exit Function
    End If
    If th_chose(113).chose = 1 Then
     If tp% > 0 Then
       temp_record.record_data.data0.condition_data.condition_no = 0
        Call add_conditions_to_record(angle3_value_, triA.eangle_no(tn_(0), 0).no, _
          triA.eangle_no(tn_(0), 1).no, 0, temp_record.record_data.data0.condition_data)
          temp_record.record_data.data0.theorem_no = 113
        new_eangle_no_for_triangle = set_dpoint_pair( _
         triA.poi(tn_(0)), _
           triA.poi(tn_(1)), triA.poi(tn_(1)), _
            tp%, triA.poi(tn_(0)), triA.poi(tn_(2)), _
              triA.poi(tn_(2)), tp%, 0, 0, 0, 0, 0, 0, 0, 0, _
              0, 0, 0, 0, 0, temp_record, True, 0, 0, 0, no_reduce, False)
        If new_eangle_no_for_triangle > 1 Then
         Exit Function
        End If
     End If
    End If
    If th_chose(162).chose = 1 Then
     If triA.inner_center = 0 Then
      If triA.eangle_no(tn_(1), 0).no > 0 And triA.eangle_no(tn_(2), 0).no = 0 Then
      ElseIf triA.eangle_no(tn_(2), 0).no > 0 And triA.eangle_no(tn_(1), 0).no = 0 Then
       Call exchange_two_integer(tn_(1), tn_(2))
      Else
         triangle(no%).data(0) = triA
          Exit Function
      End If
       triA.inner_center = is_line_line_intersect( _
           triA.eangle_line(tn_(0)), triA.eangle_line(tn_(1)), _
           0, 0, False)
     If triA.inner_center > 0 Then
        temp_record.record_data.data0.condition_data.condition_no = 0
         Call add_conditions_to_record(angle3_value_, triA.eangle_no(tn_(0), 0).no, _
               triA.eangle_no(tn_(0), 1).no, 0, temp_record.record_data.data0.condition_data)
         Call add_conditions_to_record(angle3_value_, triA.eangle_no(tn_(1), 0).no, _
               triA.eangle_no(tn_(1), 1).no, 0, temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 162
         A(0) = Abs(angle_number(triA.poi(tn_(0)), _
                     triA.poi(tn_(2)), _
                       triA.inner_center, 0, 0))
         A(1) = Abs(angle_number(triA.poi(tn_(1)), _
                     triA.poi(tn_(2)), _
                      triA.inner_center, 0, 0))
         new_eangle_no_for_triangle = set_three_angle_value(A(0), A(1), 0, _
          "1", "-1", "0", "0", 0, temp_record, triA.eangle_no(tn_(2), 0).no, triA.eangle_no(tn_(2), 1).no, 0, _
            0, 0, 0, False)
          If new_eangle_no_for_triangle > 1 Then
            triangle(no%).data(0) = triA
             Exit Function
          End If
     End If
     End If
 End If

End Function

Public Function new_angle_for_triangle(ByVal no%, _
                 triA_ As triangle_data0_type, ByVal new_a%, _
                   no_reduce As Byte) As Byte
Dim tn_(2) As Integer
Dim t_s(1) As String
Dim temp_record As total_record_type
Dim ep As polygon
Dim tri_f_no%
Dim triA As triangle_data0_type
triA = triA_
tn_(0) = new_a%
 tn_(1) = (tn_(0) + 1) Mod 3
  tn_(2) = (tn_(0) + 2) Mod 3
   If triA.Area <> "" Then
    t_s(0) = sin_(angle(triA.angle(tn_(0))).data(0).value, 0)
    If InStr(1, t_s(0), "F", 0) = 0 Then
     t_s(1) = time_string("2", triA.Area, False, False)
      t_s(1) = divide_string(t_s(1), t_s(0), True, False)
       If InStr(1, t_s(1), "F", 0) = 0 Then
        temp_record.record_data.data0.condition_data.condition_no = 0
         Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn_(0))).data(0).value_no, 0, 0, _
             temp_record.record_data.data0.condition_data)
           Call add_conditions_to_record(area_of_element_, triA.area_no, 0, 0, _
             temp_record.record_data.data0.condition_data)
            new_angle_for_triangle = set_item0(triA.poi(tn_(0)), triA.poi(tn_(1)), triA.poi(tn_(0)), _
              triA.poi(tn_(2)), "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", t_s(1), "1", 0, _
                temp_record.record_data.data0.condition_data, 0, 0, 0, 0, condition_data0, False)
             If new_angle_for_triangle > 1 Then
              Exit Function
             End If
       End If
    End If
   End If
   If angle(triA.angle(tn_(0))).data(0).value = "90" Then
       triangle(no%).data(0).right_angle_no = new_a%
        triA.right_angle_no = new_a%
      new_angle_for_triangle = solve_right_triangle(no%, triA, _
       tn_(0), tn_(1), 0, False, no_reduce)
      If new_angle_for_triangle > 1 Then
       Exit Function
      End If
   ElseIf angle(triA.angle(tn_(1))).data(0).value = "90" Then
         new_angle_for_triangle = solve_right_triangle(no%, triA, _
       tn_(1), tn_(2), 0, False, no_reduce)
      If new_angle_for_triangle > 1 Then
       Exit Function
      End If
   ElseIf angle(triA.angle(tn_(2))).data(0).value = "90" Then
          new_angle_for_triangle = solve_right_triangle(no%, triA, _
       tn_(2), tn_(0), 0, False, no_reduce)
      If new_angle_for_triangle > 1 Then
       Exit Function
      End If
   Else
   new_angle_for_triangle = Th_area_of_triangle2(no%, triA, _
                      tn_(1), tn_(2), tn_(0), no_reduce) 's=ah/2
   If new_angle_for_triangle > 1 Then
    Exit Function
   End If
   If angle(triA.angle(tn_(0))).data(0).value = "60" Then
      If angle(triA.angle(tn_(1))).data(0).value = "60" And _
            angle(triA.angle(tn_(2))).data(0).value = "" Then
        If th_chose(36).chose = 1 Then
        temp_record.record_data.data0.condition_data.condition_no = 0
        Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn_(0))).data(0).value_no, _
            angle(triA.angle(tn_(1))).data(0).value_no, 0, temp_record.record_data.data0.condition_data)
        temp_record.record_data.data0.theorem_no = 36
        ep.total_v = 3
        ep.v(0) = triA.poi(0)
        ep.v(1) = triA.poi(1)
        ep.v(2) = triA.poi(2)
          new_angle_for_triangle = set_Epolygon(ep, temp_record, 0, _
            no_reduce, 1, 0, False)
           If new_angle_for_triangle > 1 Then
            Exit Function
           End If
        End If
      ElseIf angle(triA.angle(tn_(2))).data(0).value = "60" Then
        If th_chose(36).chose = 1 Then
        temp_record.record_data.data0.condition_data.condition_no = 1
        Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn_(0))).data(0).value_no, _
                0, 0, temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 36
        ep.total_v = 3
        ep.v(0) = triA.poi(0)
        ep.v(1) = triA.poi(1)
        ep.v(2) = triA.poi(2)
           new_angle_for_triangle = set_Epolygon(ep, temp_record, 0, _
             no_reduce, 1, 0, False)
              If new_angle_for_triangle > 1 Then
               Exit Function
              End If
        End If
      ElseIf triA.relation_no(tn_(0), 0).ty > 0 And _
                   triA.re_value(tn_(0)) = "1" Then
         temp_record.record_data.data0.condition_data.condition_no = 1
         temp_record.record_data.data0.condition_data.condition(1).ty = triA.relation_no(tn_(0), 0).ty
         temp_record.record_data.data0.condition_data.condition(1).no = triA.relation_no(tn_(0), 0).no
         If triA.relation_no(tn_(0), 1).ty > 0 Then
         temp_record.record_data.data0.condition_data.condition(2).ty = triA.relation_no(tn_(0), 1).ty
         temp_record.record_data.data0.condition_data.condition(3).no = triA.relation_no(tn_(0), 1).no
         temp_record.record_data.data0.condition_data.condition_no = 2
         End If
         Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn_(0))).data(0).value_no, _
             0, 0, temp_record.record_data.data0.condition_data)
          temp_record.record_data.data0.theorem_no = 2
         ep.total_v = 3
         ep.v(0) = triA.poi(0)
         ep.v(1) = triA.poi(1)
         ep.v(2) = triA.poi(2)
           new_angle_for_triangle = set_Epolygon(ep, temp_record, 0, _
             no_reduce, 1, 0, False)
              If new_angle_for_triangle > 1 Then
               Exit Function
              End If
     ElseIf triA.relation_no(tn_(1), 0).ty > 0 And _
                    triA.re_value(tn_(1)) = "1" Then
         temp_record.record_data.data0.condition_data.condition_no = 1
         temp_record.record_data.data0.condition_data.condition(1).ty = triA.relation_no(tn_(1), 0).ty
         temp_record.record_data.data0.condition_data.condition(1).no = triA.relation_no(tn_(1), 0).no
         If triA.relation_no(tn_(0), 1).ty > 0 Then
         temp_record.record_data.data0.condition_data.condition(2).ty = triA.relation_no(tn_(1), 1).ty
         temp_record.record_data.data0.condition_data.condition(2).no = triA.relation_no(tn_(1), 1).no
         temp_record.record_data.data0.condition_data.condition_no = 2
         End If
         Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn_(0))).data(0).value_no, _
              0, 0, temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 2
         ep.total_v = 3
         ep.v(0) = triA.poi(0)
         ep.v(1) = triA.poi(1)
         ep.v(2) = triA.poi(2)
           new_angle_for_triangle = set_Epolygon(ep, temp_record, 0, _
             no_reduce, 1, 0, False)
              If new_angle_for_triangle > 1 Then
               Exit Function
              End If
       ElseIf triA.relation_no(tn_(2), 0).ty > 0 And _
                    triA.re_value(tn_(2)) = "1" Then
         temp_record.record_data.data0.condition_data.condition_no = 1
         temp_record.record_data.data0.condition_data.condition(1).ty = triA.relation_no(tn_(2), 0).ty
         temp_record.record_data.data0.condition_data.condition(1).no = triA.relation_no(tn_(2), 0).no
         If triA.relation_no(tn_(0), 1).ty > 0 Then
         temp_record.record_data.data0.condition_data.condition(2).ty = triA.relation_no(tn_(2), 1).ty
         temp_record.record_data.data0.condition_data.condition(2).no = triA.relation_no(tn_(2), 1).no
         temp_record.record_data.data0.condition_data.condition_no = 2
         End If
         Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn_(0))).data(0).value_no, _
                0, 0, temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 2
         ep.total_v = 3
         ep.v(0) = triA.poi(0)
         ep.v(1) = triA.poi(1)
         ep.v(2) = triA.poi(2)
           new_angle_for_triangle = set_Epolygon(ep, temp_record, 0, _
             no_reduce, 1, 0, False)
              If new_angle_for_triangle > 1 Then
               Exit Function
              End If
      ElseIf triA.line_value(tn_(0)) > 0 And _
               triA.line_value(tn_(1)) > 0 Then
        If line_value(triA.line_value(tn_(0))).data(0).data0.value = _
                    line_value(triA.line_value(tn_(1))).data(0).data0.value Then
         temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
         temp_record.record_data.data0.condition_data.condition(1).no = triA.line_value(tn_(0))
         temp_record.record_data.data0.condition_data.condition(2).ty = line_value_
         temp_record.record_data.data0.condition_data.condition(2).no = triA.line_value(tn_(1))
         temp_record.record_data.data0.condition_data.condition_no = 2
         Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn_(0))).data(0).value_no, _
           0, 0, temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 2
          ep.total_v = 3
          ep.v(0) = triA.poi(0)
          ep.v(1) = triA.poi(1)
          ep.v(2) = triA.poi(2)
           new_angle_for_triangle = set_Epolygon(ep, temp_record, 0, _
             no_reduce, 1, 0, False)
              If new_angle_for_triangle > 1 Then
               Exit Function
              End If
        End If
       ElseIf triA.line_value(tn_(0)) > 0 And _
               triA.line_value(tn_(2)) > 0 Then
        If line_value(triA.line_value(tn_(0))).data(0).data0.value = _
                     line_value(triA.line_value(tn_(2))).data(0).data0.value Then
         temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
         temp_record.record_data.data0.condition_data.condition(1).no = triA.line_value(tn_(0))
         temp_record.record_data.data0.condition_data.condition(2).ty = line_value_
         temp_record.record_data.data0.condition_data.condition(2).no = triA.line_value(tn_(2))
         temp_record.record_data.data0.condition_data.condition_no = 2
         Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn_(0))).data(0).value_no, _
              0, 0, temp_record.record_data.data0.condition_data)
          temp_record.record_data.data0.theorem_no = 2
          ep.total_v = 3
          ep.v(0) = triA.poi(0)
          ep.v(1) = triA.poi(1)
          ep.v(2) = triA.poi(2)
           new_angle_for_triangle = set_Epolygon(ep, temp_record, 0, _
             no_reduce, 1, 0, False)
              If new_angle_for_triangle > 1 Then
               Exit Function
              End If
        End If
       ElseIf triA.line_value(tn_(2)) > 0 And _
            triA.line_value(tn_(1)) > 0 Then
        If line_value(triA.line_value(tn_(2))).data(0).data0.value = _
                    line_value(triA.line_value(tn_(1))).data(0).data0.value Then
         temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
         temp_record.record_data.data0.condition_data.condition(1).no = triA.line_value(tn_(2))
         temp_record.record_data.data0.condition_data.condition(2).ty = line_value_
         temp_record.record_data.data0.condition_data.condition(2).no = triA.line_value(tn_(1))
         temp_record.record_data.data0.condition_data.condition_no = 2
         Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn_(0))).data(0).value_no, _
                0, 0, temp_record.record_data.data0.condition_data)
         temp_record.record_data.data0.theorem_no = 2
         ep.total_v = 3
         ep.v(0) = triA.poi(0)
         ep.v(1) = triA.poi(1)
         ep.v(2) = triA.poi(2)
           new_angle_for_triangle = set_Epolygon(ep, temp_record, 0, _
             no_reduce, 1, 0, False)
              If new_angle_for_triangle > 1 Then
               Exit Function
              End If
        End If
       End If
     End If '=60
' Else
   If angle(triA.angle(tn_(1))).data(0).value <> "" Then
      new_angle_for_triangle = th_20(no%, triA, tn_(0), _
         tn_(1), tn_(2), no_reduce)
      If new_angle_for_triangle > 1 Then
       Exit Function
      End If
      '**********
      new_angle_for_triangle = Th_sin(no%, triA, tn_(0), tn_(1), _
             tn_(2), no_reduce)
      If new_angle_for_triangle > 1 Then
       Exit Function
      End If
      '**********
    ElseIf angle(triA.angle(tn_(2))).data(0).value <> "" Then
     new_angle_for_triangle = th_20(no%, triA, tn_(0), _
        tn_(2), tn_(1), no_reduce)
     If new_angle_for_triangle > 1 Then
      Exit Function
     End If
      new_angle_for_triangle = Th_sin(no%, triA, tn_(0), tn_(2), _
             tn_(1), no_reduce)
      If new_angle_for_triangle > 1 Then
       Exit Function
      End If
   End If
  '余弦定理
  new_angle_for_triangle = th_cos_(no%, triA, tn_(0), _
       no_reduce, False)
End If
'****************
'ElseIf triA.angle(tn_(0)) < 0 Then '已知三角函数
 'tri_f_no% = -triA.angle(tn_(0))
'****************
'End If
End Function
Public Function solve_right_triangle(ByVal no%, triA_ As triangle_data0_type, _
          ByVal k1%, ByVal k2%, ty As Byte, cal_float As Boolean, no_reduce As Byte) As Byte
Dim tn(2) As Integer
Dim tn_(1) As Integer
Dim ts As String
Dim ts_ As String
Dim tri_f As tri_function_data_type
Dim it_%, n%, i%
Dim cond_type As Byte
Dim temp_record As total_record_type
Dim temp_record0 As record_data0_type
Dim it(2) As Integer
Dim di As Integer
Dim para(3) As String
Dim is_gs_contain_squ_sum As Boolean
Dim gs As general_string_data_type
Dim c_data0 As condition_data_type
Dim triA As triangle_data0_type
triA = triA_
If no% = 0 And (triA.poi(0) = 0 Or triA.poi(1) = 0 Or triA.poi(2) = 0) Then
   Exit Function
End If
tn(0) = k1% '直角
tn(1) = k2%
tn(2) = last_number_for_3number(k1%, k2%)
di = read_direction(tn(0), tn(1), tn(2)) '确定三角形的方向
If di < 0 Then
 Call exchange_two_integer(tn(0), tn(2))
End If
 If ty = 0 Then
 solve_right_triangle = th_70(no%, triA, tn(0), 0)
 If solve_right_triangle > 1 Then
  Exit Function
 End If
 End If
 temp_record0.condition_data.condition_no = 1
 temp_record0.condition_data.condition(1).no = angle(triA.angle(tn(0))).data(0).value_no
 temp_record0.condition_data.condition(1).ty = angle3_value_
 temp_record.record_data.data0 = temp_record0
If th_chose(51).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 51
For i% = 1 To last_conditions.last_cond(1).general_string_no
 If general_string(i%).data(0).value = "" Then
  If is_general_string_contain_squ_sum(general_string(i%).data(0), triA.poi(tn(0)), triA.poi(tn(1)), _
       triA.poi(tn(1)), triA.poi(tn(2)), triA.poi(tn(2)), triA.poi(tn(0))) Then
        is_gs_contain_squ_sum = True
         GoTo solve_right_triangle_mark10
  End If
 End If
Next i%
solve_right_triangle_mark10:
If is_gs_contain_squ_sum Then
 solve_right_triangle = set_item0(triA.poi(tn(1)), triA.poi(tn(2)), triA.poi(tn(1)), triA.poi(tn(2)), "*", _
         0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(0), 0, c_data0, 0, it(0), 0, 0, condition_data0, False)
 If solve_right_triangle > 1 Then
  Exit Function
 End If
 solve_right_triangle = set_item0(triA.poi(tn(0)), triA.poi(tn(2)), triA.poi(tn(0)), triA.poi(tn(2)), "*", _
         0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(1), 0, c_data0, 0, it(1), 0, 0, condition_data0, False)
 If solve_right_triangle > 1 Then
  Exit Function
 End If
 solve_right_triangle = set_item0(triA.poi(tn(1)), triA.poi(tn(0)), triA.poi(tn(1)), triA.poi(tn(0)), "*", _
         0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(2), 0, c_data0, 0, it(2), 0, 0, condition_data0, False)
 If solve_right_triangle > 1 Then
  Exit Function
 End If
 temp_record.record_data.data0.theorem_no = 51
 solve_right_triangle = set_general_string(it(0), it(1), it(2), 0, _
                para(0), time_string("-1", para(1), True, False), _
                    time_string("-1", para(2), True, False), "0", "0", 0, 0, 0, temp_record, 0, 0)
 If solve_right_triangle > 1 Then
  Exit Function
 End If
End If
If triA.line_value(tn(1)) > 0 And triA.line_value(tn(2)) > 0 Then
     temp_record.record_data.data0.condition_data = temp_record0.condition_data
     Call add_conditions_to_record(line_value_, triA.line_value(tn(1)), triA.line_value(tn(2)), 0, temp_record.record_data.data0.condition_data)
   If triA.line_value(tn(0)) = 0 Then
     '已知两条直角边,勾股定理
     ts = add_string(line_value(triA.line_value(tn(1))).data(0).data0.squar_value, _
          line_value(triA.line_value(tn(2))).data(0).data0.squar_value, True, False)
     ts = sqr_string(ts, True, False)
     n% = 0
      temp_record.record_data.data0.theorem_no = 51
     solve_right_triangle = set_line_value(triA.poi(tn(1)), triA.poi(tn(2)), _
        ts, 0, 0, 0, temp_record, n%, 0, False)
      If n% > 0 Then
       triangle(no%).data(0).line_value(tn(0)) = n%
      End If
      If solve_right_triangle > 1 Then
       Exit Function
      End If
    End If
    If triA.Area = "" Then
      solve_right_triangle = set_area_of_triangle(no%, divide_string( _
        time_string(line_value(triA.line_value(tn(1))).data(0).data0.value, _
         line_value(triA.line_value(tn(2))).data(0).data0.value, False, False), _
          "2", True, False), temp_record, 0, 0)
      If solve_right_triangle > 1 Then
       Exit Function
      End If
    End If
    If triangle(no%).data(0).re_value(tn(0)) = "" Then
       triangle(no%).data(0).relation_no(tn(0), 0).no = triA.line_value(tn(2))
       triangle(no%).data(0).relation_no(tn(0), 1).no = triA.line_value(tn(1))
       triangle(no%).data(0).relation_no(tn(0), 0).ty = line_value_
       triangle(no%).data(0).relation_no(tn(0), 1).ty = line_value_
    If read_direction(tn(0), tn(1), tn(2)) > 0 Then
       triangle(no%).data(0).re_value(tn(0)) = divide_string( _
          line_value(triA.line_value(tn(2))).data(0).data0.value, _
            line_value(triA.line_value(tn(1))).data(0).data0.value, True, False)
    Else
     triangle(no%).data(0).re_value(tn(0)) = divide_string( _
       line_value(triA.line_value(tn(1))).data(0).data0.value, _
            line_value(triA.line_value(tn(2))).data(0).data0.value, True, False)
    End If
    End If
       triA = triangle(no%).data(0)
  ElseIf triA.line_value(tn(0)) > 0 And triA.line_value(tn(1)) > 0 Then
     '已知两角边边
    If triangle(no%).data(0).re_value(tn(2)) = "" Then
       triangle(no%).data(0).relation_no(tn(0), 0).no = triA.line_value(tn(1))
       triangle(no%).data(0).relation_no(tn(0), 1).no = triA.line_value(tn(0))
       triangle(no%).data(0).relation_no(tn(0), 0).ty = line_value_
       triangle(no%).data(0).relation_no(tn(0), 1).ty = line_value_
    If read_direction(tn(0), tn(1), tn(2)) > 0 Then
       triangle(no%).data(0).re_value(tn(2)) = divide_string( _
           line_value(triA.line_value(tn(1))).data(0).data0.value, _
            line_value(triA.line_value(tn(0))).data(0).data0.value, True, False)
    Else
     triangle(no%).data(0).re_value(tn(2)) = divide_string( _
       line_value(triA.line_value(tn(0))).data(0).data0.value, _
            line_value(triA.line_value(tn(1))).data(0).data0.value, True, False)
    End If
    End If
       triA = triangle(no%).data(0)
     solve_right_triangle = solve_right_triangle_from_line_Rline( _
      no%, triA, tn(0), tn(1), tn(2), cal_float, di, no_reduce)
      If solve_right_triangle > 1 Then
       Exit Function
      End If
ElseIf triA.line_value(tn(0)) > 0 And triA.line_value(tn(2)) > 0 Then
      '已知一斜和已知角边边
    If triangle(no%).data(0).re_value(tn(1)) = "" Then
       triangle(no%).data(0).relation_no(tn(0), 0).no = triA.line_value(tn(2))
       triangle(no%).data(0).relation_no(tn(0), 1).no = triA.line_value(tn(0))
       triangle(no%).data(0).relation_no(tn(0), 0).ty = line_value_
       triangle(no%).data(0).relation_no(tn(0), 1).ty = line_value_
    If read_direction(tn(0), tn(1), tn(2)) > 0 Then
       triangle(no%).data(0).re_value(tn(1)) = divide_string( _
          line_value(triA.line_value(tn(0))).data(0).data0.value, _
            line_value(triA.line_value(tn(2))).data(0).data0.value, True, False)
    Else
     triangle(no%).data(0).re_value(tn(1)) = divide_string( _
       line_value(triA.line_value(tn(2))).data(0).data0.value, _
            line_value(triA.line_value(tn(0))).data(0).data0.value, True, False)
    End If
    End If
       triA = triangle(no%).data(0)
     solve_right_triangle = solve_right_triangle_from_line_Rline( _
      no%, triA, tn(0), tn(2), tn(1), cal_float, -di, no_reduce)
     If solve_right_triangle > 1 Then
      Exit Function
     End If
End If
End If
temp_record.record_data.data0.theorem_no = 0
 temp_record.record_data.data0 = temp_record0
'If triA.relation_no(tn(0)) <> 0 Then
 If triA.relation_no(tn(0), 0).ty > 0 Then '后/前
   '已知两直角边比,正切
  temp_record.record_data.data0.condition_data.condition(2) = triA.relation_no(tn(0), 0)
   temp_record.record_data.data0.condition_data.condition_no = 2
   If triA.relation_no(tn(0), 1).ty > 0 Then
    temp_record.record_data.data0.condition_data.condition(3) = triA.relation_no(tn(0), 1)
     temp_record.record_data.data0.condition_data.condition_no = 3
   End If
    ts = triA.re_value(tn(0))
    n% = 0     '余切
     solve_right_triangle = set_tri_function( _
        triA.angle(tn(1)), "", "", "", ts, n%, _
          temp_record, True, tri_f, no_reduce)
      If n% > 0 Then
       triangle(no%).data(0).tri_function(tn(1)) = n%
      End If
      If solve_right_triangle > 1 Then
       Exit Function
      End If
      n% = 0
     solve_right_triangle = set_tri_function( _
        triA.angle(tn(2)), "", "", ts, "", n%, _
          temp_record, True, tri_f, no_reduce)
      If n% > 0 Then
       triangle(no%).data(0).tri_function(tn(2)) = n%
      End If
      If solve_right_triangle > 1 Then
       Exit Function
      End If
    '**************************************************
    'ts= 01/02
    If triA.relation_no(tn(2), 0).ty = 0 Then
       ts_ = sqr_string(add_string("1", _
           time_string(ts, ts, False, False), False, False), _
               True, False) 'cos
       'ts_=12/02
      n% = 0
       temp_record.record_data.data0.theorem_no = 51
        solve_right_triangle = set_Drelation(triA.poi(tn(1)), triA.poi(tn(2)), _
          triA.poi(tn(0)), triA.poi(tn(2)), 0, 0, 0, 0, 0, 0, ts_, _
            temp_record, n%, cond_type, tn_(0), tn_(1), 0, False)
        If n% > 0 Then
         triangle(no%).data(0).relation_no(tn(1), 0).ty = cond_type
          triangle(no%).data(0).relation_no(tn(1), 0).no = n%
        Else
         triangle(no%).data(0).relation_no(tn(1), 0).ty = cond_type
          triangle(no%).data(0).relation_no(tn(1), 0).no = tn_(0)
           triangle(no%).data(0).relation_no(tn(1), 1).ty = cond_type
            triangle(no%).data(0).relation_no(tn(1), 1).no = tn_(1)
        End If
         triangle(no%).data(0).re_value(tn(2)) = divide_string("1", ts_, True, False)
        If solve_right_triangle > 1 Then
         Exit Function
        End If
     End If
     If triA.relation_no(tn(1), 0).ty = 0 Then
        ts = triA.re_value(tn(0))
      'ts=10/02
        ts_ = divide_string( _
          sqr_string(add_string("1", time_string(ts, _
            ts, False, False), False, False), False, False), ts, True, False)
       '     ts = 12 / 10
       n% = 0
        temp_record.record_data.data0.theorem_no = 51
       solve_right_triangle = set_Drelation(triA.poi(tn(1)), triA.poi(tn(2)), _
          triA.poi(tn(1)), triA.poi(tn(0)), 0, 0, 0, 0, 0, 0, ts_, _
              temp_record, n%, cond_type, tn_(0), tn_(1), 0, False)
        If n% > 0 Then
         triangle(no%).data(0).relation_no(tn(2), 0).ty = cond_type
           triangle(no%).data(0).relation_no(tn(2), 0).no = n%
        Else
         triangle(no%).data(0).relation_no(tn(2), 0).ty = cond_type
          triangle(no%).data(0).relation_no(tn(2), 0).no = tn_(0)
           triangle(no%).data(0).relation_no(tn(2), 1).ty = cond_type
            triangle(no%).data(0).relation_no(tn(2), 1).no = tn_(1)
        End If
         triangle(no%).data(0).re_value(tn(1)) = ts_
        If solve_right_triangle > 1 Then
         Exit Function
        End If
      End If
    '*******************************************************************
      ts = triA.re_value(tn(0))
      ts_ = actan_(ts)
      If InStr(1, ts, "F", 0) = 0 Then
       n% = 0
       solve_right_triangle = set_angle_value(triA.angle(tn(2)), _
       ts_, temp_record, n%, 0, False)
       If solve_right_triangle > 1 Then
        Exit Function
       End If
       solve_right_triangle = set_angle_value(triA.angle(tn(1)), _
       minus_string("90", ts_, True, False), temp_record, n%, 0, False)
       If solve_right_triangle > 1 Then
        Exit Function
       End If
  End If
  If triA.re_value(tn(0)) = "1" Then
   n% = 0
  solve_right_triangle = set_tri_function( _
        triA.angle(tn(1)), "", "", "1", "", n%, _
          temp_record, True, tri_f, no_reduce)
   If n% > 0 Then
    triangle(no%).data(0).tri_function(tn(1)) = n%
   End If
   If solve_right_triangle > 1 Then
    Exit Function
   End If
   n% = 0
  solve_right_triangle = set_tri_function( _
        triA.angle(tn(2)), "", "", "", "1", n%, _
          temp_record, True, tri_f, no_reduce)
   If n% > 0 Then
    triangle(no%).data(0).tri_function(tn(2)) = n%
   End If
   If solve_right_triangle > 1 Then
    Exit Function
   End If
    n% = 0
    solve_right_triangle = set_angle_value(triA.angle(tn(1)), _
       "45", temp_record, n%, 0, False)
       'If n% > 0 Then
        'triangle(no%).data(0).angle_value(tn(1)) = n%
       'End If
       If solve_right_triangle > 1 Then
        Exit Function
       End If
    n% = 0
    solve_right_triangle = set_angle_value(triA.angle(tn(2)), _
       "45", temp_record, n%, 0, False)
       'If n% > 0 Then
        'triangle(no%).data(0).angle_value(tn(2)) = n%
       'End If
       If solve_right_triangle > 1 Then
        Exit Function
       End If
    n% = 0
    solve_right_triangle = set_Drelation(triA.poi(tn(0)), triA.poi(tn(1)), _
     triA.poi(tn(1)), triA.poi(tn(2)), 0, 0, 0, 0, 0, 0, "'2/2", _
      temp_record, n%, cond_type, tn_(0), tn_(1), 0, False)
      If n% > 0 Then
       triangle(no%).data(0).relation_no(tn(1), 0).ty = cond_type
        triangle(no%).data(0).relation_no(tn(1), 0).no = n%
      Else
       triangle(no%).data(0).relation_no(tn(1), 0).ty = cond_type
        triangle(no%).data(0).relation_no(tn(1), 0).no = tn_(0)
         triangle(no%).data(0).relation_no(tn(1), 1).ty = cond_type
          triangle(no%).data(0).relation_no(tn(1), 1).no = tn_(1)
      End If
       If di < 0 Then
       triangle(no%).data(0).re_value(tn(1)) = "'2/2"
       Else
       triangle(no%).data(0).re_value(tn(1)) = "'2"
       End If
       If solve_right_triangle > 1 Then
        Exit Function
       End If
    n% = 0
    solve_right_triangle = set_Drelation(triA.poi(tn(0)), triA.poi(tn(2)), _
     triA.poi(tn(1)), triA.poi(tn(2)), 0, 0, 0, 0, 0, 0, "'2/2", _
      temp_record, n%, cond_type, tn_(0), tn_(1), 0, False)
      If n% > 0 Then
       triangle(no%).data(0).relation_no(tn(2), 0).ty = cond_type
        triangle(no%).data(0).relation_no(tn(2), 0).no = n%
      Else
       triangle(no%).data(0).relation_no(tn(2), 0).ty = cond_type
        triangle(no%).data(0).relation_no(tn(2), 0).no = tn_(0)
         triangle(no%).data(0).relation_no(tn(2), 1).ty = cond_type
          triangle(no%).data(0).relation_no(tn(2), 1).no = tn_(1)
      End If
     If di < 0 Then
      triangle(no%).data(0).re_value(tn(2)) = "'2"
     Else
       triangle(no%).data(0).re_value(tn(2)) = "'2/2"
     End If
      If solve_right_triangle > 1 Then
      Exit Function
     End If
 End If
ElseIf triA.relation_no(tn(1), 0).ty > 0 Then
  solve_right_triangle = solve_right_triangle_from_relation(no%, _
      triA, tn(0), tn(1), tn(2), di, no_reduce)
  If solve_right_triangle > 1 Then
   Exit Function
  End If
ElseIf triA.relation_no(tn(2), 0).ty > 0 Then
  solve_right_triangle = solve_right_triangle_from_relation(no%, _
     triA, tn(0), tn(2), tn(1), -di, no_reduce)
       If solve_right_triangle > 1 Then
        Exit Function
       End If
End If
If triA.line_value(tn(0)) > 0 Then
     temp_record.record_data.data0 = temp_record0
      Call add_conditions_to_record(line_value_, triA.line_value(tn(0)), 0, 0, _
       temp_record.record_data.data0.condition_data)
    If th_chose(51).chose = 1 Then
     If triA.sum_of_two_sq_line(tn(0)) = 0 Then
       solve_right_triangle = set_item0(triA.poi(tn(0)), triA.poi(tn(1)), _
         triA.poi(tn(0)), triA.poi(tn(1)), "*", _
          0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(0), 0, record_data0.data0.condition_data, _
             0, it(0), no_reduce, 0, condition_data0, False)
       solve_right_triangle = set_item0(triA.poi(tn(0)), triA.poi(tn(2)), _
         triA.poi(tn(0)), triA.poi(tn(2)), "*", _
          0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(1), 0, record_data0.data0.condition_data, _
              0, it(1), no_reduce, 0, condition_data0, False)
      If solve_right_triangle > 1 Then
       Exit Function
      End If
      temp_record.record_data.data0.theorem_no = 51
       solve_right_triangle = set_general_string(it(0), it(1), 0, 0, para(0), para(1), _
        "0", "0", line_value(triA.line_value(tn(0))).data(0).data0.squar_value, _
         0, 0, 0, temp_record, 0, 0)
      If solve_right_triangle > 1 Then
       Exit Function
      End If
      triangle(no%).data(0).sum_of_two_sq_line(tn(0)) = 1
      If solve_right_triangle > 1 Then
       Exit Function
      End If
     End If
    End If
    If angle(triA.angle(tn(1))).data(0).value <> "" Or triA.tri_function(tn(1)) > 0 Then
         temp_record.record_data.data0 = temp_record0
      If triA.tri_function(tn(1)) > 0 Then
          temp_record.record_data.data0.condition_data.condition_no = 2
          Call add_record_to_record(tri_function(triA.tri_function(tn(1))).data(0).record.data0.condition_data, _
            temp_record.record_data.data0.condition_data)
        ts = tri_function(triA.tri_function(tn(1))).data(0).sin_value
      Else
          ts = sin_(angle(triA.angle(tn(1))).data(0).value, 0)
          temp_record.record_data.data0.condition_data.condition_no = 2
           Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn(1))).data(0).value_no, _
               0, 0, temp_record.record_data.data0.condition_data)
      End If
      If triA.line_value(tn(1)) = 0 Then
        ts = time_string(line_value(triA.line_value(tn(0))).data(0).data0.value, _
                ts, True, False)
        n% = 0
        solve_right_triangle = set_line_value(triA.poi(tn(0)), _
           triA.poi(tn(2)), ts, 0, 0, 0, temp_record, n%, 0, False)
        If n% > 0 Then
         triangle(no%).data(0).line_value(tn(1)) = n%
        End If
        If solve_right_triangle > 1 Then
         Exit Function
        End If
      End If
      If triA.line_value(tn(2)) = 0 Then
        If triA.tri_function(tn(1)) > 0 Then
         ts = tri_function(triA.tri_function(tn(1))).data(0).cos_value
        Else
         ts = cos_(angle(triA.angle(tn(1))).data(0).value, 0)
        End If
        ts = time_string(line_value(triA.line_value(tn(0))).data(0).data0.value, _
            ts, True, False)
        n% = 0
        solve_right_triangle = set_line_value(triA.poi(tn(0)), _
           triA.poi(tn(1)), ts, 0, 0, 0, temp_record, n%, 0, False)
        If n% > 0 Then
         triangle(no%).data(0).line_value(tn(2)) = n%
        End If
        If solve_right_triangle > 1 Then
         Exit Function
        End If
       End If
  ElseIf angle(triA.angle(tn(2))).data(0).value <> "" Or triA.tri_function(tn(2)) > 0 Then
    '******************************************
             temp_record.record_data.data0 = temp_record0
      If triA.tri_function(tn(2)) > 0 Then
          temp_record.record_data.data0.condition_data.condition_no = 2
          Call add_record_to_record(tri_function(triA.tri_function(tn(2))).data(0).record.data0.condition_data, _
            temp_record.record_data.data0.condition_data)
        ts = tri_function(triA.tri_function(tn(2))).data(0).sin_value
      Else
          ts = sin_(angle(triA.angle(tn(2))).data(0).value, 0)
          temp_record.record_data.data0.condition_data.condition_no = 2
           Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn(2))).data(0).value_no, _
               0, 0, temp_record.record_data.data0.condition_data)
      End If
      If triA.line_value(tn(2)) = 0 Then
        ts = time_string(line_value(triA.line_value(tn(0))).data(0).data0.value, _
                ts, True, False)
        n% = 0
        solve_right_triangle = set_line_value(triA.poi(tn(0)), _
           triA.poi(tn(1)), ts, 0, 0, 0, temp_record, n%, 0, False)
        If n% > 0 Then
         triangle(no%).data(0).line_value(tn(2)) = n%
        End If
        If solve_right_triangle > 1 Then
         Exit Function
        End If
      End If
      If triA.line_value(tn(1)) = 0 Then
        If triA.tri_function(tn(2)) > 0 Then
         ts = tri_function(triA.tri_function(tn(2))).data(0).cos_value
        Else
         ts = cos_(angle(triA.angle(tn(2))).data(0).value, 0)
        End If
        ts = time_string(line_value(triA.line_value(tn(0))).data(0).data0.value, _
            ts, True, False)
        n% = 0
        solve_right_triangle = set_line_value(triA.poi(tn(0)), _
           triA.poi(tn(2)), ts, 0, 0, 0, temp_record, n%, 0, False)
        If n% > 0 Then
         triangle(no%).data(0).line_value(tn(1)) = n%
        End If
        If solve_right_triangle > 1 Then
         Exit Function
        End If
       End If
'***************************************************************************************************
'       solve_right_triangle = _
'        solve_right_triangle(no, triA, tn(0), tn(2), 1, cal_float, no_reduce)
'        If solve_right_triangle > 1 Then
'         Exit Function
'        End If
  End If
 ElseIf triA.line_value(tn(1)) > 0 Then
  '已知直角边
  '***************************************************************************
  '勾股定理
    temp_record.record_data.data0 = temp_record0
    Call add_conditions_to_record(line_value_, triA.line_value(tn(1)), 0, 0, _
         temp_record.record_data.data0.condition_data)
    If th_chose(51).chose = 1 Then
     If triA.sum_of_two_sq_line(tn(1)) = 0 Then
      solve_right_triangle = set_item0(triA.poi(tn(1)), triA.poi(tn(2)), _
         triA.poi(tn(1)), triA.poi(tn(2)), "*", _
          0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(0), 0, record_data0.data0.condition_data, _
            0, it(0), no_reduce, 0, condition_data0, False)
       If solve_right_triangle > 1 Then
        Exit Function
       End If
      solve_right_triangle = set_item0(triA.poi(tn(0)), triA.poi(tn(1)), _
         triA.poi(tn(0)), triA.poi(tn(1)), "*", _
          0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(1), 0, record_data0.data0.condition_data, _
            0, it(1), no_reduce, 0, condition_data0, False)
       If solve_right_triangle > 1 Then
        Exit Function
       End If
       temp_record.record_data.data0.theorem_no = 51
      solve_right_triangle = set_general_string(it(0), it(1), 0, 0, para(0), _
           time_string("-1", para(1), True, False), "0", "0", _
            line_value(triA.line_value(tn(1))).data(0).data0.squar_value, _
          0, 0, 0, temp_record, 0, 0)
       triangle(no%).data(0).sum_of_two_sq_line(tn(1)) = 1
       If solve_right_triangle > 1 Then
        Exit Function
       End If
      End If
    End If
    '************************************************************************
    '已知直角边和对角
    If angle(triA.angle(tn(1))).data(0).value <> "" Or triA.tri_function(tn(1)) > 0 Then
     temp_record.record_data.data0 = temp_record0
    Call add_conditions_to_record(line_value_, triA.line_value(tn(1)), 0, 0, _
         temp_record.record_data.data0.condition_data)
     If triA.tri_function(tn(1)) > 0 Then
      'temp_record.record_data.data0.condition_data.condition_no = 2
       Call add_record_to_record(tri_function(triA.tri_function(tn(1))).data(0).record.data0.condition_data, _
            temp_record.record_data.data0.condition_data)
            ts = tri_function(triA.tri_function(tn(1))).data(0).sin_value
     Else
         'temp_record.record_data.data0.condition_data.condition_no = 2
         Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn(1))).data(0).value_no, _
             0, 0, temp_record.record_data.data0.condition_data)
            ts = sin_(angle(triA.angle(tn(1))).data(0).value, 1)
     End If
       If triA.line_value(tn(0)) = 0 Then
          ts = divide_string( _
            line_value(triA.line_value(tn(1))).data(0).data0.value, ts, True, False)
        n% = 0
         solve_right_triangle = set_line_value(triA.poi(tn(1)), _
           triA.poi(tn(2)), ts, 0, 0, 0, temp_record, n%, _
            0, False)
        If n% > 0 Then
         triangle(no%).data(0).line_value(tn(0)) = n%
        End If
        If solve_right_triangle > 1 Then
         Exit Function
        End If
       End If
        If triA.line_value(tn(2)) = 0 Then
          If triA.tri_function(tn(1)) > 0 Then
            ts = tri_function(triA.tri_function(tn(1))).data(0).tan_value
                Call add_conditions_to_record(angle3_value_, _
                  angle(tri_function(triA.tri_function(tn(1))).data(0).A).data(0).value_no, _
                   0, 0, temp_record.record_data.data0.condition_data)
          Else
            ts = tan_(angle(triA.angle(tn(1))).data(0).value, 0)
                Call add_conditions_to_record(angle3_value_, _
                  angle(triA.angle(tn(1))).data(0).value_no, _
                   0, 0, temp_record.record_data.data0.condition_data)
          End If
           ts = divide_string( _
            line_value(triA.line_value(tn(1))).data(0).data0.value, ts, True, False)
             n% = 0
              solve_right_triangle = set_line_value(triA.poi(tn(0)), _
                triA.poi(tn(1)), ts, 0, 0, 0, temp_record, n%, 0, False)
           If n% > 0 Then
            triangle(no%).data(0).line_value(tn(2)) = n%
           End If
           If solve_right_triangle > 1 Then
            Exit Function
           End If
         End If
      ElseIf angle(triA.angle(tn(2))).data(0).value <> "" Or triA.tri_function(tn(2)) > 0 Then
       temp_record.record_data.data0.condition_data = temp_record0.condition_data
       Call add_conditions_to_record(line_value_, triA.line_value(tn(1)), 0, 0, _
                        temp_record.record_data.data0.condition_data)
       If triA.tri_function(tn(2)) > 0 Then
        'temp_record.record_data.data0.condition_data.condition_no = 2
         Call add_record_to_record(tri_function(triA.tri_function(tn(2))).data(0).record.data0.condition_data, _
          temp_record.record_data.data0.condition_data)
           ts = tri_function(triA.tri_function(tn(2))).data(0).cos_value
       Else
         '   temp_record.record_data.data0.condition_data.condition_no = 2
            Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn(2))).data(0).value_no, _
               0, 0, temp_record.record_data.data0.condition_data)
            ts = cos_(angle(triA.angle(tn(2))).data(0).value, 0)
       End If
       If triA.line_value(tn(0)) = 0 And ts <> "F" Then
          ts = divide_string( _
            line_value(triA.line_value(tn(1))).data(0).data0.value, ts, True, False)
        n% = 0
         solve_right_triangle = set_line_value(triA.poi(tn(1)), _
           triA.poi(tn(2)), ts, 0, 0, 0, temp_record, n%, _
            0, False)
        If n% > 0 Then
         triangle(no%).data(0).line_value(tn(0)) = n%
        End If
        If solve_right_triangle > 1 Then
         Exit Function
        End If
      End If
     If triA.line_value(tn(1)) = 0 Then
          If triA.tri_function(tn(2)) > 0 Then
            ts = tri_function(triA.tri_function(tn(2))).data(0).tan_value
          Else
            ts = tan_(angle(triA.angle(tn(2))).data(0).value, 0)
          End If
            ts = divide_string( _
             line_value(triA.line_value(tn(2))).data(0).data0.value, ts, True, False)
         n% = 0
         solve_right_triangle = set_line_value(triA.poi(tn(0)), _
           triA.poi(tn(2)), ts, 0, 0, 0, temp_record, n%, 0, False)
         If n% > 0 Then
          triangle(no%).data(0).line_value(tn(1)) = n%
         End If
         If solve_right_triangle > 1 Then
          Exit Function
         End If
       End If
  End If
ElseIf angle(triA.angle(tn(1))).data(0).value <> "" Or triA.tri_function(tn(1)) > 0 Then
  If triA.tri_function(tn(1)) > 0 Then
   temp_record.record_data.data0 = temp_record0
   Call add_record_to_record(tri_function(triA.tri_function(tn(1))).data(0).record.data0.condition_data, _
   temp_record.record_data.data0.condition_data)
   ts = tri_function(triA.tri_function(tn(1))).data(0).tan_value
  Else
    temp_record.record_data.data0 = temp_record0
  Call add_conditions_to_record(angle3_value_, angle(triA.angle(tn(1))).data(0).value_no, _
          0, 0, temp_record.record_data.data0.condition_data)
  ts = tan_(angle(triA.angle(tn(1))).data(0).value, 0)
  End If
  n% = 0
  solve_right_triangle = set_Drelation(triA.poi(tn(2)), _
      triA.poi(tn(0)), triA.poi(tn(1)), triA.poi(tn(0)), _
       0, 0, 0, 0, 0, 0, ts, temp_record, n%, cond_type, tn_(0), tn_(1), 0, False)
  If n% > 0 Then
   triangle(no%).data(0).relation_no(tn(0), 0).ty = cond_type
   triangle(no%).data(0).relation_no(tn(0), 0).no = n%
  Else
   triangle(no%).data(0).relation_no(tn(0), 0).ty = cond_type
   triangle(no%).data(0).relation_no(tn(0), 0).no = tn_(0)
   triangle(no%).data(0).relation_no(tn(0), 1).ty = cond_type
   triangle(no%).data(0).relation_no(tn(0), 1).no = tn_(1)
  End If
    If di < 0 Then
    triangle(no%).data(0).re_value(tn(0)) = ts
    Else
    triangle(no%).data(0).re_value(tn(0)) = divide_string("1", ts, True, False)
    End If
  If solve_right_triangle > 1 Then
   Exit Function
  End If
  If triA.tri_function(tn(1)) > 0 Then
   ts = tri_function(triA.tri_function(tn(1))).data(0).sin_value
  Else
   ts = sin_(angle(triA.angle(tn(1))).data(0).value, 0)
  End If
  n% = 0
  solve_right_triangle = set_Drelation(triA.poi(tn(2)), _
      triA.poi(tn(0)), triA.poi(tn(1)), triA.poi(tn(2)), _
       0, 0, 0, 0, 0, 0, ts, temp_record, n%, cond_type, tn_(0), tn_(1), 0, False)
  If n% > 0 Then
   triangle(no%).data(0).relation_no(tn(2), 0).ty = cond_type
   triangle(no%).data(0).relation_no(tn(2), 0).no = n%
  Else
   triangle(no%).data(0).relation_no(tn(2), 0).ty = cond_type
   triangle(no%).data(0).relation_no(tn(2), 0).no = tn_(0)
   triangle(no%).data(0).relation_no(tn(2), 1).ty = cond_type
   triangle(no%).data(0).relation_no(tn(2), 1).no = tn_(1)
  End If
    If di% < 0 Then
     triangle(no%).data(0).re_value(tn(2)) = divide_string("1", ts, True, False)
    Else
     triangle(no%).data(0).re_value(tn(2)) = ts
    End If
  If solve_right_triangle > 1 Then
   Exit Function
  End If
  If triA.tri_function(tn(1)) > 0 Then
   ts = tri_function(triA.tri_function(tn(1))).data(0).cos_value
  Else
  ts = cos_(angle(triA.angle(tn(1))).data(0).value, 0)
  End If
  n% = 0
  solve_right_triangle = set_Drelation(triA.poi(tn(1)), _
      triA.poi(tn(0)), triA.poi(tn(1)), triA.poi(tn(2)), _
       0, 0, 0, 0, 0, 0, ts, temp_record, n%, cond_type, tn_(0), tn_(1), 0, False)
  If n% > 0 Then
   triangle(no%).data(0).relation_no(tn(1), 0).ty = cond_type
   triangle(no%).data(0).relation_no(tn(1), 0).no = n%
  Else
   triangle(no%).data(0).relation_no(tn(1), 0).ty = cond_type
   triangle(no%).data(0).relation_no(tn(1), 0).no = tn_(0)
   triangle(no%).data(0).relation_no(tn(1), 1).ty = cond_type
   triangle(no%).data(0).relation_no(tn(1), 1).no = tn_(1)
  End If
    If di% < 0 Then
    triangle(no%).data(0).re_value(tn(1)) = ts
    Else
    triangle(no%).data(0).re_value(tn(1)) = divide_string("1", ts, True, False)
    End If
  If solve_right_triangle > 1 Then
   Exit Function
  End If
'ElseIf angle(triA.angle(tn(2))).data(0).value <> "" Or triA.tri_function(tn(2)) > 0 Then
'       solve_right_triangle = _
'        solve_right_triangle(no%, triA, tn(0), tn(2), 1, cal_float, no_reduce)
'        If solve_right_triangle > 1 Then
'         Exit Function
'        End If
ElseIf triA.midpoint_no(tn(0)) > 0 And th_chose(70).chose = 1 Then
    temp_record.record_data.data0 = temp_record0
    Call add_conditions_to_record(midpoint_, 0, 0, triA.midpoint_no(tn(0)), _
           temp_record.record_data.data0.condition_data)
    temp_record.record_data.data0.theorem_no = 70
    solve_right_triangle = set_Drelation(triA.poi(tn(1)), triA.poi(tn(2)), _
      triA.poi(tn(0)), Dmid_point(triA.midpoint_no(tn(0))).data(0).data0.poi(1), _
       0, 0, 0, 0, 0, 0, "2", temp_record, 0, 0, 0, 0, 0, False)
    If solve_right_triangle > 1 Then
     Exit Function
    End If
    solve_right_triangle = set_three_angle_value(triA.angle(tn(1)), _
     Abs(angle_number(Dmid_point(triA.midpoint_no(tn(0))).data(0).data0.poi(1), _
            triA.poi(tn(0)), triA.poi(tn(1)), 0, 0)), 0, "1", "-1", "0", "0", 0, temp_record, _
              0, 0, 0, 0, 0, 0, False)
    If solve_right_triangle > 1 Then
     Exit Function
    End If
    solve_right_triangle = set_three_angle_value(triA.angle(tn(2)), _
     Abs(angle_number(Dmid_point(triA.midpoint_no(tn(0))).data(0).data0.poi(1), _
            triA.poi(tn(0)), triA.poi(tn(2)), 0, 0)), 0, "1", "-1", "0", "0", 0, temp_record, _
               0, 0, 0, 0, 0, 0, False)
    If solve_right_triangle > 1 Then
     Exit Function
    End If
End If
     temp_record.record_data.data0 = temp_record0
     temp_record.record_data.data0.theorem_no = 20
    solve_right_triangle = set_three_angle_value(triA.angle(tn(1)), triA.angle(tn(2)), 0, "1", "1", _
      "0", "90", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
     If solve_right_triangle > 1 Then
        Exit Function
     End If
End Function

Public Function new_line_for_triangle(ByVal no%, triA_ As triangle_data0_type, _
           ByVal new_l%, no_reduce As Byte) As Byte
Dim tn_(2) As Integer
Dim n(2) As Integer
Dim ts(1) As String
Dim triangle_data As triangle_data0_type
Dim temp_record As record_type
Dim triA As triangle_data0_type
triA = triA_
 tn_(0) = new_l%
  tn_(1) = (tn_(0) + 1) Mod 3
   tn_(2) = (tn_(0) + 2) Mod 3
'************
triangle_data = triA
 new_line_for_triangle = th_39(no%, triangle_data, tn_(1), tn_(0), _
       tn_(2), no_reduce)
 If new_line_for_triangle > 1 Then
  Exit Function
 End If
 new_line_for_triangle = th_39(no%, triangle_data, tn_(2), tn_(0), _
       tn_(1), no_reduce)
 If new_line_for_triangle > 1 Then
  Exit Function
 End If
If triangle_data.right_angle_no >= 0 Then
 If new_l% = triangle_data.right_angle_no Then
   new_line_for_triangle = solve_right_triangle(no%, _
     triangle_data, tn_(0), tn_(1), 1, False, no_reduce)
   If new_line_for_triangle > 1 Then
    Exit Function
   End If
 Else
   new_line_for_triangle = solve_right_triangle(no%, _
     triangle_data, triangle_data.right_angle_no, tn_(0), 1, False, no_reduce)
   If new_line_for_triangle > 1 Then
    Exit Function
   End If
 End If
Else  '海伦公式
     If triangle_data.area_no = 0 Then
      new_line_for_triangle = th_area_of_triangle3( _
            triangle_data, no%, no_reduce)
        If new_line_for_triangle > 1 Then
         Exit Function
        End If
      End If
      new_line_for_triangle = Th_area_of_triangle1(no%, triangle_data, _
          tn_(0), tn_(1), tn_(2), no_reduce)
        If new_line_for_triangle > 1 Then
         Exit Function
        End If
      new_line_for_triangle = Th_area_of_triangle2(no%, triangle_data, _
        tn_(0), tn_(1), tn_(2), no_reduce)
        If new_line_for_triangle > 1 Then
         Exit Function
        End If
      new_line_for_triangle = Th_area_of_triangle2(no%, triangle_data, _
        tn_(0), tn_(2), tn_(1), no_reduce)
        If new_line_for_triangle > 1 Then
         Exit Function
        End If
'*********************
     new_line_for_triangle = th_cos_(no%, triangle_data, tn_(1), no_reduce, False)
       If new_line_for_triangle > 1 Then
        Exit Function
       End If
     new_line_for_triangle = th_cos_(no%, triangle_data, tn_(2), no_reduce, False)
       If new_line_for_triangle > 1 Then
        Exit Function
     End If
     new_line_for_triangle = Th_sin(no%, triangle_data, tn_(0), tn_(1), tn_(2), no_reduce)
       If new_line_for_triangle > 1 Then
        Exit Function
     End If

End If
End Function
Public Function new_re_no_for_triangle(ByVal no%, triA_ As triangle_data0_type, _
            ByVal new_re_no%, no_reduce As Byte) As Byte
Dim tn_(2) As Integer
Dim value$
Dim sig(1) As String
Dim val(1) As String
Dim temp_record As total_record_type
Dim triA As triangle_data0_type
triA = triA_
tn_(0) = new_re_no%
tn_(1) = (tn_(0) + 1) Mod 3
tn_(2) = (tn_(0) + 2) Mod 3
  new_re_no_for_triangle = th_39(no%, triA, tn_(0), tn_(1), _
       tn_(2), no_reduce)
  If new_re_no_for_triangle > 1 Then
   Exit Function
  End If
  new_re_no_for_triangle = Th_sin(no%, triA, tn_(1), tn_(2), tn_(0), _
      no_reduce)
  If new_re_no_for_triangle > 1 Then
   Exit Function
  End If
  If angle(triangle(no%).data(0).angle(tn_(0))).data(0).value <> "" And _
       triangle(no%).data(0).relation_no(tn_(0), 1).no = 0 Then
'   If th_chose(154).chose = 1 Then
      value$ = time_string(triangle(no%).data(0).re_value(tn_(0)), _
         triangle(no%).data(0).re_value(tn_(0)), True, False)
      value$ = add_string(value$, "1", True, False)
      value$ = add_string(value$, time_string("-2", time_string( _
                 triangle(no%).data(0).re_value(tn_(0)), cos_( _
                  angle(triangle(no%).data(0).angle(tn_(0))).data(0).value, 0), _
                   False, False), False, False), True, False)
      value$ = sqr_string(value$, True, False)
      If InStr(1, value$, "F", 0) = 0 Then
      temp_record.record_data.data0.condition_data.condition_no = 1
      temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_
      temp_record.record_data.data0.condition_data.condition(1).no = _
       angle(triangle(no%).data(0).angle(tn_(0))).data(0).value_no
      Call add_conditions_to_record( _
       triangle(no%).data(0).relation_no(tn_(0), 0).ty, _
        triangle(no%).data(0).relation_no(tn_(0), 0).no, _
         triangle(no%).data(0).relation_no(tn_(0), 1).no, 0, _
          temp_record.record_data.data0.condition_data)
           'temp_record.record_data.data0.theorem_no = 54
       new_re_no_for_triangle = set_Drelation(triangle(no%).data(0).poi(tn_(1)), _
         triangle(no%).data(0).poi(tn_(2)), triangle(no%).data(0).poi(tn_(0)), _
          triangle(no%).data(0).poi(tn_(2)), 0, 0, 0, 0, 0, 0, value$, temp_record, 0, _
           0, 0, 0, 0, False)
       If new_re_no_for_triangle > 1 Then
        Exit Function
       End If
      End If
    'ElseIf angle(triangle(no%).data(0).angle(tn_(1))).data(0).value <> "" And _
            triangle(no%).data(0).relation_no(tn_(0), 1).no = 0 Then
    '  value$ = time_string(triangle(no%).data(0).re_value(tn_(0)), _
         triangle(no%).data(0).re_value(tn_(0)), True, False)
    '  value$ = minus_string(value$, "1", True, False)
    '  If solut_2order_equation("1", time_string("-2", time_string( _
                 triangle(no%).data(0).re_value(tn_(0)), cos_( _
                  angle(triangle(no%).data(0).angle(tn_(1))).data(0).value, 0), _
                   False, False), True, False), value$, val(0), val(1), False) Then
    '  If InStr(1, value$, "F", 0) = 0 Then
     ' temp_record.record_data.data0.condition_data.condition_no = 1
     ' temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_
     ' temp_record.record_data.data0.condition_data.condition(1).no = _
     '                  angle(triangle(no%).data(0).angle(tn_(1))).data(0).value_no
     ' Call add_conditions_to_record( _
     '  triangle(no%).data(0).relation_no(tn_(0), 0).ty, _
     '   triangle(no%).data(0).relation_no(tn_(0), 0).no, _
     '    triangle(no%).data(0).relation_no(tn_(0), 1).no, 0, _
     '     temp_record.record_data.data0.condition_data)
     '  sig(0) = minus_string("90", angle(triangle(no%).data(0).angle(tn_(1))).data(0).value, _
     '      True, False)
     '  sig(0) = Mid$(sig(0), 1, 1)
     '  If sig(0) = "-" Or sig(0) = "@" Then
     '   new_re_no_for_triangle = set_Drelation(triangle(no%).data(0).poi(tn_(1)), _
     '    triangle(no%).data(0).poi(tn_(2)), triangle(no%).data(0).poi(tn_(0)), _
     '     triangle(no%).data(0).poi(tn_(2)), 0, 0, 0, 0, 0, 0, val(1), temp_record, 0, _
     '      0, 0, 0, 0)
     '  Else
     '   new_re_no_for_triangle = set_Drelation(triangle(no%).data(0).poi(tn_(1)), _
     '    triangle(no%).data(0).poi(tn_(2)), triangle(no%).data(0).poi(tn_(0)), _
     '     triangle(no%).data(0).poi(tn_(2)), 0, 0, 0, 0, 0, 0, val(0), temp_record, 0, _
     '      0, 0, 0, 0)
     '  End If
     '  If new_re_no_for_triangle > 1 Then
     '   Exit Function
     '  End If
     ' End If
     ' End If
    'ElseIf angle(triangle(no%).data(0).angle(tn_(2))).data(0).value <> "" And _
    '        triangle(no%).data(0).relation_no(tn_(0), 1).no = 0 Then
    '    value$ = time_string(triangle(no%).data(0).re_value(tn_(0)), _
    '     triangle(no%).data(0).re_value(tn_(0)), True, False)
    '       value$ = minus_string("1", value$, True, False)
    '  If solut_2order_equation("1", time_string("-2", _
    '             cos_(angle(triangle(no%).data(0).angle(tn_(2))).data(0).value, 0), _
                     True, False), value$, val(0), val(1), False) Then
    '  If InStr(1, value$, "F", 0) = 0 Then
    '  temp_record.record_data.data0.condition_data.condition_no = 1
    '  temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_
    '  temp_record.record_data.data0.condition_data.condition(1).no = _
                       angle(triangle(no%).data(0).angle(tn_(2))).data(0).value_no
    '  Call add_conditions_to_record( _
       triangle(no%).data(0).relation_no(tn_(0), 0).ty, _
        triangle(no%).data(0).relation_no(tn_(0), 0).no, _
         triangle(no%).data(0).relation_no(tn_(0), 1).no, 0, _
          temp_record.record_data.data0.condition_data)
    '   sig(0) = minus_string(angle(triangle(no%).data(0).angle(tn_(2))).data(0).value, "90", _
           True, False)
     '   sig(0) = Mid$(sig(0), 1, 1)
     '  If sig(0) = "-" Or sig(0) = "@" Then
     '  new_re_no_for_triangle = set_Drelation(triangle(no%).data(0).poi(tn_(1)), _
         triangle(no%).data(0).poi(tn_(0)), triangle(no%).data(0).poi(tn_(0)), _
          triangle(no%).data(0).poi(tn_(2)), 0, 0, 0, 0, 0, 0, val(0), temp_record, 0, _
           0, 0, 0, 0)
      ' Else
      ' new_re_no_for_triangle = set_Drelation(triangle(no%).data(0).poi(tn_(1)), _
         triangle(no%).data(0).poi(tn_(0)), triangle(no%).data(0).poi(tn_(0)), _
          triangle(no%).data(0).poi(tn_(2)), 0, 0, 0, 0, 0, 0, val(1), temp_record, 0, _
           0, 0, 0, 0)
      ' End If
      ' If new_re_no_for_triangle > 1 Then
      '  Exit Function
      ' End If
      'End If
      'End If
    End If
  'End If
 'End If
End Function

Public Function set_display_string_circle(cir As circle_data0_type) As String
If cir.center > 0 Then
 If cir.in_point(0) = 0 Then
   set_display_string_circle = LoadResString_(1630, _
       "\\1\\" + m_poi(cir.center).data(0).data0.name)
 Else
   set_display_string_circle = LoadResString_(1630, _
         "\\1\\" + m_poi(cir.center).data(0).data0.name + "(" + _
                 m_poi(cir.in_point(1)).data(0).data0.name + ")")
 End If
Else
 If cir.in_point(0) = 2 Then
  set_display_string_circle = _
   LoadResString_(1635, "\\1\\" + m_poi(cir.in_point(1)).data(0).data0.name + _
        m_poi(cir.in_point(2)).data(0).data0.name)
 Else
   set_display_string_circle = _
    LoadResString_(1635, "\\1\\" + m_poi(cir.in_point(1)).data(0).data0.name + _
        m_poi(cir.in_point(2)).data(0).data0.name + _
          m_poi(cir.in_point(3)).data(0).data0.name)
           LoadResString (793)
 End If
End If

End Function

Public Function set_display_item0(it As item0_data_type, dis_ty As Byte, display_value As Boolean, is_depened As Boolean) As String
Dim i%
If it.sig = "*" Or it.sig = "C" Then
 If it.poi(0) = it.poi(2) And it.poi(1) = it.poi(3) Then
  If it.poi(1) > 0 Then
   set_display_item0 = set_display_element(it.poi(0), it.poi(1), dis_ty, is_depened) + _
     "^2"
  Else
   set_display_item0 = "(" + set_display_element(it.poi(0), it.poi(1), dis_ty, is_depened) + ")" + _
     "^2"
  End If
 Else
  If it.sig = "*" Then
   set_display_item0 = set_display_element(it.poi(0), it.poi(1), dis_ty, is_depened) + _
     "*" + set_display_element(it.poi(2), it.poi(3), dis_ty, is_depened)
  Else
   set_display_item0 = set_display_element(it.poi(0), it.poi(1), dis_ty, is_depened) + _
     "x" + set_display_element(it.poi(2), it.poi(3), dis_ty, is_depened)
  End If
 End If
 If it.value <> "" And display_value Then
  If it.record_for_value.data0.condition_data.condition_no = 0 Then
   set_display_item0 = LoadResString_(1445, "\\1\\" + set_display_item0 + _
    "=" + display_string_(it.value, dis_ty))
  Else
   set_display_item0 = set_display_item0 + _
    "=" + display_string_(it.value, dis_ty)
  End If
 End If
ElseIf it.sig = "/" Then
 If it.poi(0) = 0 And it.poi(1) = 0 Then
  set_display_item0 = "1/" + _
         set_display_element(it.poi(2), it.poi(3), dis_ty, is_depened)
 Else
  set_display_item0 = set_display_element(it.poi(0), it.poi(1), dis_ty, is_depened) + _
     "/" + set_display_element(it.poi(2), it.poi(3), dis_ty, is_depened)
 End If
 If it.value <> "" And it.record_for_value.data0.condition_data.condition_no = 0 And display_value Then
  set_display_item0 = LoadResString_(1445, "\\1\\" + set_display_item0 + _
    "=" + display_string_(it.value, dis_ty))
 End If
ElseIf it.sig = "-" Or it.sig = "+" Then
   set_display_item0 = "(" + set_display_element(it.poi(0), it.poi(1), dis_ty, is_depened) + _
    it.sig + set_display_element(it.poi(2), it.poi(3), dis_ty, is_depened) + ")"
ElseIf it.sig = "~" Then
 set_display_item0 = set_display_element(it.poi(0), it.poi(1), dis_ty, is_depened)
 If it.value <> "" And it.record_for_value.data0.condition_data.condition_no = 0 And display_value Then
  set_display_item0 = LoadResString_(1445, "\\1\\" + set_display_item0 + _
    "=" + display_string_(it.value, dis_ty))
  End If
End If
End Function

Public Function add_trans_record(ByVal trans_from%, ByVal trans_to1%, _
          ByVal trans_to2%, ByVal para1$, ByVal para2$, re As record_type0) As Boolean
Dim i%
If trans_to1% = 0 Or trans_to1% > trans_to2% Then
 Call exchange_two_integer(trans_to1%, trans_to2%)
 Call exchange_two_string(para1$, para2$)
End If
For i% = 1 To item0(trans_from%).data(0).record_for_trans.last_trans_to
 If item0(trans_from%).data(0).record_for_trans.record(i%).to_no(0) = trans_to1% And _
     item0(trans_from%).data(0).record_for_trans.record(i%).to_no(1) = trans_to2% Then
   add_trans_record = False
    Exit Function
 End If
Next i%
re.para(0) = para1$
 re.para(1) = para2$
re.to_no(0) = trans_to1%
 re.to_no(1) = trans_to2%
  item0(trans_from%).data(0).record_for_trans.last_trans_to = _
   item0(trans_from%).data(0).record_for_trans.last_trans_to + 1
ReDim Preserve item0(trans_from%).data(0).record_for_trans.record( _
         item0(trans_from%).data(0).record_for_trans.last_trans_to) As record_type0
item0(trans_from%).data(0).record_for_trans.record( _
         item0(trans_from%).data(0).record_for_trans.last_trans_to) = re
    add_trans_record = True
End Function
Public Sub remove_record_for_zero_para(pA() As String, da() As Integer, last_record As Integer)
Dim i%, j%
For i% = last_record - 1 To 0 Step -1
 If pA(i%) = "0" Then
   For j% = i% To last_record - 1
    If pA(j% + 1) = "0" Or pA(j% + 1) = "" Then
     pA(j%) = 0
     da(j%) = 0
    Else
     pA(j%) = pA(j% + 1)
     da(j%) = da(j% + 1)
    End If
   Next j%
   pA(last_record) = "0"
   da(last_record) = 0
 End If
Next i%
 For i% = 0 To last_record
  If da(i%) = 0 Then
   last_record = i% - 1
    Exit Sub
  End If
 Next i%
End Sub
Public Function set_item0_from_data(item_data As item0_data_type, _
                ByVal para$, ByVal value$, conclusion_no%, _
                 re_for_value As condition_data_type, _
                   ByVal from_no%, no%, no_reduce As Byte) As Byte       ', ByVal form_no%, ty As Byte) As Byte
Dim i%, j%, tn% 'ty =0  后推，ty=1 前推
Dim n_(3) As Integer
If item_data.poi(0) = 0 And item_data.poi(1) = 0 And _
      item_data.poi(2) = 0 And item_data.poi(3) = 0 Then
       no% = 0
    Exit Function
End If
If is_item0_(item_data, no%, n_(0), n_(1), n_(2)) Then '已有item0
If value$ <> "" And item0(no%).data(0).value = "" Then
   item0(no%).data(0).value = value
    item0(no%).data(0).record_for_value.data0.condition_data = re_for_value  '赋值
     set_item0_from_data = set_conditions_from_item_value(no%)
      If set_item0_from_data > 1 Then
       Exit Function
      End If
End If
If from_no% > 0 Then '由已有item0推出
 '由已知item推出
   If from_no% = no% Then
    Exit Function
   Else
   For i% = 1 To item0(from_no%).data(0).record_for_trans.last_trans_to
        '已含在item0(from_no%).data(0).record_for_trans中
    If item0(from_no%).data(0).record_for_trans.record(i%).to_no(0) = no% Or _
        item0(from_no%).data(0).record_for_trans.record(i%).to_no(1) = no% Then
         Exit Function
    End If
   Next i%
   '将no%加入item0(from_no%).data(0).record_for_trans中
   item0(from_no%).data(0).record_for_trans.last_trans_to = _
     item0(from_no%).data(0).record_for_trans.last_trans_to + 1 '记录根据
      ReDim Preserve item0(from_no%).data(0).record_for_trans.record( _
         item0(from_no%).data(0).record_for_trans.last_trans_to) As record_type0
          're_for_trans.to_no(0) = no%
           're_for_trans.para(0) = para$
      item0(from_no%).data(0).record_for_trans.record( _
         item0(from_no%).data(0).record_for_trans.last_trans_to).to_no(0) = no% 're_for_trans
      item0(from_no%).data(0).record_for_trans.record( _
         item0(from_no%).data(0).record_for_trans.last_trans_to).para(0) = para$ 're_for_trans
      item0(from_no%).data(0).record_for_trans.record( _
         item0(from_no%).data(0).record_for_trans.last_trans_to).condition_data = re_for_value
     set_item0_from_data = combine_item_with_general_string_ _
       (from_no%, item0(from_no%).data(0).record_for_trans.last_trans_to)
         Exit Function
    End If
End If
  set_item0_from_data = 0
Else
'建立新的item
item_data.conclusion_no = conclusion_no%
If last_conditions.last_cond(1).item0_no Mod 10 = 0 Then
 ReDim Preserve item0(last_conditions.last_cond(1).item0_no + 10) As item0_type
End If
last_conditions.last_cond(1).item0_no = last_conditions.last_cond(1).item0_no + 1
    item0(last_conditions.last_cond(1).item0_no).data(0) = item_data
 For j% = 0 To 2
  For i% = last_conditions.last_cond(1).item0_no To n_(j%) + 2 Step -1
   item0(i%).data(0).index(j%) = item0(i% - 1).data(0).index(j%)
  Next i%
   item0(n_(j%) + 1).data(0).index(j%) = last_conditions.last_cond(1).item0_no
 Next j%
no% = last_conditions.last_cond(1).item0_no
'item0(no%).data(0).record_for_initial = re
If item0(no%).data(0).value <> "" Then
 set_item0_from_data = set_conditions_from_item_value(no%)
  If set_item0_from_data > 1 Then
   Exit Function
  End If
End If
If item0(no%).data(0).conclusion_no > 0 Then
   set_item0_from_data = set_item0_for_reduce_area(no%)
    If set_item0_from_data > 1 Then
    Exit Function
    End If
End If
If from_no% > 0 Then
   item0(from_no%).data(0).record_for_trans.last_trans_to = _
     item0(from_no%).data(0).record_for_trans.last_trans_to + 1
      ReDim Preserve item0(from_no%).data(0).record_for_trans.record( _
         item0(from_no%).data(0).record_for_trans.last_trans_to) As record_type0
          're_for_trans.to_no(0) = no%
           're_for_trans.para(0) = para$
      item0(from_no%).data(0).record_for_trans.record( _
         item0(from_no%).data(0).record_for_trans.last_trans_to).to_no(0) = no% ' re_for_trans
      item0(from_no%).data(0).record_for_trans.record( _
         item0(from_no%).data(0).record_for_trans.last_trans_to).para(0) = para$ 're_for_trans
      item0(from_no%).data(0).record_for_trans.record( _
         item0(from_no%).data(0).record_for_trans.last_trans_to).condition_data = re_for_value
     set_item0_from_data = combine_item_with_general_string_ _
       (from_no%, item0(from_no%).data(0).record_for_trans.last_trans_to)
        If set_item0_from_data > 1 Then
         Exit Function
        End If
End If
If value$ <> "" Then
   item0(no%).data(0).value = value
    Call set_level(re_for_value)
     item0(no%).data(0).record_for_value.data0.condition_data = re_for_value
ElseIf from_no% > 0 Then
  If item0(from_no%).data(0).value <> "" Then
   item0(no%).data(0).value = divide_string(item0(from_no%).data(0).value, para$, True, False)
    item0(no%).data(0).record_for_value = item0(from_no%).data(0).record_for_value
     Call add_record_to_record(re_for_value, item0(no%).data(0).record_for_value.data0.condition_data)
  End If
End If
 If item0(no%).data(0).value <> "" Then
 set_item0_from_data = combine_item_with_general_string_(no%, -1)
 If set_item0_from_data > 1 Then
  Exit Function
 End If
 set_item0_from_data = combine_general_string_with_item_value(0, no%)
  If set_item0_from_data > 1 Then
  Exit Function
 End If
 set_item0_from_data = combine_item0_value_with_two_line_value(0, no%)
  If set_item0_from_data > 1 Then
  Exit Function
 End If
 End If
set_item0_from_data = combine_item_with_dpoint_pair(no%, no_reduce)
If set_item0_from_data > 1 Then
 Exit Function
End If
set_item0_from_data = combine_item_with_line_value(no%, no_reduce)
If set_item0_from_data > 1 Then
 Exit Function
End If
set_item0_from_data = combine_item_with_midpoint(no%, no_reduce)
If set_item0_from_data > 1 Then
 Exit Function
End If
set_item0_from_data = combine_item_with_eline(no%, no_reduce)
If set_item0_from_data > 1 Then
 Exit Function
End If
set_item0_from_data = combine_item_with_relation(no%, no_reduce)
If set_item0_from_data > 1 Then
 Exit Function
End If
set_item0_from_data = combine_item_with_eangle(no%, no_reduce)
If set_item0_from_data > 1 Then
 Exit Function
End If
set_item0_from_data = combine_item0_with_two_line_value(no%)
If set_item0_from_data > 1 Then
 Exit Function
End If
set_item0_from_data = combine_item0_with_tri_function(no%)
If set_item0_from_data > 1 Then
 Exit Function
End If
set_item0_from_data = combine_item_with_angle3_value(no%)
If set_item0_from_data > 1 Then
 Exit Function
End If
set_item0_from_data = 1
End If
End Function

Public Function set_tri_function(ByVal A%, ByVal sin_value$, ByVal cos_value$, ByVal tan_value$, _
           ByVal ctan_value$, no%, re As total_record_type, is_from_right_triangle As Boolean, _
             tri_f As tri_function_data_type, no_reduce As Byte) As Byte
Dim n%, temp_no%, tn%
Dim i%
Dim n_(3) As Integer
Dim val As Variant
Dim triA As temp_triangle_type
Dim triA_ As triangle_data0_type
Dim tri_f_ As tri_function_data_type
Dim set_new_data As Boolean
Dim para$
Dim c_data As condition_data_type
Dim temp_record As total_record_type
'On Error GoTo set_tri_function_error
If no% > 0 Then
 GoTo set_tri_function_mark0
End If
tri_f_ = tri_f
If A% > 0 Then
tri_f_.A = A%
If angle(A%).data(0).value <> "" Then
 Exit Function
ElseIf sin_value$ = "" And cos_value$ = "" And tan_value$ = "" And ctan_value$ = "" Then
 Exit Function
End If
End If
If sin_value$ <> "" Then
 tri_f_.sin_value = sin_value$
End If
If cos_value$ <> "" Then
 tri_f_.cos_value = cos_value$
End If
If tan_value$ <> "" Then
 tri_f_.tan_value = tan_value$
End If
If ctan_value$ <> "" Then
 tri_f_.ctan_value = ctan_value$
End If
If is_tri_function(A%, tri_f_, no%, n%) = 1 Then
Exit Function
Else
temp_no% = last_conditions.last_cond(1).tri_function_no
For i% = 1 To temp_no%
tri_function(i%).record_.index = tri_function(i%).data(0).record.data1.index
Next i%
Call set_level(re.record_data.data0.condition_data)
If last_conditions.last_cond(1).tri_function_no Mod 10 = 0 Then
ReDim Preserve tri_function(last_conditions.last_cond(1).tri_function_no + 10) As tri_function_type
End If
last_conditions.last_cond(1).tri_function_no = last_conditions.last_cond(1).tri_function_no + 1
set_new_data = True
tri_function(last_conditions.last_cond(1).tri_function_no).data(0) = tri_f_
tri_function(last_conditions.last_cond(1).tri_function_no).data(0).record = re.record_data
tri_function(last_conditions.last_cond(1).tri_function_no).record_ = re.record_
For i% = last_conditions.last_cond(1).tri_function_no To n% + 2 Step -1
tri_function(i%).data(0).record.data1.index.i(0) = _
   tri_function(i% - 1).data(0).record.data1.index.i(0)
Next i%
tri_function(n% + 1).data(0).record.data1.index.i(0) = last_conditions.last_cond(1).tri_function_no
no% = last_conditions.last_cond(1).tri_function_no
If tri_function(no%).data(0).sin_value <> "" Then
    tri_function(no%).data(0).initial_data = 1
     If tri_function(no%).data(0).cos_value = "" Then
      tri_function(no%).data(0).cos_value = sqr_string(minus_string("1", _
         time_string(tri_function(no%).data(0).sin_value, tri_function(no%).data(0).sin_value, _
           False, False), False, False), True, False)
            If angle(tri_function(no%).data(0).A).data(0).value <> "" Then
             If val0(angle(tri_function(no%).data(0).A).data(0).value, val) Then
              If val > 90 Then
                tri_function(no%).data(0).cos_value = time_string("-1", tri_function(no%).data(0).cos_value, True, False)
              End If
             Else
               cos_value$ = "F"
             End If
            End If
           End If
     If tri_function(no%).data(0).tan_value = "" And tri_function(no%).data(0).cos_value <> "0" And _
                   tri_function(no%).data(0).cos_value <> "" And tri_function(no%).data(0).sin_value <> "" Then
       tri_function(no%).data(0).tan_value = divide_string(tri_function(no%).data(0).sin_value, _
              tri_function(no%).data(0).cos_value, True, False)
     End If
     If tri_function(no%).data(0).ctan_value = "" And tri_function(no%).data(0).sin_value <> "0" And _
             tri_function(no%).data(0).cos_value <> "" And tri_function(no%).data(0).sin_value <> "" Then
         tri_function(no%).data(0).ctan_value = divide_string(tri_function(no%).data(0).cos_value, _
                  tri_function(no%).data(0).sin_value, True, False)
     End If
 ElseIf tri_function(no%).data(0).cos_value <> "" Then 'And tri_f_.cos_value <> "F" Then
    If tri_function(no%).data(0).initial_data = 0 Then
     tri_function(no%).data(0).initial_data = 2
    End If
    If tri_function(no%).data(0).sin_value = "" Then
     tri_function(no%).data(0).sin_value = sqr_string(minus_string("1", _
           time_string(tri_function(no%).data(0).cos_value, _
                   tri_function(no%).data(0).cos_value, False, False), False, False), True, False)
    End If
    If tri_function(no%).data(0).tan_value = "" And tri_function(no%).data(0).cos_value <> "0" Then
      tri_function(no%).data(0).tan_value = divide_string(tri_function(no%).data(0).sin_value, _
             tri_function(no%).data(0).cos_value, True, False)
    End If
    If tri_function(no%).data(0).ctan_value = "" Then
     tri_function(no%).data(0).ctan_value = divide_string(tri_function(no%).data(0).cos_value, _
        tri_function(no%).data(0).sin_value, True, False)
    End If
 ElseIf tri_function(no%).data(0).tan_value <> "" Then 'And tri_function(no%).data(0).tan_value <> "F" Then
   If tri_function(no%).data(0).initial_data = 0 Then
    tri_function(no%).data(0).initial_data = 3
   End If
   If tri_function(no%).data(0).ctan_value = "" Then
     tri_function(no%).data(0).ctan_value = divide_string("1", tri_function(no%).data(0).tan_value, True, False)
   End If
   If tri_function(no%).data(0).sin_value = "" Then
    tri_function(no%).data(0).sin_value = divide_string(tri_function(no%).data(0).tan_value, _
         sqr_string(add_string("1", time_string(tri_function(no%).data(0).tan_value, _
            tri_function(no%).data(0).tan_value, False, False), False, False), _
              False, False), True, False)
   End If
   If tri_function(no%).data(0).cos_value = "" Then
    tri_function(no%).data(0).cos_value = divide_string(tri_function(no%).data(0).ctan_value, _
      sqr_string(add_string("1", time_string(tri_function(no%).data(0).ctan_value, _
         tri_function(no%).data(0).ctan_value, False, False), False, False), _
            False, False), True, False)
   End If
ElseIf tri_function(no%).data(0).ctan_value <> "" Then  'And tri_function(no%).data(0).ctan_value  <> "F" Then
   If tri_function(no%).data(0).initial_data = 0 Then
    tri_function(no%).data(0).initial_data = 4
   End If
   If tri_function(no%).data(0).tan_value = "" Then
    tri_function(no%).data(0).tan_value = divide_string("1", tri_function(no%).data(0).ctan_value, True, False)
   End If
   If tri_function(no%).data(0).sin_value = "" Then
    tri_function(no%).data(0).sin_value = divide_string(tri_function(no%).data(0).tan_value, _
         sqr_string(add_string("1", time_string(tri_function(no%).data(0).tan_value, _
            tri_function(no%).data(0).tan_value, False, False), False, False), _
              False, False), True, False)
   End If
   If tri_f_.cos_value = "" Then
     tri_function(no%).data(0).cos_value = divide_string(tri_function(no%).data(0).ctan_value, _
           sqr_string(add_string("1", time_string(tri_function(no%).data(0).ctan_value, _
              tri_function(no%).data(0).ctan_value, False, False), False, False), _
                 False, False), True, False)
   End If
 End If
Call is_conclusion_no(general_string_, n_())
For i% = 0 To last_conclusion - 1
If n_(i%) >= 0 Then
If con_general_string(n_(i%)).data(0).item(1) = 0 Then
If item0(con_general_string(n_(i%)).data(0).item(0)).data(0).poi(1) < 0 Then
temp_record = re
tn% = 0
If tri_function(no%).data(0).cos_value <> "F" Then
Call set_item0(tri_f.A, cos_sig, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
        tri_function(no%).data(0).cos_value, para$, _
       0, c_data, 0, tn%, 0, 0, c_data, False)
    If tn% > 0 Then
     set_tri_function = set_general_string(tn%, 0, 0, 0, para$, "0", "0", "0", tri_function(no%).data(0).cos_value, _
       0, 0, 0, temp_record, 0, 0)
     If set_tri_function > 1 Then
      Exit Function
     End If
    End If
End If
    tn% = 0
If tri_function(no%).data(0).sin_value <> "F" Then
Call set_item0(tri_f.A, sin_sig, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
             tri_function(no%).data(0).sin_value, para$, _
       0, c_data, 0, tn%, 0, 0, c_data, False)
     If tn% > 0 Then
      set_tri_function = set_general_string(tn%, 0, 0, 0, para$, "0", "0", "0", tri_function(no%).data(0).sin_value, _
       0, 0, 0, temp_record, 0, 0)
      If set_tri_function > 1 Then
       Exit Function
      End If
     End If
End If
     tn% = 0
If tri_function(no%).data(0).tan_value <> "F" Then
Call set_item0(tri_f.A, tan_sig, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
               tri_function(no%).data(0).tan_value, para$, _
       0, c_data, 0, tn%, 0, 0, c_data, False)
       If tn% > 0 Then
        set_tri_function = set_general_string(tn%, 0, 0, 0, para$, "0", "0", "0", tri_function(no%).data(0).tan_value, _
          0, 0, 0, temp_record, 0, 0)
        If set_tri_function > 1 Then
         Exit Function
        End If
       End If
End If
        tn% = 0
If tri_function(no%).data(0).ctan_value <> "F" Then
Call set_item0(tri_f.A, ctan_sig, 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
                 tri_function(no%).data(0).ctan_value, para$, _
       0, c_data, 0, tn%, 0, 0, c_data, False)
       If tn% > 0 Then
       set_tri_function = set_general_string(tn%, 0, 0, 0, para$, "0", "0", "0", tri_function(no%).data(0).ctan_value, _
        0, 0, 0, temp_record, 0, 0)
        If set_tri_function > 1 Then
         Exit Function
        End If
       End If
End If
End If
End If
End If
Next i%
set_tri_function = combine_eangle_for_tri_function(no%)
   Exit Function
  'End If
set_tri_function_mark0:
 set_tri_function = set_property_of_tri_function(no%)
 If set_tri_function > 1 Then
  Exit Function
 End If
 set_tri_function = combine_tri_function_with_item0(no%, no_reduce)
  If set_tri_function > 1 Then
   Exit Function
  End If
End If
Exit Function
set_tri_function_error:
set_tri_function = 0
If set_new_data Then
 last_conditions.last_cond(1).tri_function_no = temp_no%
For i% = 1 To temp_no%
 tri_function(i%).data(0).record.data1.index = tri_function(i%).record_.index
Next i%
End If
End Function

Public Function set_display_element(ByVal p1%, ByVal p2%, dis_ty As Byte, is_depend As Boolean) As String
If p2% > 0 And p2% < 1000 Then
   set_display_element = m_poi(p1%).data(0).data0.name + _
          m_poi(p2%).data(0).data0.name
    If is_depend Then
       Call set_depend_from_point(p1%)
       Call set_depend_from_point(p2%)
    End If
ElseIf p2% > 1000 Then
 set_display_element = LoadResString_(1620, "\\1\\" + m_poi(p1%).data(0).data0.name + _
                    "\\2\\" + m_poi(m_lin(p2% - 1000).data(0).data0.poi(0)).data(0).data0.name + _
            m_poi(m_lin(p2% - 1000).data(0).data0.poi(1)).data(0).data0.name)
ElseIf p2% = 0 Then
 Exit Function
'ElseIf p2% = -8 Then
' set_display_element = set_display_g_string(general_string(p1%), False, dis_ty)
'ElseIf p2% = -7 Then
' set_display_element = set_display_item0(item0(p1%).data(0), dis_ty)
'ElseIf p2% = -6 Then
' set_display_element = set_display_four_sides_fig(four_sides_fig(p1%).data(0))
'ElseIf p2% = -5 Then
 set_display_element = set_triangle_display_string(p1%, 1, True, is_depend, 0, 0)
'ElseIf p2% < 0 And p2% > -5 Then
ElseIf p2% = -1 Then
 set_display_element = "sin" + set_display_angle(p1%, is_depend)
ElseIf p2% = -2 Then
 set_display_element = "cos" + set_display_angle(p1%, is_depend)
ElseIf p2% = -3 Then
 set_display_element = "tan" + set_display_angle(p1%, is_depend)
ElseIf p2% = -4 Then
 set_display_element = "ctan" + set_display_angle(p1%, is_depend)
ElseIf p2% = -6 Then
 set_display_element = set_display_angle(p1%, is_depend) ' + set_display_angle(p1%)
ElseIf p2% = -5 Then
 set_display_element = set_display_item0(item0(p1%).data(0), dis_ty, False, is_depend)
ElseIf p2% = -10 Then
 set_display_element = set_display_string_of_V_line(p1%, is_depend)
End If
End Function

Public Function set_area_of_triangle_from_item0(ByVal it%) As Byte
If th_chose(155).chose = 1 Then
If item0(it%).data(0).sig = "*" Then
 If item0(it%).data(0).value <> "" Then
  If item0(it%).data(0).line_no(0) > 0 And item0(it%).data(0).line_no(1) > 0 Then
   If item0(it%).data(0).poi(0) = item0(it%).data(0).poi(2) Then
    set_area_of_triangle_from_item0 = _
     set_area_of_triangle_from_item0_(it%, item0(it%).data(0).poi(1), _
      item0(it%).data(0).poi(0), item0(it%).data(0).poi(3))
    If set_area_of_triangle_from_item0 > 1 Then
     Exit Function
    End If
   ElseIf item0(it%).data(0).poi(0) = item0(it%).data(0).poi(3) Then
    set_area_of_triangle_from_item0 = _
     set_area_of_triangle_from_item0_(it%, item0(it%).data(0).poi(1), _
      item0(it%).data(0).poi(0), item0(it%).data(0).poi(2))
    If set_area_of_triangle_from_item0 > 1 Then
     Exit Function
    End If
   ElseIf item0(it%).data(0).poi(1) = item0(it%).data(0).poi(2) Then
    set_area_of_triangle_from_item0 = _
     set_area_of_triangle_from_item0_(it%, item0(it%).data(0).poi(0), _
      item0(it%).data(0).poi(1), item0(it%).data(0).poi(3))
    If set_area_of_triangle_from_item0 > 1 Then
     Exit Function
    End If
   ElseIf item0(it%).data(0).poi(1) = item0(it%).data(0).poi(3) Then
    set_area_of_triangle_from_item0 = _
     set_area_of_triangle_from_item0_(it%, item0(it%).data(0).poi(0), _
      item0(it%).data(0).poi(1), item0(it%).data(0).poi(2))
    If set_area_of_triangle_from_item0 > 1 Then
     Exit Function
    End If
   End If
  End If
 End If
End If
End If
End Function

Private Function set_area_of_triangle_from_item0_(it%, p1%, p2%, p3%) As Byte
Dim A%, triA%, l1%, l2%
Dim ts$
Dim temp_record As total_record_type
triA% = triangle_number(p1%, p2%, p3%, 0, A%, 0, l1%, 0, l2%, 0)
     If triA% > 0 And angle(A%).data(0).value <> "" And (l1% = 0 Or l2% = 0) Then
      ts$ = sin_(angle(A%).data(0).value, 0)
       If InStr(1, ts$, "F", 0) = 0 Then
        ts$ = time_string(item0(it%).data(0).value, ts$, False, False)
         ts$ = divide_string(ts$, "2", True, False)
          Call add_record_to_record(item0(it%).data(0).record_for_value.data0.condition_data, _
                                                       temp_record.record_data.data0.condition_data)
           Call add_conditions_to_record(angle3_value_, angle(A%).data(0).value_no, _
              0, 0, temp_record.record_data.data0.condition_data)
         set_area_of_triangle_from_item0_ = set_area_of_triangle(triA%, ts$, temp_record, 0, 0)
        End If
      End If
End Function

Public Function read_direction(n1%, n2%, n3%) As Integer
If n1% = 0 And n2% = 1 And n3% = 2 Then
read_direction = 1
ElseIf n1% = 0 And n2% = 2 And n3% = 1 Then
read_direction = -1
ElseIf n1% = 1 And n2% = 2 And n3% = 0 Then
read_direction = 2
ElseIf n1% = 1 And n2% = 0 And n3% = 2 Then
read_direction = -2
ElseIf n1% = 2 And n2% = 0 And n3% = 1 Then
read_direction = 3
ElseIf n1% = 2 And n2% = 1 And n3% = 0 Then
read_direction = -3
End If
End Function

Public Function set_tri_function_(ByVal A%, ty As Integer, v$, re As total_record_type, _
        is_from_right_triangle As Boolean, no_reduce As Byte) As Byte
Dim tri_f As tri_function_data_type
If ty = -1 Then
set_tri_function_ = set_tri_function(A%, v$, "", "", "", 0, re, is_from_right_triangle, tri_f, no_reduce)
ElseIf ty = -2 Then
set_tri_function_ = set_tri_function(A%, "", v$, "", "", 0, re, is_from_right_triangle, tri_f, no_reduce)
ElseIf ty = -3 Then
set_tri_function_ = set_tri_function(A%, "", "", v$, "", 0, re, is_from_right_triangle, tri_f, no_reduce)
ElseIf ty = -4 Then
set_tri_function_ = set_tri_function(A%, "", "", "", v$, 0, re, is_from_right_triangle, tri_f, no_reduce)
End If

End Function
Public Function set_element_value(ByVal it%, n%, ByVal v$, re As total_record_type, no_reduce As Byte) As Byte
Dim temp_record As total_record_type
If InStr(1, v$, "F", 0) > 0 Then
 Exit Function
End If
temp_record = re
If item0(it%).data(0).poi(2 * n% + 1) > 0 Then
set_element_value = set_line_value(item0(it%).data(0).poi(2 * n%), item0(it%).data(0).poi(2 * n% + 1), _
   v$, item0(it%).data(0).n(2 * n%), item0(it%).data(0).n(2 * n% + 1), item0(it%).data(0).line_no(n%), _
     temp_record, 0, 0, False)
ElseIf item0(it%).data(0).poi(2 * n% + 1) < 0 And item0(it%).data(0).poi(2 * n% + 1) > -5 Then
set_element_value = set_tri_function_(item0(it%).data(0).poi(2 * n%), item0(it%).data(0).poi(2 * n% + 1), _
          v$, re, 0, no_reduce)
ElseIf item0(it%).data(0).poi(2 * n% + 1) = -5 Then
set_element_value = set_item0_value(item0(it%).data(0).poi(2 * n%), 0, 0, v$, "", "", "", 0, _
        re.record_data.data0.condition_data)
ElseIf item0(it%).data(0).poi(2 * n% + 1) = -6 Then
set_element_value = set_angle_value(item0(it%).data(0).poi(2 * n%), _
          v$, temp_record, 0, no_reduce, False)
ElseIf item0(it%).data(0).poi(2 * n% + 1) = -7 Then
set_element_value = set_area_of_triangle(item0(it%).data(0).poi(2 * n%), _
          v$, temp_record, 0, no_reduce)
ElseIf item0(it%).data(0).poi(2 * n% + 1) = -8 Then
set_element_value = set_area_of_polygon0(item0(it%).data(0).poi(2 * n%), _
          v$, temp_record, 0, no_reduce)
ElseIf item0(it%).data(0).poi(2 * n% + 1) = -10 Then
set_element_value = set_V_line_value(Dtwo_point_line(item0(it%).data(0).poi(2 * n%)).data(0).v_poi(0), _
          Dtwo_point_line(item0(it%).data(0).poi(2 * n%)).data(0).v_poi(1), 0, 0, 0, _
            v$, temp_record, 0, False)
End If
End Function

Public Function set_two_line_time_form_area(ByVal no%, tri_data_ As triangle_data0_type, k%, no_reduce As Byte) As Byte
Dim n(2) As Integer
Dim temp_record As total_record_type
Dim ts$
Dim it%
Dim tri_data As triangle_data0_type
tri_data = tri_data_
n(0) = k%
n(1) = (k% + 1) Mod 3
n(2) = (k% + 2) Mod 3
If tri_data.tri_function(k%) > 0 Then
ts$ = tri_function(tri_data.tri_function(k%)).data(0).sin_value
Else
ts$ = sin_(angle(tri_data.angle(k%)).data(0).value, 0)
End If
If InStr(1, ts$, "F", 0) = 0 Then
 temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
 temp_record.record_data.data0.condition_data.condition(1).no = tri_data.area_no
 If tri_data.tri_function(k%) > 0 Then
  Call add_record_to_record(tri_function(tri_data.tri_function(k%)).data(0).record.data0.condition_data, _
     temp_record.record_data.data0.condition_data)
 Else
 Call add_conditions_to_record(angle3_value_, angle(tri_data.angle(k%)).data(0).value_no, _
        0, 0, temp_record.record_data.data0.condition_data)
  End If
 ts$ = divide_string(time_string("2", area_of_element(tri_data.area_no).data(0).value, _
         False, False), ts, True, False)
  set_two_line_time_form_area = set_item0(tri_data.poi(n(0)), tri_data.poi(n(1)), tri_data.poi(n(0)), _
     tri_data.poi(n(2)), "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", ts$, "1", 0, _
      temp_record.record_data.data0.condition_data, 0, it%, no_reduce, 0, condition_data0, False)
End If
End Function

Public Function solve_right_triangle_from_line_Rline(ByVal no%, _
           triA_data_ As triangle_data0_type, _
             n1%, n2%, n3%, cal_float As Boolean, di As Integer, no_reduce As Byte) As Byte
Dim tn(2) As Integer
Dim temp_record As total_record_type
Dim ts As String
Dim ts_ As String
Dim a_v As String
Dim tri_f As tri_function_data_type
Dim n%
Dim triA_data As triangle_data0_type
triA_data = triA_data_
tn(0) = n1%
 tn(1) = n2%
  tn(2) = n3%
       temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
        temp_record.record_data.data0.condition_data.condition(1).no = triA_data.line_value(tn(0))
         temp_record.record_data.data0.condition_data.condition(2).ty = line_value_
          temp_record.record_data.data0.condition_data.condition(2).no = triA_data.line_value(tn(1))
           temp_record.record_data.data0.condition_data.condition_no = 2
           Call add_conditions_to_record(angle3_value_, angle(triA_data.angle(tn(0))).data(0).value_no, _
              0, 0, temp_record.record_data.data0.condition_data)
  If triA_data.line_value(tn(2)) = 0 And th_chose(51).chose = 1 Then
      temp_record.record_data.data0.theorem_no = 51
    ts = minus_string(line_value(triA_data.line_value(tn(0))).data(0).data0.squar_value, _
          line_value(triA_data.line_value(tn(1))).data(0).data0.squar_value, True, False)
     ts = sqr_string(ts, True, False)
     n% = 0
     solve_right_triangle_from_line_Rline = set_line_value(triA_data.poi(tn(0)), triA_data.poi(tn(1)), _
        ts, 0, 0, 0, temp_record, n%, 0, False)
      If n% > 0 Then
       triangle(no%).data(0).line_value(tn(2)) = n%
      End If
      If solve_right_triangle_from_line_Rline > 1 Then
       Exit Function
      End If
  End If
  '******************************
       ts = divide_string(line_value(triA_data.line_value(tn(1))).data(0).data0.value, _
               line_value(triA_data.line_value(tn(0))).data(0).data0.value, True, False)
                '对边与斜边比
       'ts_ = time_string(line_value(tria_data.line_value(tn(1))).data(0).data0.value, _
               line_value(tria_data.line_value(tn(0))).data(0).data0.value, True, False)
  If angle(triA_data.angle(tn(1))).data(0).value = "" And triA_data.tri_function(tn(1)) = 0 Then
         a_v = acsin_(ts)
          n% = 0
           temp_record.record_data.data0.theorem_no = 118
            solve_right_triangle_from_line_Rline = set_angle_value( _
               triA_data.angle(tn(1)), a_v, temp_record, n%, 0, False)
          'If n% > 0 Then
           'triangle(no%).data(0).angle_value(tn(1)) = n%
          'End If
          If solve_right_triangle_from_line_Rline > 1 Then
           Exit Function
          End If
          n% = 0
            solve_right_triangle_from_line_Rline = set_tri_function( _
               triA_data.angle(tn(1)), ts, "", "", "", n%, temp_record, True, tri_f, no_reduce)
          If solve_right_triangle_from_line_Rline > 1 Then
           Exit Function
          End If
          n% = 0
            solve_right_triangle_from_line_Rline = set_tri_function( _
               triA_data.angle(tn(2)), "", ts, "", "", n%, temp_record, True, tri_f, no_reduce)
          If solve_right_triangle_from_line_Rline > 1 Then
           Exit Function
          End If
   End If
   If angle(triA_data.angle(tn(2))).data(0).value = "" And triA_data.tri_function(tn(2)) = 0 Then
          a_v = accos_(ts)
            n% = 0
             temp_record.record_data.data0.theorem_no = 118
           solve_right_triangle_from_line_Rline = set_angle_value( _
               triA_data.angle(tn(2)), a_v, temp_record, n%, 0, False)
           'If n% > 0 Then
           ' triangle(no%).data(0).angle_value(tn(2)) = n%
           'End If
           If solve_right_triangle_from_line_Rline > 1 Then
            Exit Function
           End If
           n% = 0
              solve_right_triangle_from_line_Rline = set_tri_function(triA_data.angle(tn(2)), _
               "", ts, "", "", n%, temp_record, True, tri_f, no_reduce)
           If n% > 0 Then
             triangle(no%).data(0).tri_function(tn(2)) = n%
           End If
           If solve_right_triangle_from_line_Rline > 1 Then
             Exit Function
           End If
           n% = 0
              solve_right_triangle_from_line_Rline = set_tri_function(triA_data.angle(tn(1)), _
                 ts, "", "", "", n%, temp_record, True, tri_f, no_reduce)
           If n% > 0 Then
             triangle(no%).data(0).tri_function(tn(2)) = n%
           End If
           If solve_right_triangle_from_line_Rline > 1 Then
             Exit Function
           End If
    End If
End Function
Public Function solve_right_triangle_from_two_Rline(ByVal no%, _
           triA_data_ As triangle_data0_type, _
             n1%, n2%, n3%, cal_float As Boolean, di As Integer, no_reduce As Byte) As Byte
Dim tn(2) As Integer
Dim temp_record As total_record_type
Dim ts As String
Dim ts_ As String
Dim a_v As String
Dim tri_f As tri_function_data_type
Dim n%
Dim triA_data As triangle_data0_type
triA_data = triA_data_
tn(0) = n1%
 tn(1) = n2%
  tn(2) = n3%
       temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
        temp_record.record_data.data0.condition_data.condition(1).no = triA_data.line_value(tn(1))
         temp_record.record_data.data0.condition_data.condition(2).ty = line_value_
          temp_record.record_data.data0.condition_data.condition(2).no = triA_data.line_value(tn(2))
           temp_record.record_data.data0.condition_data.condition_no = 2
           Call add_conditions_to_record(angle3_value_, angle(triA_data.angle(tn(0))).data(0).value_no, _
              0, 0, temp_record.record_data.data0.condition_data)
  If triA_data.line_value(tn(0)) = 0 And th_chose(51).chose = 1 Then
      temp_record.record_data.data0.theorem_no = 51
    ts = add_string(line_value(triA_data.line_value(tn(1))).data(0).data0.squar_value, _
          line_value(triA_data.line_value(tn(2))).data(0).data0.squar_value, True, False)
     ts = sqr_string(ts, True, False)
     n% = 0
     solve_right_triangle_from_two_Rline = set_line_value(triA_data.poi(tn(0)), triA_data.poi(tn(2)), _
        ts, 0, 0, 0, temp_record, n%, 0, False)
      If n% > 0 Then
       triangle(no%).data(0).line_value(tn(0)) = n%
      End If
      If solve_right_triangle_from_two_Rline > 1 Then
       Exit Function
      End If
  End If
  '******************************
 If line_value(triA_data.line_value(tn(2))).data(0).data0.value <> "0" Then
       ts = divide_string(line_value(triA_data.line_value(tn(1))).data(0).data0.value, _
               line_value(triA_data.line_value(tn(2))).data(0).data0.value, True, False)
                '对边与邻边比
  If InStr(1, ts, "F", 0) = 0 Then
  If angle(triA_data.angle(tn(1))).data(0).value = "" And triA_data.tri_function(tn(1)) = 0 Then
         a_v = actan_(ts)
          n% = 0
           temp_record.record_data.data0.theorem_no = 118
            solve_right_triangle_from_two_Rline = set_angle_value( _
               triA_data.angle(tn(1)), a_v, temp_record, n%, 0, False)
          ' If n% > 0 Then
          ' triangle(no%).data(0).angle_value(tn(1)) = n%
          'End If
          If solve_right_triangle_from_two_Rline > 1 Then
           Exit Function
          End If
          n% = 0
            solve_right_triangle_from_two_Rline = set_tri_function( _
               triA_data.angle(tn(1)), "", "", ts, "", n%, temp_record, True, tri_f, no_reduce)
          'If n% > 0 Then
          ' triangle(no%).data(0).tri_function(tn(1)) = n%
          'End If
          If solve_right_triangle_from_two_Rline > 1 Then
           Exit Function
          End If
          n% = 0
            solve_right_triangle_from_two_Rline = set_tri_function( _
               triA_data.angle(tn(2)), "", "", "", ts, n%, temp_record, True, tri_f, no_reduce)
          'If n% > 0 Then
          ' triangle(no%).data(0).tri_function(tn(1)) = n%
          'End If
          If solve_right_triangle_from_two_Rline > 1 Then
           Exit Function
          End If
      End If
     End If
    Else
     solve_right_triangle_from_two_Rline = set_angle_value(triA_data.angle(tn(2)), "0", temp_record, 0, 0, False)
    End If
End Function

Public Function solve_right_triangle_from_relation(ByVal no%, triA_data_ As triangle_data0_type, _
     ByVal n1%, ByVal n2%, ByVal n3%, di As Integer, no_reduce As Byte) As Byte
     '比:后比前,正弦定理
Dim ts As String
Dim ts_ As String
Dim aV As String
Dim ts0 As String
Dim cond_type As Byte
Dim tn(1) As Integer
Dim n%
Dim tri_f As tri_function_data_type
Dim temp_record As total_record_type
Dim triA_data As triangle_data0_type
triA_data = triA_data_
'If TH_CHOSE(153).chose = 0 Then
' Exit Function
'Else
 temp_record.record_data.data0.theorem_no = 153
'End If
  temp_record.record_data.data0.condition_data.condition(1) = triA_data.relation_no(n2%, 0)
  temp_record.record_data.data0.condition_data.condition_no = 1
  If triA_data.relation_no(n2%, 1).ty > 0 Then
  temp_record.record_data.data0.condition_data.condition(2) = triA_data.relation_no(n2%, 1)
  temp_record.record_data.data0.condition_data.condition_no = 2
  End If
  Call add_conditions_to_record(angle3_value_, angle(triA_data.angle(n1%)).data(0).value_no, _
         0, 0, temp_record.record_data.data0.condition_data)
  If read_direction(n1%, n2%, n3%) < 0 Then
   ts = triA_data.re_value(n2%)
  Else
   ts = divide_string("1", triA_data.re_value(n2%), False, False)
  End If
  n% = 0
  solve_right_triangle_from_relation = set_tri_function( _
       triA_data.angle(n3%), ts, "", "", "", n%, _
          temp_record, True, tri_f, no_reduce)
  If n% > 0 Then
   triangle(no%).data(0).tri_function(n3%) = n%
  End If
  If solve_right_triangle_from_relation > 1 Then
   Exit Function
  End If
  n% = 0
  solve_right_triangle_from_relation = set_tri_function( _
       triA_data.angle(n2%), "", ts, "", "", n%, _
          temp_record, True, tri_f, no_reduce)
  If n% > 0 Then
   triangle(no%).data(0).tri_function(n3%) = n%
  End If
  If solve_right_triangle_from_relation > 1 Then
   Exit Function
  End If
    aV = acsin_(ts$) 'tria_data.angle(n2%)的值
     n% = 0
  solve_right_triangle_from_relation = set_angle_value(triA_data.angle(n3%), _
        aV, temp_record, n%, 0, False)
       If solve_right_triangle_from_relation > 1 Then
        Exit Function
       End If
  If n% > 0 Then
  Call add_conditions_to_record(angle3_value_, angle(triA_data.angle(n1%)).data(0).value_no, _
         0, 0, temp_record.record_data.data0.condition_data)
  Call add_conditions_to_record(angle3_value_, angle(triA_data.angle(n3%)).data(0).value_no, _
         0, 0, temp_record.record_data.data0.condition_data)
  solve_right_triangle_from_relation = set_angle_value(triA_data.angle(n2%), _
        minus_string("90", angle3_value(n%).data(0).data0.value, True, False), temp_record, 0, 0, False)
          If solve_right_triangle_from_relation > 1 Then
             Exit Function
          End If
  End If
   If triA_data.relation_no(n3%, 0).ty = 0 Then
   n% = 0
  temp_record.record_data.data0.condition_data.condition(1) = triA_data.relation_no(n2%, 0)
  temp_record.record_data.data0.condition_data.condition_no = 1
  If triA_data.relation_no(n2%, 1).ty > 0 Then
  temp_record.record_data.data0.condition_data.condition(2) = triA_data.relation_no(n2%, 1)
  temp_record.record_data.data0.condition_data.condition_no = 2
  End If
  Call add_conditions_to_record(angle3_value_, angle(triA_data.angle(n1%)).data(0).value_no, _
         0, 0, temp_record.record_data.data0.condition_data)
    ts_ = divide_string("1", _
       sqr_string(minus_string("1", time_string(ts, ts, False, False), _
        False, False), False, False), True, False)
    solve_right_triangle_from_relation = set_Drelation(triA_data.poi(n2%), triA_data.poi(n3%), _
     triA_data.poi(n3%), triA_data.poi(n1%), 0, 0, 0, 0, 0, 0, ts_, _
      temp_record, n%, cond_type, tn(0), tn(1), 0, False)
     If n% > 0 Then
      triangle(no%).data(0).relation_no(n3%, 0).ty = cond_type
      triangle(no%).data(0).relation_no(n3%, 0).no = n%
     Else
      triangle(no%).data(0).relation_no(n3%, 0).ty = cond_type
      triangle(no%).data(0).relation_no(n3%, 0).no = tn(0)
      triangle(no%).data(0).relation_no(n3%, 1).ty = cond_type
      triangle(no%).data(0).relation_no(n3%, 1).no = tn(1)
     End If
       If di > 0 Then
        ts0 = divide_string("1", ts_, True, False)
         If ts0 <> "F" Then
          triangle(no%).data(0).re_value(n3%) = divide_string("1", ts_, True, False)
         End If
       Else
        If ts_ <> "F" Then
         triangle(no%).data(0).re_value(n3%) = ts_
        End If
       End If
     If solve_right_triangle_from_relation > 1 Then
      Exit Function
     End If
   End If
  If triA_data.relation_no(n1%, 0).ty = 0 Then
   n% = 0
    ts_ = divide_string( _
       sqr_string(minus_string("1", time_string(ts, _
        ts, False, False), False, False), False, False), ts, True, False)
    solve_right_triangle_from_relation = set_Drelation(triA_data.poi(n3%), triA_data.poi(n1%), _
     triA_data.poi(n1%), triA_data.poi(n2%), 0, 0, 0, 0, 0, 0, ts_, _
       temp_record, n%, cond_type, tn(0), tn(1), 0, False)
     If n% > 0 Then
        triangle(no%).data(0).relation_no(n1%, 0).ty = cond_type
        triangle(no%).data(0).relation_no(n1%, 0).no = n%
     Else
        triangle(no%).data(0).relation_no(n1%, 0).ty = cond_type
        triangle(no%).data(0).relation_no(n1%, 0).no = tn(0)
        triangle(no%).data(0).relation_no(n1%, 1).ty = cond_type
        triangle(no%).data(0).relation_no(n1%, 1).no = tn(1)
     End If
        If di > 0 Then
         ts0 = divide_string("1", ts_, True, False)
         If ts0 <> "F" Then
          triangle(no%).data(0).re_value(n1%) = ts0 ' divide_string("1", ts_, True, False)
         End If
        Else
         If ts_ <> "F" Then
          triangle(no%).data(0).re_value(n1%) = ts_
         End If
        End If
     If solve_right_triangle_from_relation > 1 Then
      Exit Function
     End If
  End If
End Function
Public Function solve_right_triangle_from_angle_value(ByVal no%, _
             triA_ As triangle_data0_type, ByVal n1%, ByVal n2%, ByVal n3%, _
               di As Integer) As Byte
Dim temp_record As total_record_type
Dim n%
Dim cond_type As Byte
Dim tn(1) As Integer
Dim ts As String
Dim triA As triangle_data0_type
triA = triA_
  temp_record.record_data.data0.condition_data.condition_no = 1
  temp_record.record_data.data0.condition_data.condition(1).ty = angle3_value_
  temp_record.record_data.data0.condition_data.condition(1).no = angle(triA.angle(n1%)).data(0).value_no
  If triA.tri_function(n2%) > 0 Then
  temp_record.record_data.data0.condition_data.condition_no = 1
   Call add_record_to_record(tri_function(triA.tri_function(n2%)).data(0).record.data0.condition_data, _
   temp_record.record_data.data0.condition_data)
   ts = tri_function(triA.tri_function(n2%)).data(0).tan_value
  Else
  Call add_conditions_to_record(angle3_value_, angle(triA.angle(n2%)).data(0).value_no, _
       0, 0, temp_record.record_data.data0.condition_data)
  temp_record.record_data.data0.condition_data.condition_no = 2
  ts = tan_(angle(triA.angle(n2%)).data(0).value, 0)
  End If
  n% = 0
  solve_right_triangle_from_angle_value = set_Drelation(triA.poi(n3%), _
      triA.poi(n1%), triA.poi(n2%), triA.poi(n1%), _
       0, 0, 0, 0, 0, 0, ts, temp_record, n%, cond_type, tn(0), tn(1), 0, False)
  If n% > 0 Then
   triangle(no%).data(0).relation_no(n1%, 0).ty = cond_type
   triangle(no%).data(0).relation_no(n1%, 0).no = n%
  Else
   triangle(no%).data(0).relation_no(n1%, 0).ty = cond_type
   triangle(no%).data(0).relation_no(n1%, 0).no = tn(0)
   triangle(no%).data(0).relation_no(n1%, 1).ty = cond_type
   triangle(no%).data(0).relation_no(n1%, 1).no = tn(1)
  End If
    If di > 0 Then
    triangle(no%).data(0).re_value(n1%) = divide_string("1", ts, True, False)
    Else
    triangle(no%).data(0).re_value(n1%) = ts
    End If
  If solve_right_triangle_from_angle_value > 1 Then
   Exit Function
  End If
  If triA.tri_function(n2%) > 0 Then
   ts = tri_function(triA.tri_function(n2%)).data(0).sin_value
  Else
  ts = sin_(angle(triA.angle(n2%)).data(0).value, 0)
  End If
  n% = 0
  solve_right_triangle_from_angle_value = set_Drelation(triA.poi(n3%), _
      triA.poi(n1%), triA.poi(n2%), triA.poi(n3%), _
       0, 0, 0, 0, 0, 0, ts, temp_record, n%, cond_type, tn(0), tn(1), 0, False)
  If n% > 0 Then
   triangle(no%).data(0).relation_no(n3%, 0).ty = cond_type
   triangle(no%).data(0).relation_no(n3%, 0).no = n%
  Else
   triangle(no%).data(0).relation_no(n3%, 0).ty = cond_type
   triangle(no%).data(0).relation_no(n3%, 0).no = tn(0)
   triangle(no%).data(0).relation_no(n3%, 1).ty = cond_type
   triangle(no%).data(0).relation_no(n3%, 1).no = tn(1)
  End If
    If di < 0 Then
    triangle(no%).data(0).re_value(n3%) = ts
    Else
    triangle(no%).data(0).re_value(n3%) = divide_string("1", ts, True, False)
    End If
  If solve_right_triangle_from_angle_value > 1 Then
   Exit Function
  End If
  If triA.tri_function(n2%) > 0 Then
   ts = tri_function(triA.tri_function(n2%)).data(0).cos_value
  Else
  ts = cos_(angle(triA.angle(n2%)).data(0).value, 0)
  End If
  n% = 0
  solve_right_triangle_from_angle_value = set_Drelation(triA.poi(n2%), _
      triA.poi(n1%), triA.poi(n2%), triA.poi(n3%), _
       0, 0, 0, 0, 0, 0, ts, temp_record, n%, cond_type, tn(0), tn(1), 0, False)
  If n% > 0 Then
   triangle(no%).data(0).relation_no(n2%, 0).ty = cond_type
    triangle(no%).data(0).relation_no(n2%, 0).no = n%
  Else
   triangle(no%).data(0).relation_no(n2%, 0).ty = cond_type
    triangle(no%).data(0).relation_no(n2%, 0).no = tn(0)
   triangle(no%).data(0).relation_no(n2%, 1).ty = cond_type
    triangle(no%).data(0).relation_no(n2%, 1).no = tn(1)
  End If
    If di < 0 Then
    triangle(no%).data(0).re_value(n2%) = ts
    Else
    triangle(no%).data(0).re_value(n2%) = divide_string("1", ts, True, False)
    End If
  If solve_right_triangle_from_angle_value > 1 Then
   Exit Function
  End If
End Function

Public Function set_display_string_(ge_or_tree As Byte, dis_ty As Byte, is_depend As Boolean) As Boolean
Dim i%
For i% = 0 To last_conclusion - 1
Call set_display_string_no(conclusion_data(i%).ty, conclusion_data(i%).no(0), _
          i% + 1, 0)
Next i%
Call arrange_display_no
 set_display_string_ = set_display_string(True, 1, ge_or_tree, dis_ty, is_depend)
  
End Function
Public Sub complete_prove_() '完成一次证明
MDIForm1.Toolbar1.Buttons(17).visible = False
MDIForm1.Toolbar1.Buttons(18).visible = False
'MDIForm1.Toolbar1.Buttons(19).ToolTipText = "优化证明"
'MDIForm1.Toolbar1.Buttons(19).visible = True
MDIForm1.examp.Enabled = True
If protect_data.pass_word_for_teacher = "00000" Or _
    InStr(1, last_conditions.last_cond(1).pass_word_for_teacher, "*", 0) = 0 Then
'MDIForm1.StatusBar1.Panels(1).text = _
  loadresstring_(1228) + str(last_conditions.last_cond(1).total_condition) + _
    "条信息.按运行键可以继续运行."
End If
End Sub
Public Sub end_prove() '完成最终证明
MDIForm1.Toolbar1.Buttons(17).visible = False
MDIForm1.Toolbar1.Buttons(18).visible = False
MDIForm1.Toolbar1.Buttons(19).visible = False
MDIForm1.edit.Enabled = True
MDIForm1.draw.Enabled = True
MDIForm1.examp.Enabled = True
MDIForm1.mea_and_cal.Enabled = True
'MDIForm1.run_type0.Enabled = True
'MDIForm1.run_type1.Enabled = True
'MDIForm1.run_type2.Enabled = True
MDIForm1.Toolbar1.Buttons(17).visible = False
MDIForm1.Toolbar1.Buttons(18).visible = False
MDIForm1.Toolbar1.Buttons(19).visible = False
If protect_data.pass_word_for_teacher = "00000" Or _
    InStr(1, last_conditions.last_cond(1).pass_word_for_teacher, "*", 0) = 0 Then
MDIForm1.StatusBar1.Panels(1).text = _
  LoadResString_(2250, "\\1\\" + str(last_conditions.last_cond(1).total_condition))
End If
End Sub
Public Sub begin_prove() ' 证明
' 开始推理,关闭有关菜单
MDIForm1.Timer1.Enabled = False
MDIForm1.edit.Enabled = False
MDIForm1.draw.Enabled = False
MDIForm1.examp.Enabled = False
MDIForm1.mea_and_cal.Enabled = False
'MDIForm1.run_type0.Enabled = False
'MDIForm1.run_type1.Enabled = False
'MDIForm1.run_type2.Enabled = False
End Sub
Public Function set_three_angle_value0(A1%, A2%, A3%, p1$, p2$, p3$, v$, re As total_record_type, _
             A3_v As angle3_value_data0_type, ByVal ty As Byte, reduce As Boolean) As Byte
'ty=0,设置angle3_value、ty =1,2 设置  temp_angle_value,ty=2,reduce_angle3_value
Dim a3_v1 As angle3_value_data0_type
Dim ts$
If p1$ <> "0" And A1% = 0 Then
 Exit Function
ElseIf p2$ <> "0" And A2% = 0 Then
 Exit Function
ElseIf p3$ <> "0" And A3% = 0 Then
 Exit Function
Else
If ty = 0 Then
 set_three_angle_value0 = set_three_angle_value(A1%, A2%, A3%, p1$, p2$, p3$, v$, True, re, _
             0, 0, 0, 0, 0, 2, reduce)
Else
 If A1% < A2% Or A2% = 0 Then
  a3_v1.angle(0) = A1%
  a3_v1.angle(1) = A2%
  a3_v1.angle(2) = 0
  a3_v1.para(0) = p1$
  a3_v1.para(1) = p2$
  a3_v1.para(2) = "0"
 Else
  a3_v1.angle(0) = A2%
  a3_v1.angle(1) = A1%
  a3_v1.angle(2) = 0
  a3_v1.para(0) = p2$
  a3_v1.para(1) = p1$
  a3_v1.para(2) = "0"
 End If
  a3_v1.value = v$
                Call simple_multi_string0(a3_v1.para(0), a3_v1.para(1), a3_v1.para(2), "0", ts, True)
                  a3_v1.value = divide_string(a3_v1.value, ts, True, False)
                 If ty = 1 Then
                 If a3_v1.para(0) = "1" And a3_v1.para(0) = "0" Then
                      A3_v = a3_v1
                           set_three_angle_value0 = 1
                 ElseIf a3_v1.value = "0" Then
                      A3_v = a3_v1
                           set_three_angle_value0 = 1
                 ElseIf a3_v1.para(0) = "1" And a3_v1.para(0) = "1" And _
                     a3_v1.value = "180" Then
                  If is_line_line_intersect(angle(a3_v1.angle(0)).data(0).line_no(0), _
                    angle(a3_v1.angle(1)).data(0).line_no(1), 0, 0, False) > 0 And _
                    is_line_line_intersect(angle(a3_v1.angle(0)).data(0).line_no(1), _
                    angle(a3_v1.angle(1)).data(0).line_no(0), 0, 0, False) > 0 And _
                     is_point_in_line3(angle(a3_v1.angle(0)).data(0).poi(1), _
                        m_lin(angle(a3_v1.angle(1)).data(0).line_no(0)).data(0).data0, 0) = False And _
                     is_point_in_line3(angle(a3_v1.angle(0)).data(0).poi(1), _
                        m_lin(angle(a3_v1.angle(1)).data(0).line_no(1)).data(0).data0, 0) = False And _
                     is_point_in_line3(angle(a3_v1.angle(1)).data(0).poi(1), _
                        m_lin(angle(a3_v1.angle(0)).data(0).line_no(0)).data(0).data0, 0) = False And _
                     is_point_in_line3(angle(a3_v1.angle(1)).data(0).poi(1), _
                        m_lin(angle(a3_v1.angle(0)).data(0).line_no(1)).data(0).data0, 0) = False Then
                        A3_v = a3_v1
                           set_three_angle_value0 = 1
                  End If
                 Else
                 last_temp_a3_v_no = last_temp_a3_v_no + 1
                 temp_angle3_value(last_temp_a3_v_no) = a3_v1
                 End If
                 Else
                 last_temp_a3_v_no = last_temp_a3_v_no + 1
                 temp_angle3_value(last_temp_a3_v_no) = a3_v1
                 End If
                End If
 
End If
End Function

Public Sub set_total_angle(t_A As total_angle_data_type, ByVal index As Integer, n%, is_from_set_angle As Boolean)
Dim i%, p%, j% '已知两直线'index<0 新建
Dim n_(1) As Integer
 If index < 0 And is_from_set_angle = False Then
  If search_for_total_angle(t_A, index, 0, 0) Then
   n% = index
    Exit Sub
  End If
 End If
  If two_time_area_triangle(m_poi(m_lin(t_A.line_no(0)).data(0).data0.poi(1)).data(0).data0.coordinate.X, _
                               m_poi(m_lin(t_A.line_no(0)).data(0).data0.poi(1)).data(0).data0.coordinate.Y, _
                                 m_poi(m_lin(t_A.line_no(0)).data(0).data0.poi(0)).data(0).data0.coordinate.X, _
                                   m_poi(m_lin(t_A.line_no(0)).data(0).data0.poi(0)).data(0).data0.coordinate.Y, _
                              m_poi(m_lin(t_A.line_no(1)).data(0).data0.poi(1)).data(0).data0.coordinate.X - _
                               m_poi(m_lin(t_A.line_no(1)).data(0).data0.poi(0)).data(0).data0.coordinate.X + _
                                m_poi(m_lin(t_A.line_no(0)).data(0).data0.poi(0)).data(0).data0.coordinate.X, _
                              m_poi(m_lin(t_A.line_no(1)).data(0).data0.poi(1)).data(0).data0.coordinate.Y - _
                               m_poi(m_lin(t_A.line_no(1)).data(0).data0.poi(0)).data(0).data0.coordinate.Y + _
                                m_poi(m_lin(t_A.line_no(0)).data(0).data0.poi(0)).data(0).data0.coordinate.Y) < 0 Then
   Call exchange_two_integer(t_A.line_no(0), t_A.line_no(1))
  End If
  If search_for_total_angle(t_A, index, 0, 0) Then
   n% = index
    Exit Sub
  End If
  n_(0) = index
  Call search_for_total_angle(t_A, n_(1), 1, 1)
 If last_conditions.last_cond(1).total_angle_no Mod 10 = 0 Then
  ReDim Preserve T_angle(last_conditions.last_cond(1).total_angle_no + 10) As total_angle_type
 End If
 last_conditions.last_cond(1).total_angle_no = last_conditions.last_cond(1).total_angle_no + 1
  n% = last_conditions.last_cond(1).total_angle_no
   t_A.is_used_no = -1
    T_angle(n%).data(0) = t_A
    Call set_angle_from_total_angle(n%)
    For j% = 0 To 1
    For i% = last_conditions.last_cond(1).total_angle_no To n_(j%) + 2 Step -1
     T_angle(i%).data(0).index(j%) = T_angle(i% - 1).data(0).index(j%)
    Next i%
     T_angle(n_(j%) + 1).data(0).index(j%) = last_conditions.last_cond(1).total_angle_no
    Next j%
  'If is_from_set_angle = False Then
   'Call set_angle_from_total_angle(n%)
  'End If
End Sub
Public Sub set_angle_from_total_angle(t_A%)
Dim p%
Dim l_2(2) As Single
Dim t_coord As POINTAPI
t_coord = minus_POINTAPI(m_poi(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(0)).data(0).data0.coordinate, _
                            m_poi(m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(0)).data(0).data0.coordinate)
t_coord = add_POINTAPI(t_coord, m_poi(m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(1)).data(0).data0.coordinate)
 l_2(0) = (m_poi(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(1)).data(0).data0.coordinate.X - _
              t_coord.X) ^ 2 + _
          (m_poi(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(1)).data(0).data0.coordinate.Y - _
              t_coord.Y) ^ 2
 l_2(1) = (m_poi(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(0)).data(0).data0.coordinate.X - _
          m_poi(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(1)).data(0).data0.coordinate.X) ^ 2 + _
          (m_poi(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(0)).data(0).data0.coordinate.Y - _
          m_poi(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(1)).data(0).data0.coordinate.Y) ^ 2
 l_2(2) = (m_poi(m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(0)).data(0).data0.coordinate.X - _
          m_poi(m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(1)).data(0).data0.coordinate.X) ^ 2 + _
          (m_poi(m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(0)).data(0).data0.coordinate.Y - _
          m_poi(m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(1)).data(0).data0.coordinate.Y) ^ 2
 If l_2(1) + l_2(2) > l_2(0) + 5 Then
  T_angle(t_A%).data(0).angle_no(0).sh = True
  T_angle(t_A%).data(0).angle_no(2).sh = True
 ElseIf l_2(1) + l_2(2) < l_2(0) - 5 Then
  T_angle(t_A%).data(0).angle_no(1).sh = True
  T_angle(t_A%).data(0).angle_no(3).sh = True
 End If
 p% = is_line_line_intersect(T_angle(t_A%).data(0).line_no(0), T_angle(t_A%).data(0).line_no(1), 0, 0, False)
 If p% > 0 Then
 T_angle(t_A%).data(0).angle_no(0).no = Abs(angle_number(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(1), p%, _
     m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(1), 0, t_A%))
 T_angle(t_A%).data(0).angle_no(1).no = Abs(angle_number(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(1), p%, _
     m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(0), 0, t_A%))
 T_angle(t_A%).data(0).angle_no(2).no = Abs(angle_number(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(0), p%, _
     m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(0), 0, t_A%))
 T_angle(t_A%).data(0).angle_no(3).no = Abs(angle_number(m_lin(T_angle(t_A%).data(0).line_no(0)).data(0).data0.poi(0), p%, _
     m_lin(T_angle(t_A%).data(0).line_no(1)).data(0).data0.poi(1), 0, t_A%))
 End If
End Sub

Public Function max_of_four_int(ByVal n1%, ByVal n2%, ByVal n3%, ByVal n4%) As Byte
Dim m(3) As Byte
Dim n(3) As Integer
m(0) = 0
m(1) = 1
m(2) = 2
m(3) = 3
n(0) = n1%
n(1) = n2%
n(2) = n3%
n(3) = n4%
While m(1) = 0
 If n(0) >= n(1) Then
   n(1) = n(2)
    n(2) = n(3)
     n(3) = 0
   m(1) = m(2)
    m(2) = m(3)
     m(3) = 0
 Else
    n(0) = n(1)
     n(1) = n(2)
      n(2) = n(3)
       n(3) = 0
    m(0) = m(1)
     m(1) = m(2)
      m(2) = m(3)
       m(3) = 0
 End If
Wend
max_of_four_int = m(0)
End Function

Public Function combine_two_angle_(ByVal A1%, ByVal A2%, out_A%, ratio$, out_v$, ty_ As Byte) As Boolean
Dim ty As Byte
Dim A(3) As Integer
ratio$ = "1"
out_v$ = "0"
 If A1% = A2% Then
  out_A% = 0
   ratio = "-1"
     combine_two_angle_ = True
      Exit Function
 End If
If combine_two_angle(A1%, A2%, 0, A(0), A(2), 0, A(1), A(3), ty, 0, ty_) Then
 If ty = 3 Or ty = 5 Then
  out_A% = A(3)
   combine_two_angle_ = True
 ElseIf ty = 4 Then 'Or ty = 6 Then
  out_A% = A(0)
   ratio$ = "-1"
   combine_two_angle_ = True
 ElseIf ty = 6 Then
  out_A% = -A(0)
   ratio$ = "-1"
   combine_two_angle_ = True
 ElseIf ty = 7 Then 'Or ty = 8 Then
  out_A% = -A(1)
   ratio$ = "-1"
   combine_two_angle_ = True
 ElseIf ty = 8 Then
  out_A% = A(1)
   ratio$ = "-1"
   combine_two_angle_ = True
 ElseIf ty = 9 Or ty = 10 Then
  out_A% = -A(3)
  out_v$ = "360"
    combine_two_angle_ = True
 ElseIf ty = 15 Or ty = 17 Then
  out_A% = -A(2)
   out_v$ = "180"
    combine_two_angle_ = True
 ElseIf ty = 16 Or ty = 18 Then
  out_A% = A(2)
   out_v$ = "180"
    combine_two_angle_ = True
 ElseIf ty = 19 Or ty = 20 Then
   out_v$ = "180"
    combine_two_angle_ = True
 End If
 End If
End Function

Public Function simple_data_for_area(ByVal no%) As Byte 'no% item0_no
Dim item_d(1) As item0_data_type
item_d(0) = item0(no%).data(0)
If item_d(0).poi(0) > 0 And item_d(0).poi(1) > 0 And item_d(0).poi(2) > 0 And item_d(0).poi(3) > 0 Then
 If item_d(0).line_no(0) = item_d(0).line_no(1) And item_d(0).sig = "/" Then
  If item_d(0).poi(0) > item_d(0).poi(1) Then
   If item_d(0).poi(2) > item_d(0).poi(3) Then
    If item_d(0).poi(0) = item_d(0).poi(2) Then
     If simple_item_from_line_to_area(item_d(0).poi(0), item_d(0).poi(1), item_d(0).poi(3), _
          item_d(0), item_d(1)) Then
        record_0.data0.condition_data.condition_no = 0
        simple_data_for_area = set_item0(item_d(1).poi(0), item_d(1).poi(1), item_d(1).poi(2), _
            item_d(1).poi(3), item_d(1).sig, 0, 0, 0, 0, 0, 0, "1", "1", "1", "", "1", _
              item_d(0).conclusion_no, record_0.data0.condition_data, no%, 0, 0, 0, condition_data0, False)
         If simple_data_for_area > 1 Then
           Exit Function
         End If
     End If
    End If
   Else
    If item_d(0).poi(0) = item_d(0).poi(3) Then
      If simple_item_from_line_to_area(item_d(0).poi(0), item_d(0).poi(1), item_d(0).poi(2), _
          item_d(0), item_d(1)) Then
        record_0.data0.condition_data.condition_no = 0
        simple_data_for_area = set_item0(item_d(1).poi(0), item_d(1).poi(1), item_d(1).poi(2), _
            item_d(1).poi(3), item_d(1).sig, 0, 0, 0, 0, 0, 0, "1", "1", "1", "", "1", _
             item_d(0).conclusion_no, record_0.data0.condition_data, no%, 0, 0, 0, condition_data0, False)
         If simple_data_for_area > 1 Then
           Exit Function
         End If
     End If
   End If
   End If
  Else
   If item_d(0).poi(2) > item_d(0).poi(3) Then
    If item_d(0).poi(1) = item_d(0).poi(2) Then
     If simple_item_from_line_to_area(item_d(0).poi(1), item_d(0).poi(0), item_d(0).poi(3), _
          item_d(0), item_d(1)) Then
        record_0.data0.condition_data.condition_no = 0
        simple_data_for_area = set_item0(item_d(1).poi(0), item_d(1).poi(1), item_d(1).poi(2), _
            item_d(1).poi(3), item_d(1).sig, 0, 0, 0, 0, 0, 0, "1", "1", "1", "", "1", _
             item_d(0).conclusion_no, record_0.data0.condition_data, no%, 0, 0, 0, condition_data0, False)
         If simple_data_for_area > 1 Then
           Exit Function
         End If
     End If
    End If
   Else
    If item_d(0).poi(1) = item_d(0).poi(3) Then
     If simple_item_from_line_to_area(item_d(0).poi(1), item_d(0).poi(0), item_d(0).poi(2), _
          item_d(0), item_d(1)) Then
        record_0.data0.condition_data.condition_no = 0
        simple_data_for_area = set_item0(item_d(1).poi(0), item_d(1).poi(1), item_d(1).poi(2), _
            item_d(1).poi(3), item_d(1).sig, 0, 0, 0, 0, 0, 0, "1", "1", "1", "", "1", _
             item_d(0).conclusion_no, record_0.data0.condition_data, no%, 0, 0, 0, condition_data0, False)
         If simple_data_for_area > 1 Then
           Exit Function
         End If
     End If
    End If
   End If
  End If
 Else
 End If
ElseIf item_d(0).poi(1) = -5 And item_d(0).poi(3) = -5 Then
If simple_item_from_area(no%, item_d(1)) Then
        simple_data_for_area = set_item0(item_d(1).poi(0), item_d(1).poi(1), item_d(1).poi(2), _
            item_d(1).poi(3), item_d(1).sig, 0, 0, 0, 0, 0, 0, "1", "1", "1", "", "1", _
             item_d(0).conclusion_no, record_0.data0.condition_data, no%, 0, 0, 0, condition_data0, False)
         If simple_data_for_area > 1 Then
           Exit Function
         End If
End If
ElseIf item_d(0).poi(1) = -5 Then
ElseIf item_d(0).poi(3) = -5 Then
End If
End Function

Public Function simple_item_from_line_to_area(ByVal p0%, ByVal p1%, ByVal p2%, ite As item0_data_type, _
                    out_ite As item0_data_type) As Boolean
Dim tp(1) As Integer
Dim i%, j%, l%
Dim triA(1) As Integer
If m_poi(p0%).data(0).in_line(0) > 1 Then
For j% = 1 To m_poi(p0%).data(0).in_line(0)
 l% = m_poi(p0%).data(0).in_line(j%)
 If l% <> ite.line_no(0) And m_lin(l%).data(0).data0.in_point(0) > 2 Then
tp(0) = m_lin(l%).data(0).data0.in_point(1)
tp(1) = m_lin(l%).data(0).data0.in_point(2)
If tp(0) < tp(1) Then
 Call exchange_two_integer(tp(0), tp(1))
End If
For i% = 3 To m_lin(l%).data(0).data0.in_point(0)
 If tp(0) > m_lin(l%).data(0).data0.in_point(i%) Then
     tp(0) = m_lin(l%).data(0).data0.in_point(i%)
 End If
 If tp(0) < tp(1) Then
  Call exchange_two_integer(tp(0), tp(1))
 End If
Next i%
 triA(0) = triangle_number(p1%, tp(0), tp(1), 0, 0, 0, 0, 0, 0, 0)
 triA(1) = triangle_number(p2%, tp(0), tp(1), 0, 0, 0, 0, 0, 0, 0)
  out_ite.conclusion_no = ite.conclusion_no
  out_ite.poi(0) = triA(0)
  out_ite.poi(2) = triA(1)
  out_ite.poi(1) = -5
  out_ite.poi(3) = -5
  out_ite.sig = ite.sig
  simple_item_from_line_to_area = True
  Exit Function
End If
Next j%
End If
End Function

Public Function simple_item_from_line_to_area_(tria_no%, conclusion_no%, _
                                         ite As item0_data_type) As Boolean
Dim tp(4) As Integer
Dim tp_(1, 1) As Integer
Dim i%, j%, l%, k%, t_p%, tl_%, g%
Dim it(1) As Integer
Dim tl(2) As Integer
Dim triA(4) As Integer
Dim temp_record As total_record_type
Dim re As record_data_type
Dim ty As Byte '1 共边形式 0 交点形式
tp(0) = 0 ' triangle(tria_no%).data(0).poi(0)
If triangle(tria_no%).data(0).poi(tp(0)) < triangle(tria_no%).data(0).poi(1) Then
   tp(0) = 1
End If
If triangle(tria_no%).data(0).poi(tp(0)) < triangle(tria_no%).data(0).poi(2) Then
   tp(0) = 2
End If
tp(1) = (tp(0) + 1) Mod 3
tp(2) = (tp(0) + 2) Mod 3
tp(0) = triangle(tria_no%).data(0).poi(tp(0))
tp(1) = triangle(tria_no%).data(0).poi(tp(1))
tp(2) = triangle(tria_no%).data(0).poi(tp(2))
tl(0) = line_number0(tp(1), tp(2), 0, 0)
tl(1) = line_number0(tp(0), tp(1), 0, 0)
tl(2) = line_number0(tp(0), tp(2), 0, 0)
If m_lin(tl(1)).data(0).data0.in_point(0) > 2 Then
t_p% = m_lin(tl(1)).data(0).data0.in_point(1)
For i% = 2 To m_lin(tl(1)).data(0).data0.in_point(0)
If t_p% > m_lin(tl(1)).data(0).data0.in_point(i%) And _
     m_lin(tl(1)).data(0).data0.in_point(i%) <> tp(1) Then
   t_p% = m_lin(tl(1)).data(0).data0.in_point(i%)
End If
Next i%
If t_p% < tp(0) Then
 tl_% = 1
  ty = 1
  GoTo simple_from_linw_to_area_mark2
End If
End If
'********************
If m_lin(tl(2)).data(0).data0.in_point(0) > 2 Then
t_p% = m_lin(tl(2)).data(0).data0.in_point(1)
For i% = 2 To m_lin(tl(2)).data(0).data0.in_point(0)
If t_p% > m_lin(tl(2)).data(0).data0.in_point(i%) And _
      m_lin(tl(2)).data(0).data0.in_point(i%) <> tp(1) Then
   t_p% = m_lin(tl(2)).data(0).data0.in_point(i%)
End If
Next i%
If t_p% < tp(0) Then
 tl_% = 2
  ty = 1
  GoTo simple_from_linw_to_area_mark2
End If
End If
simple_from_linw_to_area_mark2:
If ty = 1 Then
 triA(0) = triangle_number(t_p%, tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0)
  For i% = 1 To m_poi(tp(0)).data(0).in_line(0)
   l% = m_poi(tp(0)).data(0).in_line(i%)
    If m_lin(l%).data(0).data0.in_point(0) > 2 And l% <> tl(tl_%) Then
     tp(3) = m_lin(l%).data(0).data0.poi(0)
     tp(4) = m_lin(l%).data(0).data0.poi(1)
     If tp(3) < tp(4) Then
      Call exchange_two_integer(tp(3), tp(4))
     End If
     For j% = 2 To m_lin(l%).data(0).data0.in_point(0) - 1
      If tp(3) > m_lin(l%).data(0).data0.in_point(j%) Then
          tp(3) = m_lin(l%).data(0).data0.in_point(j%)
       If tp(3) < tp(4) Then
        Call exchange_two_integer(tp(3), tp(4))
       End If
      End If
     Next j%
      triA(1) = triangle_number(tp(3), tp(4), tp(tl_%), 0, 0, 0, 0, 0, 0, 0)
      triA(2) = set_four_sides_fig(tp(3), tp(tl_%), tp(4), t_p%)
       Call set_item0(triA(1), -5, triA(2), -6, "/", 0, 0, 0, 0, 0, 0, "1", "1", "1", _
               "", "1", conclusion_no%, re.data0.condition_data, 0, it(0), _
                0, 0, condition_data0, False)
       ite = set_item0_(triA(1), -5, it(0), -7, "/", 0, 0, 0, 0, 0, 0, "", "", "", 0, "", _
                  condition_data0)
              simple_item_from_line_to_area_ = True
              Exit Function
    End If
  Next i%
End If
k% = 0
For i% = 1 To m_poi(tp(0)).data(0).in_line(0)
 l% = m_poi(tp(0)).data(0).in_line(i%)
  If m_lin(l%).data(0).data0.in_point(0) > 2 Then
    tp_(0, k%) = m_lin(l%).data(0).data0.poi(0)
    tp_(1, k%) = m_lin(l%).data(0).data0.poi(1)
    If tp_(0, k%) < tp_(1, k%) Then
    Call exchange_two_integer(tp_(0, k%), tp_(1, k%))
    End If
   For j% = 2 To m_lin(l%).data(0).data0.in_point(0) - 1
    If tp_(0, k%) > m_lin(l%).data(0).data0.in_point(j%) Then
        tp_(0, k%) = m_lin(l%).data(0).data0.in_point(j%)
      If tp_(0, k%) < tp_(1, k%) Then
       Call exchange_two_integer(tp_(0, k%), tp_(1, k%))
      End If
    End If
   Next j%
   k% = k% + 1
   If k% = 2 Then
    GoTo simple_item_from_line_to_area_mark0
   End If
  End If
Next i%
simple_item_from_line_to_area_mark0:
If k% = 2 Then
 If tp_(0, 0) < tp(0) And tp_(0, 1) < tp(0) Then
 triA(0) = triangle_number(tp_(0, 0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0)
 triA(1) = triangle_number(tp_(1, 0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0)
 triA(2) = triangle_number(tp_(0, 0), tp_(0, 1), tp_(1, 1), 0, 0, 0, 0, 0, 0, 0)
 triA(3) = triangle_number(tp_(1, 0), tp_(0, 1), tp_(1, 1), 0, 0, 0, 0, 0, 0, 0)
 triA(4) = set_four_sides_fig(tp_(0, 0), tp_(0, 1), tp_(1, 0), tp_(1, 1))
 If triA(2) > 0 Then
  Call set_item0(triA(2), -5, triA(4), -6, "/", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          "1", conclusion_no%, record_0.data0.condition_data, 0, it(0), 0, 0, condition_data0, False)
  Call set_item0(triA(1), -5, it(0), -7, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          "1", conclusion_no%, record_0.data0.condition_data, 0, it(0), 0, 0, condition_data0, False)
 Else
  it(0) = 0
 End If
 If triA(3) > 0 Then
 Call set_item0(triA(2), -5, triA(4), -6, "/", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          "1", conclusion_no%, record_0.data0.condition_data, 0, it(1), 0, 0, condition_data0, False)
 Call set_item0(triA(0), -5, it(1), -7, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", _
          "1", conclusion_no%, record_0.data0.condition_data, 0, it(1), 0, 0, condition_data0, False)
 Else
  it(1) = 0
 End If
 If it(0) > 0 And it(1) > 0 Then
 Call set_general_string(it(0), it(1), 0, 0, "1", "1", "0", "0", "", conclusion_no, 0, 0, temp_record, g%, 0)
 ite = set_item0_(g%, -8, 0, 0, "~", 0, 0, 0, 0, 0, 0, "", "", "", 0, "", condition_data0)
  simple_item_from_line_to_area_ = True
  Exit Function
 ElseIf it(0) > 0 Then
  ite = item0(it(0)).data(0)
  simple_item_from_line_to_area_ = True
  Exit Function
 ElseIf it(1) > 0 Then
  ite = item0(it(0)).data(0)
  simple_item_from_line_to_area_ = True
  Exit Function
 End If
 End If
 End If
  End Function
Public Function simple_data_for_relation(ByVal no%) As Byte 'no% item0_no
Dim item_d(1) As item0_data_type
Dim triA(1) As triangle_data0_type
Dim tp(2) As Integer
Dim tri(1) As Integer
Dim i%, j%, l%
Dim tn1(2) As Integer
Dim tn2(2) As Integer
item_d(0) = item0(no%).data(0)
If item_d(0).poi(0) > 0 And item_d(0).poi(1) = -5 And item_d(0).poi(2) > 0 And item_d(0).poi(3) = 5 Then
 If item_d(0).sig = "/" Then
  triA(0) = triangle(item_d(0).poi(1)).data(0)
   triA(1) = triangle(item_d(0).poi(1)).data(3)
    For i% = 0 To 2
     For j% = 0 To 2
      If triA(0).poi(i%) = triA(1).poi(j%) Then
       If tp(0) = 0 Then
        tn1(0) = i%
         tn2(0) = j%
        tp(0) = triA(0).poi(i%)
       Else
        tn1(1) = i%
         tn2(1) = j%
        tp(1) = triA(0).poi(i%)
       End If
      End If
     Next j%
    Next i%
If (tn1(0) = 0 And tn1(1) = 1) Or (tn1(0) = 1 And tn1(1) = 0) Then
     tn1(2) = 2
ElseIf (tn1(0) = 0 And tn1(1) = 2) Or (tn1(0) = 2 And tn1(1) = 0) Then
     tn1(2) = 1
Else '(tn1(0) = 0 And tn1(1) = 1) Or (tn1(0) = 1 And tn1(1) = 0) Then
     tn1(2) = 0
End If
If (tn2(0) = 0 And tn2(1) = 1) Or (tn2(0) = 1 And tn2(1) = 0) Then
     tn2(2) = 2
ElseIf (tn2(0) = 0 And tn2(1) = 2) Or (tn2(0) = 2 And tn2(1) = 0) Then
     tn2(2) = 1
Else '(tn1(0) = 0 And tn1(1) = 1) Or (tn1(0) = 1 And tn1(1) = 0) Then
     tn2(2) = 0
End If
If tp(0) < tp(1) Then
   Call exchange_two_integer(tp(0), tp(1))
   Call exchange_two_integer(tn1(0), tn1(1))
   Call exchange_two_integer(tn2(0), tn2(1))
End If
l% = line_number0(tp(0), tp(1), 0, 0)
If m_lin(l%).data(0).data0.in_point(1) = tp(1) Then
    tp(2) = m_lin(l%).data(0).data0.in_point(2)
Else
    tp(2) = m_lin(l%).data(0).data0.in_point(1)
End If
For i% = 2 To m_lin(l%).data(0).data0.in_point(0)
   If tp(2) > tp(2) = m_lin(l%).data(0).data0.in_point(i%) And _
        m_lin(l%).data(0).data0.in_point(i%) <> tp(1) Then
   tp(2) = tp(2) = m_lin(l%).data(0).data0.in_point(i%)
End If
Next i%
 tri(0) = triangle_number(tp(1), tp(2), triA(0).poi(tn1(2)), 0, 0, 0, 0, 0, 0, 0)
 tri(1) = triangle_number(tp(1), tp(2), triA(1).poi(tn2(2)), 0, 0, 0, 0, 0, 0, 0)
         simple_data_for_relation = set_item0(item_d(1).poi(0), item_d(1).poi(1), item_d(1).poi(2), _
            item_d(1).poi(3), item_d(1).sig, 0, 0, 0, 0, 0, 0, "1", "1", "1", "", "1", _
             item_d(0).conclusion_no, record_0.data0.condition_data, 0, no%, 0, 0, condition_data0, False)
          If simple_data_for_relation > 1 Then
           Exit Function
         End If
     End If
    End If
End Function
Public Function set_four_sides_fig(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%) As Integer
Dim no%, i%, j%
Dim n_(3) As Integer
Dim f_s_fig As four_sides_fig_data_type
If is_four_sides_fig(p1%, p2%, p3%, p4%, no%, f_s_fig) Then
 set_four_sides_fig = no%
Else
If last_conditions.last_cond(1).four_sides_fig_no Mod 10 = 0 Then
ReDim Preserve four_sides_fig(last_conditions.last_cond(1).four_sides_fig_no + 10) As four_sides_fig_type
End If
last_conditions.last_cond(1).four_sides_fig_no = last_conditions.last_cond(1).four_sides_fig_no + 1
four_sides_fig(last_conditions.last_cond(1).four_sides_fig_no).data(0) = f_s_fig
set_four_sides_fig = last_conditions.last_cond(1).four_sides_fig_no
For j% = 0 To 3
 For i% = last_conditions.last_cond(1).four_sides_fig_no To f_s_fig.index(j%) + 2 Step -1
  four_sides_fig(i%).data(0).index(j%) = _
   four_sides_fig(i% - 1).data(0).index(j%)
 Next i%
 four_sides_fig(f_s_fig.index(j%) + 1).data(0).index(j%) = last_conditions.last_cond(1).four_sides_fig_no
Next j%
End If
End Function

Public Function set_display_four_sides_fig(f_s_fig As four_sides_fig_data_type) As String
set_display_four_sides_fig = m_poi(f_s_fig.poi(0)).data(0).data0.name + _
                              m_poi(f_s_fig.poi(1)).data(0).data0.name + _
                                m_poi(f_s_fig.poi(2)).data(0).data0.name + _
                                 m_poi(f_s_fig.poi(3)).data(0).data0.name
End Function

Public Function simple_item_from_area(ByVal no%, out_ite As item0_data_type) As Boolean
Dim tp(2, 2) As Integer
Dim triA(1) As Integer
Dim item(1) As Integer
Dim ite(2) As item0_data_type
Dim i%, j%, k%, t_p%, l%
Dim ty(1) As Boolean
ite(0) = item0(no%).data(0)
If ite(0).poi(1) = -5 And ite(0).poi(3) = -5 Then
k% = 0
For i% = 0 To 2
 For j% = 0 To 2
  If triangle(ite(0).poi(0)).data(0).poi(i%) = _
      triangle(ite(0).poi(2)).data(0).poi(j%) Then
     tp(0, k%) = i%
      tp(1, k%) = j%
       k% = k% + 1
  End If
 Next j%
Next i%
If k% = 2 Then
 If (tp(0, 0) = 0 And tp(0, 1) = 1) Or _
      (tp(0, 0) = 1 And tp(0, 1) = 0) Then
     tp(0, 2) = 2
 ElseIf (tp(0, 0) = 1 And tp(0, 1) = 2) Or _
      (tp(0, 0) = 2 And tp(0, 1) = 1) Then
     tp(0, 2) = 0
 ElseIf (tp(0, 0) = 2 And tp(0, 1) = 0) Or _
       (tp(0, 0) = 0 And tp(0, 1) = 2) Then
     tp(0, 2) = 1
 End If
 If (tp(1, 0) = 0 And tp(1, 1) = 1) Or _
     (tp(1, 0) = 1 And tp(1, 1) = 0) Then
     tp(0, 2) = 2
 ElseIf (tp(1, 0) = 1 And tp(1, 1) = 2) Or _
     (tp(1, 0) = 2 And tp(1, 1) = 1) Then
     tp(1, 2) = 0
 ElseIf (tp(1, 0) = 2 And tp(1, 1) = 0) Or _
     (tp(1, 0) = 0 And tp(1, 1) = 2) Then
     tp(1, 2) = 1
 End If
 For i% = 0 To 2
  tp(0, i%) = triangle(ite(0).poi(0)).data(0).poi(tp(0, i%))
  tp(1, i%) = triangle(ite(0).poi(2)).data(0).poi(tp(1, i%))
 Next i%
 If tp(0, 0) < tp(0, 1) Then
  Call exchange_two_integer(tp(0, 0), tp(0, 1))
  Call exchange_two_integer(tp(1, 0), tp(1, 1))
 End If
   l% = line_number0(tp(0, 0), tp(0, 1), 0, 0)
   If m_lin(l%).data(0).data0.in_point(0) > 2 Then
    t_p% = m_lin(l%).data(0).data0.in_point(1)
     For i% = 2 To m_lin(l%).data(0).data0.in_point(0) - 1
      If t_p% > m_lin(l%).data(0).data0.in_point(i%) Then
         t_p% = m_lin(l%).data(0).data0.in_point(i%)
      End If
     Next i%
     If t_p% < tp(0, 0) And t_p% <> tp(0, 1) Then
     triA(0) = triangle_number(t_p%, tp(0, 1), tp(0, 2), 0, 0, 0, 0, 0, 0, 0)
     triA(1) = triangle_number(t_p%, tp(0, 1), tp(1, 2), 0, 0, 0, 0, 0, 0, 0)
     out_ite.poi(0) = triA(0)
     out_ite.poi(1) = -5
     out_ite.poi(2) = triA(1)
     out_ite.poi(3) = -5
     out_ite.sig = "/"
     out_ite.conclusion_no = ite(0).conclusion_no
     simple_item_from_area = True
      Exit Function
     End If
   End If
 End If
 ty(0) = simple_item_from_line_to_area_(ite(0).poi(0), ite(0).conclusion_no, ite(1))
  ty(1) = simple_item_from_line_to_area_(ite(0).poi(2), ite(0).conclusion_no, ite(2))
 If ty(0) And ty(1) Then
    If ite(1).sig = "~" And ite(2).sig = "~" Then
     out_ite.poi(0) = ite(1).poi(0)
     out_ite.poi(1) = ite(1).poi(1)
     out_ite.poi(2) = ite(2).poi(0)
     out_ite.poi(3) = ite(2).poi(1)
    Else
     Call set_item0_from_data(ite(1), "1", "", ite(0).conclusion_no, record_0.data0.condition_data, 0, item(0), 0)
     Call set_item0_from_data(ite(2), "1", "", ite(0).conclusion_no, record_0.data0.condition_data, 0, item(1), 0)
     out_ite.poi(0) = item(0)
     out_ite.poi(1) = -7
     out_ite.poi(2) = item(1)
     out_ite.poi(3) = -7
    End If
     out_ite.sig = ite(0).sig
     out_ite.conclusion_no = ite(0).conclusion_no
     simple_item_from_area = True
      Exit Function
  ElseIf ty(0) Then
   If ite(1).sig = "~" Then
     out_ite.poi(0) = ite(1).poi(0)
     out_ite.poi(1) = ite(1).poi(1)
   Else
       Call set_item0_from_data(ite(1), "1", "", ite(0).conclusion_no, record_0.data0.condition_data, 0, item(0), 0)
     out_ite.poi(0) = item(0)
     out_ite.poi(1) = -7
  End If
     out_ite.poi(2) = ite(0).poi(2)
     out_ite.poi(3) = ite(0).poi(3)
     out_ite.sig = ite(0).sig
     out_ite.conclusion_no = ite(0).conclusion_no
     simple_item_from_area = True
      Exit Function
  ElseIf ty(1) Then
   If ite(2).sig = "~" Then
     out_ite.poi(2) = ite(2).poi(0)
     out_ite.poi(3) = ite(2).poi(1)
   Else
     Call set_item0_from_data(ite(2), "1", "", ite(0).conclusion_no, record_0.data0.condition_data, 0, item(1), 0)
     out_ite.poi(2) = item(1)
     out_ite.poi(3) = -7
   End If
     out_ite.poi(0) = ite(0).poi(2)
     out_ite.poi(1) = ite(0).poi(3)
     out_ite.sig = ite(0).sig
     out_ite.conclusion_no = ite(0).conclusion_no
     simple_item_from_area = True
      Exit Function
  End If
ElseIf ite(0).poi(1) = -5 Then
 If simple_item_from_line_to_area_(ite(0).poi(0), ite(0).conclusion_no, ite(1)) Then
   If ite(1).sig = "~" Then
     out_ite.poi(0) = ite(1).poi(0)
     out_ite.poi(1) = ite(1).poi(1)
   Else
       Call set_item0_from_data(ite(1), "1", "", ite(0).conclusion_no, record_0.data0.condition_data, 0, item(0), 0)
     out_ite.poi(0) = item(0)
     out_ite.poi(1) = -7
   End If
     out_ite.poi(2) = ite(0).poi(2)
     out_ite.poi(3) = ite(0).poi(3)
     out_ite.sig = ite(0).sig
     out_ite.conclusion_no = ite(0).conclusion_no
     simple_item_from_area = True
      Exit Function
 End If
ElseIf ite(0).poi(3) = -5 Then
 If simple_item_from_line_to_area_(ite(0).poi(2), ite(0).conclusion_no, ite(2)) Then
   If ite(2).sig = "~" Then
     out_ite.poi(2) = ite(2).poi(0)
     out_ite.poi(3) = ite(2).poi(1)
   Else
     Call set_item0_from_data(ite(2), "1", "", ite(0).conclusion_no, record_0.data0.condition_data, 0, item(1), 0)
     out_ite.poi(2) = item(1)
     out_ite.poi(3) = -7
   End If
     out_ite.poi(0) = ite(0).poi(2)
     out_ite.poi(1) = ite(0).poi(3)
     out_ite.sig = ite(0).sig
     out_ite.conclusion_no = ite(0).conclusion_no
     simple_item_from_area = True
      Exit Function
 End If
End If
End Function

Public Function set_item0_for_reduce_area(ByVal no%) As Byte
Dim item(1) As item0_data_type
item(0) = item0(no%).data(0)
If item(0).sig = "/" Then
 If item(0).poi(1) = -5 And item(0).poi(3) = -5 Then
  If reduce_item_for_two_area_relation(no%, item(1)) Then
   set_item0_for_reduce_area = set_item0_from_data(item(1), "1", "", item(0).conclusion_no, record_0.data0.condition_data, no%, 0, 0)
   If set_item0_for_reduce_area > 1 Then
    Exit Function
   End If
  End If
 ElseIf item(0).poi(1) > 0 And item(0).poi(3) > 0 Then
  If reduce_item_for_relation(no%, item(1)) Then
   set_item0_for_reduce_area = set_item0_from_data(item(1), "1", "", item(0).conclusion_no, record_0.data0.condition_data, no%, 0, 0)
   If set_item0_for_reduce_area > 1 Then
    Exit Function
   End If
  End If
 Else
 End If
Else
End If
End Function

Public Function reduce_item_for_two_area_relation(ByVal no%, ite2 As item0_data_type) As Boolean
Dim triA(1) As triangle_data0_type
Dim i%, j%, k%
Dim tp1(2) As Integer
Dim tp2(2) As Integer
Dim tl1(2) As Integer
Dim tl2(2) As Integer
Dim temp_triA(4) As Integer
Dim temp_tria_(4) As Integer
Dim item(2) As item0_data_type
item(0) = item0(no%).data(0)
triA(0) = triangle(item(0).poi(0)).data(0)
triA(1) = triangle(item(0).poi(2)).data(0)
k% = 0
For i% = 0 To 2
For j% = 0 To 2
If triA(0).poi(i%) = triA(1).poi(j%) Then
tp1(k%) = i%
tp1(k%) = j%
k% = k% + 1
End If
Next j%
Next i%
If k = 2 Then
If (tp1(0) = 0 And tp1(1) = 1) Or (tp1(0) = 1 And tp1(1) = 0) Then
   tp1(2) = 2
ElseIf (tp1(0) = 1 And tp1(1) = 2) Or (tp1(0) = 2 And tp1(1) = 1) Then
   tp1(2) = 0
ElseIf (tp1(0) = 0 And tp1(1) = 2) Or (tp1(0) = 2 And tp1(1) = 0) Then
   tp1(2) = 1
End If
If (tp2(0) = 0 And tp2(1) = 1) Or (tp2(0) = 1 And tp2(1) = 0) Then
   tp2(2) = 2
ElseIf (tp2(0) = 1 And tp2(1) = 2) Or (tp2(0) = 2 And tp2(1) = 1) Then
   tp2(2) = 0
ElseIf (tp2(0) = 0 And tp2(1) = 2) Or (tp2(0) = 2 And tp2(1) = 0) Then
   tp2(2) = 1
End If
ElseIf k% = 1 Then
tp1(1) = (tp1(0) + 1) Mod 3
tp1(2) = (tp1(0) + 2) Mod 3
tp2(1) = (tp2(0) + 1) Mod 3
tp2(2) = (tp2(0) + 2) Mod 3
Else
Exit Function
End If
tl1(0) = triA(0).line_no(tp1(0))
tl1(1) = triA(0).line_no(tp1(1))
tl1(2) = triA(0).line_no(tp1(2))
tl2(0) = triA(1).line_no(tp2(0))
tl2(1) = triA(1).line_no(tp2(1))
tl2(2) = triA(0).line_no(tp2(2))
'*****************************
tp1(0) = triA(0).poi(tp1(0))
tp1(1) = triA(0).poi(tp1(1))
tp1(2) = triA(0).poi(tp1(2))
tp2(0) = triA(1).poi(tp2(0))
tp2(1) = triA(1).poi(tp2(1))
tp2(2) = triA(0).poi(tp2(2))
If k% = 2 Then '有两点同
 If (m_lin(tl1(2)).data(0).data0.poi(0) <> tp1(0) And m_lin(tl1(2)).data(0).data0.poi(1) <> tp1(0)) Or _
      (m_lin(tl1(2)).data(0).data0.poi(0) <> tp1(1) And m_lin(tl1(2)).data(0).data0.poi(1) <> tp1(1)) Then
  If m_lin(tl1(0)).data(0).data0.poi(0) <> tp1(1) And m_lin(tl1(0)).data(0).data0.poi(1) <> tp1(1) Then
   temp_triA(0) = triangle_number(tp1(2), m_lin(tl1(2)).data(0).data0.poi(0), m_lin(tl1(2)).data(0).data0.poi(1), _
       0, 0, 0, 0, 0, 0, 0)
   temp_triA(1) = triangle_number(tp2(2), m_lin(tl1(2)).data(0).data0.poi(0), m_lin(tl1(2)).data(0).data0.poi(1), _
       0, 0, 0, 0, 0, 0, 0)
        ite2 = set_item0_(temp_triA(0), -5, temp_triA(1), -5, "/", 0, 0, 0, 0, 0, 0, "", "", "", 0, "", condition_data0)
         reduce_item_for_two_area_relation = True
          Exit Function
  End If
  Else
   If reduce_item_for_triangle2(tp1(0), tp1(1), tp1(2), tl1(0), tl1(1), tl1(2), temp_triA(0), _
              temp_triA(1), temp_triA(2), temp_triA(3), temp_triA(4)) Then
   If reduce_item_for_triangle2(tp2(0), tp2(1), tp2(2), tl2(0), tl2(1), tl2(2), temp_tria_(0), _
              temp_tria_(1), temp_tria_(2), temp_tria_(3), temp_tria_(4)) Then
   End If
   End If
  End If
Else 'If k% = 1 Then
 
End If
End Function
Public Function reduce_item_for_relation(ByVal no%, ite2 As item0_data_type) As Boolean
Dim triA(1) As triangle_data0_type
Dim i%, j%, k%
Dim tp1(1) As Integer
Dim tp2(1) As Integer
Dim tl(1) As Integer
Dim temp_triA(1) As Integer
Dim item(1) As item0_data_type
item(0) = item0(no%).data(0)
If item(0).line_no(0) = item(0).line_no(1) Then
tl(0) = item(0).line_no(0)
If item(0).poi(0) > item(0).poi(1) Then
tp1(0) = item(0).poi(0)
tp1(1) = item(0).poi(1)
Else
tp1(0) = item(0).poi(1)
tp1(1) = item(0).poi(0)
End If
'********
If item(0).poi(2) > item(0).poi(3) Then
tp2(0) = item(0).poi(2)
tp2(1) = item(0).poi(3)
Else
tp2(0) = item(0).poi(3)
tp2(1) = item(0).poi(2)
End If
If tp1(0) = tp2(0) Then
 If m_poi(tp1(0)).data(0).g_line(1) > 0 Then
  If m_poi(tp1(0)).data(0).g_line(0) = tl(0) Then
   tl(1) = m_poi(tp1(0)).data(0).g_line(1)
   If m_lin(tl(1)).data(0).parent.element(0).ty = point_ And m_lin(tl(1)).data(0).parent.element(1).ty = point_ Then
   temp_triA(0) = triangle_number(m_lin(tl(1)).data(0).parent.element(0).no, m_lin(tl(1)).data(0).parent.element(1).no, tp1(1), _
       0, 0, 0, 0, 0, 0, 0)
   temp_triA(1) = triangle_number(m_lin(tl(1)).data(0).parent.element(0).no, m_lin(tl(1)).data(0).parent.element(1).no, tp2(1), _
       0, 0, 0, 0, 0, 0, 0)
   Else
   temp_triA(0) = triangle_number(m_lin(tl(1)).data(0).data0.poi(0), m_lin(tl(1)).data(0).data0.poi(1), tp1(1), _
       0, 0, 0, 0, 0, 0, 0)
   temp_triA(1) = triangle_number(m_lin(tl(1)).data(0).data0.poi(0), m_lin(tl(1)).data(0).data0.poi(1), tp2(1), _
       0, 0, 0, 0, 0, 0, 0)
   End If
   ite2 = set_item0_(temp_triA(0), -5, temp_triA(1), -5, "/", 0, 0, 0, 0, 0, 0, "", "", "", 0, "", condition_data0)
   reduce_item_for_relation = True
    Exit Function
  ElseIf m_poi(tp1(0)).data(0).g_line(1) = tl(0) Then
   tl(1) = m_poi(tp1(0)).data(0).g_line(0)
   If m_lin(tl(1)).data(0).parent.element(0).ty = point_ And m_lin(tl(1)).data(0).parent.element(1).ty = point_ Then
   temp_triA(0) = triangle_number(m_lin(tl(1)).data(0).parent.element(0).no, m_lin(tl(1)).data(0).parent.element(1).no, tp1(1), _
       0, 0, 0, 0, 0, 0, 0)
   temp_triA(1) = triangle_number(m_lin(tl(1)).data(0).parent.element(0).no, m_lin(tl(1)).data(0).parent.element(1).no, tp2(1), _
       0, 0, 0, 0, 0, 0, 0)
   Else
   temp_triA(0) = triangle_number(m_lin(tl(1)).data(0).data0.poi(0), m_lin(tl(1)).data(0).data0.poi(1), tp1(1), _
       0, 0, 0, 0, 0, 0, 0)
   temp_triA(1) = triangle_number(m_lin(tl(1)).data(0).data0.poi(0), m_lin(tl(1)).data(0).data0.poi(1), tp2(1), _
       0, 0, 0, 0, 0, 0, 0)
   End If
   ite2 = set_item0_(temp_triA(0), -5, temp_triA(1), -5, "/", 0, 0, 0, 0, 0, 0, "", "", "", 0, "", condition_data0)
   reduce_item_for_relation = True
    Exit Function
  End If
 End If
End If
End If
End Function
Private Function reduce_item_for_triangle2(ByVal p1%, ByVal p2%, ByVal p3%, ByVal l1%, ByVal l2%, ByVal l3%, _
             triA1 As Integer, triA2 As Integer, triA3 As Integer, F_s_g1 As Integer, F_s_g2 As Integer) As Boolean
             'ty=0 退出
Dim tp(2) As Integer
Dim tl(2) As Integer
tp(0) = p1%
tp(1) = p2%
tp(2) = p3%
tl(0) = l1%
tl(1) = l2%
tl(2) = l3%
If m_poi(tp(0)).data(0).g_line(0) = tl(1) Then
   If m_poi(tp(0)).data(0).g_line(1) > 0 Then
   Else
   
   End If

ElseIf m_poi(tp(0)).data(0).g_line(1) = tl(1) Then
ElseIf m_poi(tp(0)).data(0).g_line(0) = tl(2) Or _
         m_poi(tp(0)).data(0).g_line(1) = tl(0) Then
ElseIf m_poi(tp(1)).data(0).g_line(0) = tl(2) Or _
         m_poi(tp(1)).data(0).g_line(1) = tl(0) Then
ElseIf m_poi(tp(1)).data(0).g_line(0) = tl(0) Or _
         m_poi(tp(1)).data(0).g_line(1) = tl(2) Then
End If
End Function
Private Function reduce_item_for_triangle2_(ByVal p1%, ByVal p2%, ByVal p3%, ByVal l1%, l1_%, ByVal l2%, ByVal l3%, _
             triA1%, triA2%, f_s_f1%) As Boolean
If m_lin(l1%).data(0).parent.element(0).no = p3% Then
 If m_lin(l1_%).data(0).parent.element(0).ty = point_ And m_lin(l1_%).data(0).parent.element(1).ty = point_ Then
 triA1% = triangle_number(m_lin(l1_%).data(0).parent.element(0).no, m_lin(l1_%).data(0).parent.element(1).no, p3%, 0, 0, 0, _
                          0, 0, 0, 0)
 Else
 triA1% = triangle_number(m_lin(l1_%).data(0).data0.poi(0), m_lin(l1_%).data(0).data0.poi(1), p3%, 0, 0, 0, _
                          0, 0, 0, 0)
 End If
 f_s_f1% = set_four_sides_fig(m_lin(l1_%).data(0).data0.poi(0), m_lin(l1%).data(0).data0.poi(0), _
                             m_lin(l1_%).data(0).data0.poi(1), m_lin(l1%).data(0).data0.poi(1))
Else


End If
End Function
Public Function set_total_equal_triangle_from_two_angle_value(ByVal A1%, ByVal A2%, ty_ As Byte, ByVal p%, _
                                                re As total_record_type) As Byte
Dim j%, k%, tn%, l%
Dim dn(2) As Integer
Dim dn_(1) As Integer
Dim cond_ty As Byte
Dim triA(1) As temp_triangle_type
Dim triA_(1) As temp_triangle_data_type
Dim el As eline_data0_type
Dim ty As Byte
Dim t_condition_data   As condition_data_type
Dim dp As point_pair_data0_type
Dim temp_record(1) As total_record_type
Dim total_equal_type_S(2) As Byte
Dim total_equal_type_A(2) As Byte
'If run_type < 5 And ty_0 Then
' Exit Function
'End If
If ty_ = 0 Then
total_equal_type_A(0) = 2
Else
total_equal_type_A(0) = 1
End If
triA(0).last_T = 0
triA(1).last_T = 0
Call set_temp_triangle_from_angle(A1%, 0, triA(0), True)
 Call set_temp_triangle_from_angle(A2%, 0, triA(1), False)
  t_condition_data = re.record_data.data0.condition_data
'triA(0) = T_angle(angle(A1%).data(0).total_no).data(0).t_triangle(angle(A1%).data(0).total_no_)
  'triA(1) = T_angle(angle(A2%).data(0).total_no).data(0).t_triangle(angle(A2%).data(0).total_no_)
For j% = 1 To triA(0).last_T
  triA_(0) = triA(0).data(j%)
  triA_(1) = triA(0).data(j%)
   Call exchange_two_integer(triA_(1).angle(1), triA_(1).angle(2))
    Call exchange_two_integer(triA_(1).poi(1), triA_(1).poi(2))
     triA_(1).direction = -triA_(1).direction
      Call exchange_two_integer(triA_(1).l_v(1), triA_(1).l_v(2))
  For l% = 0 To 1
   For k% = 1 To triA(1).last_T
    If triA_(l%).no <> triA(1).data(k%).no Then
     If p% = 0 Or triA_(l%).is_contain_p Or _
      triA(1).data(k%).is_contain_p Then
'**************
 total_equal_type_S(0) = 0
 total_equal_type_S(1) = 0
 total_equal_type_S(2) = 0
 total_equal_type_A(1) = 0
 total_equal_type_A(2) = 0
 If ty_ = 1 Then
       If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(1), triA(1).data(k%).poi(0), _
         triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, 0, -1000, 0, 0, 0, el, dn(0), dn(1), ty, "", record_0.data0.condition_data) Then
          total_equal_type_S(2) = 1
       End If
       If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(2), triA(1).data(k%).poi(0), _
         triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, -1000, 0, 0, 0, el, dn(0), dn(1), ty, "", record_0.data0.condition_data) Then
          total_equal_type_S(1) = 1
       End If
 ElseIf ty_ = 0 Then
    temp_record(0).record_data = re.record_data
     If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(1), triA(1).data(k%).poi(0), _
         triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, el, dn(1), dn(2), ty, "", record_0.data0.condition_data) Then
          total_equal_type_S(2) = 1
          temp_record(0).record_data = re.record_data
         temp_record(1).record_data.data0.condition_data.condition_no = 0
          Call add_conditions_to_record(ty, dn(0), dn(1), dn(2), temp_record(1).record_data.data0.condition_data)
       If is_equal_angle(triA_(l%).angle(2), triA(1).data(k%).angle(2), dn_(0), dn_(1)) Then
        If angle(triA_(l%).angle(2)).data(0).value = "90" Then
        total_equal_type_A(2) = 2
        Else
        total_equal_type_A(2) = 1
        End If
          Call add_conditions_to_record(angle3_value_, dn_(0), dn_(1), 0, temp_record(1).record_data.data0.condition_data)
         If triA_(l%).poi(1) <> triA(1).data(k%).poi(1) Or _
             triA_(l%).poi(2) <> triA(1).data(k%).poi(2) Then
       If triA_(l%).poi(1) <> triA(1).data(k%).poi(1) Or _
            triA_(l%).poi(2) <> triA(1).data(k%).poi(2) Then
        If is_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
         triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
            'Call add_record_to_record(temp_record(0).record_data.data0.condition_data, _
                         temp_record(1).record_data.data0.condition_data)
            temp_record(1).record_data.data0.theorem_no = 30
        tn% = 0
        set_total_equal_triangle_from_two_angle_value = _
          set_pseudo_total_equal_triangle(triA_(l%), triA(1).data(k%), 1, 0, 1, 2, tn%, _
            temp_record(1).record_data.data0, t_condition_data)
         pseudo_total_equal_triangle(tn%).data(0).ty = 1
        If set_total_equal_triangle_from_two_angle_value > 1 Then
         Exit Function
        End If
'         temp_record(0).record_data.data0.theorem_no = 24
'         temp_record(0).record_data.data0.condition_data.condition_no = 1
'         temp_record(0).record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
'         temp_record(0).record_data.data0.condition_data.condition(1).no = tn%
'           set_total_equal_triangle_from_two_angle_value = set_equal_dline(triA_(l%).poi(1), _
            triA_(l%).poi(2), triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), _
             0, 0, 0, 0, 0, 0, 0, temp_record(0), 0, 0, 0, 0, 0)
'            If set_total_equal_triangle_from_two_angle_value > 1 Then
'             Exit Function
'            End If
            GoTo set_total_equal_triangle_from_two_angle_value_mark10
        End If
       End If
       End If
        'ElseIf is_equal_angle(tria_(l%).angle(2), triA(1).data(k%).angle(2), dn_(0), dn_(1)) Then
       '   Call add_conditions_to_record(angle3_value, dn_(0), dn_(1), 0, temp_record(0))
       
       End If
     ElseIf is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(2), triA(1).data(k%).poi(0), _
         triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, el, dn(1), dn(2), ty, "", record_0.data0.condition_data) Then
           total_equal_type_S(1) = 1
           temp_record(0).record_data = re.record_data
          temp_record(1).record_data.data0.condition_data.condition_no = 0
          Call add_conditions_to_record(ty, dn(0), dn(1), dn(2), temp_record(1).record_data.data0.condition_data)
       If is_equal_angle(triA_(l%).angle(1), triA(1).data(k%).angle(1), dn_(0), dn_(1)) Then
          If angle(triA_(l%).angle(1)).data(0).value = "90" Then
          total_equal_type_A(1) = 2
          Else
          total_equal_type_A(1) = 1
          End If
          Call add_conditions_to_record(angle3_value_, dn_(0), dn_(1), 0, temp_record(1).record_data.data0.condition_data)
       If triA_(l%).poi(1) <> triA(1).data(k%).poi(1) Or _
            triA_(l%).poi(2) <> triA(1).data(k%).poi(2) Then
        If is_equal_dline(triA_(l%).poi(1), triA_(l%).poi(2), _
         triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
             'Call add_record_to_record(temp_record(0).record_data.data0.condition_data, _
                         temp_record(1).record_data.data0.condition_data)
             temp_record(1).record_data.data0.theorem_no = 30
             tn% = 0
        If set_pseudo_total_equal_triangle(triA_(l%), triA(1).data(k%), 2, 0, 1, 2, tn%, _
          temp_record(1).record_data.data0, t_condition_data) Then
         pseudo_total_equal_triangle(tn%).data(0).ty = 1
        End If
'         temp_record(0).record_data.data0.theorem_no = 24
'         temp_record(0).record_data.data0.condition_data.condition_no = 1
'         temp_record(0).record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
'         temp_record(0).record_data.data0.condition_data.condition(1).no = tn%
 '          set_total_equal_triangle_from_two_angle_value = set_equal_dline(triA_(l%).poi(1), _
            triA_(l%).poi(2), triA(1).data(k%).poi(1), triA(1).data(k%).poi(2), _
             0, 0, 0, 0, 0, 0, 0, temp_record(0), 0, 0, 0, 0, 0)
 '           If set_total_equal_triangle_from_two_angle_value > 1 Then
 '            Exit Function
 '           End If
            GoTo set_total_equal_triangle_from_two_angle_value_mark10
        End If
       End If
      'ElseIf is_equal_angle(tria_(l%).angle(2), triA(1).data(k%).angle(2), dn_(0), dn_(1)) Then
       '   Call add_conditions_to_record(angle3_value, dn_(0), dn_(1), 0, temp_record(0))
       End If
     ElseIf is_equal_dline(triA_(l%).poi(2), triA_(l%).poi(1), triA(1).data(k%).poi(2), _
         triA(1).data(k%).poi(1), 0, 0, 0, 0, 0, 0, dn(0), -1000, 0, 0, 0, el, dn(1), dn(2), ty, "", record_0.data0.condition_data) Then
           total_equal_type_S(0) = 1
                   temp_record(0).record_data = re.record_data
           temp_record(1).record_data.data0.condition_data.condition_no = 0
            'Call add_conditions_to_record(ty, dn(0), dn(1), dn(2), t_condition_data(1))
            Call add_conditions_to_record(ty, dn(0), dn(1), dn(2), temp_record(1).record_data.data0.condition_data)
      If is_equal_angle(triA_(l%).angle(1), triA(1).data(k%).angle(1), dn_(0), dn_(1)) Then
         If angle(triA_(l%).angle(1)).data(0).value = "90" Then
         total_equal_type_A(1) = 2
         Else
         total_equal_type_A(1) = 1
         End If
          Call add_conditions_to_record(angle3_value_, dn_(0), dn_(1), 0, temp_record(1).record_data.data0.condition_data)
       If triA_(l%).poi(0) <> triA(1).data(k%).poi(0) Or _
            triA_(l%).poi(2) <> triA(1).data(k%).poi(2) Then
        If is_equal_dline(triA_(l%).poi(0), triA_(l%).poi(2), _
         triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, _
           -1000, 0, 0, 0, eline_data0, 0, 0, 0, "", record_0.data0.condition_data) = False Then
           'Call add_record_to_record(temp_record(0).record_data.data0.condition_data, _
                         temp_record(1).record_data.data0.condition_data)
           temp_record(0).record_data.data0.theorem_no = 30
            tn% = 0
         If set_pseudo_total_equal_triangle(triA_(l%), triA(1).data(k%), 2, 0, 0, 2, tn%, _
         temp_record(1).record_data.data0, t_condition_data) Then
         pseudo_total_equal_triangle(tn%).data(0).ty = 0
         End If
'         temp_record(0).record_data.data0.theorem_no = 24
'         temp_record(0).record_data.data0.condition_data.condition_no = 1
'         temp_record(0).record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
'         temp_record(0).record_data.data0.condition_data.condition(1).no = tn%
'          set_total_equal_triangle_from_two_angle_value = set_equal_dline(triA_(l%).poi(0), _
            triA_(l%).poi(2), triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), _
             0, 0, 0, 0, 0, 0, 0, temp_record(0), 0, 0, 0, 0, 0)
'            If set_total_equal_triangle_from_two_angle_value > 1 Then
'             Exit Function
'            End If
            GoTo set_total_equal_triangle_from_two_angle_value_mark10
        End If
        End If
      ElseIf is_equal_angle(triA_(l%).angle(2), triA(1).data(k%).angle(2), dn_(0), dn_(1)) Then
           If angle(triA_(l%).angle(2)).data(0).value = "90" Then
           total_equal_type_A(2) = 2
           Else
           total_equal_type_A(2) = 1
           End If
              temp_record(0).record_data = re.record_data
        temp_record(1).record_data.data0.condition_data.condition_no = 0
          Call add_conditions_to_record(angle3_value_, dn_(0), dn_(1), 0, temp_record(1).record_data.data0.condition_data)
       If triA_(l%).poi(1) <> triA(1).data(k%).poi(1) Or _
            triA_(l%).poi(0) <> triA(1).data(k%).poi(0) Then
        If is_equal_dline(triA_(l%).poi(1), triA_(l%).poi(0), _
         triA(1).data(k%).poi(1), triA(1).data(k%).poi(0), 0, 0, 0, 0, 0, 0, dn(0), _
           -1000, 0, 0, 0, eline_data0, dn(1), dn(2), cond_ty, "", record_0.data0.condition_data) = False Then
           Call add_conditions_to_record(cond_ty, dn(0), dn(1), dn(2), temp_record(0).record_data.data0.condition_data)
           'Call add_record_to_record(temp_record(0).record_data.data0.condition_data, _
                         temp_record(1).record_data.data0.condition_data)
           temp_record(1).record_data.data0.theorem_no = 30
            tn% = 0
         If set_pseudo_total_equal_triangle(triA_(l%), triA(1).data(k%), 1, 0, 0, 1, tn%, _
              temp_record(1).record_data.data0, t_condition_data) Then
         pseudo_total_equal_triangle(tn%).data(0).ty = 0
         End If
'         temp_record(0).record_data.data0.theorem_no = 24
'         temp_record(0).record_data.data0.condition_data.condition_no = 1
'         temp_record(0).record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
'         temp_record(0).record_data.data0.condition_data.condition(1).no = tn%
'          set_total_equal_triangle_from_two_angle_value = set_equal_dline(triA_(l%).poi(1), _
            triA_(l%).poi(0), triA(1).data(k%).poi(1), triA(1).data(k%).poi(0), _
             0, 0, 0, 0, 0, 0, 0, temp_record(0), 0, 0, 0, 0, 0)
'            If set_total_equal_triangle_from_two_angle_value > 1 Then
'             Exit Function
'            End If
            GoTo set_total_equal_triangle_from_two_angle_value_mark10
         End If
        End If
       End If
     End If
     If is_equal_angle(triA_(l%).angle(2), _
       triA(1).data(k%).angle(2), dn(0), dn(1)) Then
        If angle(triA_(l%).angle(2)).data(0).value = "90" Then
        total_equal_type_A(2) = 2
        Else
        total_equal_type_A(2) = 1
        End If
       If is_point_pair(triA_(l%).poi(0), _
           triA_(l%).poi(1), triA_(l%).poi(1), triA_(l%).poi(2), _
            triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), triA(1).data(k%).poi(1), _
             triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, _
              -1000, 0, 0, 0, 0, 0, dp, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", record_0) = False Then
        temp_record(1).record_data.data0.condition_data.condition_no = 0
         Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record(1).record_data.data0.condition_data)
       If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) And ( _
               angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) Or _
                angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0)) And _
         angle(triA_(l%).angle(2)).data(0).poi(1) = angle(triA(1).data(k%).angle(2)).data(0).poi(1) And ( _
               angle(triA_(l%).angle(2)).data(0).line_no(0) = angle(triA(1).data(k%).angle(2)).data(0).line_no(1) Or _
                angle(triA_(l%).angle(2)).data(0).line_no(1) = angle(triA(1).data(k%).angle(2)).data(0).line_no(0)) Then
         temp_record(1).record_data.data0.theorem_no = 113
     ' set_total_equal_triangle_from_two_angle_value = set_dpoint_pair(triA_(l%).poi(0), _
           triA_(l%).poi(1), triA_(l%).poi(1), triA_(l%).poi(2), _
            triA(1).data(k%).poi(0), triA(1).data(k%).poi(1), triA(1).data(k%).poi(1), _
             triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp_record(0), True, _
              0, 0, 0, 0)
          '  If set_total_equal_triangle_from_two_angle_value > 1 Then
          '   Exit Function
           ' End If
       Else
         temp_record(1).record_data.data0.theorem_no = 30
'         temp_record(0).record_data.data0.theorem_no = 102
'         temp_record(0).record_data.data0.condition_data.condition_no = 1
'         temp_record(0).record_data.data0.condition_data.condition(1).ty = pseudo_similar_triangle_
'         temp_record(0).record_data.data0.condition_data.condition(1).no = tn%
       End If
            temp_record(0).record_data = re.record_data
            'Call add_record_to_record(temp_record(0).record_data.data0.condition_data, _
                         temp_record(1).record_data.data0.condition_data)
        tn% = 0
        Call set_pseudo_similar_triangle(triA_(l%), triA(1).data(k%), 1, 0, 0, 1, tn%, _
          temp_record(1), t_condition_data)
            GoTo set_total_equal_triangle_from_two_angle_value_mark10
       End If
     ElseIf is_equal_angle(triA_(l%).angle(1), _
                     triA(1).data(k%).angle(1), dn(0), dn(1)) Then
            If angle(triA_(l%).angle(1)).data(0).value = "90" Then
             total_equal_type_A(1) = 2
            Else
             total_equal_type_A(1) = 1
            End If
        temp_record(0).record_data = re.record_data
         temp_record(1).record_data.data0.condition_data.condition_no = 1
         Call add_conditions_to_record(angle3_value_, dn(0), dn(1), 0, temp_record(1).record_data.data0.condition_data)
      If is_point_pair(triA_(l%).poi(0), _
           triA_(l%).poi(2), triA_(l%).poi(1), triA_(l%).poi(2), _
            triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), triA(1).data(k%).poi(1), _
             triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1000, _
              0, 0, 0, 0, 0, dp, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", record_0) = False Then
      If angle(A1%).data(0).poi(1) = angle(A2%).data(0).poi(1) And ( _
               angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) Or _
                angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0)) And _
         angle(triA_(l%).angle(1)).data(0).poi(1) = angle(triA(1).data(k%).angle(1)).data(0).poi(1) And ( _
               angle(triA_(l%).angle(1)).data(0).line_no(0) = angle(triA(1).data(k%).angle(1)).data(0).line_no(1) Or _
                angle(triA_(l%).angle(1)).data(0).line_no(1) = angle(triA(1).data(k%).angle(1)).data(0).line_no(0)) Then
         temp_record(1).record_data.data0.theorem_no = 113
      'set_total_equal_triangle_from_two_angle_value = set_dpoint_pair(triA_(l%).poi(0), _
           triA_(l%).poi(2), triA_(l%).poi(1), triA_(l%).poi(2), _
            triA(1).data(k%).poi(0), triA(1).data(k%).poi(2), triA(1).data(k%).poi(1), _
             triA(1).data(k%).poi(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp_record(0), True, _
              0, 0, 0, 0)
       '     If set_total_equal_triangle_from_two_angle_value > 1 Then
        '     Exit Function
         '   End If
      Else
          temp_record(1).record_data.data0.theorem_no = 105
'         temp_record(0).record_data.data0.theorem_no = 102
'         temp_record(0).record_data.data0.condition_data.condition_no = 1
'         temp_record(0).record_data.data0.condition_data.condition(1).ty = pseudo_similar_triangle_
'         temp_record(0).record_data.data0.condition_data.condition(1).no = tn%
      End If
          temp_record(0).record_data = re.record_data
            'Call add_record_to_record(temp_record(0).record_data.data0.condition_data, _
                         temp_record(1).record_data.data0.condition_data)
       tn% = 0
        Call set_pseudo_similar_triangle(triA_(l%), triA(1).data(k%), 2, 0, 0, 2, tn%, _
          temp_record(1), temp_record(1).record_data.data0.condition_data)
            GoTo set_total_equal_triangle_from_two_angle_value_mark10
      End If
     End If
set_total_equal_triangle_from_two_angle_value_mark10:
End If
Call set_aid_point_data(triA_(l%), triA(1).data(k%), total_equal_type_S(), total_equal_type_A())
End If
End If
 Next k%
 Next l%
Next j%
End Function

Public Function set_pseudo_similar_triangle(triA1 As temp_triangle_data_type, triA2 As temp_triangle_data_type, _
                                    ByVal pseudo_p1%, ByVal pseudo_p2%, ByVal concl_p1%, ByVal concl_p2%, _
                                      no%, re As total_record_type, con_data0 As condition_data_type) As Byte
Dim triA(1) As temp_triangle_data_type
Dim i%
Dim dp As point_pair_data0_type
'Dim triA(1) As temp_triangle_type
Dim temp_record As total_record_type
If run_type > 4 Then
   Exit Function
End If
If no% > 0 Then
 GoTo set_pseudo_similar_mark0
End If
If triA1.no > triA2.no Then
triA(0) = triA2
triA(1) = triA1
Else
triA(0) = triA1
triA(1) = triA2
End If
For i% = 1 To last_conditions.last_cond(1).pseudo_similar_triangle_no
If pseudo_similar_triangle(i%).data(0).triA(0).no = triA(0).no And _
        pseudo_similar_triangle(i%).data(0).triA(1).no = triA(1).no Then
          no% = i%
           Exit Function
End If
Next i%
  temp_record = re
  Call set_level(temp_record.record_data.data0.condition_data)
  If temp_record.record_data.data0.condition_data.level < 2 Then
      temp_record.record_data.data0.condition_data.level = 2
  End If
If last_conditions.last_cond(1).pseudo_similar_triangle_no Mod 10 = 0 Then
 ReDim Preserve pseudo_similar_triangle( _
        last_conditions.last_cond(1).pseudo_similar_triangle_no + 10) As pseudo_two_triangle_type
End If
last_conditions.last_cond(1).pseudo_similar_triangle_no = _
     last_conditions.last_cond(1).pseudo_similar_triangle_no + 1
no% = last_conditions.last_cond(1).pseudo_similar_triangle_no
  pseudo_similar_triangle(no%).data(0).triA(0) = triA(0)
  pseudo_similar_triangle(no%).data(0).triA(1) = triA(1)
  pseudo_similar_triangle(no%).data(0).pseudo_point(0) = pseudo_p1%
  pseudo_similar_triangle(no%).data(0).pseudo_point(1) = pseudo_p2%
  pseudo_similar_triangle(no%).data(0).conclusion_poi(0) = concl_p1%
  pseudo_similar_triangle(no%).data(0).conclusion_poi(1) = concl_p2%
  pseudo_similar_triangle(no%).data(0).pseudo_condition_data = con_data0 '
  pseudo_similar_triangle(no%).data(0).record = temp_record.record_data
set_pseudo_similar_mark0:
  concl_p1% = pseudo_similar_triangle(no%).data(0).conclusion_poi(0)
  concl_p2% = pseudo_similar_triangle(no%).data(0).conclusion_poi(1)
     temp_record.record_data.data0.theorem_no = 102
         temp_record.record_data.data0.condition_data.condition_no = 1
         temp_record.record_data.data0.condition_data.condition(1).ty = pseudo_similar_triangle_
         temp_record.record_data.data0.condition_data.condition(1).no = no%
If run_type >= 5 Then
        set_pseudo_similar_triangle = set_dpoint_pair(pseudo_similar_triangle(no%).data(0).triA(0).poi(concl_p1%), _
          pseudo_similar_triangle(no%).data(0).triA(0).poi(concl_p2%), _
            pseudo_similar_triangle(no%).data(0).triA(0).poi(1), _
              pseudo_similar_triangle(no%).data(0).triA(0).poi(2), _
       pseudo_similar_triangle(no%).data(0).triA(1).poi(concl_p1%), _
         pseudo_similar_triangle(no%).data(0).triA(1).poi(concl_p2%), _
           pseudo_similar_triangle(no%).data(0).triA(1).poi(1), _
            pseudo_similar_triangle(no%).data(0).triA(1).poi(2), _
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp_record, True, 0, _
              0, 0, 0, False)
            If set_pseudo_similar_triangle > 1 Then
             Exit Function
            End If
Else
 If is_pseudo_dpoint_pair(pseudo_similar_triangle(no%).data(0).triA(0).poi(concl_p1%), _
          pseudo_similar_triangle(no%).data(0).triA(0).poi(concl_p2%), _
            pseudo_similar_triangle(no%).data(0).triA(0).poi(1), _
              pseudo_similar_triangle(no%).data(0).triA(0).poi(2), _
       pseudo_similar_triangle(no%).data(0).triA(1).poi(concl_p1%), _
         pseudo_similar_triangle(no%).data(0).triA(1).poi(concl_p2%), _
           pseudo_similar_triangle(no%).data(0).triA(1).poi(1), _
            pseudo_similar_triangle(no%).data(0).triA(1).poi(2), 0, dp) = False Then
    If last_conditions.last_cond(1).pseudo_dpoint_pair_no Mod 10 = 0 Then
    ReDim Preserve pseudo_dpoint_pair( _
         last_conditions.last_cond(1).pseudo_dpoint_pair_no + 10) As Dpoint_pair_type
    End If
    last_conditions.last_cond(1).pseudo_dpoint_pair_no = _
             last_conditions.last_cond(1).pseudo_dpoint_pair_no + 1
    pseudo_dpoint_pair(last_conditions.last_cond(1).pseudo_dpoint_pair_no).data(0).data0 = dp
    pseudo_dpoint_pair(last_conditions.last_cond(1).pseudo_dpoint_pair_no).data(0).record = temp_record.record_data
 End If
 End If
End Function
Public Function set_pseudo_total_equal_triangle(triA1 As temp_triangle_data_type, triA2 As temp_triangle_data_type, _
                                    ByVal pseudo_p1%, ByVal pseudo_p2%, ByVal concl_p1%, ByVal concl_p2%, no%, _
                                      re As record_data0_type, con_data0 As condition_data_type) As Byte
'pseudo_p1% 拟全等,concl_p1% 结论
Dim triA(1) As temp_triangle_data_type
Dim i%
Dim el As eline_data0_type
Dim temp_record As total_record_type
If run_type > 4 Then
   Exit Function
End If
If no% > 0 Then
 GoTo set_pseudo_total_equal_triangle_mark0
End If
If triA1.no > triA2.no Then
triA(0) = triA2
triA(1) = triA1
Else
triA(0) = triA1
triA(1) = triA2
End If
 '不是等腰三角形
If is_equal_dline(triA1.poi(0), triA1.poi(1), triA1.poi(1), triA1.poi(2), 0, 0, 0, 0, 0, 0, 0, -1000, 0, _
       0, 0, el, 0, 0, 0, "", temp_record.record_data.data0.condition_data) Then
        Exit Function
ElseIf is_equal_dline(triA2.poi(0), triA2.poi(1), triA2.poi(1), triA2.poi(2), 0, 0, 0, 0, 0, 0, 0, -1000, 0, _
       0, 0, el, 0, 0, 0, "", temp_record.record_data.data0.condition_data) Then
        Exit Function
End If
 '不是全等三角形
For i% = 1 To last_conditions.last_cond(1).pseudo_total_equal_triangle_no
If pseudo_total_equal_triangle(i%).data(0).triA(0).no = triA(0).no And _
        pseudo_total_equal_triangle(i%).data(0).triA(1).no = triA(1).no Then
          no% = i%
           Exit Function
End If
Next i%
  'temp_record.record_data.data0.condition_data = con_data0
  Call set_level(temp_record.record_data.data0.condition_data)
  If temp_record.record_data.data0.condition_data.level < 2 Then
      temp_record.record_data.data0.condition_data.level = 2
  End If
If last_conditions.last_cond(1).pseudo_total_equal_triangle_no Mod 10 = 0 Then
 ReDim Preserve pseudo_total_equal_triangle( _
       last_conditions.last_cond(1).pseudo_total_equal_triangle_no + 10) As pseudo_two_triangle_type
End If
last_conditions.last_cond(1).pseudo_total_equal_triangle_no = _
     last_conditions.last_cond(1).pseudo_total_equal_triangle_no + 1
no% = last_conditions.last_cond(1).pseudo_total_equal_triangle_no
  pseudo_total_equal_triangle(no%).data(0).triA(0) = triA(0)
  pseudo_total_equal_triangle(no%).data(0).triA(1) = triA(1)
  pseudo_total_equal_triangle(no%).data(0).pseudo_point(0) = pseudo_p1% '
  pseudo_total_equal_triangle(no%).data(0).pseudo_point(1) = pseudo_p2%
  pseudo_total_equal_triangle(no%).data(0).conclusion_poi(0) = concl_p1% '结论对应点
  pseudo_total_equal_triangle(no%).data(0).conclusion_poi(1) = concl_p2% '结论对应点
  pseudo_total_equal_triangle(no%).data(0).pseudo_condition_data = con_data0 '拟全等条件
  pseudo_total_equal_triangle(no%).data(0).record.data0 = re  '.temp_record.record_data
  set_pseudo_total_equal_triangle = 1
set_pseudo_total_equal_triangle_mark0:
  concl_p1% = pseudo_total_equal_triangle(no%).data(0).conclusion_poi(0)
  concl_p2% = pseudo_total_equal_triangle(no%).data(0).conclusion_poi(1)
     temp_record.record_data.data0.theorem_no = 24
         temp_record.record_data.data0.condition_data.condition_no = 1
         temp_record.record_data.data0.condition_data.condition(1).ty = pseudo_total_equal_triangle_
         temp_record.record_data.data0.condition_data.condition(1).no = no%
If run_type >= 5 Then
   set_pseudo_total_equal_triangle = set_equal_dline(pseudo_total_equal_triangle(no%).data(0).triA(0).poi(concl_p1%), _
          pseudo_total_equal_triangle(no%).data(0).triA(0).poi(concl_p2%), _
       pseudo_total_equal_triangle(no%).data(0).triA(1).poi(concl_p1%), _
         pseudo_total_equal_triangle(no%).data(0).triA(1).poi(concl_p2%), _
             0, 0, 0, 0, 0, 0, 0, temp_record, True, 0, _
              0, 0, 0, False)
            If set_pseudo_total_equal_triangle > 1 Then
             Exit Function
            End If
Else
 If is_pseudo_eline(pseudo_total_equal_triangle(no%).data(0).triA(0).poi(concl_p1%), _
          pseudo_total_equal_triangle(no%).data(0).triA(0).poi(concl_p2%), _
       pseudo_total_equal_triangle(no%).data(0).triA(1).poi(concl_p1%), _
         pseudo_total_equal_triangle(no%).data(0).triA(1).poi(concl_p2%), _
               0, el) = False Then
 If last_conditions.last_cond(1).pseudo_eline_no Mod 10 = 0 Then
  ReDim Preserve pseudo_eline(last_conditions.last_cond(1).pseudo_eline_no + 10) As eline_type
 End If
 last_conditions.last_cond(1).pseudo_eline_no = last_conditions.last_cond(1).pseudo_eline_no + 1
   pseudo_eline(last_conditions.last_cond(1).pseudo_eline_no).data(0).data0 = el
    pseudo_eline(last_conditions.last_cond(1).pseudo_eline_no).data(0).record = temp_record.record_data
  End If
End If
End Function
Public Sub set_set_pseudo_condition_for_th120(ByVal ty, ByVal i%, re As total_record_type)
Dim temp_record As total_record_type
Dim dv%, md%, el%, new_p%
Dim tn(10) As Integer
Dim tp(3) As Integer
Dim el_data As eline_data0_type
Dim tl(2) As Integer
Dim con_d As condition_data_type
dv% = re.record_data.data0.condition_data.condition(1).no
If ty = eline_ Then
   If Deline(i%).data(0).data0.poi(0) = Deline(i%).data(0).data0.poi(2) Then
      tp(0) = Deline(i%).data(0).data0.poi(1)
      tp(2) = Deline(i%).data(0).data0.poi(3)
      tp(3) = Deline(i%).data(0).data0.poi(0)
   ElseIf Deline(i%).data(0).data0.poi(0) = Deline(i%).data(0).data0.poi(3) Then
      tp(0) = Deline(i%).data(0).data0.poi(1)
      tp(2) = Deline(i%).data(0).data0.poi(2)
      tp(3) = Deline(i%).data(0).data0.poi(0)
   ElseIf Deline(i%).data(0).data0.poi(1) = Deline(i%).data(0).data0.poi(2) Then
      tp(0) = Deline(i%).data(0).data0.poi(0)
      tp(2) = Deline(i%).data(0).data0.poi(3)
      tp(3) = Deline(i%).data(0).data0.poi(1)
   ElseIf Deline(i%).data(0).data0.poi(1) = Deline(i%).data(0).data0.poi(3) Then
      tp(0) = Deline(i%).data(0).data0.poi(0)
      tp(2) = Deline(i%).data(0).data0.poi(2)
      tp(3) = Deline(i%).data(0).data0.poi(1)
   Else
     Exit Sub
   End If
ElseIf ty = angle3_value_ Then
   If angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(0) = _
       angle(angle3_value(i%).data(0).data0.angle(1)).data(0).line_no(0) Then
        tl(0) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(0)
        tl(1) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(1)
        tl(2) = angle(angle3_value(i%).data(0).data0.angle(1)).data(0).line_no(1)
   ElseIf angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(0) = _
       angle(angle3_value(i%).data(0).data0.angle(1)).data(0).line_no(1) Then
        tl(0) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(0)
        tl(1) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(1)
        tl(2) = angle(angle3_value(i%).data(0).data0.angle(1)).data(0).line_no(0)
   ElseIf angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(1) = _
       angle(angle3_value(i%).data(0).data0.angle(1)).data(0).line_no(0) Then
        tl(0) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(1)
        tl(1) = angle(angle3_value(i%).data(0).data0.angle(1)).data(0).line_no(0)
        tl(2) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(1)
   ElseIf angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(1) = _
       angle(angle3_value(i%).data(0).data0.angle(1)).data(0).line_no(1) Then
        tl(0) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(1)
        tl(1) = angle(angle3_value(i%).data(0).data0.angle(1)).data(0).line_no(0)
        tl(2) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).line_no(0)
   End If
   If angle(angle3_value(i%).data(0).data0.angle(0)).data(0).poi(1) = _
          angle(angle3_value(i%).data(0).data0.angle(1)).data(0).poi(1) Then '顶角平分
      angle3_value(i%).data(0).record.data0.theorem_no = 37
      If tl(0) = Dverti(dv%).data(0).line_no(0) Then
         tl(0) = Dverti(dv%).data(0).line_no(1)
      Else
         tl(0) = Dverti(dv%).data(0).line_no(0)
      End If
      tp(0) = is_line_line_intersect(tl(0), tl(1), 0, 0, False)
      tp(2) = is_line_line_intersect(tl(0), tl(2), 0, 0, False)
      tp(3) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).poi(1)
   Else '第角相等
      angle3_value(i%).data(0).record.data0.theorem_no = 36
      tp(0) = angle(angle3_value(i%).data(0).data0.angle(0)).data(0).poi(1)
      tp(2) = angle(angle3_value(i%).data(0).data0.angle(1)).data(0).poi(1)
      tp(3) = is_line_line_intersect(tl(1), tl(2), 0, 0, False)
   End If
End If
If Dverti(dv%).data(0).inter_poi > 0 Then
   Call is_equal_dline(tp(0), tp(3), tp(3), tp(2), 0, 0, 0, 0, 0, 0, _
          el%, 0, 0, 0, 0, el_data, 0, 0, 0, "", con_d)
   If angle3_value(i%).data(0).record.data0.theorem_no = 36 Then
    angle3_value(i%).data(0).record.data0.condition_data.condition(1).ty = eline_
    angle3_value(i%).data(0).record.data0.condition_data.condition(1).no = el%
   ElseIf angle3_value(i%).data(0).record.data0.theorem_no = 37 Then
    angle3_value(i%).data(0).record.data0.condition_data.condition_no = 2
    angle3_value(i%).data(0).record.data0.condition_data.condition(1).ty = eline_
    angle3_value(i%).data(0).record.data0.condition_data.condition(1).no = el%
    angle3_value(i%).data(0).record.data0.condition_data.condition(1).ty = verti_
    angle3_value(i%).data(0).record.data0.condition_data.condition(1).no = dv%
   End If
Else
tn(0) = Dverti(dv%).data(0).line_no(0)
tn(1) = Dverti(dv%).data(0).line_no(1)
tn(2) = tp(1)
tn(3) = 2
tn(4) = 1
tn(5) = 0
tn(6) = new_p%
Call C_wait_for_aid_point.set_wait_for_aid_point(interset_point_line_line, tn(), 7)
'Call add_interset_point_line_line(Dverti(dv%).data(0).line_no(0), _
       Dverti(dv%).data(0).line_no(1), tp(1), 2, 1, 0, new_p%, condition_data0)
temp_record = re
md% = 0
temp_record.record_data.data0.condition_data.condition_no = 0
Call add_conditions_to_record(new_point_, new_p%, 0, 0, temp_record.record_data.data0.condition_data)
Call add_conditions_to_record(verti_, dv%, 0, 0, temp_record.record_data.data0.condition_data)
temp_record.record_data.data0.theorem_no = 120
Call set_mid_point(tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, temp_record, md%, 0, 0, 0, 0)
temp_record.record_data.data0.condition_data.condition_no = 0
Call add_conditions_to_record(midpoint_, md%, 0, 0, temp_record.record_data.data0.condition_data)
Call add_conditions_to_record(verti_, dv%, 0, 0, temp_record.record_data.data0.condition_data)
temp_record.record_data.data0.theorem_no = 39
If ty = eline_ Then
 Deline(i%).data(0).record = temp_record.record_data
 re = temp_record
Else
el% = 0
Call set_equal_dline(tp(0), tp(3), tp(3), tp(2), 0, 0, 0, 0, 0, 0, 0, temp_record, _
      el%, 0, 0, 0, 0, False)
   If angle3_value(i%).data(0).record.data0.theorem_no = 36 Then
   angle3_value(i%).data(0).record.data0.condition_data.condition(1).ty = eline_
   angle3_value(i%).data(0).record.data0.condition_data.condition(1).no = el%
   ElseIf angle3_value(i%).data(0).record.data0.theorem_no = 37 Then
   angle3_value(i%).data(0).record.data0.condition_data.condition_no = 2
   angle3_value(i%).data(0).record.data0.condition_data.condition(1).ty = eline_
   angle3_value(i%).data(0).record.data0.condition_data.condition(1).no = el%
   angle3_value(i%).data(0).record.data0.condition_data.condition(1).ty = verti_
   angle3_value(i%).data(0).record.data0.condition_data.condition(1).no = dv%
   End If
   re = temp_record
End If
End If
End Sub
Public Sub set_pseudo_condition(re As total_record_type, k%)
'设置拟全等（相似）条件
Dim ty(1) As Byte
Dim p%, n%, i%, j%, tA1%, tA2%, tA3%
Dim cond_ty(1) As Byte
Dim dn(2) As Integer
Dim dn_(2) As Integer
Dim tn_(2) As Integer
Dim n_(2) As Integer
Dim tn(7) As Integer
Dim dp  As point_pair_data0_type
Dim triA(1) As temp_triangle_data_type
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim set_two_triangle_no As Integer
 '*********************
For i% = 1 To re.record_data.data0.condition_data.condition_no
 If re.record_data.data0.condition_data.condition(i%).ty = pseudo_similar_triangle_ Or _
     re.record_data.data0.condition_data.condition(i%).ty = pseudo_total_equal_triangle_ Then
      n% = re.record_data.data0.condition_data.condition(1).no '删除拟相似条件
      ty(0) = re.record_data.data0.condition_data.condition(1).ty   '删除拟相似条件
  For j% = re.record_data.data0.condition_data.condition_no - 1 To k% Step -1
   re.record_data.data0.condition_data.condition(i%) = re.record_data.data0.condition_data.condition(i% + 1)
  Next j%
   re.record_data.data0.condition_data.condition_no = re.record_data.data0.condition_data.condition_no - 1
 End If
 Next i%
 '********************
 '设置两个三角形
If ty(0) = pseudo_similar_triangle_ Then
triA(0) = pseudo_similar_triangle(n%).data(0).triA(0)
triA(1) = pseudo_similar_triangle(n%).data(0).triA(1)
n_(0) = pseudo_similar_triangle(n%).data(0).pseudo_point(0)
n_(1) = pseudo_similar_triangle(n%).data(0).pseudo_point(1)
set_two_triangle_no = pseudo_similar_triangle(n%).data(0).two_triA_n
temp_record1.record_data.data0.condition_data = pseudo_similar_triangle(n%).data(0).pseudo_condition_data
ElseIf ty(0) = pseudo_total_equal_triangle_ Then
triA(0) = pseudo_total_equal_triangle(n%).data(0).triA(0)
triA(1) = pseudo_total_equal_triangle(n%).data(0).triA(1)
n_(0) = pseudo_total_equal_triangle(n%).data(0).pseudo_point(0)
n_(1) = pseudo_total_equal_triangle(n%).data(0).pseudo_point(1)
set_two_triangle_no = pseudo_total_equal_triangle(n%).data(0).two_triA_n
temp_record1.record_data.data0.condition_data = pseudo_total_equal_triangle(n%).data(0).pseudo_condition_data
Else
Exit Sub
End If
If (n_(0) = 0 And n_(1) = 1) Or (n_(0) = 1 And n_(1) = 0) Then
     n_(2) = 2
ElseIf (n_(0) = 0 And n_(1) = 2) Or (n_(0) = 2 And n_(1) = 0) Then
     n_(2) = 1
ElseIf (n_(0) = 2 And n_(1) = 1) Or (n_(0) = 1 And n_(1) = 2) Then
     n_(2) = 0
End If
'***********************************
If set_two_triangle_no = 0 Then ' 未建立响应的全等条件
Call add_aid_point_for_eangle_(triA(1).poi(n_(0)), triA(1).poi(n_(1)), triA(1).poi(n_(2)), _
         triA(0).angle(n_(1)), p%, tn_(0), cond_ty(0), dn(0), dn(1), dn(2), 1)
          triA(1).poi(n_(1)) = p%
End If
'*******************
If ty(0) = pseudo_total_equal_triangle_ Then
 If set_two_triangle_no = 0 Then
 pseudo_total_equal_triangle(n%).data(0).triA(1).poi(n_(1)) = p% '新点
 pseudo_total_equal_triangle(n%).data(0).e_A_n = tn_(0)
 pseudo_total_equal_triangle(n%).data(0).e_l_n(0) = dn(0)
 pseudo_total_equal_triangle(n%).data(0).e_l_n(1) = dn(1)
 pseudo_total_equal_triangle(n%).data(0).e_l_n(2) = dn(2)
 pseudo_total_equal_triangle(n%).data(0).e_l_ty = cond_ty(0)
 temp_record1.record_data.data0.condition_data = pseudo_total_equal_triangle(n%).data(0).pseudo_condition_data
 Call add_conditions_to_record(angle3_value_, tn_(0), 0, 0, temp_record1.record_data.data0.condition_data)
 temp_record1.record_data.data0.theorem_no = 1
 '从伪条件推出真条件
 tA1% = 0
   Call set_three_angle_value(Abs(angle_number(triA(0).poi(n_(0)), triA(0).poi(n_(1)), _
       triA(0).poi(n_(2)), "", 0)), Abs(angle_number(triA(1).poi(n_(0)), triA(1).poi(n_(1)), _
       triA(1).poi(n_(2)), "", 0)), 0, "1", "-1", "0", "0", False, temp_record1, tA1%, tA2%, tA3%, 0, 0, 0, False)
    temp_record.record_data = pseudo_total_equal_triangle(n%).data(0).record
    Call add_conditions_to_record(angle3_value_, tA1%, tA1%, tA3%, temp_record.record_data.data0.condition_data)
  If set_total_equal_triangle(triA(0).poi(0), triA(0).poi(1), triA(0).poi(2), _
    triA(1).poi(0), triA(1).poi(1), triA(1).poi(2), temp_record, _
                pseudo_total_equal_triangle(n%).data(0).two_triA_n, 0) > 0 Then
    ty(1) = pseudo_total_equal_triangle_
  Else
    ty(1) = total_equal_triangle_
  End If
 End If
   If ty(1) = pseudo_total_equal_triangle_ Then
   If pseudo_total_equal_triangle(n%).data(0).ty = 0 Then ' 新点在结论上
         temp_record.record_data.data0.condition_data.condition_no = 1
     temp_record.record_data.data0.condition_data.condition(1).ty = total_equal_triangle_
     temp_record.record_data.data0.condition_data.condition(1).no = pseudo_total_equal_triangle(n%).data(0).two_triA_n
     dn_(0) = 0
      Call set_equal_dline(triA(0).poi(n_(0)), triA(0).poi(n_(1)), triA(1).poi(n_(0)), _
                   p%, 0, 0, 0, 0, 0, 0, 0, temp_record, dn_(0), cond_ty(1), dn_(1), dn_(2), 0, False)
      re.record_data.data0.condition_data.condition_no = 0
      Call add_conditions_to_record(cond_ty(0), dn(0), dn(1), dn(2), re.record_data.data0.condition_data)
      Call add_conditions_to_record(cond_ty(1), dn_(0), dn_(1), dn_(2), re.record_data.data0.condition_data)
      re.record_data.data0.theorem_no = 1
   Else
      Call add_conditions_to_record(total_equal_triangle_, pseudo_total_equal_triangle(n%).data(0).two_triA_n, _
            0, 0, re.record_data.data0.condition_data)
   End If
   Else
    'Call from_aid_to_old(p%)
    pseudo_total_equal_triangle(n%).data(0).two_triA_n = set_two_triangle_no
   End If
ElseIf ty(0) = pseudo_similar_triangle_ Then
  
  If set_two_triangle_no = 0 Then
   pseudo_similar_triangle(n%).data(0).triA(1).poi(n_(1)) = p%
   pseudo_similar_triangle(n%).data(0).e_A_n = tn_(0)
   pseudo_similar_triangle(n%).data(0).e_l_n(0) = dn(0)
   pseudo_similar_triangle(n%).data(0).e_l_n(1) = dn(1)
   pseudo_similar_triangle(n%).data(0).e_l_n(2) = dn(2)
   pseudo_similar_triangle(n%).data(0).e_l_ty = cond_ty(0)
   temp_record1.record_data.data0.condition_data = pseudo_similar_triangle(n%).data(0).pseudo_condition_data
   Call add_conditions_to_record(angle3_value_, tn_(0), 0, 0, temp_record1.record_data.data0.condition_data)
   temp_record1.record_data.data0.theorem_no = 1
 '从伪条件推出真条件
   tA1% = 0
   Call set_three_angle_value(Abs(angle_number(triA(0).poi(n_(0)), triA(0).poi(n_(1)), _
       triA(0).poi(n_(2)), "", 0)), Abs(angle_number(triA(1).poi(n_(0)), triA(1).poi(n_(1)), _
       triA(1).poi(n_(2)), "", 0)), 0, "1", "-1", "0", "0", False, temp_record1, tA1%, tA2%, tA3%, 0, 0, 0, False)
    temp_record.record_data = pseudo_similar_triangle(n%).data(0).record
    Call add_conditions_to_record(angle3_value_, tA1%, tA2%, tA3%, temp_record.record_data.data0.condition_data)
     If set_similar_triangle(triA(0).poi(0), triA(0).poi(1), triA(0).poi(2), _
            triA(1).poi(0), triA(1).poi(1), triA(1).poi(2), temp_record1, _
               dn_(0), 0, 1) > 0 Then
       ty(1) = pseudo_similar_triangle_ '已有相似
     Else
       ty(1) = similar_triangle_
     End If
   End If
 'If pseudo_similar_triangle(n%).data(0).ty = 0 Then
  If ty(1) = pseudo_similar_triangle_ Then
    If pseudo_similar_triangle(n%).data(0).ty = 0 Then
     temp_record.record_data.data0.condition_data.condition_no = 1
      temp_record.record_data.data0.condition_data.condition(1).ty = similar_triangle_
       temp_record.record_data.data0.condition_data.condition(1).no = dn_(0)
        dn_(0) = 0
      If set_point_pair_data(triA(0).poi(n_(0)), triA(0).poi(n_(1)), triA(0).poi(n_(0)), triA(0).poi(n_(2)), _
           triA(1).poi(n_(0)), triA(1).poi(n_(1)), triA(1).poi(n_(0)), triA(1).poi(n_(2)), 0, 0, 0, 0, 0, 0, _
            0, 0, 0, 0, 0, 0, dp) Then
         If search_for_point_pair(dp, 0, dn_(0), 0) = False Then
         tn(0) = dn_(0)
         Call search_for_point_pair(dp, 1, tn(1), 1)
         Call search_for_point_pair(dp, 2, tn(2), 1)
         Call search_for_point_pair(dp, 3, tn(3), 1)
         Call search_for_point_pair(dp, 4, tn(1), 1)
         Call search_for_point_pair(dp, 5, tn(5), 1)
         Call search_for_point_pair(dp, 6, tn(6), 1)
         Call search_for_point_pair(dp, 7, tn(7), 1)
        If last_conditions.last_cond(1).dpoint_pair_no Mod 10 = 0 Then
         ReDim Preserve Ddpoint_pair(last_conditions.last_cond(1).dpoint_pair_no + 10) As Dpoint_pair_type
        End If
        last_conditions.last_cond(1).dpoint_pair_no = last_conditions.last_cond(1).dpoint_pair_no + 1
         dn_(0) = last_conditions.last_cond(1).dpoint_pair_no
          Ddpoint_pair(dn_(0)).data(0).data0 = dp
           Ddpoint_pair(dn_(0)).data(0).record = temp_record.record_data
            Ddpoint_pair(dn_(0)).record_ = temp_record.record_
      End If
      re.record_data.data0.condition_data.condition_no = 1
      re.record_data.data0.condition_data.condition(1).ty = dpoint_pair_
      re.record_data.data0.condition_data.condition(1).no = dn_(0)
      Call add_conditions_to_record(cond_ty(0), dn(0), dn(1), dn(2), re.record_data.data0.condition_data)
      re.record_data.data0.theorem_no = 1
      Else
      Call add_conditions_to_record(similar_triangle_, dn_(0), 0, 0, re.record_data.data0.condition_data)
      End If
   Else
   'Call from_aid_to_old(p%)
   pseudo_similar_triangle(n%).data(0).two_triA_n = set_two_triangle_no
  End If
  End If
End If
End Sub
Public Function set_property_of_two_angle_180(ByVal A1%, ByVal A2%, re As total_record_type, ty_ As Byte)
Dim i%, j%, tl%, c%
Dim n_(3) As Integer
Dim tA1(3) As Integer
Dim tA2(3) As Integer
Dim tp(2) As Integer
Dim tp1(3) As Integer
Dim temp_record As total_record_type
Dim c_data0 As condition_data_type
temp_record = re
If A1% = A2% Then
 set_property_of_two_angle_180 = set_angle_value(A1%, "90", temp_record, 0, 0, False)
  Exit Function
End If
If ty_ = 0 Then
For i% = 0 To 3
tA1(i%) = T_angle(angle(A1%).data(0).total_no).data(0).angle_no((angle(A1%).data(0).total_no_ + 4 + i%) Mod 4).no
tA2(i%) = T_angle(angle(A2%).data(0).total_no).data(0).angle_no((angle(A2%).data(0).total_no_ + 4 + i%) Mod 4).no
Next i%
For i% = 0 To 3
 For j% = 0 To 3
  If tA1(i%) <> 0 Or tA2(j%) <> 0 Then
   If tA1(i%) > 0 And tA2(j%) > 0 Then
       If (i% + j%) Mod 2 = 0 Then
        If is_same_two_point(tA1(i%), tA2(j%), A1%, A2%) = False Then
        set_property_of_two_angle_180 = set_property_of_two_angle_180(tA1(i%), tA2(j%), temp_record, 1)
         If set_property_of_two_angle_180 > 1 Then
          Exit Function
         End If
        End If
       Else
        set_property_of_two_angle_180 = set_property_of_eangle(0, tA1(i%), tA2(j%), 0, 0, 0, 0, temp_record, 1)
         If set_property_of_two_angle_180 > 1 Then
          Exit Function
         End If
       End If
   End If
  End If
 Next j%
Next i%
End If
 If angle(A1).data(0).value <> "90" Then
  set_property_of_two_angle_180 = set_total_equal_triangle_from_two_angle_value(A1%, A2%, 0, 0, temp_record)
   If set_property_of_two_angle_180 > 1 Then
    Exit Function
   End If
 End If
'同旁内角互补,平行
If angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) And th_chose(9).chose = 1 Then
  temp_record = re
   If temp_record.record_data.data0.condition_data.condition(1).ty <> paral_ Then
    temp_record.record_data.data0.theorem_no = 9
  set_property_of_two_angle_180 = set_dparal(angle(A1%).data(0).line_no(1), angle(A2%).data(0).line_no(0), temp_record, 0, 0, False)
   If set_property_of_two_angle_180 > 1 Then
    Exit Function
   End If
   End If
ElseIf angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0) And th_chose(9).chose = 1 Then
  temp_record = re
  If temp_record.record_data.data0.condition_data.condition(1).ty <> paral_ Then
     temp_record.record_data.data0.theorem_no = 9
  set_property_of_two_angle_180 = set_dparal(angle(A1%).data(0).line_no(0), angle(A2%).data(1).line_no(1), temp_record, 0, 0, False)
   If set_property_of_two_angle_180 > 1 Then
    Exit Function
   End If
  End If
ElseIf (th_chose(132).chose = 1 Or _
          th_chose(131).chose = 1) And angle(A1%).data(0).poi(1) <> angle(A2%).data(0).poi(1) Then
    If temp_record.record_data.data0.condition_data.condition(1).ty <> point4_on_circle_ Then
   tp(0) = is_line_line_intersect(angle(A1%).data(0).line_no(0), angle(A2%).data(0).line_no(1), 0, 0, False)
   tp(1) = is_line_line_intersect(angle(A1%).data(0).line_no(1), angle(A2%).data(0).line_no(0), 0, 0, False)
  If tp(0) > 0 And tp(1) > 0 Then
   If tp(0) = angle(A1%).data(0).poi(0) Then
   tp1(0) = tp(0)
   tp1(1) = tp(1)
   tp1(2) = angle(A2%).data(0).poi(0)
   tp1(3) = 0
   tl% = angle(A1%).data(0).line_no(0)
   ElseIf tp(0) = angle(A2%).data(0).poi(0) Then
   tp1(0) = tp(0)
   tp1(1) = tp(1)
   tp1(2) = angle(A1%).data(0).poi(1)
   tp1(3) = 0
   tl% = angle(A2%).data(0).line_no(0)
   ElseIf tp(1) = angle(A1%).data(0).poi(0) Then
   tp1(0) = tp(1)
   tp1(1) = tp(0)
   tp1(2) = angle(A2%).data(0).poi(1)
   tp1(3) = 0
   tl% = angle(A1%).data(0).line_no(1)
   ElseIf tp(1) = angle(A2%).data(0).poi(0) Then
   tp1(0) = tp(1)
   tp1(1) = tp(0)
   tp1(2) = angle(A1%).data(0).poi(1)
   tp1(3) = 0
   tl% = angle(A2%).data(0).line_no(0)
   Else
   tp1(0) = tp(0)
   tp1(1) = tp(1)
   tp1(2) = angle(A1%).data(0).poi(1)
   tp1(3) = angle(A2%).data(0).poi(1)
   End If
   If tp1(3) > 0 Then
      temp_record.record_data.data0.theorem_no = 132 '共圆
   set_property_of_two_angle_180 = _
     set_four_point_on_circle(tp1(0), tp1(1), _
      tp1(2), tp1(3), 0, temp_record, 0, 0)
    If set_property_of_two_angle_180 > 1 Then
     Exit Function
    End If
   Else '***********************
     Call is_conclusion_no(tangent_line_, n_())
      For i% = 0 To last_conclusion - 1
      If n_(i%) >= 0 Then
      If tl% = con_tangent_line(n_(i%)).data(0).line_no Then
          c% = m_circle_number(1, 0, pointapi0, tp1(0), tp1(1), tp1(2), 0, 0, 0, 1, 0, 0, 0, False)
          If c% > 0 Then
            If c% = con_tangent_line(n_(i%)).data(0).ele(0).no And _
                  c% = con_tangent_line(n_(i%)).data(0).ele(0).ty = circle_ Then
             If m_poi(m_Circ(c%).data(0).data0.center).data(0).data0.visible = 0 Then
              set_property_of_two_angle_180 = add_aid_point_for_circle_center(c%)
               If set_property_of_two_angle_180 > 1 Then
                Exit Function
               End If
             End If
                set_property_of_two_angle_180 = add_interset_point_line_circle(0, _
                        0, line_number0(tp1(1), m_Circ(c%).data(0).data0.center, 0, 0), _
                          tl%, 0, c_data0, 0)
                If set_property_of_two_angle_180 > 1 Then
                 Exit Function
                End If
             End If
            End If
          End If
        End If
     Next i%
   End If
  End If
  End If
End If

End Function
Public Function set_display_two_order_equation(t_E As two_order_equation_data_type, dis_ty As Byte) As String
Dim ts(2) As String
ts(0) = t_E.para(0)
ts(1) = t_E.para(1)
ts(2) = t_E.para(2)
Call simple_multi_string0(ts(0), ts(1), ts(2), "", "", True)
 ts(0) = display_string_(ts(0), dis_ty)
 ts(1) = display_string_(ts(1), dis_ty)
 ts(2) = display_string_(ts(2), dis_ty)
 If ts(0) = "1" Then
   set_display_two_order_equation = "x^2"
 Else
   set_display_two_order_equation = ts(0) + "x^2"
 End If
 If ts(1) = "1" Then
   set_display_two_order_equation = set_display_two_order_equation + "+ X"
 ElseIf ts(1) = "-1" Or ts(1) = "@1" Then
   set_display_two_order_equation = set_display_two_order_equation + "- X"
 Else
  If ts(1) <> "0" Then
  If Mid$(ts(1), 1, 1) = "-" Then
  set_display_two_order_equation = set_display_two_order_equation + ts(1) + " X"
  Else
  set_display_two_order_equation = set_display_two_order_equation + "+" + ts(1) + " X"
  End If
  End If
 End If
 If ts(2) <> "0" Then
  If Mid$(ts(2), 1, 1) = "-" Then
  set_display_two_order_equation = set_display_two_order_equation + ts(2)
  Else
  set_display_two_order_equation = set_display_two_order_equation + "+" + ts(2)
  End If
 End If
End Function

Public Function set_two_order_equation(ByVal root1$, ByVal root2$, ByVal para1$, ByVal para2$, _
                  ByVal para3$, condition_or_conclusion As Byte, no%, re As total_record_type) As Integer
Dim i%
Dim temp_record As total_record_type
If no% > 0 Then
GoTo set_two_order_equation_mark0
End If
If para1$ <> "" And para2$ <> "" And para3$ <> "" Then
Call simple_multi_string0(para1$, para2$, para3$, "", "", True)
End If
For i% = 1 To last_conditions.last_cond(1).two_order_eqution_no
 If two_order_equation(i%).data(0).para(0) = para1$ And _
     two_order_equation(i%).data(0).para(1) = para2$ And _
      two_order_equation(i%).data(0).para(2) = para3$ Then
       no% = i%
        Exit Function
 End If
Next i%
If last_conditions.last_cond(1).two_order_eqution_no Mod 10 = 0 Then
ReDim Preserve two_order_equation(last_conditions.last_cond(1).two_order_eqution_no + 10) As two_order_equation_type
End If
last_conditions.last_cond(1).two_order_eqution_no = last_conditions.last_cond(1).two_order_eqution_no + 1
no% = last_conditions.last_cond(1).two_order_eqution_no
two_order_equation(no%).data(0) = two_order_equation_data_0
   two_order_equation(no%).data(0).para(0) = para1$
     two_order_equation(no%).data(0).para(1) = para2$
      two_order_equation(no%).data(0).para(2) = para3$
set_two_order_equation_mark0:
End Function

Public Function set_relation_on_line(ByVal p1%, ByVal p2%, ByVal p3%, _
       ByVal l%, ByVal r_v As String, re As total_record_type) As Byte
Dim i%, n%, tri_no1%, tri_no2%, triA1%, triA2%, triA3%
Dim re_value As String
Dim temp_record As total_record_type
Dim condi(1) As condition_type
If th_chose(157).chose = 1 Then
  For i% = 1 To last_conditions.last_cond(1).point_no
   If is_point_in_line3(i%, m_lin(l%).data(0).data0, 0) = False Then
    triA1% = triangle_number(p1%, p2%, i%, 0, 0, 0, 0, 0, 0, 0)
    triA2% = triangle_number(p2%, p3%, i%, 0, 0, 0, 0, 0, 0, 0)
    temp_record = re
    temp_record.record_data.data0.theorem_no = 157
    condi(0).no = triA1%
    condi(1).no = triA2%
    condi(0).ty = triangle_
    condi(1).ty = triangle_
    Call add_conditions_to_record(area_of_element_, triangle(triA1%).data(0).area_no, 0, 0, _
            temp_record.record_data.data0.condition_data)
     set_relation_on_line = set_area_relation(condi(0), condi(1), r_v, temp_record, 0, 0, 0)
     If set_relation_on_line > 1 Then
        Exit Function
     End If
   End If
  Next i%
End If
If th_chose(158).chose = 1 Then

End If
    For i% = 1 To last_conditions.last_cond(1).relation_on_line_no
       If relation_on_line(i%).data(0).data0.poi(0) = p1% And _
           relation_on_line(i%).data(0).data0.poi(1) = p2% And _
            relation_on_line(i%).data(0).data0.poi(2) = p3% Then
             Exit Function
       End If
    Next i%
    If last_conditions.last_cond(1).relation_on_line_no Mod 10 = 0 Then
      ReDim Preserve relation_on_line(last_conditions.last_cond(1).relation_on_line_no + 10) As relation_on_line_type
    End If
    last_conditions.last_cond(1).relation_on_line_no = last_conditions.last_cond(1).relation_on_line_no + 1
     n% = last_conditions.last_cond(1).relation_on_line_no
      relation_on_line(n%).data(0) = relation_on_line_data_0
       relation_on_line(n%).data(0).data0.line_no = l%
       relation_on_line(n%).data(0).data0.poi(0) = p1%
       relation_on_line(n%).data(0).data0.poi(1) = p2%
       relation_on_line(n%).data(0).data0.poi(2) = p3%
       If p1% > p2% And p1% > p3% Then
       relation_on_line(n%).data(0).data0.poi(3) = p1%
       ElseIf p2% > p1% And p2% > p3% Then
       relation_on_line(n%).data(0).data0.poi(3) = p2%
       ElseIf p3% > p2% And p3% > p1% Then
       relation_on_line(n%).data(0).data0.poi(3) = p3% '最后一点
       End If
       relation_on_line(n%).data(0).data0.value = r_v
       relation_on_line(n%).data(0).record = re.record_data.data0.condition_data
       set_relation_on_line = combine_two_relation_on_line(n%)
       If set_relation_on_line > 1 Then
          Exit Function
       End If
End Function
Public Function set_two_order_equation_for_line(ByVal it1%, ByVal it2%, ByVal pA1$, ByVal pA2$, v$, _
              re As total_record_type) As Byte
              '第一项目是平方项,后一项化为平方项
Dim temp_record As total_record_type
Dim con_d As condition_data_type
Dim it3%, l_v%
Dim stau As Boolean
temp_record = re
If item0(it2%).data(0).line_no(0) = item0(it1%).data(0).line_no(0) And _
     item0(it2%).data(0).line_no(1) = item0(it1%).data(0).line_no(0) Then
           set_two_order_equation_for_line = set_item0(item0(it1%).data(0).poi(0), item0(it1%).data(0).poi(1), 0, 0, "~", _
           item0(it1%).data(0).n(0), item0(it1%).data(0).n(1), 0, 0, _
            item0(it1%).data(0).line_no(0), 0, "1", "1", "1", "", "1", 0, con_d, 0, it3%, 0, 0, condition_data0, False)
            If set_two_order_equation_for_line > 1 Then
             Exit Function
            End If
 If item0(it1%).data(0).poi(0) = item0(it2%).data(0).poi(0) And _
     item0(it1%).data(0).poi(1) = item0(it2%).data(0).poi(1) Then '前一线段等
      If item0(it1%).data(0).n(0) = item0(it2%).data(0).n(2) Then '前端点同
       If is_line_value(item0(it1%).data(0).poi(1), item0(it2%).data(0).poi(3), _
            item0(it1%).data(0).n(1), item0(it2%).data(0).n(3), _
             item0(it1%).data(0).line_no(0), "", l_v%, -1000, 0, 0, 0, line_value_data0) = 1 Then
           Call add_conditions_to_record(line_value_, l_v%, 0, 0, temp_record.record_data.data0.condition_data)
            pA1$ = add_string(pA1$, pA2$, True, False)
          If item0(it1%).data(0).n(1) > item0(it2%).data(0).n(3) Then '第二线段比第一线段短
           pA2$ = time_string("-1", pA2$, True, False)
          End If
         stau = True
        End If
      ElseIf item0(it1%).data(0).n(1) = item0(it2%).data(0).n(3) Then '后端点同
        If is_line_value(item0(it1%).data(0).poi(0), item0(it2%).data(0).poi(2), _
            item0(it1%).data(0).n(0), item0(it2%).data(0).n(2), _
             item0(it1%).data(0).line_no(0), "", l_v%, -1000, 0, 0, 0, line_value_data0) = 1 Then
         Call add_conditions_to_record(line_value_, l_v%, 0, 0, temp_record.record_data.data0.condition_data)
          pA1$ = add_string(pA1$, pA2$, True, False)
         If item0(it1%).data(0).n(0) < item0(it2%).data(0).n(2) Then
          pA2$ = time_string("-1", pA2$, True, False)
         End If
         stau = True
        End If
       ElseIf item0(it2%).data(0).n(1) = item0(it2%).data(0).n(2) Then
        If is_line_value(item0(it2%).data(0).poi(0), item0(it2%).data(0).poi(3), _
            item0(it2%).data(0).n(0), item0(it2%).data(0).n(3), _
             item0(it1%).data(0).line_no(0), "", l_v%, -1000, 0, 0, 0, line_value_data0) = 1 Then
          Call add_conditions_to_record(line_value_, l_v%, 0, 0, temp_record.record_data.data0.condition_data)
            pA1$ = minus_string(pA1$, pA2$, True, False)
         stau = True
        End If
      End If
ElseIf item0(it1%).data(0).poi(0) = item0(it2%).data(0).poi(2) And _
     item0(it1%).data(0).poi(1) = item0(it2%).data(0).poi(3) Then
      If item0(it1%).data(0).n(0) = item0(it2%).data(0).n(0) Then
        If is_line_value(item0(it1%).data(0).poi(1), item0(it2%).data(0).poi(1), _
            item0(it1%).data(0).n(1), item0(it2%).data(0).n(1), _
             item0(it1%).data(0).line_no(0), "", l_v%, -1000, 0, 0, 0, line_value_data0) = 1 Then
        Call add_conditions_to_record(line_value_, l_v%, 0, 0, temp_record.record_data.data0.condition_data)
         pA1$ = add_string(pA1$, pA2$, True, False)
        If item0(it1%).data(0).n(1) > item0(it2%).data(0).n(1) Then
          pA2$ = time_string("-1", pA2$, True, False)
        End If
       'Else
       stau = True
       ' set_two_order_equation_for_line = 255
        '  Exit Function
       End If
     ElseIf item0(it1%).data(0).n(1) = item0(it2%).data(0).n(1) Then
        If is_line_value(item0(it1%).data(0).poi(0), item0(it2%).data(0).poi(0), _
            item0(it1%).data(0).n(0), item0(it2%).data(0).n(0), _
             item0(it1%).data(0).line_no(0), "", l_v%, -1000, 0, 0, 0, line_value_data0) = 1 Then
        Call add_conditions_to_record(line_value_, l_v%, 0, 0, temp_record.record_data.data0.condition_data)
        pA1$ = add_string(pA1$, pA2$, True, False)
        If item0(it1%).data(0).n(0) < item0(it2%).data(0).n(0) Then
         pA2$ = time_string("-1", pA2$, True, False)
        End If
        stau = True
        End If
     ElseIf item0(it2%).data(0).n(1) = item0(it2%).data(0).n(2) Then
        If is_line_value(item0(it2%).data(0).poi(0), item0(it2%).data(0).poi(3), _
            item0(it2%).data(0).n(0), item0(it2%).data(0).n(3), _
             item0(it2%).data(0).line_no(0), "", l_v%, -1000, 0, 0, 0, line_value_data0) = 1 Then
        Call add_conditions_to_record(line_value_, l_v%, 0, 0, temp_record.record_data.data0.condition_data)
        pA1$ = minus_string(pA1$, pA2$, True, False)
       stau = True
      End If
  End If
End If
If stau = True Then
pA2$ = time_string(line_value(l_v%).data(0).data0.value, pA2$, True, False)
If pA1$ = "0" Then
 set_two_order_equation_for_line = set_line_value(item0(it3%).data(0).poi(0), _
    item0(it3%).data(0).poi(1), divide_string(v$, pA2$, True, False), _
     item0(it3%).data(0).n(0), item0(it3%).data(0).n(1), item0(it3%).data(0).line_no(0), _
      temp_record, 0, 0, False)
     
Else
set_two_order_equation_for_line = set_general_string(it1%, it3%, 0, 0, _
    pA1$, pA2$, "0", "0", v$, 0, 0, 0, temp_record, 0, 0)
End If
End If
Else
 set_two_order_equation_for_line = 255
End If

End Function
Public Function read_three_point_from_epolygon(p() As Integer, e As epolygon_data_type, n() As Integer) As Boolean
Dim i%, j%
For i% = 0 To 2
 For j% = 0 To e.p.total_v - 1
  If p(i%) = e.p.v(j%) Then
  n(i%) = j%
   GoTo read_three_point_from_epolygon_next
  End If
 Next j%
 read_three_point_from_epolygon = False
  Exit Function
read_three_point_from_epolygon_next:
Next i%
read_three_point_from_epolygon = True
End Function

Public Function different_of_vitex(ByVal n1%, ByVal n2%, ByVal total_v) As Integer
' 计算三角形在正多形边中的位置
 If n2% > n1% Then
 different_of_vitex = n2% - n1%
 Else
 different_of_vitex = n2% - n1% + total_v
 End If
End Function
'Public Sub add_depend_point_for_line(ByVal l%, ByVal p1%, ByVal p2%)
' lin(l%).data(0).depend_poi(0) = p1%
' lin(l%).data(0).depend_poi(1) = p2%
'End Sub
'Public Sub add_depend_point_for_circle(ByVal c%, ByVal p1%, ByVal p2%, ByVal p3%)
' Circ(c%).data(0).depend_poi(0) = p1%
' Circ(c%).data(0).depend_poi(1) = p2%
' Circ(c%).data(0).depend_poi(2) = p3%
'End Sub
Public Function combine_two_Tangle(ByVal A1%, _
  ByVal A2%, oA%, oA_%, ty1 As Byte, ty2 As Byte, last As Byte, ty_ As Byte) As Boolean
Dim temp_record_data As record_data_type
Dim oA1%, oA2%, oA0%
oA% = 0
oA_% = 0
ty1 = 0
ty2 = 0
If combine_two_angle(A1%, _
    A2%, oA1%, 0, oA0%, oA2%, 0, oA%, ty2, last, ty_) Then
     oA_% = oA%
If ty2 = 3 Or ty2 = 5 Then 'A+B=C
 ty1 = ty2
 If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 15 'A+B+C=180
 End If
 combine_two_Tangle = True
ElseIf ty2 = 4 Then 'A-B=C
 oA% = oA1%
 oA_% = oA%
 ty1 = ty2
 If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 23 'A-B+C=180
 End If
 combine_two_Tangle = True
ElseIf ty2 = 6 Then '-A+B=C
 oA% = oA1%
 oA_% = oA%
 ty1 = ty2
 If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 24 '-A+B+C=180
 End If
 combine_two_Tangle = True
ElseIf ty2 = 7 Then '-A+B=C
 oA% = oA2%
 oA_% = oA%
  ty1 = ty2
If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 24 '-A+B+C=180
 End If
 combine_two_Tangle = True
ElseIf ty2 = 8 Then 'A-B=C
 oA% = oA2%
 oA_% = oA%
 ty1 = ty2
 If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 23 'A-B+C=180
 End If
 combine_two_Tangle = True
ElseIf ty2 = 9 Or ty2 = 10 Then 'A+B+C=360
 'oA% = oA0%
 'oA_% = oA%
 ty1 = ty2
 If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 16 'A+B-C=180
 End If
 combine_two_Tangle = True
ElseIf ty2 = 15 Or ty2 = 17 Then 'A+B+C=180
 oA% = oA0%
 oA_% = oA%
 ty1 = ty2
 If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 3 'A+B-C=0
 End If
 combine_two_Tangle = True
ElseIf ty2 = 16 Or ty2 = 18 Then 'A+B-C=180
 oA% = oA0%
 ty1 = ty2
 If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 9 'A+B+C=360
 End If
'ElseIf ty = 19 Then
'ElseIf ty = 20 Then
 combine_two_Tangle = True
ElseIf ty2 = 23 Then 'A-B+C=180
 oA% = oA0%
 oA_% = oA%
 ty1 = ty2
 If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 4 'A-B-C=0
 End If
 combine_two_Tangle = True
ElseIf ty2 = 24 Then 'A-B-C=-180
 oA% = oA2%
 oA_% = oA%
 ty1 = ty2
 If reduce_to_used_angle(oA%, "", "", "", temp_record_data, 0) = 1 Then
  ty1 = 6 'A-B+C=0
 End If
 combine_two_Tangle = True
Else
  combine_two_Tangle = False
   ty1 = 0
    oA% = 0
     oA_% = oA%
End If

End If
End Function
Public Function set_three_point_on_circle(ByVal p1%, ByVal p2%, ByVal p3%, ByVal center%, _
          ByVal c%, re As total_record_type) As Byte
Dim i%, j%, k%
Dim tp(2) As Integer
tp(0) = p1%
tp(1) = p2%
tp(2) = p3%
For i% = 1 To last_conditions.last_cond(1).three_point_on_circle_no
     If three_point_on_circle(i%).data(0).circ = c% Then
        For j% = 0 To 2
         For k% = 0 To 2
           If three_point_on_circle(i%).data(0).poi(k%) = tp(j%) Then
              GoTo set_three_point_on_circle_next1
           End If
         Next k%
         GoTo set_three_point_on_circle_next2
set_three_point_on_circle_next1:
        Next j%
        Exit Function '三点重合
     End If
set_three_point_on_circle_next2:
Next i%
If c% > 0 Then
 set_three_point_on_circle = set_angle_relation_for_circle(p1%, p2%, p3%, c%, re)
 If last_conditions.last_cond(0).three_point_on_circle_no Mod 10 = 0 Then
  ReDim Preserve three_point_on_circle(last_conditions.last_cond(1).three_point_on_circle_no + 10) _
          As three_point_on_circle_type
 End If
  last_conditions.last_cond(0).three_point_on_circle_no = _
    last_conditions.last_cond(0).three_point_on_circle_no + 1
 three_point_on_circle(last_conditions.last_cond(1).three_point_on_circle_no).data(0).circ = c%
 three_point_on_circle(last_conditions.last_cond(1).three_point_on_circle_no).data(0).poi(0) = p1%
 three_point_on_circle(last_conditions.last_cond(1).three_point_on_circle_no).data(0).poi(1) = p2%
 three_point_on_circle(last_conditions.last_cond(1).three_point_on_circle_no).data(0).poi(2) = p3%
 three_point_on_circle(last_conditions.last_cond(1).three_point_on_circle_no).data(0).record = re.record_data
 three_point_on_circle(last_conditions.last_cond(1).three_point_on_circle_no).record_ = re.record_
End If
End Function

Public Function set_angle_relation_for_circle(ByVal p1%, ByVal p0%, ByVal p2%, ByVal c%, _
                        re As total_record_type) As Byte
Dim A(1) As Integer
Dim no%, q%, cond_no%
Dim dn(2) As Integer
Dim cond_ty As Byte
Dim tn(1) As Integer
Dim temp_record As total_record_type
Dim c_data As condition_data_type
A(0) = angle_number(p1%, p0%, p2%, "", 0)
tn(0) = 0
tn(0) = max(tn(0), wenti_no_from_point(p1%))
tn(0) = max(tn(0), wenti_no_from_point(p0%))
tn(0) = max(tn(0), wenti_no_from_point(p2%))
A(1) = angle_number(p1%, m_Circ(c%).data(0).data0.center, p2%, "", 0)
tn(1) = 0
tn(1) = max(tn(1), wenti_no_from_point(p1%))
tn(1) = max(tn(1), wenti_no_from_point(m_Circ(c%).data(0).data0.center))
tn(1) = max(tn(1), wenti_no_from_point(p2%))
 If is_diameter(p1%, m_Circ(c%).data(0).data0.center, p2%, c%, c_data) And _
                   th_chose(129).chose = 1 Then '直径上的圆周角
 'If m_poi(m_Circ(c%).data(0).data0.center).data(0).no_reduce = 0 Then
 tn(0) = max(tn(0), wenti_no_from_point(m_Circ(c%).data(0).data0.center))
 'End If
 temp_record = re
   temp_record.record_data.data0.condition_data.condition_no = 0
 Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
     no% = 0
     set_angle_relation_for_circle = set_mid_point(p1%, m_Circ(c%).data(0).data0.center, p2%, 0, 0, 0, 0, 0, _
       temp_record, dn(0), cond_ty, dn(1), dn(2), 0)
       If set_angle_relation_for_circle > 1 Then
        Exit Function
       End If
  temp_record = re
  temp_record.record_data.data0.theorem_no = 129
   'temp_record.record_data.data0.condition_data.condition_no = 0
   'Call add_conditions_to_record(cond_ty, dn(0), dn(1), dn(2), temp_record.record_data.data0.condition_data)
  set_angle_relation_for_circle = set_angle_value(Abs(A(0)), "90", temp_record, 0, 0, False)
  If set_angle_relation_for_circle > 1 Then
   Exit Function
  End If
  set_angle_relation_for_circle = set_dverti(line_number0(p1%, p0%, 0, 0), _
               line_number0(p2%, p0%, 0, 0), temp_record, 0, 0, False)
  If set_angle_relation_for_circle > 1 Then
   Exit Function
  End If
Else
 tn(0) = max(tn(0), tn(1))
   temp_record = re
   'temp_record.record_data.data0.condition_data.condition(1).ty = 255
   'temp_record.record_data.data0.condition_data.condition(1).no = tn(1)
 If (A(0) > 0 And A(1) > 0) Or (A(0) < 0 And A(1) < 0) Then
 set_angle_relation_for_circle = set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, _
      "2", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
  If set_angle_relation_for_circle > 1 Then
   Exit Function
  End If
 Else 'If A(0) > 0 And A(1) < 0 Then
 set_angle_relation_for_circle = set_three_angle_value(Abs(A(0)), Abs(A(1)), 0, _
      "2", "1", "0", "360", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
  If set_angle_relation_for_circle > 1 Then
   Exit Function
  End If
  End If
End If
End Function

Public Function set_line_value_for_epolygon(ByVal l_v_no%) As Byte
Dim i%, j%, k%
Dim temp_record As total_record_type
Dim tv(1) As String
temp_record.record_data.data0.condition_data.condition_no = 2
temp_record.record_data.data0.condition_data.condition(1).ty = line_value_
temp_record.record_data.data0.condition_data.condition(1).no = l_v_no%
For i% = 1 To last_conditions.last_cond(1).epolygon_no
 If epolygon(i%).data(0).p.total_v = 3 Then
  temp_record.record_data.data0.condition_data.condition(2).ty = epolygon_
   temp_record.record_data.data0.condition_data.condition(2).no = i%
 For j% = 0 To 2
   If is_same_two_point(line_value(l_v_no%).data(0).data0.poi(0), _
       line_value(l_v_no%).data(0).data0.poi(1), epolygon(i%).data(0).p.v(j%), _
         epolygon(i%).data(0).p.v((j% + 1) Mod 3)) Then
         For k% = 0 To 2
          If k% <> j% Then
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 1) Mod 3), line_value(l_v_no%).data(0).data0.value, _
            0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
           End If
         Next k%
     GoTo SET_LINE_VALUE_FOR_EPOLYGON_NEXT
    End If
  Next j%
 ElseIf epolygon(i%).data(0).p.total_v = 4 Then
  temp_record.record_data.data0.condition_data.condition(2).ty = epolygon_
   temp_record.record_data.data0.condition_data.condition(2).no = i%
 For j% = 0 To 3
   If is_same_two_point(line_value(l_v_no%).data(0).data0.poi(0), _
       line_value(l_v_no%).data(0).data0.poi(1), epolygon(i%).data(0).p.v(j%), _
         epolygon(i%).data(0).p.v((j% + 1) Mod 4)) Then
         For k% = 0 To 3
          If k% <> j% Then
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 1) Mod 4), line_value(l_v_no%).data(0).data0.value, _
            0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
           End If
         Next k%
         tv(0) = time_string(line_value(l_v_no%).data(0).data0.value, _
                           "'2", True, False)
         set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(0), _
           epolygon(i%).data(0).p.v(2), tv(0), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(1), _
           epolygon(i%).data(0).p.v(3), tv(0), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
     GoTo SET_LINE_VALUE_FOR_EPOLYGON_NEXT
    End If
  Next j%
  For j% = 0 To 1
   If is_same_two_point(line_value(l_v_no%).data(0).data0.poi(0), _
       line_value(l_v_no%).data(0).data0.poi(1), epolygon(i%).data(0).p.v(j%), _
         epolygon(i%).data(0).p.v(j% + 2)) Then
        set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v((j% + 1) Mod 2), _
           epolygon(i%).data(0).p.v((j% + 1) Mod 2 + 2), line_value(l_v_no%).data(0).data0.value, _
             0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
            tv(0) = divide_string(line_value(l_v_no%).data(0).data0.value, _
                           "'2", True, False)
            For k% = 0 To 3
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 1) Mod 4), tv(0), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
         Next k%
    End If
  Next j%
 ElseIf epolygon(i%).data(0).p.total_v = 5 Then
  temp_record.record_data.data0.condition_data.condition(2).ty = epolygon_
   temp_record.record_data.data0.condition_data.condition(2).no = i%
 For j% = 0 To 4
   If is_same_two_point(line_value(l_v_no%).data(0).data0.poi(0), _
       line_value(l_v_no%).data(0).data0.poi(1), epolygon(i%).data(0).p.v(j%), _
         epolygon(i%).data(0).p.v((j% + 1) Mod 5)) Then
         For k% = 0 To 4
          If k% <> j% Then
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 1) Mod 5), line_value(l_v_no%).data(0).data0.value, _
            0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
          End If
         Next k%
         tv(0) = add_string("1", "'5", False, False)
         tv(0) = divide_string(tv(0), "2", False, False)
         tv(0) = time_string(line_value(l_v_no%).data(0).data0.value, _
                           tv(0), True, False)
        For k% = 0 To 4
         set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 2) Mod 5), tv(0), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
        Next k%
     GoTo SET_LINE_VALUE_FOR_EPOLYGON_NEXT
    End If
  Next j%
  For j% = 0 To 4
   If is_same_two_point(line_value(l_v_no%).data(0).data0.poi(0), _
       line_value(l_v_no%).data(0).data0.poi(1), epolygon(i%).data(0).p.v(j%), _
         epolygon(i%).data(0).p.v((j% + 2)) Mod 5) Then
       For k% = 0 To 4
        If k% <> j% Then
        set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(j%), _
           epolygon(i%).data(0).p.v((k% + 2) Mod 5), line_value(l_v_no%).data(0).data0.value, _
             0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
          End If
        Next k%
         tv(0) = minus_string("'5", "1", False, False)
         tv(0) = divide_string(tv(0), "2", False, False)
         tv(0) = time_string(line_value(l_v_no%).data(0).data0.value, _
                           tv(0), True, False)
         For k% = 0 To 4
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 1) Mod 5), tv(0), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
         Next k%
    End If
  Next j%
 ElseIf epolygon(i%).data(0).p.total_v = 6 Then
  temp_record.record_data.data0.condition_data.condition(2).ty = epolygon_
   temp_record.record_data.data0.condition_data.condition(2).no = i%
 For j% = 0 To 5
   If is_same_two_point(line_value(l_v_no%).data(0).data0.poi(0), _
       line_value(l_v_no%).data(0).data0.poi(1), epolygon(i%).data(0).p.v(j%), _
         epolygon(i%).data(0).p.v((j% + 1) Mod 6)) Then '边长
         For k% = 0 To 5
          If k% <> j% Then
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 1) Mod 6), line_value(l_v_no%).data(0).data0.value, _
            0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
           End If
         Next k%
         tv(0) = time_string("2", line_value(l_v_no%).data(0).data0.value, True, False)
         tv(1) = time_string(line_value(l_v_no%).data(0).data0.value, "'3", False, False)
        For k% = 0 To 2
         set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 3) Mod 6), tv(0), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
        Next k%
        For k% = 0 To 5
         set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 2) Mod 6), tv(1), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
        Next k%
     GoTo SET_LINE_VALUE_FOR_EPOLYGON_NEXT
    End If
  Next j%
  For j% = 0 To 2
   If is_same_two_point(line_value(l_v_no%).data(0).data0.poi(0), _
       line_value(l_v_no%).data(0).data0.poi(1), epolygon(i%).data(0).p.v(j%), _
         epolygon(i%).data(0).p.v((j% + 3)) Mod 6) Then '大对角线
       For k% = 0 To 2
        If k% <> j% Then
        set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(j%), _
           epolygon(i%).data(0).p.v((k% + 3) Mod 6), line_value(l_v_no%).data(0).data0.value, _
             0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
          End If
        Next k%
         tv(0) = divide_string(line_value(l_v_no%).data(0).data0.value, "2", True, False)
         tv(1) = time_string(tv(0), "'3", True, False)
          For k% = 0 To 5
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 1) Mod 6), tv(0), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
         Next k%
          For k% = 0 To 2
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 2) Mod 6), tv(1), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
         Next k%
GoTo SET_LINE_VALUE_FOR_EPOLYGON_NEXT
    End If
  Next j%
  For j% = 0 To 5
   If is_same_two_point(line_value(l_v_no%).data(0).data0.poi(0), _
       line_value(l_v_no%).data(0).data0.poi(1), epolygon(i%).data(0).p.v(j%), _
         epolygon(i%).data(0).p.v((j% + 2)) Mod 6) Then '小对角线
       For k% = 0 To 5
        If k% <> j% Then
        set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(j%), _
           epolygon(i%).data(0).p.v((k% + 2) Mod 6), line_value(l_v_no%).data(0).data0.value, _
             0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
          End If
        Next k%
         tv(0) = divide_string(line_value(l_v_no%).data(0).data0.value, "'3", True, False)
         tv(1) = time_string(tv(0), "2", True, False)
          For k% = 0 To 5
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 1) Mod 6), tv(0), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
         Next k%
          For k% = 0 To 2
          set_line_value_for_epolygon = set_line_value(epolygon(i%).data(0).p.v(k%), _
           epolygon(i%).data(0).p.v((k% + 3) Mod 6), tv(1), 0, 0, 0, temp_record, 0, 0, False)
           If set_line_value_for_epolygon > 1 Then
            Exit Function
           End If
         Next k%
GoTo SET_LINE_VALUE_FOR_EPOLYGON_NEXT
    End If
  Next j%
 End If
SET_LINE_VALUE_FOR_EPOLYGON_NEXT:
Next i%
End Function

Public Function set_property_of_polygon4(ByVal poly4_no%, _
                          ty As Byte, re As total_record_type) As Byte
Dim temp_record As total_record_type
Dim l(1) As Integer
Dim n_(5) As Integer
Dim l_v As line_value_data0_type
Dim tp%
temp_record = re
 '对边相等
 If ty = 0 Then
  Exit Function
 End If
 Dpolygon4(poly4_no%).data(0).ty = ty
 set_property_of_polygon4 = set_equal_dline(Dpolygon4(poly4_no%).data(0).poi(0), _
      Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(2), _
       Dpolygon4(poly4_no%).data(0).poi(3), _
     0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
set_property_of_polygon4 = _
  set_equal_dline(Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(2), _
        Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(0), _
         0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
 '********************************
 '对边平行
 set_property_of_polygon4 = set_dparal(line_number0(Dpolygon4(poly4_no%).data(0).poi(0), _
                                      Dpolygon4(poly4_no%).data(0).poi(1), 0, 0), _
                                      line_number0(Dpolygon4(poly4_no%).data(0).poi(2), _
                                      Dpolygon4(poly4_no%).data(0).poi(3), 0, 0), temp_record, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
 set_property_of_polygon4 = set_dparal(line_number0(Dpolygon4(poly4_no%).data(0).poi(1), _
                                       Dpolygon4(poly4_no%).data(0).poi(2), 0, 0), _
                                       line_number0(Dpolygon4(poly4_no%).data(0).poi(3), _
                                       Dpolygon4(poly4_no%).data(0).poi(0), 0, 0), temp_record, 0, 0, False)
  If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
'*******************************
'对角线平分
l(0) = line_number0(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(2), n_(0), n_(1))
l(1) = line_number0(Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(3), n_(2), n_(3))
tp% = is_line_line_intersect(l(0), l(1), _
       n_(4), n_(5), False)
If tp% > 0 Then
set_property_of_polygon4 = set_mid_point(Dpolygon4(poly4_no%).data(0).poi(0), tp%, Dpolygon4(poly4_no%).data(0).poi(2), _
       n_(0), n_(4), n_(1), l(0), 0, temp_record, 0, 0, 0, 0, 0)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
set_property_of_polygon4 = set_mid_point(Dpolygon4(poly4_no%).data(0).poi(1), tp%, Dpolygon4(poly4_no%).data(0).poi(3), _
       n_(2), n_(5), n_(3), l(1), 0, temp_record, 0, 0, 0, 0, 0)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
End If
'**************************
'中位线定理
set_property_of_polygon4 = set_four_sides_polygon_for_mid_paral(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(1), _
    Dpolygon4(poly4_no%).data(0).poi(2), Dpolygon4(poly4_no%).data(0).poi(3), temp_record, 0)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
  temp_record.record_data.data0.condition_data.condition_no = 1
set_property_of_polygon4 = set_four_sides_polygon_for_mid_paral(Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(2), _
    Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(0), temp_record, 0)
'********************************************
set_property_of_polygon4 = set_total_equal_triangle( _
   Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(1), _
   Dpolygon4(poly4_no%).data(0).poi(2), Dpolygon4(poly4_no%).data(0).poi(2), _
   Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(0), _
   temp_record, 0, 0)
   If set_property_of_polygon4 > 1 Then
    Exit Function
   End If
set_property_of_polygon4 = set_total_equal_triangle( _
   Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(2), _
   Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(3), _
   Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(1), _
   temp_record, 0, 0)
   If set_property_of_polygon4 > 1 Then
    Exit Function
   End If
If ty = parallelogram_ Then
 
ElseIf ty = rhombus_ Then
 set_property_of_polygon4 = _
   set_equal_dline(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(1), _
         Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(2), _
           0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
set_property_of_polygon4 = _
   set_equal_dline(Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(2), _
         Dpolygon4(poly4_no%).data(0).poi(2), Dpolygon4(poly4_no%).data(0).poi(3), _
           0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
set_property_of_polygon4 = _
    set_equal_dline(Dpolygon4(poly4_no%).data(0).poi(2), Dpolygon4(poly4_no%).data(0).poi(3), _
         Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(0), _
          0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
set_property_of_polygon4 = _
  set_equal_dline(Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(0), _
      Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(1), _
        0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
'**************
 set_property_of_polygon4 = set_three_angle_value(Dpolygon4(poly4_no%).data(0).angle(0), _
   Dpolygon4(poly4_no%).data(0).angle(2), _
    0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
 set_property_of_polygon4 = set_three_angle_value(Dpolygon4(poly4_no%).data(0).angle(1), Dpolygon4(poly4_no%).data(0).angle(3), _
    0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
 set_property_of_polygon4 = set_dverti(l(0), l(1), temp_record, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
ElseIf ty = long_squre_ Then
 set_property_of_polygon4 = set_angle_value(Dpolygon4(poly4_no%).data(0).angle(0), "90", temp_record, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
 set_property_of_polygon4 = set_angle_value(Dpolygon4(poly4_no%).data(0).angle(1), "90", temp_record, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
 set_property_of_polygon4 = set_angle_value(Dpolygon4(poly4_no%).data(0).angle(2), "90", temp_record, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
 set_property_of_polygon4 = set_angle_value(Dpolygon4(poly4_no%).data(0).angle(3), "90", temp_record, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
' 矩形
set_property_of_polygon4 = _
   set_equal_dline(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(2), _
         Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(3), _
           0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
End If

set_property_of_polygon4 = set_three_angle_value(Dpolygon4(poly4_no%).data(0).angle(1), Dpolygon4(poly4_no%).data(0).angle(3), _
       0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
set_property_of_polygon4 = set_three_angle_value(Dpolygon4(poly4_no%).data(0).angle(0), Dpolygon4(poly4_no%).data(0).angle(2), _
       0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
set_property_of_polygon4 = set_three_angle_value(Abs(angle_number(Dpolygon4(poly4_no%).data(0).poi(2), Dpolygon4(poly4_no%).data(0).poi(3), _
    Dpolygon4(poly4_no%).data(0).poi(1), 0, 0)), _
   Abs(angle_number(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(1), 0, 0)), 0, "1", "-1", "0", "0", _
       0, temp_record, 0, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
set_property_of_polygon4 = set_three_angle_value(Abs(angle_number(Dpolygon4(poly4_no%).data(0).poi(3), _
     Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(2), 0, 0)), _
   Abs(angle_number(Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(2), 0, 0)), 0, "1", "-1", "0", "0", _
       0, temp_record, 0, 0, 0, 0, 0, 0, False)
 If set_property_of_polygon4 > 1 Then
  Exit Function
 End If
'勾股定理用于菱形
If th_chose(51).chose = 1 Then
 temp_record.record_data.data0.condition_data.condition_no = 1
 temp_record.record_data.data0.theorem_no = 1
 If is_line_line_intersect(l(0), l(1), 0, 0, False) = 0 Then
    If is_line_value(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(1), _
        0, 0, 0, "", n_(0), -1000, 0, 0, 0, l_v) = 1 Then
     If is_line_value(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(2), _
          0, 0, 0, "", n_(1), -1000, 0, 0, 0, l_v) = 1 Then
      Call add_conditions_to_record(line_value_, n_(0), n_(1), 0, temp_record.record_data.data0.condition_data)
       set_property_of_polygon4 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(3), sqr_string(minus_string( _
         time_string(line_value(n_(0)).data(0).data0.squar_value, "4", False, False), _
          line_value(n_(1)).data(0).data0.squar_value, False, False), True, False), 0, 0, _
           0, temp_record, 0, 0, False)
       If set_property_of_polygon4 > 1 Then
        Exit Function
       End If
     ElseIf is_line_value(Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(3), _
              0, 0, 0, "", n_(1), -1000, 0, 0, 0, l_v) = 1 Then
      Call add_conditions_to_record(line_value_, n_(0), n_(1), 0, temp_record.record_data.data0.condition_data)
       set_property_of_polygon4 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(2), sqr_string(minus_string( _
         time_string(line_value(n_(0)).data(0).data0.squar_value, "4", False, False), _
          line_value(n_(1)).data(0).data0.squar_value, False, False), True, False), 0, 0, _
           0, temp_record, 0, 0, False)
       If set_property_of_polygon4 > 1 Then
        Exit Function
       End If
     End If
    Else
     If is_line_value(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(2), _
          0, 0, 0, "", n_(0), -1000, 0, 0, 0, l_v) = 1 Then
      If is_line_value(Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(3), _
           0, 0, 0, "", n_(1), -1000, 0, 0, 0, l_v) = 1 Then
      Call add_conditions_to_record(line_value_, n_(0), n_(1), 0, temp_record.record_data.data0.condition_data)
       set_property_of_polygon4 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(0), Dpolygon4(poly4_no%).data(0).poi(1), divide_string(sqr_string( _
         add_string(line_value(n_(0)).data(0).data0.squar_value, _
          line_value(n_(1)).data(0).data0.squar_value, False, False), False, False), "2", True, False), 0, 0, _
           0, temp_record, 0, 0, False)
       If set_property_of_polygon4 > 1 Then
        Exit Function
       End If
       set_property_of_polygon4 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(1), Dpolygon4(poly4_no%).data(0).poi(2), divide_string(sqr_string( _
         add_string(line_value(n_(0)).data(0).data0.squar_value, _
          line_value(n_(1)).data(0).data0.squar_value, False, False), False, False), "2", True, False), 0, 0, _
           0, temp_record, 0, 0, False)
       If set_property_of_polygon4 > 1 Then
        Exit Function
       End If
       set_property_of_polygon4 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(2), Dpolygon4(poly4_no%).data(0).poi(3), divide_string(sqr_string( _
         add_string(line_value(n_(0)).data(0).data0.squar_value, _
          line_value(n_(1)).data(0).data0.squar_value, False, False), False, False), "2", True, False), 0, 0, _
           0, temp_record, 0, 0, False)
       If set_property_of_polygon4 > 1 Then
        Exit Function
       End If
       set_property_of_polygon4 = set_line_value(Dpolygon4(poly4_no%).data(0).poi(3), Dpolygon4(poly4_no%).data(0).poi(0), divide_string(sqr_string( _
         add_string(line_value(n_(0)).data(0).data0.squar_value, _
          line_value(n_(1)).data(0).data0.squar_value, False, False), False, False), "2", True, False), 0, 0, _
           0, temp_record, 0, 0, False)
       If set_property_of_polygon4 > 1 Then
        Exit Function
       End If
      End If
     End If
    End If
 End If
End If

End Function
Public Function polygon4_number(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, dir%) As Integer '正值正序;负值反序
Dim no%, n%, i%, l1%, l2%
Dim tn(10) As Integer
Dim poly4_data As polygon4_data_type
If is_polygon4(p1%, p2%, p3%, p4%, poly4_data, no%, n%, dir%) Then
   polygon4_number = no%
Else
poly4_data.angle(0) = angle_number(poly4_data.poi(3), poly4_data.poi(0), poly4_data.poi(1), "", 0)
poly4_data.angle(1) = angle_number(poly4_data.poi(0), poly4_data.poi(1), poly4_data.poi(2), "", 0)
poly4_data.angle(2) = angle_number(poly4_data.poi(1), poly4_data.poi(2), poly4_data.poi(3), "", 0)
poly4_data.angle(3) = angle_number(poly4_data.poi(2), poly4_data.poi(3), poly4_data.poi(0), "", 0)
If (poly4_data.angle(0) > 0 And poly4_data.angle(1) > 0 And _
     poly4_data.angle(2) > 0 And poly4_data.angle(3) > 0) Or _
     (poly4_data.angle(0) < 0 And poly4_data.angle(1) < 0 And _
       poly4_data.angle(2) < 0 And poly4_data.angle(3) < 0) Then
     poly4_data.angle(0) = Abs(poly4_data.angle(0))
     poly4_data.angle(1) = Abs(poly4_data.angle(1))
     poly4_data.angle(2) = Abs(poly4_data.angle(2))
     poly4_data.angle(3) = Abs(poly4_data.angle(3))
Else
   polygon4_number = 0
    Exit Function
End If
poly4_data.triAngle1(0) = triangle_number(poly4_data.poi(0), poly4_data.poi(1), poly4_data.poi(2), _
             0, 0, 0, 0, 0, 0, 0)
poly4_data.triAngle1(1) = triangle_number(poly4_data.poi(0), poly4_data.poi(3), poly4_data.poi(2), _
             0, 0, 0, 0, 0, 0, 0)
poly4_data.triAngle2(0) = triangle_number(poly4_data.poi(1), poly4_data.poi(2), poly4_data.poi(3), _
             0, 0, 0, 0, 0, 0, 0)
poly4_data.triAngle2(1) = triangle_number(poly4_data.poi(1), poly4_data.poi(0), poly4_data.poi(3), _
             0, 0, 0, 0, 0, 0, 0)
poly4_data.line_no(0) = line_number0(poly4_data.poi(0), poly4_data.poi(1), 0, 0)
poly4_data.line_no(1) = line_number0(poly4_data.poi(1), poly4_data.poi(2), 0, 0)
poly4_data.line_no(2) = line_number0(poly4_data.poi(2), poly4_data.poi(3), 0, 0)
poly4_data.line_no(3) = line_number0(poly4_data.poi(3), poly4_data.poi(0), 0, 0)
If triangle(poly4_data.triAngle1(0)).data(0).condition.no > 0 Then
poly4_data.condition = triangle(poly4_data.triAngle1(0)).data(0).condition
ElseIf triangle(poly4_data.triAngle1(1)).data(0).condition.no > 0 Then
poly4_data.condition = triangle(poly4_data.triAngle1(1)).data(0).condition
End If
For i% = 0 To 3
  poly4_data.midpoi(i%) = _
    get_midpoint(poly4_data.poi(i%), 0, poly4_data.poi((i% + 3) Mod 4), _
         0, 0, 0, 0, poly4_data.midpoi_no(0))
Next i%
'**********
If last_conditions.last_cond(1).polygon4_no Mod 10 = 0 Then
ReDim Preserve Dpolygon4(last_conditions.last_cond(1).polygon4_no + 10) As polygon4_type
End If
 last_conditions.last_cond(1).polygon4_no = last_conditions.last_cond(1).polygon4_no + 1
Dpolygon4(last_conditions.last_cond(1).polygon4_no).data(0) = poly4_data
For i% = last_conditions.last_cond(1).polygon4_no To n% + 2 Step -1
 Dpolygon4(i%).data(0).index = Dpolygon4(i% - 1).data(0).index
Next i%
 Dpolygon4(n + 1).data(0).index = last_conditions.last_cond(1).polygon4_no
polygon4_number = last_conditions.last_cond(1).polygon4_no
'两实线相交,无交点
Call arrange_four_point(poly4_data.poi(0), poly4_data.poi(2), poly4_data.poi(1), poly4_data.poi(3), _
      0, 0, 0, 0, 0, 0, Dpolygon4(last_conditions.last_cond(1).polygon4_no).data(0).dia_poi(0), _
       Dpolygon4(last_conditions.last_cond(1).polygon4_no).data(0).dia_poi(1), _
        Dpolygon4(last_conditions.last_cond(1).polygon4_no).data(0).dia_poi(2), _
         Dpolygon4(last_conditions.last_cond(1).polygon4_no).data(0).dia_poi(3), _
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, condition_data0, 0)
End If

End Function

Public Function set_squre0(poly4_no%, no%, re As total_record_type) As Byte
Dim temp_record As total_record_type
Dim ds As String
temp_record.record_data = re.record_data
If is_squre0(poly4_no%, no%, 0) Then
Else
If last_conditions.last_cond(1).squre_no Mod 10 = 0 Then
ReDim Preserve Dsqure(last_conditions.last_cond(1).squre_no + 10) As squre_type
End If
last_conditions.last_cond(1).squre_no = last_conditions.last_cond(1).squre_no + 1
Dsqure(last_conditions.last_cond(1).squre_no).data(0).polygon4_no = poly4_no%
Dsqure(last_conditions.last_cond(1).squre_no).data(0).record = temp_record.record_data
Dsqure(last_conditions.last_cond(1).squre_no).data(0).no_reduce = True
Dsqure(last_conditions.last_cond(1).squre_no).record_ = re.record_
no% = last_conditions.last_cond(1).squre_no
Dpolygon4(poly4_no%).data(0).ty = Squre
Dpolygon4(poly4_no%).data(0).no = no%
If Dpolygon4(poly4_no%).data(0).condition.no > 0 Then
 Call add_conditions_to_record(Dpolygon4(poly4_no%).data(0).condition.ty, _
      Dpolygon4(poly4_no%).data(0).condition.no, 0, 0, _
         Dsqure(last_conditions.last_cond(1).squre_no).data(0).record.data0.condition_data)
End If
If last_conditions_for_aid_no > 0 Then
 If last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = False Then
  If Dpolygon4(poly4_no%).data(0).poi(0) <= _
      last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
      Dpolygon4(poly4_no%).data(0).poi(1) <= _
       last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
       Dpolygon4(poly4_no%).data(0).poi(2) <= _
        last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no And _
        Dpolygon4(poly4_no%).data(0).poi(3) <= _
         last_conditions_for_aid(last_conditions_for_aid_no).last_cond(1).point_no Then
     last_conditions_for_aid(last_conditions_for_aid_no).new_result_from_add = True
   End If
 End If
End If
ds = set_display_squre(poly4_no%, False)
   set_squre0 = set_prove_proccess(ds, Squre, no%, Dsqure(no%).data(0).record.display_string)
End If
End Function

Public Function set_squre(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, no%, _
         re As total_record_type, is_no_initial As Byte, ByVal is_reduce As Boolean) As Byte
Dim i%, j%, k%, tn%, bra%
Dim tv$
Dim ty As Byte
Dim temp_record As total_record_type
Dim poly4_no%
If no% > 0 Then
GoTo set_squre_mark0
End If
'On Error GoTo set_squre_mark0
temp_record = re
Call set_level(temp_record.record_data.data0.condition_data)
If is_squre(p1%, p2%, p3%, p4%, no%, 0, poly4_no%) Then
 Exit Function
End If
set_squre = set_squre0(poly4_no%, no%, temp_record)
If set_squre > 1 Then
 Exit Function
End If
'If run_statue = 1 Then '12.10
'   Call set_element_branch(Squre, no%, 0)
'End If
'If is_no_initial = 0 Then
' tn% = -1
' If m_lin(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(0)).data(0).depend_element(0).no > 0 And _
           is_point_depend_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(0), _
             Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(0)) And _
               is_point_depend_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(1), _
                 Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(0)) Then
'    tn% = 0
' ElseIf m_lin(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(1)).data(0).depend_element(0).no > 0 And _
           is_point_depend_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(1), _
             Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(1)) And _
               is_point_depend_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(2), _
                 Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(1)) Then
'    tn% = 1
' ElseIf m_lin(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(2)).data(0).depend_element(0).no > 0 And _
            is_point_depend_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(2), _
             Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(2)) And _
               is_point_depend_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(3), _
                 Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(2)) Then
'    tn% = 2
' ElseIf m_lin(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(3)).data(0).depend_element(0).no > 0 And _
            is_point_depend_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(3), _
             Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(3)) And _
               is_point_depend_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(0), _
                 Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(3)) Then
'    tn% = 3
' End If
' If tn% = -1 Then
'    Call set_line_depend_element(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(0), point_, _
        Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(0), point_, _
            Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(1))
'    tn% = 0
' End If
'         Call set_point_depend_element(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(tn%), line_, _
                        Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(tn%), 0, 0)
'         Call set_point_depend_element(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((tn% + 1) Mod 4), line_, _
                        Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(tn%), 0, 0)
'         Call set_line_depend_element(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((tn% + 1) Mod 4), point_, _
'            Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((tn% + 1) Mod 4), line_, _
             Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((tn% + 1) Mod 4))
'         Call set_point_depend_element(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((tn% + 2) Mod 4), line_, _
                        Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(tn%), 0, 0)
'         Call set_line_depend_element(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((tn% + 3) Mod 4), point_, _
            Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(tn%), line_, _
             Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(tn%))
'         Call set_point_depend_element(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((tn% + 3) Mod 4), line_, _
                        Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((tn% + 3) Mod 4), 0, 0)
'End If
'***********************************************************************
'拼接正方形
  temp_record.record_data.data0.condition_data.condition_no = 2
  For i% = 1 To last_conditions.last_cond(1).squre_no - 1
    temp_record.record_data.data0.condition_data.condition(1).ty = Squre
    temp_record.record_data.data0.condition_data.condition(2).ty = Squre
    temp_record.record_data.data0.condition_data.condition(1).no = no%
    temp_record.record_data.data0.condition_data.condition(2).no = i%
    temp_record.record_data.data0.theorem_no = 1
    For j% = 0 To 3
      For k% = 0 To 3
       If Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(k%) = _
             Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no(j%) Then '
        If Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(k%) = _
            Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(j%) Then '
         If Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((3 + k%) Mod 4) <> _
             Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no((3 + j%) Mod 4) Then
          set_squre = combine_two_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((3 + k%) Mod 4), _
           Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no((3 + j%) Mod 4), _
              Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(k%), temp_record.record_data, 0, is_no_initial)
           If set_squre > 1 Then
            Exit Function
           End If
         End If
       End If
       If Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(k%) = _
           Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4) Then
        If Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((3 + k%) Mod 4) <> _
             Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no((j% + 1) Mod 4) Then
          set_squre = combine_two_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((3 + k%) Mod 4), _
           Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no((j% + 1) Mod 4), _
            Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(k%), temp_record.record_data, 0, is_no_initial)
          If set_squre > 1 Then
           Exit Function
          End If
         End If
       End If
       If Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((k% + 1) Mod 4) = _
           Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(j%) Then
         If Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((k% + 1) Mod 4) <> _
             Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no((3 + j%) Mod 4) Then
          set_squre = combine_two_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((k% + 1) Mod 4), _
           Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no((3 + j%) Mod 4), _
              Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(j%), temp_record.record_data, 0, is_no_initial)
           If set_squre > 1 Then
            Exit Function
           End If
         End If
       End If
       If Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((k% + 1) Mod 4) = _
           Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4) Then
          If Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((k% + 1) Mod 4) <> _
             Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no((j% + 1) Mod 4) Then
          set_squre = combine_two_line(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((k% + 1) Mod 4), _
           Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no((j% + 1) Mod 4), _
             Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((k% + 1) Mod 4), temp_record.record_data, 0, is_no_initial)
           If set_squre > 1 Then
            Exit Function
           End If
          End If
       End If
      End If
      Next k%
   Next j%
Next i%
'***********************************************************************************
    temp_record.record_data.data0.condition_data.condition_no = 1
    temp_record.record_data.data0.condition_data.condition(1).ty = Squre
    temp_record.record_data.data0.condition_data.condition(1).no = no%
'**************************************************************************************
set_squre = set_four_point_on_circle(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(0), _
                         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(1), _
                          Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(2), _
                           Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(3), _
                            0, temp_record, Dsqure(no%).data(0).four_point_on_circle_no, 0)
 If set_squre > 1 Then
  Exit Function
 End If
'*****************************************************************************************
        '对角线垂线
        set_squre = set_dverti( _
           line_number0(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(0), _
                        Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(2), 0, 0), _
           line_number0(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(1), _
                        Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(3), 0, 0), _
                        temp_record, 0, 0, True)
        If set_squre > 1 Then
           Exit Function
        End If
 '*****************************************************************************************
   '对边平行
        set_squre = set_dparal( _
           Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(0), _
            Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(2), _
             temp_record, 0, 0, False)
        If set_squre > 1 Then
           Exit Function
        End If
        set_squre = set_dparal( _
           Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(1), _
            Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(3), _
             temp_record, 0, 0, False)
        If set_squre > 1 Then
           Exit Function
        End If
  '****************************************************************************************
   For i% = 0 To 3
    For j% = 0 To i% - 1
        set_squre = set_total_equal_triangle( _
         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(i%), _
         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((i% + 1) Mod 4), _
         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((i% + 2) Mod 4), _
         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(j%), _
         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), _
         temp_record, 0, 0)
         If set_squre > 1 Then
          Exit Function
         End If
   Next j%
   'If is_no_initial > 0 Then
   set_squre = set_angle_value(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).angle(i%), _
        "90", temp_record, 0, 0, is_reduce)
 set_squre = set_dverti(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(i%), _
       Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no((i% + 1) Mod 4), temp_record, 0, 0, True)
    If set_squre > 1 Then
     Exit Function
    End If
    If set_squre > 1 Then
     Exit Function
    End If
   set_squre = set_angle_value(Abs(angle_number( _
      Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((3 + i%) Mod 4), _
       Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(i%), _
         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((i% + 2) Mod 4), "", 0)), _
          "45", temp_record, 0, 0, is_reduce)
    If set_squre > 1 Then
     Exit Function
    End If
   set_squre = set_angle_value(Abs(angle_number( _
      Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((i% + 1) Mod 4), _
       Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(i%), _
         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((i% + 2) Mod 4), "", 0)), _
          "45", temp_record, 0, 0, is_reduce)
    If set_squre > 1 Then
     Exit Function
    End If
    'End If
    Next i%
  '*************************************************************************************
  If is_squre_length(no%, 0) Then
    set_squre = set_squre_length(no%)
     If set_squre > 1 Then
        Exit Function
     End If
  End If
   If th_chose(81).chose = 1 Then
     temp_record.record_data.data0.theorem_no = 81
   set_squre = set_equal_dline(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(0), _
                                Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(2), _
                                 Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(1), _
                                  Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(3), _
                                   0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0, is_reduce)
     If set_squre > 1 Then
      Exit Function
     End If
  End If
 For i% = 0 To 3
  For j% = 0 To 1
  temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.theorem_no = 0
    set_squre = set_Drelation(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(j%), _
       Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((j% + 2) Mod 4), _
        Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(i%), _
         Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((i% + 1) Mod 4), _
          0, 0, 0, 0, 0, 0, "'2", temp_record, 0, 0, 0, 0, 0, is_reduce)
    If set_squre > 1 Then
     Exit Function
    End If
  Next j%
   For j% = 0 To i% - 1
     temp_record.record_data.data0.theorem_no = 81
   set_squre = set_equal_dline(Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(i%), _
                                Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((i% + 1) Mod 4), _
                                 Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi(j%), _
                                  Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
                                   0, 0, 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0, is_reduce)
     If set_squre > 1 Then
      Exit Function
     End If
    Next j%
 Next i%
     For i% = 1 To last_conditions.last_cond(1).verti_no
      For j% = 0 To 3
        If Dverti(i%).data(0).line_no(0) = Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(j%) Or _
           Dverti(i%).data(0).line_no(1) = Dpolygon4(Dsqure(no%).data(0).polygon4_no).data(0).line_no(j%) Then
             If Dverti(i%).record_.display_no <> 0 Then
               If Abs(Dverti(i%).record_.display_no) <= C_display_wenti.m_last_conclusion Then
                Call C_display_wenti.set_m_depend_no(Abs(Dverti(i%).record_.display_no))
               End If
             End If
        End If
       Next j%
    Next i%
set_squre_mark0:
End Function
Public Function set_display_squre(ByVal poly4_no%, is_depend As Boolean) As String
set_display_squre = LoadResString_from_inpcond(-12, _
                     set_display_polygon4(Dpolygon4(poly4_no%).data(0), 0, is_depend, 1, 0))
End Function
Public Function set_display_polygon40(poly4_data_str As String) As String
       set_display_polygon40 = LoadResString_(1800, "\\1\\" + poly4_data_str)
End Function
Public Function set_display_polygon4(poly4_data As polygon4_data_type, ByVal k%, is_depend As Boolean, ty As Byte, st%) As String
If ty = 0 Then
If k% = 0 Then
 set_display_polygon4 = set_display_polygon40(m_poi(poly4_data.poi(0)).data(0).data0.name + _
        m_poi(poly4_data.poi(1)).data(0).data0.name + m_poi(poly4_data.poi(2)).data(0).data0.name + _
         m_poi(poly4_data.poi(3)).data(0).data0.name)
Else
 set_display_polygon4 = set_display_polygon40(m_poi(poly4_data.poi(1)).data(0).data0.name + _
        m_poi(poly4_data.poi(2)).data(0).data0.name + m_poi(poly4_data.poi(3)).data(0).data0.name + _
         m_poi(poly4_data.poi(0)).data(0).data0.name)
End If
Else
If k% = 0 Then
 set_display_polygon4 = "\\" + Trim(str(st%)) + "\\" + m_poi(poly4_data.poi(0)).data(0).data0.name + _
                        "\\" + Trim(str(st% + 1)) + "\\" + m_poi(poly4_data.poi(1)).data(0).data0.name + _
                        "\\" + Trim(str(st% + 2)) + "\\" + m_poi(poly4_data.poi(2)).data(0).data0.name + _
                        "\\" + Trim(str(st% + 3)) + "\\" + m_poi(poly4_data.poi(3)).data(0).data0.name
Else
 set_display_polygon4 = "\\" + Trim(str(st%)) + "\\" + m_poi(poly4_data.poi(1)).data(0).data0.name + _
                        "\\" + Trim(str(st% + 1)) + "\\" + m_poi(poly4_data.poi(2)).data(0).data0.name + _
                        "\\" + Trim(str(st% + 2)) + "\\" + m_poi(poly4_data.poi(3)).data(0).data0.name + _
                        "\\" + Trim(str(st% + 3)) + "\\" + m_poi(poly4_data.poi(0)).data(0).data0.name
End If
End If
If is_depend Then
 For k% = 0 To 3
  Call set_depend_from_point(poly4_data.poi(k%))
 Next k%
End If
End Function
Public Function set_property_of_squre(ByVal n%) As Byte
Dim i%, j%, k%
Dim poly4_data As polygon4_data_type
Dim temp_record As total_record_type
poly4_data = Dpolygon4(Dsqure(n%).data(0).polygon4_no).data(0)
temp_record.record_data.data0.condition_data.condition_no = 1
temp_record.record_data.data0.condition_data.condition(1).no = n%
temp_record.record_data.data0.condition_data.condition(1).ty = Squre
temp_record.record_data.data0.condition_data.condition_no = 2
  For i% = i% = 1 To last_conditions.last_cond(1).squre_no
   If i% <> n% Then
    temp_record.record_data.data0.condition_data.condition(2).ty = Squre
    temp_record.record_data.data0.condition_data.condition(2).no = i%
    temp_record.record_data.data0.theorem_no = 1
    For j% = 0 To 3
      For k% = 0 To 3
       If poly4_data.line_no(k%) = epolygon(i%).data(0).p.line_no(j%) Then

       ElseIf poly4_data.line_no(k%) = epolygon(i%).data(0).p.line_no(j%) Then
        If poly4_data.poi(k%) = _
          Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4) Then
         'set_Epolygon = combine_two_line(epolygon(no%).data(0).p.line_no((k% - 1 + 4) Mod 4), _
          epolygon(i%).data(0).p.line_no((j% - 1 + 4) Mod 4), record0, 0)
        If poly4_data.poi((k% + 1) Mod 4) = _
          Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4) Then
        'set_epolygon=set_mid_point(epolygon(no%).data(0).p.v(k%)
        End If
       ElseIf poly4_data.poi((k% + 1) Mod 4) = epolygon(i%).data(0).p.v(j%) Then
         'set_Epolygon = combine_two_line(poly4_data.line_no((k% + 1) Mod 4), _
          Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).line_no((j% + 1) Mod 4), record0, 0)
        End If
       End If
      Next k%
   Next j%
   End If
  Next i%
  If th_chose(81).chose = 1 Then
    temp_record.record_data.data0.condition_data.condition_no = 1
     temp_record.record_data.data0.theorem_no = 81
  For i% = 0 To 3
  For j% = 0 To 1
  temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.theorem_no = 0
    set_property_of_squre = set_Drelation(poly4_data.poi(j%), poly4_data.poi((j% + 2) Mod 4), _
       poly4_data.poi(i%), poly4_data.poi((i% + 1) Mod 4), _
        0, 0, 0, 0, 0, 0, "'2", temp_record, 0, 0, 0, 0, 0, False)
    If set_property_of_squre > 1 Then
     Exit Function
    End If
  Next j%
 Next i%
 End If
End Function

Public Function set_area_relation_from_relation(ByVal p1%, ByVal p2%, ByVal p3%, _
             ByVal p4%, ByVal l1%, ByVal l2%, ByVal r_v As String, re As total_record_type)
             '由比推出面积比
Dim i%, j%, k%, A%, n%
Dim dn(3) As Integer
Dim ty As Byte
Dim triA_(1) As temp_triangle_type
Dim temp_record As total_record_type
Dim t_triA As two_triangle_type
Dim num_string As String
Dim re_value As String
Dim ele(1) As condition_type
'On Error GoTo set_area_relation_from_relation_mark10
If InStr(1, r_v, "F", 0) > 0 Then
  Exit Function
End If
num_string = r_v
Call set_temp_triangle_from_lin(p1%, p2%, 0, triA_(0), False)
  Call set_temp_triangle_from_lin(p3%, p4%, 0, triA_(1), False)
   '设置与p1,p2及p3,p4有关的三角形,
For j% = 1 To triA_(0).last_T
 For k% = 1 To triA_(1).last_T
  If l1% = l2% Then
   If th_chose(157).chose = 1 Or th_chose(158).chose = 1 Then
    If triA_(0).data(j%).poi(0) = triA_(1).data(k%).poi(0) Then '同底同顶
      If th_chose(157).chose = 1 Then
       temp_record = re
       temp_record.record_data.data0.theorem_no = 157 '共边定理
       If p1% = p4% Or p2% = p3% Then '同底同顶共边
        If p1% = p4% Then
         A% = triangle_number(p2%, p3%, triA_(0).data(j%).poi(0), 0, 0, 0, 0, 0, 0, 0)
        Else 'If p1% = p4% Then
         A% = triangle_number(p1%, p4%, triA_(0).data(j%).poi(0), 0, 0, 0, 0, 0, 0, 0)
        End If
        If triangle(A%).data(0).Area <> "" Then
         Call add_conditions_to_record(area_of_element_, triangle(A%).data(0).area_no, 0, 0, _
                      temp_record.record_data.data0.condition_data)
         re_value = add_string("1", r_v, False, False)
         re_value = divide_string(r_v, re_value, False, False)
         re_value = time_string(triangle(A%).data(0).Area, re_value, True, False)
         set_area_relation_from_relation = set_area_of_triangle(triA_(0).data(j%).no, _
           re_value, temp_record, 0, 0)
           If set_area_relation_from_relation > 1 Then
            Exit Function
           End If
         re_value = add_string("1", r_v, False, False)
         re_value = divide_string("1", re_value, False, False)
         re_value = time_string(triangle(A%).data(0).Area, re_value, True, False)
         set_area_relation_from_relation = set_area_of_triangle(triA_(1).data(k%).no, _
           re_value, temp_record, 0, 0)
           If set_area_relation_from_relation > 1 Then
            Exit Function
           End If
         Else
            ele(0).ty = triangle_
            ele(1).ty = triangle_
            ele(0).no = triA_(0).data(j%).no
            ele(1).no = triA_(1).data(k%).no
            set_area_relation_from_relation = set_area_relation(ele(0), ele(1), _
              num_string, temp_record, 0, 1, 0)
           If set_area_relation_from_relation > 1 Then
            Exit Function
           End If
         End If
        End If
       End If
    ElseIf is_dparal(l1%, line_number0(triA_(0).data(j%).poi(0), triA_(1).data(k%).poi(0), 0, 0), _
                 n%, -1000, 0, 0, 0, 0) Then '同底,顶平行
       If th_chose(158).chose = 1 Then
       temp_record = re
       temp_record.record_data.data0.theorem_no = 158 '共边定理
       Call add_conditions_to_record(paral_, n%, 0, 0, temp_record.record_data.data0.condition_data)
            ele(0).ty = triangle_
            ele(1).ty = triangle_
            ele(0).no = triA_(0).data(j%).no
            ele(1).no = triA_(1).data(k%).no
         set_area_relation_from_relation = set_area_relation(ele(0), ele(1), _
          num_string, temp_record, 0, 1, 0)
           If set_area_relation_from_relation > 1 Then
            Exit Function
           End If
       End If
   End If
   End If
  ElseIf is_similar_triangle0(triA_(0).data(j%).no, triA_(1).data(k%).no, _
    triA_(0).data(j%).direction, triA_(1).data(k%).direction, n%, -1000, 0, 0, t_triA, _
     record_data0, ty, 0) Then
      If ty = similar_triangle_ Then
       temp_record = re
       Call add_conditions_to_record(similar_triangle_, n%, 0, 0, temp_record.record_data.data0.condition_data)
            ele(0).ty = triangle_
            ele(1).ty = triangle_
            ele(0).no = triA_(0).data(j%).no
            ele(1).no = triA_(1).data(k%).no
         set_area_relation_from_relation = set_area_relation(ele(0), ele(1), _
          time_string(num_string, num_string, True, False), temp_record, 0, 1, 0)
           If set_area_relation_from_relation > 1 Then
            Exit Function
           End If
       End If
  End If
 Next k%
Next j%
'******************************************************************
'面积法
'*********************************
If th_chose(157).chose = 1 Or th_chose(158).chose = 1 Then
If temp_record.record_data.data0.condition_data.condition(1).ty <> area_relation_ Then
If l1% = l2% Then
  If th_chose(157).chose = 1 Then
   temp_record.record_data.data0.theorem_no = 157 '共边定理
 If p2% = p3% Then '
  For i% = 1 To last_conditions.last_cond(1).line_no 'poi(Drelation(no%).DATA(0).poi(1)).data(0).in_line(0)
   If i% <> l1% Then '
   '***********************************
    If is_point_in_line3(p2%, m_lin(i%).data(0).data0, 0) Then
     For j% = 2 To m_lin(i%).data(0).data0.in_point(0)
      For k% = 1 To j% - 1
       If m_lin(i%).data(0).data0.in_point(j%) <> p2% And _
            m_lin(i%).data(0).data0.in_point(k%) <> p2% Then
         dn(0) = triangle_number(m_lin(i%).data(0).data0.in_point(j%), _
        m_lin(i%).data(0).data0.in_point(k%), _
         p1%, 0, 0, 0, 0, 0, 0, 0)
       dn(1) = triangle_number(m_lin(i%).data(0).data0.in_point(j%), _
        m_lin(i%).data(0).data0.in_point(k%), _
         p4%, 0, 0, 0, 0, 0, 0, 0)
        If dn(0) > 0 And dn(1) > 0 Then
            ele(0).ty = triangle_
            ele(1).ty = triangle_
            ele(0).no = dn(0)
            ele(1).no = dn(1)
         set_area_relation_from_relation = set_area_relation(ele(0), ele(1), _
         num_string, temp_record, 0, 0, 0)
          If set_area_relation_from_relation > 1 Then
           Exit Function
          End If
        End If
     End If
    Next k%
   Next j%
    End If
'*******
    If is_point_in_line3(p1%, m_lin(i%).data(0).data0, 0) Then
     For j% = 2 To m_lin(i%).data(0).data0.in_point(0)
      For k% = 1 To j% - 1
        If m_lin(i%).data(0).data0.in_point(j%) <> p2% And _
            m_lin(i%).data(0).data0.in_point(k%) <> p2% Then
        dn(0) = triangle_number(m_lin(i%).data(0).data0.in_point(j%), _
        m_lin(i%).data(0).data0.in_point(k%), _
         p2%, 0, 0, 0, 0, 0, 0, 0)
       dn(1) = triangle_number(m_lin(i%).data(0).data0.in_point(j%), _
        m_lin(i%).data(0).data0.in_point(k%), _
         p4%, 0, 0, 0, 0, 0, 0, 0)
       If dn(0) > 0 And dn(1) > 0 Then
            ele(0).ty = triangle_
            ele(1).ty = triangle_
            ele(0).no = dn(0)
            ele(1).no = dn(1)
         set_area_relation_from_relation = set_area_relation(ele(0), ele(1), _
           divide_string(num_string, add_string(num_string, "1", False, False), True, False), _
          temp_record, 0, 0, 0)
           If set_area_relation_from_relation > 1 Then
            Exit Function
           End If
     End If
    End If
    Next k%
   Next j%
    End If
'****]
    If is_point_in_line3(p4%, m_lin(i%).data(0).data0, 0) Then
     For j% = 2 To m_lin(i%).data(0).data0.in_point(0)
      For k% = 1 To j% - 1
         dn(0) = triangle_number(m_lin(i%).data(0).data0.in_point(j%), _
        m_lin(i%).data(0).data0.in_point(k%), _
         p1%, 0, 0, 0, 0, 0, 0, 0)
       dn(1) = triangle_number(m_lin(i%).data(0).data0.in_point(j%), _
        m_lin(i%).data(0).data0.in_point(k%), _
         p2%, 0, 0, 0, 0, 0, 0, 0)
  If dn(0) > 0 And dn(1) > 0 Then
            ele(0).ty = triangle_
            ele(1).ty = triangle_
            ele(0).no = dn(0)
            ele(1).no = dn(1)
    set_area_relation_from_relation = set_area_relation(ele(0), ele(1), _
         add_string("1", num_string, True, False), temp_record, 0, 0, 0)
          If set_area_relation_from_relation > 1 Then
           Exit Function
          End If
  End If
    Next k%
   Next j%
    End If
    End If
  Next i%
  End If
  End If
 If th_chose(158).chose = 1 Then
  temp_record.record_data.data0.theorem_no = 158
 For i% = 1 To last_conditions.last_cond(1).point_no
 If i% <> p1% And i% <> p2% And _
      i% <> p3% And i% <> p4% Then
  dn(0) = triangle_number(p1%, p2%, _
           i%, 0, 0, 0, 0, 0, 0, 0)
  dn(1) = triangle_number(p3%, p4%, _
           i%, 0, 0, 0, 0, 0, 0, 0)
 If dn(0) > 0 And dn(1) > 0 Then
            ele(0).ty = triangle_
            ele(1).ty = triangle_
            ele(0).no = dn(0)
            ele(1).no = dn(1)
 set_area_relation_from_relation = set_area_relation(ele(0), ele(1), _
         num_string, temp_record, 0, 0, 0)
       If set_area_relation_from_relation > 1 Then
       Exit Function
      End If
  End If
End If
Next i%
End If
ElseIf is_dparal(l1%, l2%, n%, _
  -1000, 0, 0, 0, 0) Then
If th_chose(158).chose = 1 Then
  temp_record.record_data.data0.theorem_no = 158
 For i% = 1 To m_lin(l1%).data(0).data0.in_point(0)
 For j% = 1 To m_lin(l2%).data(0).data0.in_point(0)
 dn(0) = triangle_number(m_lin(l1%).data(0).data0.in_point(i%), _
    p3%, p4%, 0, 0, 0, 0, 0, 0, 0)
 dn(1) = triangle_number(m_lin(l2%).data(0).data0.in_point(j%), _
    p1%, p2%, 0, 0, 0, 0, 0, 0, 0)
 temp_record = re   'condition_no = 2
  Call add_conditions_to_record(paral_, n%, 0, 0, temp_record.record_data.data0.condition_data)
            ele(0).ty = triangle_
            ele(1).ty = triangle_
            ele(0).no = dn(0)
            ele(1).no = dn(1)
set_area_relation_from_relation = set_area_relation(ele(1), ele(0), num_string, _
     temp_record, 0, 0, 0)
      If set_area_relation_from_relation > 1 Then
       Exit Function
      End If
 Next j%
 Next i%
End If
End If
End If
End If
'*************************
'
'*************************
If p2% = p3% Then
 Call exchange_two_integer(p3%, p4%)
ElseIf p1% = p4% Then
 Call exchange_two_integer(p1%, p2%)
 Call exchange_two_integer(p3%, p4%)
ElseIf p2% = p4% Then
 Call exchange_two_integer(p2%, p4%)
ElseIf p1% = p3% Then
 Call exchange_two_integer(p3%, p4%)
Else
 GoTo set_area_relation_from_relation_mark10
End If
set_area_relation_from_relation = set_relation_for_triangle(p1%, p2%, p4%, _
     re, r_v)
      If set_area_relation_from_relation > 1 Then
       Exit Function
      End If
set_area_relation_from_relation_mark10:
End Function


Public Function set_property_of_dverti(ByVal l1%, ByVal l2%, ByVal no%, re As total_record_type) As Byte
Dim i%, j%, k%, l%, m%, tc%, tA%, it%
Dim tp(3) As Integer
Dim t_A(1) As Integer
Dim tl(2) As Integer
Dim n_(2)  As Integer
Dim tn_(1) As Integer
Dim tn(1) As Integer
Dim re_ty As Byte
Dim para$
Dim c_data As condition_data_type
Dim temp_record As total_record_type
    temp_record = re
If Dverti(no%).data(0).inter_poi > 0 Then
If th_chose(39).chose = 1 Then
 If m_lin(l1%).data(0).eangle_no > 0 Then
   tp(0) = is_line_line_intersect(l2%, _
        angle(angle3_value(m_lin(l1%).data(0).eangle_no).data(0).data0.angle(3)).data(0).line_no(0), 0, 0, False)
   tp(1) = is_line_line_intersect(l2%, _
        angle(angle3_value(m_lin(l1%).data(0).eangle_no).data(0).data0.angle(3)).data(0).line_no(1), 0, 0, False)
     If tp(0) > 0 And tp(1) > 0 Then
      temp_record = re
       Call add_conditions_to_record(angle3_value_, m_lin(l1%).data(0).eangle_no, _
                              0, 0, temp_record.record_data.data0.condition_data)
       set_property_of_dverti = set_mid_point(tp(0), Dverti(no%).data(0).inter_poi, tp(1), 0, 0, 0, _
              0, 0, temp_record, 0, 0, 0, 0, 0)
        If set_property_of_dverti > 1 Then
         Exit Function
        End If
     End If
  End If
If m_lin(l2%).data(0).eangle_no > 0 Then
   tp(0) = is_line_line_intersect(l1%, _
        angle(angle3_value(m_lin(l2%).data(0).eangle_no).data(0).data0.angle(3)).data(0).line_no(0), 0, 0, False)
   tp(1) = is_line_line_intersect(l1%, _
        angle(angle3_value(m_lin(l2%).data(0).eangle_no).data(0).data0.angle(3)).data(0).line_no(1), 0, 0, False)
     If tp(0) > 0 And tp(1) > 0 Then
      temp_record = re
       Call add_conditions_to_record(angle3_value_, m_lin(l2%).data(0).eangle_no, _
                              0, 0, temp_record.record_data.data0.condition_data)
       set_property_of_dverti = set_mid_point(tp(0), Dverti(no%).data(0).inter_poi, tp(1), 0, 0, 0, _
              0, 0, temp_record, 0, 0, 0, 0, 0)
        If set_property_of_dverti > 1 Then
         Exit Function
        End If
     End If
 End If
 End If
 Else
 For i% = 1 To m_lin(Dverti(no%).data(0).line_no(0)).data(0).data0.in_point(0)
 For j% = 1 To m_lin(Dverti(no%).data(0).line_no(1)).data(0).data0.in_point(0)
 For k% = 0 To 1
 t_A(0) = Abs(angle_number(m_lin(Dverti(no%).data(0).line_no(0)).data(0).data0.in_point(i%), _
                      m_lin(Dverti(no%).data(0).line_no(1)).data(0).data0.in_point(j%), _
                       m_lin(Dverti(no%).data(0).line_no(1)).data(0).data0.poi(k%), "", 0))
 For l% = 0 To 1
 t_A(1) = Abs(angle_number(m_lin(Dverti(no%).data(0).line_no(0)).data(0).data0.poi(l%), _
                     m_lin(Dverti(no%).data(0).line_no(0)).data(0).data0.in_point(i%), _
                      m_lin(Dverti(no%).data(0).line_no(1)).data(0).data0.in_point(j%), _
                      "", 0))
 If t_A(0) > 0 And t_A(1) > 0 Then
  If T_angle(angle(t_A(0)).data(0).total_no).data(0).angle_no(angle(t_A(0)).data(0).total_no_).sh And _
     T_angle(angle(t_A(1)).data(0).total_no).data(0).angle_no(angle(t_A(1)).data(0).total_no_).sh Then
      set_property_of_dverti = set_three_angle_value(t_A(0), t_A(1), 0, "1", "1", "0", _
                           "90", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
      If set_property_of_dverti > 1 Then
         Exit Function
      End If
 GoTo set_property_of_dverti_mark_next1
 End If
 End If
 Next l%
 Next k%
 Next j%
set_property_of_dverti_mark_next1:
 Next i%
 End If
    temp_record = re
tl(0) = l1%
tl(1) = l2%
tp(0) = Dverti(no%).data(0).inter_poi
n_(0) = m_lin(tl(0)).data(0).data0.in_point(0)
 n_(1) = m_lin(tl(1)).data(0).data0.in_point(0)
For i% = 1 To n_(0)
 For j% = 2 To n_(1)
  For k% = 1 To j% - 1
   tA% = triangle_number(m_lin(tl(0)).data(0).data0.in_point(i%), _
    m_lin(tl(1)).data(0).data0.in_point(j%), m_lin(tl(1)).data(0).data0.in_point(k%), _
     0, 0, 0, 0, 0, 0, tc%)
     If tA% > 0 Then
     If Dverti(no%).data(0).inter_poi > 0 Then
      If triangle(tA%).data(0).Area <> "" Then
         temp_record.record_data.data0.condition_data.condition_no = 2
         temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
         temp_record.record_data.data0.condition_data.condition(2).ty = verti_
         temp_record.record_data.data0.condition_data.condition(1).no = triangle(tA%).data(0).area_no
         temp_record.record_data.data0.condition_data.condition(2).no = no%
      Call set_item0(m_lin(tl(1)).data(0).data0.in_point(j%), m_lin(tl(1)).data(0).data0.in_point(k%), _
            m_lin(tl(0)).data(0).data0.in_point(i%), Dverti(no%).data(0).inter_poi, "*", _
              0, 0, 0, 0, 0, 0, "", "", "", "", para$, 0, c_data, 0, it%, 0, 0, c_data, False)
       set_property_of_dverti = set_general_string(it%, 0, 0, 0, para$, "0", "0", "0", _
              time_string(triangle(tA%).data(0).Area, "2", True, False), 0, 0, 0, _
                temp_record, 0, 0)
                If set_property_of_dverti > 1 Then
                   Exit Function
                End If
      End If
     End If
     m% = position_from_direction(tc%, 0)
      triangle(tA%).data(0).verti_no(m%) = no%
       triangle(tA%).data(0).verti_line(m%) = tl(0)
        triangle_data0 = triangle(tA%).data(0)
        set_property_of_dverti = solve_triangle(tA%, triangle_data0, -1, _
         -1, -1, -1, -1, -1, m%, -1, -1, -1, 1, 0, False)
        If set_property_of_dverti > 1 Then
         Exit Function
        End If
   End If
  Next k%
 Next j%
Next i%
For i% = 1 To n_(1)
 For j% = 2 To n_(0)
  For k% = 1 To j% - 1
   tA% = triangle_number(m_lin(tl(1)).data(0).data0.in_point(i%), _
    m_lin(tl(0)).data(0).data0.in_point(j%), m_lin(tl(0)).data(0).data0.in_point(k%), _
     0, 0, 0, 0, 0, 0, tc%)
   If tA% > 0 Then
     m% = position_from_direction(tc%, 0)
      triangle(tA%).data(0).verti_no(m%) = no%
       triangle(tA%).data(0).verti_line(m%) = tl(1)
        triangle_data0 = triangle(tA%).data(0)
        set_property_of_dverti = solve_triangle(tA%, triangle_data0, -1, _
         -1, -1, -1, -1, -1, m%, -1, -1, -1, 1, 0, False)
        If set_property_of_dverti > 1 Then
         Exit Function
        End If
   End If
  Next k%
 Next j%
Next i%
tp(1) = Dverti(no%).data(0).inter_poi

If tp(1) > 0 Then
For k% = 0 To 1
 For l% = 0 To 1
 tp(0) = m_lin(Dverti(no%).data(0).line_no(0)).data(0).data0.poi(k%)
   tp(2) = m_lin(Dverti(no%).data(0).line_no(1)).data(0).data0.poi(l%)
 tA% = angle_number(tp(0), tp(1), tp(2), 0, 0) ', A(0)) <> 0 Then
If tA% <> 0 Then
 temp_record = re
 set_property_of_dverti = set_angle_value(Abs(tA%), "90", temp_record, 0, 0, False)
 If set_property_of_dverti > 1 Then
  Exit Function
 End If
End If
Next l%
Next k%
End If
tp(1) = is_line_line_intersect(Dverti(no%).data(0).line_no(0), _
                   Dverti(no%).data(0).line_no(1), 0, 0, False)
If tp(1) > 0 Then
'切线
temp_record = re
 For i% = 0 To 1
  For j% = 1 To m_lin(tl(i%)).data(0).data0.in_point(0)
   If m_lin(tl(i%)).data(0).data0.in_point(j%) <> tp(1) Then
   tc% = m_circle_number(1, m_lin(tl(i%)).data(0).data0.in_point(j%), pointapi0, _
                        tp(1), 0, 0, 0, 0, 0, 1, 0, 0, 0, False)
    If tc% > 0 Then
       set_property_of_dverti = set_tangent_line(tl((i% + 1) Mod 2), tp(1), _
           tc%, 0, 0, temp_record, 0, 0)
       If set_property_of_dverti > 1 Then
        Exit Function
       End If
     End If
  End If
 Next j%
Next i%
'**********************************
End If
If th_chose(16).chose = 1 Then
 temp_record = re
 temp_record.record_data.data0.theorem_no = 16
For l% = 1 + last_conditions.last_cond(0).paral_no To last_conditions.last_cond(1).paral_no
i% = Dparal(l%).data(0).data0.record.data1.index.i(0)
temp_record.record_data.data0.condition_data.condition_no = 2
  temp_record.record_data.data0.condition_data.condition(2).ty = paral_
    temp_record.record_data.data0.condition_data.condition(2).no = i%
 For j% = 0 To 1
  For k% = 0 To 1
   If Dparal(i%).data(0).data0.line_no(j%) = Dverti(no%).data(0).line_no(k%) Then
   set_property_of_dverti = set_dverti(Dparal(i%).data(0).data0.line_no((j% + 1) Mod 2), _
        Dverti(no%).data(0).line_no((k% + 1) Mod 2), temp_record, 0, 0, False)
    If set_property_of_dverti > 1 Then '= True Then
    Exit Function
    Else
    GoTo set_dverti_mark1
   End If
  End If
 Next k%
Next j%
set_dverti_mark1:
Next l%
End If
'***********************'推广的垂径定理
If th_chose(120).chose = 1 Then 'If Dverti(no%).data(0).inter_poi > 0 Then
temp_record.record_data.data0.theorem_no = 120
For i% = 1 To C_display_picture.m_circle.Count
 If m_Circ(i%).data(0).data0.center > 0 And m_Circ(i%).data(0).data0.in_point(0) > 1 Then
  For j% = 0 To 1
   If is_point_in_line3(m_Circ(i%).data(0).data0.center, m_lin(Dverti(no%).data(0).line_no(j%)).data(0).data0, 0) Then '圆心在垂线上
    '*****
      temp_record.record_data.data0.condition_data.condition_no = 1
        If is_inter_point_line_circle(m_lin(Dverti(no%).data(0).line_no((j% + 1) Mod 2)).data(0), _
                   m_Circ(i%).data(0).data0, tp(0), tp(1)) = 2 Then '垂线与圆交于两点
          Call is_inter_point_line_circle(m_lin(Dverti(no%).data(0).line_no(j%)).data(0), m_Circ(i%).data(0).data0, tp(2), tp(3))
            If Dverti(no%).data(0).inter_poi > 0 Then
              set_property_of_dverti = set_mid_point(tp(0), Dverti(no%).data(0).inter_poi, _
                       tp(1), 0, 0, 0, 0, 0, temp_record, 0, 0, 0, 0, 0)
                If set_property_of_dverti > 1 Then
                 Exit Function
                End If
            Else '垂线无交点
            '*******************
            If tp(2) > 0 Then
             set_property_of_dverti = set_equal_dline(tp(0), tp(2), tp(2), tp(1), 0, 0, 0, 0, 0, 0, _
                      0, temp_record, 0, 0, 0, 0, 0, False)
                 If set_property_of_dverti > 1 Then
                 Exit Function
                End If
               t_A(0) = angle_number(tp(0), tp(2), m_Circ(i%).data(0).data0.center, 0, 0)
               t_A(1) = angle_number(tp(1), tp(2), m_Circ(i%).data(0).data0.center, 0, 0)
            If t_A(0) <> 0 And t_A(1) <> 0 Then
             set_property_of_dverti = set_three_angle_value(Abs(t_A(0)), _
                  Abs(t_A(1)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
                If set_property_of_dverti > 1 Then
                 Exit Function
                End If
             End If
            '**************
               t_A(0) = angle_number(tp(2), tp(0), tp(1), 0, 0)
               t_A(1) = angle_number(tp(2), tp(1), tp(1), 0, 0)
            If t_A(0) <> 0 And t_A(1) <> 0 Then
             set_property_of_dverti = set_three_angle_value(Abs(t_A(0)), _
                 Abs(t_A(1)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
                If set_property_of_dverti > 1 Then
                 Exit Function
                End If
             End If
            End If
'*************************************************
            If tp(3) > 0 Then
             set_property_of_dverti = set_equal_dline(tp(0), tp(3), tp(3), tp(1), 0, 0, 0, 0, 0, 0, _
                      0, temp_record, 0, 0, 0, 0, 0, False)
                 If set_property_of_dverti > 1 Then
                 Exit Function
                End If
               t_A(0) = angle_number(tp(0), tp(3), m_Circ(i%).data(0).data0.center, 0, 0)
               t_A(1) = angle_number(tp(1), tp(3), m_Circ(i%).data(0).data0.center, 0, 0)
            If t_A(0) <> 0 And t_A(1) <> 0 Then
             set_property_of_dverti = set_three_angle_value(Abs(t_A(0)), _
                Abs(t_A(1)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
                If set_property_of_dverti > 1 Then
                 Exit Function
                End If
             End If
             '*********
               t_A(0) = angle_number(tp(3), tp(0), tp(1), 0, 0)
               t_A(1) = angle_number(tp(3), tp(1), tp(1), 0, 0)
            If t_A(0) <> 0 And t_A(1) <> 0 Then
             set_property_of_dverti = set_three_angle_value(Abs(t_A(0)), _
                  Abs(t_A(1)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
                If set_property_of_dverti > 1 Then
                 Exit Function
                End If
             End If
            End If
            '**************************************
            End If
            '过圆的直线垂直弦,平分弦对应的弧
            If is_inter_point_line_circle(m_lin(Dverti(no%).data(0).line_no(j%)).data(0), _
                    m_Circ(i%).data(0).data0, tp(2), tp(3)) = 2 Then '垂线与圆交于两点
                If tp(2) > 0 Then
                 set_property_of_dverti = set_equal_arc(arc_no(tp(0), i%, tp(2)), arc_no(tp(2), i%, tp(1)), _
                    temp_record, 0, 0)
                 If set_property_of_dverti > 1 Then
                  Exit Function
                 End If
                End If
                If tp(3) > 0 Then
                 set_property_of_dverti = set_equal_arc(arc_no(tp(0), i%, tp(3)), arc_no(tp(3), i%, tp(1)), _
                    temp_record, 0, 0)
                 If set_property_of_dverti > 1 Then
                  Exit Function
                 End If
                End If
            End If
         End If
    '*****
   End If
  Next j%
 End If
set_dverti_mark_20:
Next i%
End If
'**********************************************
If th_chose(15).chose = 1 Then
 temp_record = re
 temp_record.record_data.data0.theorem_no = 15
For m% = 1 + last_conditions.last_cond(0).verti_no To last_conditions.last_cond(1).verti_no
 i% = Dverti(m%).data(0).record.data1.index.i(0)
 If i% < no% Then
       temp_record.record_data.data0.condition_data.condition(2).ty = verti_
        temp_record.record_data.data0.condition_data.condition(2).no = i%
         temp_record.record_data.data0.condition_data.condition_no = 2
set_property_of_dverti = set_eangle_from_paral_verti(Dverti(no%).data(0).line_no(0), _
 Dverti(no%).data(0).line_no(1), Dverti(i%).data(0).line_no(0), Dverti(i%).data(0).line_no(1), _
  temp_record, verti_, 0)
 If set_property_of_dverti > 1 Then
  Exit Function
 End If
For j% = 0 To 1
 For k% = 0 To 1
If Dverti(i%).data(0).line_no(j%) = Dverti(no%).data(0).line_no(k%) Then
  set_property_of_dverti = set_dparal(Dverti(i%).data(0).line_no((j% + 1) Mod 2), _
   Dverti(no%).data(0).line_no((k% + 1) Mod 2), temp_record, 0, 0, False)
 If set_property_of_dverti > 1 Then
  Exit Function
 Else
  GoTo set_dverti_mark2
 End If
End If
Next k%
Next j%
End If
set_dverti_mark2:
Next m%
End If
If th_chose(159).chose = 1 Then
For i% = 1 To last_conditions.last_cond(1).eangle_no
 For j% = 0 To 1
 If is_same_two_point(Dverti(no%).data(0).line_no(0), Dverti(no%).data(0).line_no(1), _
      angle(angle3_value(Deangle.av_no(i%).no).data(0).data0.angle(0)).data(0).line_no(j), _
       angle(angle3_value(Deangle.av_no(i%).no).data(0).data0.angle(1)).data(0).line_no(j)) Then
  temp_record = re
  Call add_conditions_to_record(angle3_value_, Deangle.av_no(i%).no, 0, 0, temp_record.record_data.data0.condition_data)
  temp_record.record_data.data0.theorem_no = 159
   set_property_of_dverti = set_dverti( _
     angle(angle3_value(Deangle.av_no(i%).no).data(0).data0.angle(0)).data(0).line_no((j% + 1) Mod 2), _
      angle(angle3_value(Deangle.av_no(i%).no).data(0).data0.angle(1)).data(0).line_no((j% + 1) Mod 2), _
      temp_record, 0, 0, False)
    If set_property_of_dverti > 1 Then
     Exit Function
    End If
 End If
 Next j%
Next i%
End If

'********************
tp(0) = is_line_line_intersect(Dverti(no%).data(0).line_no(0), _
                         Dverti(no%).data(0).line_no(1), tn_(0), tn_(1), False)
                '相交直角
If tp(0) > 0 Then
 temp_record.record_data.data0.condition_data.condition_no = 1
 'tl(2) 垂直,tl(0),tl(1), 且tl(0) ,tl(2) 交于tp(0)
  For m% = 1 + last_conditions.last_cond(0).paral_no To last_conditions.last_cond(1).paral_no
   i% = Dparal(m%).data(0).data0.record.data1.index.i(0)
   Call add_conditions_to_record(paral_, i%, 0, 0, temp_record.record_data.data0.condition_data)
   If Dparal(i%).data(0).data0.line_no(0) = Dverti(no%).data(0).line_no(0) Then
    tl(0) = Dparal(i%).data(0).data0.line_no(0)
    tl(1) = Dparal(i%).data(0).data0.line_no(1)
    tl(2) = Dverti(no%).data(0).line_no(1)
    tn(0) = tn_(1)
   GoTo set_dverti_mark10
   ElseIf Dparal(i%).data(0).data0.line_no(0) = Dverti(no%).data(0).line_no(1) Then
    tl(0) = Dparal(i%).data(0).data0.line_no(0)
    tl(1) = Dparal(i%).data(0).data0.line_no(1)
    tl(2) = Dverti(no%).data(0).line_no(0)
    tn(0) = tn_(0)
    GoTo set_dverti_mark10
  ElseIf Dparal(i%).data(0).data0.line_no(1) = Dverti(no%).data(0).line_no(0) Then
    tl(0) = Dparal(i%).data(0).data0.line_no(1)
    tl(1) = Dparal(i%).data(0).data0.line_no(0)
    tl(2) = Dverti(no%).data(0).line_no(1)
    tn(0) = tn_(1)
    GoTo set_dverti_mark10
   ElseIf Dparal(i%).data(0).data0.line_no(1) = Dverti(no%).data(0).line_no(1) Then
    tl(0) = Dparal(i%).data(0).data0.line_no(1)
    tl(1) = Dparal(i%).data(0).data0.line_no(0)
    tl(2) = Dverti(no%).data(0).line_no(0)
    tn(0) = tn_(0)
     GoTo set_dverti_mark10
 End If
   GoTo set_dverti_mark11
set_dverti_mark10:
 tp(1) = is_line_line_intersect(tl(2), _
                              tl(1), tn(1), 0, False)
'tl(1),tl(2) 交于 tp(1)
 If tp(1) > 0 Then
  For l% = 1 To m_lin(tl(1)).data(0).data0.in_point(0)
   For j% = 2 To m_lin(tl(0)).data(0).data0.in_point(0)
    For k% = 1 To j% - 1
     temp_record.record_data.data0.condition_data.condition_no = 2
      tA% = Abs(angle_number(m_lin(tl(0)).data(0).data0.in_point(j%), _
        m_lin(tl(1)).data(0).data0.in_point(l%), m_lin(tl(0)).data(0).data0.in_point(k%), 0, 0))
         If angle(tA%).data(0).value = "90" Then
         Call add_record_to_record(angle3_value(angle(tA%).data(0).value_no).data(0).record.data0.condition_data, _
                    temp_record.record_data.data0.condition_data)
         If is_equal_dline(m_lin(tl(0)).data(0).data0.in_point(j%), m_lin(tl(1)).data(0).data0.in_point(l%), _
               m_lin(tl(1)).data(0).data0.in_point(l%), m_lin(tl(0)).data(0).data0.in_point(k%), _
                0, 0, 0, 0, 0, 0, n_(0), -1000, 0, 0, 0, eline_data0, n_(1), n_(2), _
                  re_ty, "", temp_record.record_data.data0.condition_data) Then
          'Call add_conditions_to_record(ty, n_(0), n_(1), n_(2), temp_record.record_data.data0.condition_data)
           If get_midpoint(m_lin(tl(0)).data(0).data0.in_point(k%), 0, _
             m_lin(tl(0)).data(0).data0.in_point(j%), 0, 0, 0, 0, 0) = 0 Then
           set_property_of_dverti = set_Drelation(m_lin(tl(0)).data(0).data0.in_point(j%), _
             m_lin(tl(0)).data(0).data0.in_point(k%), tp(0), tp(1), j%, k%, _
              tn(0), tn(1), tl(0), tl(2), "2", temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_dverti > 1 Then
             Exit Function
            End If
        End If
      End If
     End If
    Next k%
   Next j%
  Next l%
 '*****
  For l% = 1 To m_lin(tl(0)).data(0).data0.in_point(0)
   For j% = 2 To m_lin(tl(1)).data(0).data0.in_point(0)
    For k% = 1 To j% - 1
     temp_record.record_data.data0.condition_data.condition_no = 2
     tA% = Abs(angle_number(m_lin(tl(1)).data(0).data0.in_point(j%), _
        m_lin(tl(0)).data(0).data0.in_point(l%), m_lin(tl(1)).data(0).data0.in_point(k%), 0, 0))
        If angle(tA%).data(0).value = "90" Then
         Call add_conditions_to_record(angle3_value_, angle(tA%).data(0).value_no, _
               0, 0, temp_record.record_data.data0.condition_data)
         If is_equal_dline(m_lin(tl(1)).data(0).data0.in_point(j%), m_lin(tl(0)).data(0).data0.in_point(l%), _
               m_lin(tl(0)).data(0).data0.in_point(l%), m_lin(tl(1)).data(0).data0.in_point(k%), _
                0, 0, 0, 0, 0, 0, n_(0), -1000, 0, 0, 0, eline_data0, n_(1), n_(2), _
                 re_ty, "", temp_record.record_data.data0.condition_data) Then
          'Call add_conditions_to_record(re_ty, n_(0), n_(1), n_(2), temp_record.record_data.data0.condition_data)
           If get_midpoint(m_lin(tl(0)).data(0).data0.in_point(k%), 0, _
             m_lin(tl(0)).data(0).data0.in_point(j%), 0, 0, 0, 0, 0) = 0 Then
           set_property_of_dverti = set_Drelation(m_lin(tl(1)).data(0).data0.in_point(j%), _
             m_lin(tl(1)).data(0).data0.in_point(k%), tp(0), tp(1), j%, k%, _
              tn(0), tn(1), tl(1), tl(2), "2", temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_dverti > 1 Then
             Exit Function
            End If
        End If
      End If
     End If
    Next k%
   Next j%
  Next l%
 End If
set_dverti_mark11:
  Next m%
End If
set_property_of_dverti = th_120(no%, 0)

End Function

Public Function set_equation(ByVal s As String, no%, re As total_record_type) As Byte
Dim i%
Dim ts$
Dim e As Equation_data0_type
Dim temp_record As total_record_type
Dim n%
If s = "0" Then
   Exit Function
End If
If is_contain_x(s, "x", 1) = False And s <> "0" Then
 'error
  set_equation = 2
   error_of_wenti = 1
    Exit Function
ElseIf no% > 0 Then
 GoTo set_equation_mark0
End If
temp_record = re
Call set_level(temp_record.record_data.data0.condition_data)
set_equation = is_equation(s, e, no%, n%, re)
If set_equation > 0 Then
Exit Function
Else
If e.para_xx = "0" And e.para_xy = "0" And e.para_yy = "0" And _
      e.para_x = "0" And e.para_y = "0" Then
 Exit Function
ElseIf Mid$(e.root(0), 1, 1) = "-" Then
 Exit Function
End If
If InStr(1, e.root(0), "F", 0) > 0 Or _
      InStr(1, e.root(1), "F", 0) > 0 Then
   Exit Function
End If
If last_conditions.last_cond(1).equation_no Mod 10 = 0 Then
ReDim Preserve equation(last_conditions.last_cond(1).equation_no + 10) As Equation_type
End If
last_conditions.last_cond(1).equation_no = last_conditions.last_cond(1).equation_no + 1
no% = last_conditions.last_cond(1).equation_no
equation(no%).data(0) = e
equation(no%).data(0).record = temp_record.record_data
equation(no%).record_ = temp_record.record_
 For i% = no% To n% + 2 Step -1
  equation(i%).data(0).record.data1.index.i(0) = _
       equation(i% - 1).data(0).record.data1.index.i(0)
 Next i%
Call solve_equation(equation(no%).data(0), equation(no%).data(0).root(0), _
         equation(no%).data(0).root(1), False)
ts$ = set_display_equation(equation(no%).data(0), 0)
set_equation = set_prove_proccess(ts$, equation_, no%, equation(no%).data(0).record.display_string)
If set_equation > 1 Then
 Exit Function
End If
End If
'
For i% = 0 To 3
 If conclusion_data(i%).ty = line_value_ Then
  If conclusion_data(i%).no(0) = 0 And conclusion_data(i%).no(1) > 0 Then
   line_value(conclusion_data(i%).no(1)).data(0).data0.value_ = subs_value_for_string(line_value(conclusion_data(i%).no(1)).data(0).data0.value_, _
      "x", equation(no%).data(0).root(0))
      line_value(conclusion_data(i%).no(1)).data(0).record.data0.condition_for_value_.ty = equation_
      line_value(conclusion_data(i%).no(1)).data(0).record.data0.condition_for_value_.no = no%
      ts$ = set_display_line_value(line_value(conclusion_data(i%).no(1)), False, 0)
    set_equation = set_prove_proccess(ts$, line_value_, conclusion_data(i%).no(1), line_value(conclusion_data(i%).no(1)).data(0).record.display_string)
     If set_equation > 1 Then
      Exit Function
     End If
  End If
 ElseIf conclusion_data(i%).ty = length_of_polygon_ Then
  If conclusion_data(i%).no(0) = 0 Then
  End If
 End If
Next i%
For i% = 1 To last_conditions.last_cond(1).new_point_no
   If new_point(i%).data(0).poi(0) = 0 And new_point(i%).data(0).add_to_line(0) = 0 And _
        new_point(i%).data(0).add_to_circle(0) = 0 Then
         If new_point(i%).data(0).cond.ty = line_value_ Then
           line_value(new_point(i%).data(0).cond.no).data(0).data0.value = _
             subs_value_for_string(line_value(new_point(i%).data(0).cond.no).data(0).data0.value_, _
                   "x", equation(no%).data(0).root(0))
           set_equation = set_line_value(0, 0, 0, 0, 0, 0, _
               temp_record, new_point(i%).data(0).cond.no, 0, False)
              If set_equation > 1 Then
               Exit Function
              End If
         End If
   End If
Next i%
' For i% = 1 To last_conditions.last_cond(1).line_value_no
'  If InStr(1, line_value(i%).data(0).data0.value_, "x", 0) > 0 Then
'   line_value(i%).data(0).data0.value_ = subs_value_for_string(line_value(i%).data(0).data0.value_, _
'      "x", Equation(no%).data(0).root(0))
'      line_value(i%).data(0).record.data0.condition_for_value_.ty = equation_
'      line_value(i%).data(0).record.data0.condition_for_value_.no = no%
'      ts$ = set_display_line_value(line_value(i%), False, 0, 1, 1)
'    set_equation = set_prove_proccess(ts$, line_value_, i%)
'     If set_equation > 1 Then
'      Exit Function
'     End If
' End If
 '
' Next i%
' For i% = 1 To last_conditions.last_cond(1).two_line_value_no
' Next i%
' For i% = 1 To last_conditions.last_cond(1).line3_value_no
' Next i%
' For i% = 1 To last_conditions.last_cond(1).relation_no
' Next i%
' For i% = 1 To last_conditions.last_cond(1).angle3_value_no
' Next i%
' For i% = 1 To last_conditions.last_cond(1).area_of_circle_no
' Next i%
' For i% = 1 To last_conditions.last_cond(1).area_of_fan_no
' Next i%
' For i% = 1 To last_conditions.last_cond(1).area_of_polygon_no
' Next i%
' For i% = 1 To last_conditions.last_cond(1).area_of_triangle_no
 
' Next i%
' For i% = 1 To last_conditions.last_cond(1).sides_length_of_circle_no
 
' Next i%
' For i% = 1 To last_conditions.last_cond(1).sides_length_of_triangle_no
 
' Next i%

set_equation_mark0:
End Function

Public Function set_display_equation(e As Equation_data0_type, dis_ty As Byte) As String
If e.para_xx <> "" And e.para_xx <> "0" Then
If e.para_xx = "1" Then
 set_display_equation = "x[up\\2]"
ElseIf e.para_xx = "-1" Or e.para_xx = "@1" Then
 set_display_equation = "-x[up\\2]"
Else
If InStr(1, e.para_xx, "+", 0) > 1 Or InStr(1, e.para_xx, "-", 0) > 1 Then
set_display_equation = "(" + e.para_xx + ")" + "x[up\\2]"
Else
set_display_equation = e.para_xx + "x[up\\2]"
End If
End If
End If
If e.para_x <> "" And e.para_x <> "0" Then
 If set_display_equation = "" Then
  If e.para_x = "1" Then
   set_display_equation = "x"
  ElseIf e.para_x = "-1" Or e.para_x = "@1" Then
   set_display_equation = "-x"
  Else
   set_display_equation = e.para_x + "x"
  End If
 Else
  If InStr(1, e.para_x, "+", 0) > 1 Or InStr(1, e.para_x, "-", 0) > 1 Then
    set_display_equation = set_display_equation + "+" + "(" + e.para_x + ")" + "x"
  Else
  If e.para_x = "1" Then
   set_display_equation = set_display_equation + "+" + "x"
  ElseIf e.para_x = "-1" Or e.para_x = "@1" Then
   set_display_equation = set_display_equation + "-x"
  Else
   If Mid$(e.para_x, 1, 1) = "-" Then
   set_display_equation = set_display_equation + e.para_x + "x"
   Else
   set_display_equation = set_display_equation + "+" + e.para_x + "x"
   End If
  End If
  End If
 End If
End If
If e.para_c <> "" And e.para_c <> "0" Then
  If e.para_c = "1" Then
   set_display_equation = set_display_equation + "+" + "1"
  ElseIf e.para_c = "-1" Or e.para_c = "@1" Then
   set_display_equation = set_display_equation + "-1"
  Else
   If Mid$(e.para_c, 1, 1) = "-" Or Mid$(e.para_c, 1, 1) = "@" Then
   set_display_equation = set_display_equation + e.para_c
   Else
   set_display_equation = set_display_equation + "+" + e.para_c
   End If
  End If
End If
 If dis_ty = 1 Then
    set_display_equation = "!" + set_display_equation + "~" + "= 0 ; x = " + "!" + e.root(0) + "~"
 Else
    set_display_equation = set_display_equation + "= 0 ; x = " + e.root(0)
 End If
End Function

Public Function value_string_no(ByVal s As String) As Integer
Dim n%, i%
Dim vs As value_string0_type
vs.value = s
If search_for_value_string(vs, 0, n%, 1) Then
value_string_no = n%
Else
If last_conditions.last_cond(1).value_string_no Mod 10 = 0 Then
ReDim Dvalue_string(last_conditions.last_cond(1).value_string_no + 10) As value_string_type
End If
last_conditions.last_cond(1).value_string_no = last_conditions.last_cond(1).value_string_no + 1
Dvalue_string(last_conditions.last_cond(1).value_string_no).data(0) = vs
For i% = last_conditions.last_cond(1).value_string_no To n% + 2 Step -1
Dvalue_string(i%).data(0).index(0) = _
   Dvalue_string(i% - 1).data(0).index(0)
Next i%
 Dvalue_string(n% + 1).data(0).index(0) = last_conditions.last_cond(1).value_string_no
n% = last_conditions.last_cond(1).value_string_no
End If
End Function
Public Sub put_point_to_line(p_coord1 As POINTAPI, l_coord1 As POINTAPI, l_coord2 As POINTAPI, out_coord As POINTAPI)
Dim l!
  Call orthofoot1(p_coord1, l_coord1, l_coord2, out_coord, 0, False)
End Sub

Public Sub set_aid_point_data1_(A1 As temp_triangle_data_type, A2 As temp_triangle_data_type)
'角等
Dim i%
 For i% = 1 To last_conditions.last_cond(1).aid_point_data1_no
  If is_same_two_point(aid_point_data1(i%).data(0).triA(0).no, _
       aid_point_data1(i%).data(0).triA(1).no, A1.no, A2.no) Then
   Exit Sub
  End If
 Next i%
If is_same_two_point(A1.poi(2), A1.poi(1), A2.poi(2), A2.poi(1)) Then
 Exit Sub
End If
If last_conditions.last_cond(1).aid_point_data1_no Mod 10 = 0 Then
ReDim Preserve aid_point_data1(last_conditions.last_cond(1).aid_point_data1_no + 10) As aid_point_data_type
End If
last_conditions.last_cond(1).aid_point_data1_no = last_conditions.last_cond(1).aid_point_data1_no + 1
If A1.no > A2.no Then
 aid_point_data1(last_conditions.last_cond(1).aid_point_data1_no).data(0).triA(0) = A2
 aid_point_data1(last_conditions.last_cond(1).aid_point_data1_no).data(0).triA(1) = A1
Else
 aid_point_data1(last_conditions.last_cond(1).aid_point_data1_no).data(0).triA(0) = A1
 aid_point_data1(last_conditions.last_cond(1).aid_point_data1_no).data(0).triA(1) = A2
End If
End Sub
Public Sub set_aid_point_data2_(A1 As temp_triangle_data_type, A2 As temp_triangle_data_type)
'角和=180
Dim i%
 For i% = 1 To last_conditions.last_cond(1).aid_point_data2_no
  If is_same_two_point(aid_point_data2(i%).data(0).triA(0).no, _
       aid_point_data2(i%).data(0).triA(1).no, A1.no, A2.no) Then
   Exit Sub
  End If
 Next i%
If is_same_two_point(A1.poi(2), A1.poi(1), A2.poi(2), A2.poi(1)) Then
 Exit Sub
End If
If last_conditions.last_cond(1).aid_point_data2_no Mod 10 = 0 Then
ReDim Preserve aid_point_data2(last_conditions.last_cond(1).aid_point_data2_no + 10) As aid_point_data_type
End If
last_conditions.last_cond(1).aid_point_data2_no = last_conditions.last_cond(1).aid_point_data2_no + 1
If A1.no > A2.no Then
 aid_point_data2(last_conditions.last_cond(1).aid_point_data2_no).data(0).triA(0) = A2
 aid_point_data2(last_conditions.last_cond(1).aid_point_data2_no).data(0).triA(1) = A1
Else
 aid_point_data2(last_conditions.last_cond(1).aid_point_data2_no).data(0).triA(0) = A1
 aid_point_data2(last_conditions.last_cond(1).aid_point_data2_no).data(0).triA(1) = A2
End If
End Sub
Public Sub set_aid_point_data3_(A1 As temp_triangle_data_type, A2 As temp_triangle_data_type)
'角差=60,一边等
Dim i%
If is_same_two_point(A1.poi(2), A1.poi(1), A2.poi(2), A2.poi(1)) Then
 Exit Sub
End If
If A1.poi(1) = A2.poi(1) Then
For i% = 1 To last_conditions.last_cond(1).aid_point_data3_no
  If is_same_two_point(aid_point_data3(i%).data(0).triA(0).no, _
       aid_point_data3(i%).data(0).triA(1).no, A1.no, A2.no) Then
   If (aid_point_data3(i%).data(0).triA(0).poi(1) = A1.poi(1) And _
       aid_point_data3(i%).data(0).triA(0).poi(2) = A1.poi(2)) Or _
        (aid_point_data3(i%).data(0).triA(0).poi(1) = A2.poi(1) And _
         aid_point_data3(i%).data(0).triA(0).poi(2) = A2.poi(2)) Then
    Exit Sub
   End If
  End If
 Next i%
If last_conditions.last_cond(1).aid_point_data3_no Mod 10 = 0 Then
ReDim Preserve aid_point_data3(last_conditions.last_cond(1).aid_point_data3_no + 10) As aid_point_data_type
End If
last_conditions.last_cond(1).aid_point_data3_no = last_conditions.last_cond(1).aid_point_data3_no + 1
'If A1.no > A2.no Then
 aid_point_data3(last_conditions.last_cond(1).aid_point_data3_no).data(0).triA(0) = A1
 aid_point_data3(last_conditions.last_cond(1).aid_point_data3_no).data(0).triA(1) = A2
'Else
' aid_point_data3(last_conditions.last_cond(1).aid_point_data3_no).data(0).triA(0) = A1
' aid_point_data3(last_conditions.last_cond(1).aid_point_data3_no).data(0).triA(1) = A2
End If
End Sub

Public Sub set_aid_point_data(A1 As temp_triangle_data_type, A2 As temp_triangle_data_type, _
             t_e_type_S() As Byte, t_e_type_A() As Byte)
'标准记录:所p1p2 相等线段,<1 差=60'和=180
Dim triA(1) As temp_triangle_data_type
Dim d_v As String
triA(0) = A1
triA(1) = A2
If angle(A1.angle(0)).data(0).value <> "" And angle(A2.angle(0)).data(0).value <> "" Then '一角已知
    If t_e_type_S(1) = 1 Or t_e_type_S(2) = 1 Then
    d_v = minus_string(angle(A2.angle(0)).data(0).value, _
         angle(A1.angle(0)).data(0).value, True, False) '两角差=60
      If t_e_type_S(1) = 1 Then
     '0<->1
      triA(0) = A1
      triA(1) = A2
    Call exchange_two_integer(triA(0).angle(0), triA(0).angle(1))
    Call exchange_two_integer(triA(1).angle(0), triA(1).angle(1))
    Call exchange_two_integer(triA(0).poi(0), triA(0).poi(1))
    Call exchange_two_integer(triA(1).poi(0), triA(1).poi(1))
     If d_v = "60" Then
      Call set_aid_point_data3_(triA(0), triA(1)) 'SA0
     ElseIf d_v = "-60" Then
      Call set_aid_point_data3_(triA(1), triA(0))
     Else
         GoTo set_aid_point_data_mark1
    End If
    End If
    End If
    If t_e_type_S(2) = 1 Then
      triA(0) = A1
      triA(1) = A2
    Call exchange_two_integer(triA(0).angle(1), triA(0).angle(2))
    Call exchange_two_integer(triA(1).angle(1), triA(1).angle(2))
    Call exchange_two_integer(triA(0).poi(1), triA(0).poi(2))
    Call exchange_two_integer(triA(1).poi(1), triA(1).poi(2))
    Call exchange_two_integer(triA(0).angle(1), triA(0).angle(0))
    Call exchange_two_integer(triA(1).angle(1), triA(1).angle(0))
    Call exchange_two_integer(triA(0).poi(1), triA(0).poi(0))
    Call exchange_two_integer(triA(1).poi(1), triA(1).poi(0))
     If d_v = "60" Then
      Call set_aid_point_data3_(triA(0), triA(1)) 'A0S
     ElseIf d_v = "-60" Then
      Call set_aid_point_data3_(triA(1), triA(0))
     End If
    End If
End If
set_aid_point_data_mark1:
'**********************************************
If angle(A1.angle(1)).data(0).value <> "" And angle(A2.angle(1)).data(0).value <> "" Then
    If t_e_type_S(0) = 1 Or t_e_type_S(2) = 1 Then
    d_v = minus_string(angle(A2.angle(1)).data(0).value, _
         angle(A1.angle(1)).data(0).value, True, False)
     If t_e_type_S(0) = 1 Then 'SA0
      triA(0) = A1
      triA(1) = A2
      If d_v = "60" Then
       Call set_aid_point_data3_(triA(0), triA(1))
      ElseIf d_v = "-60" Then
       Call set_aid_point_data3_(triA(1), triA(0))
      Else
       GoTo set_aid_point_data_mark2
      End If
    End If
    If t_e_type_S(2) = 1 Then '0AS
          triA(0) = A1
      triA(1) = A2
      '2<->0
    Call exchange_two_integer(triA(0).angle(0), triA(0).angle(2))
    Call exchange_two_integer(triA(1).angle(0), triA(1).angle(2))
    Call exchange_two_integer(triA(0).poi(0), triA(0).poi(2))
    Call exchange_two_integer(triA(1).poi(0), triA(1).poi(2))
      If d_v = "60" Then
      Call set_aid_point_data3_(triA(0), triA(1))
     ElseIf d_v = "-60" Then
      Call set_aid_point_data3_(triA(1), triA(0))
     End If
   End If
   End If
End If
set_aid_point_data_mark2:
If angle(A1.angle(2)).data(0).value <> "" And angle(A2.angle(2)).data(0).value <> "" Then
    If t_e_type_S(1) = 1 Or t_e_type_S(0) = 1 Then
     d_v = minus_string(angle(A2.angle(2)).data(0).value, _
         angle(A1.angle(2)).data(0).value, True, False)
     If t_e_type_S(1) = 1 Then '0SA
      triA(0) = A1
      triA(1) = A2
      '1<->0
    Call exchange_two_integer(triA(0).angle(2), triA(0).angle(1))
    Call exchange_two_integer(triA(1).angle(2), triA(1).angle(1))
    Call exchange_two_integer(triA(0).poi(2), triA(0).poi(1))
    Call exchange_two_integer(triA(1).poi(2), triA(1).poi(1))
    Call exchange_two_integer(triA(0).angle(2), triA(0).angle(0))
    Call exchange_two_integer(triA(1).angle(2), triA(1).angle(0))
    Call exchange_two_integer(triA(0).poi(2), triA(0).poi(0))
    Call exchange_two_integer(triA(1).poi(2), triA(1).poi(0))
      If d_v = "60" Then
       Call set_aid_point_data3_(triA(0), triA(1))
      ElseIf d_v = "-60" Then
       Call set_aid_point_data3_(triA(1), triA(0))
      Else
             GoTo set_aid_point_data_mark3
      End If
     End If
    If t_e_type_S(0) = 1 Then
      triA(0) = A1
      triA(1) = A2
      '2<->0
    Call exchange_two_integer(triA(0).angle(1), triA(0).angle(2))
    Call exchange_two_integer(triA(1).angle(1), triA(1).angle(2))
    Call exchange_two_integer(triA(0).poi(1), triA(0).poi(2))
    Call exchange_two_integer(triA(1).poi(1), triA(1).poi(2))
    If d_v = "60" Then '旋转
      Call set_aid_point_data3_(triA(0), triA(1))
     ElseIf d_v = "-60" Then
      Call set_aid_point_data3_(triA(1), triA(0))
     End If
    End If
    End If
End If
set_aid_point_data_mark3:
If t_e_type_S(0) = 1 And t_e_type_S(1) = 0 And t_e_type_S(2) = 0 Then
triA(0) = A1
triA(1) = A2
 If t_e_type_A(1) > 0 And t_e_type_A(2) = 0 And t_e_type_A(0) = 0 Then
  If t_e_type_A(1) = 2 Then
   Call set_aid_point_data1_(triA(0), triA(1))
  ElseIf t_e_type_A(1) = 1 Then
   Call set_aid_point_data2_(triA(0), triA(1))
  End If
 ElseIf t_e_type_A(2) > 0 And t_e_type_A(1) = 0 And t_e_type_A(0) = 0 Then
    Call exchange_two_integer(triA(0).angle(1), triA(0).angle(2))
    Call exchange_two_integer(triA(1).angle(1), triA(1).angle(2))
    Call exchange_two_integer(triA(0).poi(1), triA(0).poi(2))
    Call exchange_two_integer(triA(1).poi(1), triA(1).poi(2))
    If t_e_type_A(2) = 2 Then
     Call set_aid_point_data1_(triA(0), triA(1))
    ElseIf t_e_type_A(2) = 1 Then
     Call set_aid_point_data2_(triA(0), triA(1))
    End If
 End If
ElseIf t_e_type_S(0) = 0 And t_e_type_S(1) = 1 And t_e_type_S(2) = 0 Then
triA(0) = A1
triA(1) = A2
If t_e_type_A(0) > 0 And t_e_type_A(1) = 0 And t_e_type_A(2) = 0 Then
    Call exchange_two_integer(triA(0).angle(1), triA(0).angle(2))
    Call exchange_two_integer(triA(1).angle(1), triA(1).angle(2))
    Call exchange_two_integer(triA(0).poi(1), triA(0).poi(2))
    Call exchange_two_integer(triA(1).poi(1), triA(1).poi(2))
  If t_e_type_A(0) = 2 Then
   Call set_aid_point_data1_(triA(0), triA(1))
  ElseIf t_e_type_A(0) = 1 Then
   Call set_aid_point_data2_(triA(0), triA(1))
  End If
 ElseIf t_e_type_A(2) > 0 And t_e_type_A(1) = 0 And t_e_type_A(0) = 0 Then
    Call exchange_two_integer(triA(0).angle(1), triA(0).angle(2))
    Call exchange_two_integer(triA(1).angle(1), triA(1).angle(2))
    Call exchange_two_integer(triA(0).poi(1), triA(0).poi(2))
    Call exchange_two_integer(triA(1).poi(1), triA(1).poi(2))
    Call exchange_two_integer(triA(0).angle(0), triA(0).angle(2))
    Call exchange_two_integer(triA(1).angle(0), triA(1).angle(2))
    Call exchange_two_integer(triA(0).poi(0), triA(0).poi(2))
    Call exchange_two_integer(triA(1).poi(0), triA(1).poi(2))
  If t_e_type_A(2) = 2 Then
   Call set_aid_point_data1_(triA(0), triA(1))
  ElseIf t_e_type_A(2) = 1 Then
   Call set_aid_point_data2_(triA(0), triA(1))
  End If
 End If
ElseIf t_e_type_S(0) = 0 And t_e_type_S(1) = 0 And t_e_type_S(2) = 1 Then
triA(0) = A1
triA(1) = A2
 If t_e_type_A(1) > 0 And t_e_type_A(0) = 0 And t_e_type_A(2) = 0 Then
    Call exchange_two_integer(triA(0).angle(2), triA(0).angle(0))
    Call exchange_two_integer(triA(1).angle(2), triA(1).angle(0))
    Call exchange_two_integer(triA(0).poi(2), triA(0).poi(0))
    Call exchange_two_integer(triA(1).poi(2), triA(1).poi(0))
  If t_e_type_A(1) = 2 Then
   Call set_aid_point_data1_(triA(0), triA(1))
  ElseIf t_e_type_A(1) = 1 Then
   Call set_aid_point_data2_(triA(0), triA(1))
  End If
 ElseIf t_e_type_A(0) > 0 And t_e_type_A(1) = 0 And t_e_type_A(2) = 0 Then
    Call exchange_two_integer(triA(0).angle(2), triA(0).angle(0))
    Call exchange_two_integer(triA(1).angle(2), triA(1).angle(0))
    Call exchange_two_integer(triA(0).poi(2), triA(0).poi(0))
    Call exchange_two_integer(triA(1).poi(2), triA(1).poi(0))
    Call exchange_two_integer(triA(0).angle(1), triA(0).angle(2))
    Call exchange_two_integer(triA(1).angle(1), triA(1).angle(2))
    Call exchange_two_integer(triA(0).poi(1), triA(0).poi(2))
    Call exchange_two_integer(triA(1).poi(1), triA(1).poi(2))
  If t_e_type_A(0) = 2 Then
   Call set_aid_point_data1_(triA(0), triA(1))
  ElseIf t_e_type_A(0) = 1 Then
   Call set_aid_point_data2_(triA(0), triA(1))
  End If
 End If
End If
End Sub
Public Function set_height_of_triangle(ByVal l1%, ByVal l2%, v_n1%, v_n2%, ByVal l_v%) As Byte

End Function
Public Function set_height_of_tixing(ByVal paral_no%) As Byte
Dim i%, j%, k%, l%, m%
Dim temp_record As total_record_type
Dim ts$
'由梯形的高计算面积
For i% = 1 To last_conditions.last_cond(1).tixing_no
 If Dtixing(i%).data(0).paral_no = paral_no Then
    set_height_of_tixing = set_area_of_tixing(i%)
    If set_height_of_tixing > 1 Then
       Exit Function
    End If
 End If
Next i%
End Function
Public Function set_area_of_tixing(ByVal ti_no%)
Dim temp_record As total_record_type
Dim ts$
temp_record.record_data.data0.theorem_no = 3
If Dpolygon4(Dtixing(ti_no%).data(0).poly4_no).data(0).area_value = "" Then
 If Dparal(Dtixing(ti_no%).data(0).paral_no).data(0).distance_no > 0 Then
  Call add_record_to_record(Ddistance_of_paral_line(Dparal(Dtixing(ti_no%).data(0).paral_no).data(0).distance_no).data(0).record.data0.condition_data, _
      temp_record.record_data.data0.condition_data)
  If Dtixing(ti_no%).data(0).mid_position_line_value_no > 0 Then
   Call add_conditions_to_record(Dtixing(ti_no%).data(0).mid_point_no(0).ty, _
    Dtixing(ti_no%).data(0).mid_point_no(0).no, Dtixing(ti_no%).data(0).mid_point_no(1).no, 0, _
     temp_record.record_data.data0.condition_data)
  Call add_conditions_to_record(Dtixing(ti_no%).data(0).mid_point_no(2).ty, _
    Dtixing(ti_no%).data(0).mid_point_no(2).no, Dtixing(ti_no%).data(0).mid_point_no(3).no, 0, _
     temp_record.record_data.data0.condition_data)
     ts$ = time_string(line_value(Dtixing(ti_no%).data(0).mid_position_line_value_no).data(0).data0.value, _
               Ddistance_of_paral_line(Dparal(Dtixing(ti_no%).data(0).paral_no).data(0).distance_no).data(0).value, True, False)
     set_area_of_tixing = set_area_of_polygon0(Dtixing(ti_no%).data(0).poly4_no, ts$, temp_record, 0, 0)
     If set_area_of_tixing > 1 Then
      Exit Function
     End If
  ElseIf Dtixing(ti_no%).data(0).buttom_(0).no > 0 And Dtixing(ti_no%).data(0).buttom_(1).no > 0 And _
          Dtixing(ti_no%).data(0).buttom_(0).ty > line_value_ And Dtixing(ti_no%).data(0).buttom_(1).ty = line_value_ Then
     Call add_conditions_to_record(Dtixing(ti_no%).data(0).buttom_(0).ty, _
        Dtixing(ti_no%).data(0).buttom_(0).no, Dtixing(ti_no%).data(0).buttom_(1).no, 0, _
         temp_record.record_data.data0.condition_data)
     ts$ = add_string(line_value(Dtixing(ti_no%).data(0).buttom_(0).no).data(0).data0.value, _
                     line_value(Dtixing(ti_no%).data(0).buttom_(1).no).data(0).data0.value, False, False)
      ts$ = divide_string(ts$, "2", False, False)
        ts$ = time_string(ts$, Ddistance_of_paral_line(Dparal(Dtixing(ti_no%).data(0).paral_no).data(0).distance_no).data(0).value, True, False)
         set_area_of_tixing = set_area_of_polygon0(Dtixing(ti_no%).data(0).poly4_no, ts$, temp_record, 0, 0)
         If set_area_of_tixing > 1 Then
          Exit Function
         End If
  ElseIf Dtixing(ti_no%).data(0).buttom_(0).no > 0 And Dtixing(ti_no%).data(0).buttom_(0).ty = two_line_value_ Then
     Call add_conditions_to_record(Dtixing(ti_no%).data(0).buttom_(0).ty, _
        Dtixing(ti_no%).data(0).buttom_(0).no, 0, 0, _
         temp_record.record_data.data0.condition_data)
        ts$ = divide_string(two_line_value(Dtixing(ti_no%).data(0).buttom_(0).no).data(0).data0.value, "2", False, False)
        ts$ = time_string(ts$, Ddistance_of_paral_line(Dparal(Dtixing(ti_no%).data(0).paral_no).data(0).distance_no).data(0).value, True, False)
         set_area_of_tixing = set_area_of_polygon0(Dtixing(ti_no%).data(0).poly4_no, ts$, temp_record, 0, 0)
         If set_area_of_tixing > 1 Then
          Exit Function
         End If
  End If
 End If
End If
End Function
Public Function set_general_string_from_2_element(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, _
          ByVal pA1$, ByVal pA2$, re As total_record_type) As Byte
Dim temp_record As total_record_type
temp_record = re
If p4% > 0 And p2% > 0 Then
set_general_string_from_2_element = set_Drelation(p1%, p2%, p3%, p4%, 0, 0, 0, 0, 0, 0, _
     divide_string(time_string("-1", pA2$, False, False), pA1$, True, False), temp_record, 0, 0, 0, 0, 0, False)
ElseIf p2% > 0 And p4% = -7 Then
 If item0(p3%).data(0).sig = "+" Or item0(p3%).data(0).sig = "-" Then
  If item0(p3%).data(0).sig = "+" Then
   set_general_string_from_2_element = set_three_line_value(p1%, p2%, item0(p3%).data(0).poi(0), _
       item0(p3%).data(0).poi(1), item0(p3%).data(0).poi(2), item0(p3%).data(0).poi(3), 0, 0, 0, _
         0, 0, 0, 0, 0, 0, pA1$, pA2$, pA2$, "0", temp_record, 0, 0, 0)
  Else
   set_general_string_from_2_element = set_three_line_value(p1%, p2%, item0(p3%).data(0).poi(0), _
       item0(p3%).data(0).poi(1), item0(p3%).data(0).poi(2), item0(p3%).data(0).poi(3), 0, 0, 0, _
         0, 0, 0, 0, 0, 0, pA1$, pA2$, time_string("-1", pA2$, True, False), "0", temp_record, 0, 0, 0)
  End If
 End If
ElseIf p2% = -1 And p4% > 0 Then
set_general_string_from_2_element = set_general_string_from_2_element(p3%, p4%, p1%, p2%, pA2$, pA1$, re)
'ElseIf p2% = -7 And p4% = -7 Then
End If
End Function

Public Function set_display_tri_function(tri_f As tri_function_data_type, dis_ty As Byte, is_depend As Boolean) As String
set_display_tri_function = set_display_angle(tri_f.A, is_depend)
If tri_f.initial_data = 1 Then
set_display_tri_function = "sin" + set_display_tri_function + "=" + _
         display_string_(tri_f.sin_value, dis_ty)
ElseIf tri_f.initial_data = 2 Then
set_display_tri_function = "cos" + set_display_tri_function + "=" + _
         display_string_(tri_f.cos_value, dis_ty)
ElseIf tri_f.initial_data = 3 Then
set_display_tri_function = "tan" + set_display_tri_function + "=" + _
         display_string_(tri_f.tan_value, dis_ty)
ElseIf tri_f.initial_data = 4 Then
set_display_tri_function = "ctan" + set_display_tri_function + "=" + _
         display_string_(tri_f.ctan_value, dis_ty)
End If
End Function

Public Function set_property_of_tri_function(ByVal no%) As Byte
Dim tri_f As tri_function_data_type
Dim temp_record As total_record_type
Dim temp_triA As temp_triangle_type
Dim i%
tri_f = tri_function(no%).data(0)
If tri_f.sin_value = "1" Then
 If angle(tri_f.A).data(0).value = "90" Then
  Exit Function
 Else
  temp_record.record_data.data0.condition_data.condition_no = 1
  temp_record.record_data.data0.condition_data.condition(1).ty = tri_function_
  temp_record.record_data.data0.condition_data.condition(1).no = no%
  set_property_of_tri_function = set_angle_value(tri_f.A, "90", temp_record, 0, 0, False)
   If set_property_of_tri_function > 1 Then
    Exit Function
   End If
 End If
End If
Call set_temp_triangle_from_angle(tri_f.A, 0, temp_triA, False)
For i% = 1 To temp_triA.last_T
If angle(temp_triA.data(i%).angle(1)).data(0).value = "90" Then
 temp_record.record_data.data0.condition_data.condition_no = 0
 Call add_conditions_to_record(tri_function_, no%, 0, 0, temp_record.record_data.data0.condition_data)
 Call add_conditions_to_record(angle3_value_, angle(temp_triA.data(i%).angle(1)).data(0).value_no, _
    0, 0, temp_record.record_data.data0.condition_data)
      If tri_f.initial_data = 1 Then
      set_property_of_tri_function = set_Drelation(temp_triA.data(i%).poi(1), _
         temp_triA.data(i%).poi(2), temp_triA.data(i%).poi(0), temp_triA.data(i%).poi(2), _
           0, 0, 0, 0, 0, 0, tri_f.sin_value, temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_tri_function > 1 Then
             Exit Function
            End If
      ElseIf tri_f.initial_data = 2 Then
      set_property_of_tri_function = set_Drelation(temp_triA.data(i%).poi(0), _
         temp_triA.data(i%).poi(1), temp_triA.data(i%).poi(0), temp_triA.data(i%).poi(2), _
           0, 0, 0, 0, 0, 0, tri_f.cos_value, temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_tri_function > 1 Then
             Exit Function
            End If
      ElseIf tri_f.initial_data = 3 Then
      set_property_of_tri_function = set_Drelation(temp_triA.data(i%).poi(1), _
         temp_triA.data(i%).poi(2), temp_triA.data(i%).poi(0), temp_triA.data(i%).poi(1), _
           0, 0, 0, 0, 0, 0, tri_f.tan_value, temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_tri_function > 1 Then
             Exit Function
            End If
      ElseIf tri_f.initial_data = 4 Then
      set_property_of_tri_function = set_Drelation(temp_triA.data(i%).poi(0), _
         temp_triA.data(i%).poi(1), temp_triA.data(i%).poi(1), temp_triA.data(i%).poi(2), _
           0, 0, 0, 0, 0, 0, tri_f.ctan_value, temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_tri_function > 1 Then
             Exit Function
            End If
      End If
ElseIf angle(temp_triA.data(i%).angle(2)).data(0).value = "90" Then
 temp_record.record_data.data0.condition_data.condition_no = 0
 Call add_conditions_to_record(tri_function_, no%, 0, 0, temp_record.record_data.data0.condition_data)
 Call add_conditions_to_record(angle3_value_, angle(temp_triA.data(i%).angle(2)).data(0).value_no, _
     0, 0, temp_record.record_data.data0.condition_data)
     If tri_f.initial_data = 1 Then
      set_property_of_tri_function = set_Drelation(temp_triA.data(i%).poi(1), _
         temp_triA.data(i%).poi(2), temp_triA.data(i%).poi(0), temp_triA.data(i%).poi(1), _
           0, 0, 0, 0, 0, 0, tri_f.sin_value, temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_tri_function > 1 Then
             Exit Function
            End If
      ElseIf tri_f.initial_data = 2 Then
      set_property_of_tri_function = set_Drelation(temp_triA.data(i%).poi(0), _
         temp_triA.data(i%).poi(2), temp_triA.data(i%).poi(0), temp_triA.data(i%).poi(1), _
           0, 0, 0, 0, 0, 0, tri_f.cos_value, temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_tri_function > 1 Then
             Exit Function
            End If
      ElseIf tri_f.initial_data = 3 Then
      set_property_of_tri_function = set_Drelation(temp_triA.data(i%).poi(1), _
         temp_triA.data(i%).poi(2), temp_triA.data(i%).poi(0), temp_triA.data(i%).poi(2), _
           0, 0, 0, 0, 0, 0, tri_f.tan_value, temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_tri_function > 1 Then
             Exit Function
            End If
      ElseIf tri_f.initial_data = 4 Then
      set_property_of_tri_function = set_Drelation(temp_triA.data(i%).poi(0), _
         temp_triA.data(i%).poi(2), temp_triA.data(i%).poi(1), temp_triA.data(i%).poi(2), _
           0, 0, 0, 0, 0, 0, tri_f.ctan_value, temp_record, 0, 0, 0, 0, 0, False)
            If set_property_of_tri_function > 1 Then
             Exit Function
            End If
      End If
Else
  If tri_f.initial_data = 1 Then
  ElseIf tri_f.initial_data = 2 Then
  End If
End If
Next i%
End Function

Public Function set_temp_triangle_from_two_line(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, _
                                                      triA As temp_triangle_data_type) As Boolean
If p1% = p3% Then
 triA.poi(0) = p1%
 triA.poi(1) = p2%
 triA.poi(2) = p4%
 triA.angle(0) = Abs(angle_number(triA.poi(1), triA.poi(0), triA.poi(2), "", 0))
 triA.angle(1) = Abs(angle_number(triA.poi(0), triA.poi(1), triA.poi(2), "", 0))
 triA.angle(2) = Abs(angle_number(triA.poi(1), triA.poi(2), triA.poi(0), "", 0))
 set_temp_triangle_from_two_line = True
ElseIf p1% = p4% Then
 triA.poi(0) = p1%
 triA.poi(1) = p2%
 triA.poi(2) = p3%
 triA.angle(0) = Abs(angle_number(triA.poi(1), triA.poi(0), triA.poi(2), "", 0))
 triA.angle(1) = Abs(angle_number(triA.poi(0), triA.poi(1), triA.poi(2), "", 0))
 triA.angle(2) = Abs(angle_number(triA.poi(1), triA.poi(2), triA.poi(0), "", 0))
 set_temp_triangle_from_two_line = True
ElseIf p2% = p3% Then
 triA.poi(0) = p2%
 triA.poi(1) = p1%
 triA.poi(2) = p4%
 triA.angle(0) = Abs(angle_number(triA.poi(1), triA.poi(0), triA.poi(2), "", 0))
 triA.angle(1) = Abs(angle_number(triA.poi(0), triA.poi(1), triA.poi(2), "", 0))
 triA.angle(2) = Abs(angle_number(triA.poi(1), triA.poi(2), triA.poi(0), "", 0))
 set_temp_triangle_from_two_line = True
ElseIf p2% = p4% Then
 triA.poi(0) = p2%
 triA.poi(1) = p1%
 triA.poi(2) = p3%
 triA.angle(0) = Abs(angle_number(triA.poi(1), triA.poi(0), triA.poi(2), "", 0))
 triA.angle(1) = Abs(angle_number(triA.poi(0), triA.poi(1), triA.poi(2), "", 0))
 triA.angle(2) = Abs(angle_number(triA.poi(1), triA.poi(2), triA.poi(0), "", 0))
 set_temp_triangle_from_two_line = True
End If
End Function

Public Sub pre_prove()
Dim i%, j%, k%
Dim tp(1) As Integer
For i% = 1 To last_conditions.last_cond(1).item0_no
 If item0(i%).data(0).sig = "*" Then
  If item0(i%).data(0).line_no(0) = item0(i%).data(0).line_no(1) Then
   If item0(i%).data(0).n(1) = item0(i%).data(0).n(2) Then
    For k% = 1 To C_display_picture.m_circle.Count
     If inter_point_line_circle0(m_lin(item0(i%).data(0).line_no(0)).data(0).data0, _
            m_Circ(k%).data(0).data0, tp(0), tp(1)) = 2 Then
        If is_same_two_point(tp(0), tp(1), item0(i%).data(0).poi(0), item0(i%).data(0).poi(3)) Then
          Call pre_add_point_for_line_circle(item0(i%).data(0).poi(1), k%)
        End If
     End If
   Next k%
  End If
 End If
 End If
Next i%
End Sub

Public Sub pre_add_point_for_line_circle(ByVal p%, ByVal c%)
Dim tp(1) As Integer
Dim l%
l% = line_number0(p%, m_Circ(c%).data(0).data0.center, 0, 0)
Call inter_point_line_circle0(m_lin(l%).data(0).data0, m_Circ(c%).data(0).data0, tp(0), tp(1))
If tp(0) = 0 And tp(1) = 0 Then
ElseIf tp(1) = 0 Then
Else
'call inter_point_line_circle2(
End If

End Sub
Public Function simple_general_string(g_string As general_string_data_type, re As total_record_type, _
                                                  is_zero As Byte) As Byte
Dim i%, j%, tn%, no%
Dim ty(1) As Byte
Dim tn_(2) As Integer
Dim ite(3) As Integer
Dim pA(3) As String
Dim tv$
Dim cond_data0 As condition_data_type
Dim dr As relation_data0_type
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
temp_record = re
'If regist_data.run_type = 0 Then
If g_string.value <> "" Then
   If g_string.item(0) > 0 And g_string.item(1) = 0 Then '第一项
      If InStr(1, g_string.para(0), "U", 0) = 0 And InStr(1, g_string.para(0), "V", 0) = 0 Then
       If item0(g_string.item(0)).data(0).value = "" Then
        item0(g_string.item(0)).data(0).is_const = 2
          simple_general_string = max_for_byte(1, set_item0_value(g_string.item(0), 0, 0, "", "", "", g_string.value, 0, _
             re.record_data.data0.condition_data))
              Exit Function
       Else
        If item0(g_string.item(0)).data(0).sig = "~" Then '第一项是单项
           simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 0, _
               g_string.value, temp_record, 0))
                 Exit Function
        ElseIf item0(g_string.item(0)).data(0).sig = "*" Then '第一项是乘积
         If item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(0)).data(0).poi(2) And _
            item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(0)).data(0).poi(3) And _
              item0(g_string.item(0)).data(0).poi(1) <> -10 And g_string.value <> "0" Then  '开方
             simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 0, _
               sqr_string(g_string.value, True, False), temp_record, 0))
                 Exit Function
         Else
          If is_element_value(g_string.item(0), 0, tn%, ty(0), tv$) = 1 Then '第一项是乘积,已知其中一个因子
           If ty(0) = line_value_ Then
            Call add_record_to_record(line_value(tn%).data(0).record.data0.condition_data, _
                                                     temp_record.record_data.data0.condition_data)
           Else
            Call add_record_to_record(tri_function(tn%).data(0).record.data0.condition_data, _
                                                     temp_record.record_data.data0.condition_data)
           End If
            simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 1, _
              divide_string(g_string.value, tv$, True, False), temp_record, 0))
                Exit Function
          ElseIf is_element_value(g_string.item(0), 1, tn%, ty(0), _
               tv$) = 1 Then
           If ty(0) = line_value_ Then
            Call add_record_to_record(line_value(tn%).data(0).record.data0.condition_data, _
                                                       temp_record.record_data.data0.condition_data)
           Else
            Call add_record_to_record(tri_function(tn%).data(0).record.data0.condition_data, _
                                                       temp_record.record_data.data0.condition_data)
           End If
              simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 0, _
               divide_string(g_string.value, tv$, True, False), temp_record, 0))
                Exit Function
           End If
         End If
        ElseIf item0(g_string.item(0)).data(0).sig = "/" Then '第一项是除式
         If item0(g_string.item(0)).data(0).poi(0) = 0 And item0(g_string.item(0)).data(0).poi(1) = 0 Then
            simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 1, _
             divide_string("1", g_string.value, True, False), temp_record, 0))
              Exit Function
         Else
            If is_element_value(g_string.item(0), 0, tn%, ty(0), tv$) = 1 Then
              If ty(0) = line_value_ Then
                Call add_record_to_record(line_value(tn%).data(0).record.data0.condition_data, _
                                                      temp_record.record_data.data0.condition_data)
              Else
                Call add_record_to_record(tri_function(tn%).data(0).record.data0.condition_data, _
                                                      temp_record.record_data.data0.condition_data)
              End If
                simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 1, _
                     divide_string(tv$, g_string.value, True, False), temp_record, 0))
                        Exit Function
             ElseIf is_element_value(g_string.item(0), 1, tn%, ty(0), tv$) = 1 Then
                If ty(0) = line_value_ Then
                   Call add_record_to_record(line_value(tn%).data(0).record.data0.condition_data, _
                       temp_record.record_data.data0.condition_data)
                Else
                   Call add_record_to_record(tri_function(tn%).data(0).record.data0.condition_data, _
                       temp_record.record_data.data0.condition_data)
                End If
                   simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 0, _
                      time_string(g_string.value, tv$, True, False), temp_record, 0))
                        Exit Function
             End If
            End If
           End If
        End If '第一项是除式
        End If
   '*************************************************************************
   '某项的值已知
   ElseIf item0(g_string.item(0)).data(0).value <> "" And g_string.item(0) > 0 Then '多项其中有一项值已知
      Call add_record_to_record( _
         item0(g_string.item(0)).data(0).record_for_value.data0.condition_data, _
                                            temp_record.record_data.data0.condition_data)
       simple_general_string = max_for_byte(1, set_general_string(g_string.item(1), g_string.item(2), _
        g_string.item(3), 0, g_string.para(1), g_string.para(2), g_string.para(3), _
         "0", minus_string(g_string.value, time_string(g_string.para(0), _
          item0(g_string.item(0)).data(0).value, False, False), True, False), 0, 0, 0, temp_record, 0, 0))
              Exit Function
    ElseIf item0(g_string.item(1)).data(0).value <> "" And g_string.item(1) > 0 Then
        Call add_record_to_record( _
            item0(g_string.item(1)).data(0).record_for_value.data0.condition_data, _
                                             temp_record.record_data.data0.condition_data)
        simple_general_string = max_for_byte(1, set_general_string(g_string.item(0), g_string.item(2), _
         g_string.item(3), 0, g_string.para(0), g_string.para(2), g_string.para(3), _
          "0", minus_string(g_string.value, time_string(g_string.para(1), _
            item0(g_string.item(1)).data(0).value, False, False), True, False), 0, 0, 0, temp_record, 0, 0))
              Exit Function
    ElseIf item0(g_string.item(2)).data(0).value <> "" And g_string.item(2) > 0 Then
        Call add_record_to_record( _
           item0(g_string.item(2)).data(0).record_for_value.data0.condition_data, _
                       temp_record.record_data.data0.condition_data)
        simple_general_string = max_for_byte(1, set_general_string(g_string.item(0), g_string.item(1), _
          g_string.item(3), 0, g_string.para(0), g_string.para(1), g_string.para(3), _
           "0", minus_string(g_string.value, time_string(g_string.para(2), _
            item0(g_string.item(2)).data(0).value, False, False), True, False), 0, 0, 0, temp_record, 0, 0))
              Exit Function
    ElseIf item0(g_string.item(3)).data(0).value <> "" And g_string.item(3) > 0 Then
       Call add_record_to_record( _
            item0(g_string.item(3)).data(0).record_for_value.data0.condition_data, _
                                               temp_record.record_data.data0.condition_data)
        simple_general_string = max_for_byte(1, set_general_string(g_string.item(0), g_string.item(1), _
         g_string.item(2), 0, g_string.para(0), g_string.para(1), g_string.para(2), _
          "0", minus_string(g_string.value, time_string(g_string.para(3), _
            item0(g_string.item(3)).data(0).value, False, False), True, False), 0, 0, 0, temp_record, 0, 0))
              Exit Function
    '**************************************************************************************************
    ElseIf g_string.para(2) = "0" And item0(g_string.item(0)).data(0).sig = "~" And _
        item0(g_string.item(1)).data(0).sig = "~" Then
         simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(1), 0, 0, 0, _
          g_string.para(0), g_string.para(1), "0", g_string.value, temp_record)
               Exit Function
    ElseIf g_string.para(3) = "0" And item0(g_string.item(0)).data(0).sig = "~" And _
             item0(g_string.item(1)).data(0).sig = "~" And item0(g_string.item(2)).data(0).sig = "~" Then
         simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(1), 0, g_string.item(2), 0, _
          g_string.para(0), g_string.para(1), g_string.para(2), g_string.value, temp_record)
              Exit Function
    End If
    '***********************************************************************************
   If g_string.value = "0" Then
    If g_string.para(0) = "0" Or g_string.para(1) = "0" Then
     Exit Function
    ElseIf g_string.para(2) = "0" Then
   '&&&&&
      If item0(g_string.item(0)).data(0).sig = "*" And item0(g_string.item(1)).data(0).sig = "~" Then
        If item0(g_string.item(0)).data(0).poi(1) > 0 And _
             item0(g_string.item(1)).data(0).poi(1) > 0 Then
          If is_relation(item0(g_string.item(0)).data(0).poi(0), item0(g_string.item(0)).data(0).poi(1), _
                 item0(g_string.item(1)).data(0).poi(0), item0(g_string.item(1)).data(0).poi(1), _
               item0(g_string.item(0)).data(0).n(0), item0(g_string.item(0)).data(0).n(1), _
                item0(g_string.item(1)).data(0).n(0), item0(g_string.item(1)).data(0).n(1), _
                 item0(g_string.item(0)).data(0).line_no(0), item0(g_string.item(1)).data(0).line_no(0), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
               simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 1, divide_string(time_string("-1", _
                 g_string.para(1), False, False), time_string(tv, g_string.para(0), False, False), _
                  True, False), temp_record, 0))
              Exit Function
          ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
                      item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) Then
              temp_record1 = temp_record
              simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 1, divide_string(time_string("-1", _
                   g_string.para(1), False, False), g_string.para(0), True, False), _
                     temp_record, 0))
                      Exit Function
           ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(0) And _
                      item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(1) Then
              temp_record1 = temp_record
              simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 0, divide_string(time_string("-1", _
                   g_string.para(1), False, False), g_string.para(0), True, False), _
                      temp_record, 0))
              Exit Function
           End If
        ElseIf item0(g_string.item(0)).data(0).poi(3) > 0 And _
                  item0(g_string.item(1)).data(0).poi(1) > 0 Then
           If is_relation(item0(g_string.item(0)).data(0).poi(2), item0(g_string.item(0)).data(0).poi(3), _
                 item0(g_string.item(1)).data(0).poi(0), item0(g_string.item(1)).data(0).poi(1), _
               item0(g_string.item(0)).data(0).n(2), item0(g_string.item(0)).data(0).n(3), _
                item0(g_string.item(1)).data(0).n(0), item0(g_string.item(1)).data(0).n(1), _
                 item0(g_string.item(0)).data(0).line_no(1), item0(g_string.item(1)).data(0).line_no(0), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
           simple_general_string = max_for_byte(1, set_element_value(g_string.item(0), 0, divide_string(time_string("-1", _
             g_string.para(1), False, False), time_string(tv, g_string.para(0), False, False), True, False), _
               temp_record1, 0))
                  Exit Function
         End If
        End If
      ElseIf item0(g_string.item(0)).data(0).sig = "~" And item0(g_string.item(1)).data(0).sig = "*" Then
        If item0(g_string.item(0)).data(0).poi(1) > 0 And item0(g_string.item(1)).data(0).poi(1) > 0 Then
           If is_relation(item0(g_string.item(0)).data(0).poi(0), item0(g_string.item(0)).data(0).poi(1), _
            item0(g_string.item(1)).data(0).poi(0), item0(g_string.item(1)).data(0).poi(1), _
               item0(g_string.item(0)).data(0).n(0), item0(g_string.item(0)).data(0).n(1), _
                item0(g_string.item(1)).data(0).n(0), item0(g_string.item(1)).data(0).n(1), _
                 item0(g_string.item(0)).data(0).line_no(0), item0(g_string.item(1)).data(0).line_no(0), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
             simple_general_string = max_for_byte(1, set_element_value(g_string.item(1), 1, divide_string(time_string("-1", _
                 time_string(tv, g_string.para(0), False, False), False, False), g_string.para(1), True, False), _
                   temp_record1, 0))
              Exit Function
           ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
                      item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) Then
              temp_record1 = temp_record
              simple_general_string = max_for_byte(1, set_element_value(g_string.item(1), 1, divide_string(time_string("-1", _
                   g_string.para(0), False, False), g_string.para(1), True, False), _
                      temp_record, 0))
              Exit Function
           ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(2) And _
                      item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(3) Then
              temp_record1 = temp_record
              simple_general_string = max_for_byte(1, set_element_value(g_string.item(1), 0, divide_string(time_string("-1", _
                   g_string.para(0), False, False), g_string.para(1), True, False), _
                     temp_record, 0))
              Exit Function
           End If
        ElseIf item0(g_string.item(0)).data(0).poi(1) > 0 And _
                    item0(g_string.item(1)).data(0).poi(3) > 0 Then
          If is_relation(item0(g_string.item(0)).data(0).poi(0), item0(g_string.item(0)).data(0).poi(1), _
            item0(g_string.item(1)).data(0).poi(2), item0(g_string.item(1)).data(0).poi(3), _
               item0(g_string.item(0)).data(0).n(0), item0(g_string.item(0)).data(0).n(1), _
                item0(g_string.item(1)).data(0).n(2), item0(g_string.item(1)).data(0).n(3), _
                 item0(g_string.item(0)).data(0).line_no(0), item0(g_string.item(1)).data(0).line_no(1), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
           simple_general_string = max_for_byte(1, set_element_value(g_string.item(1), 0, divide_string(time_string("-1", _
             time_string(tv, g_string.para(0), False, False), False, False), g_string.para(1), True, False), _
                temp_record1, 0))
              Exit Function
          End If
        End If
      ElseIf item0(g_string.item(0)).data(0).sig = "*" And item0(g_string.item(0)).data(0).sig = "*" Then
        If item0(g_string.item(0)).data(0).poi(1) > 0 And item0(g_string.item(0)).data(0).poi(3) > 0 And _
            item0(g_string.item(1)).data(0).poi(1) > 0 And item0(g_string.item(1)).data(0).poi(3) > 0 Then
          If is_relation(item0(g_string.item(0)).data(0).poi(0), item0(g_string.item(0)).data(0).poi(1), _
                 item0(g_string.item(1)).data(0).poi(0), item0(g_string.item(1)).data(0).poi(1), _
               item0(g_string.item(0)).data(0).n(0), item0(g_string.item(0)).data(0).n(1), _
                item0(g_string.item(1)).data(0).n(0), item0(g_string.item(1)).data(0).n(1), _
                 item0(g_string.item(0)).data(0).line_no(0), item0(g_string.item(1)).data(0).line_no(0), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
           simple_general_string = max_for_byte(1, set_multi_element(g_string.item(0), 1, g_string.item(1), 1, 0, 0, _
             time_string(tv, g_string.para(0), True, False), g_string.para(1), "0", "0", temp_record))
              Exit Function
         ElseIf is_relation(item0(g_string.item(0)).data(0).poi(0), item0(g_string.item(0)).data(0).poi(1), _
                 item0(g_string.item(1)).data(0).poi(2), item0(g_string.item(1)).data(0).poi(3), _
               item0(g_string.item(0)).data(0).n(0), item0(g_string.item(0)).data(0).n(1), _
                item0(g_string.item(1)).data(0).n(2), item0(g_string.item(1)).data(0).n(3), _
                 item0(g_string.item(0)).data(0).line_no(0), item0(g_string.item(1)).data(0).line_no(1), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
           simple_general_string = max_for_byte(1, set_multi_element(g_string.item(0), 1, g_string.item(1), 0, 0, 0, _
             time_string(tv, g_string.para(0), True, False), g_string.para(1), "0", "0", temp_record))
              Exit Function
         ElseIf is_relation(item0(g_string.item(0)).data(0).poi(2), item0(g_string.item(0)).data(0).poi(3), _
                 item0(g_string.item(1)).data(0).poi(0), item0(g_string.item(1)).data(0).poi(1), _
               item0(g_string.item(0)).data(0).n(2), item0(g_string.item(0)).data(0).n(3), _
                item0(g_string.item(1)).data(0).n(0), item0(g_string.item(1)).data(0).n(1), _
                 item0(g_string.item(0)).data(0).line_no(1), item0(g_string.item(1)).data(0).line_no(0), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
              simple_general_string = max_for_byte(1, set_multi_element(g_string.item(0), 0, g_string.item(1), 1, 0, 0, _
               time_string(tv, g_string.para(0), True, False), g_string.para(1), "0", "0", temp_record))
                  Exit Function
         ElseIf is_relation(item0(g_string.item(0)).data(0).poi(2), item0(g_string.item(0)).data(0).poi(3), _
                 item0(g_string.item(1)).data(0).poi(2), item0(g_string.item(1)).data(0).poi(3), _
               item0(g_string.item(0)).data(0).n(2), item0(g_string.item(0)).data(0).n(3), _
                item0(g_string.item(1)).data(0).n(3), item0(g_string.item(1)).data(0).n(3), _
                 item0(g_string.item(0)).data(0).line_no(1), item0(g_string.item(1)).data(0).line_no(1), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
            simple_general_string = max_for_byte(1, set_multi_element(g_string.item(0), 0, g_string.item(1), 0, 0, 0, _
             time_string(tv, g_string.para(0), True, False), g_string.para(1), "0", "0", temp_record))
              Exit Function
         ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(0)).data(0).poi(2) And _
                item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(0)).data(0).poi(3) And _
                  item0(g_string.item(1)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(2) And _
                    item0(g_string.item(1)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(3) Then
              simple_general_string = max_for_byte(1, set_Drelation(item0(g_string.item(0)).data(0).poi(0), _
                 item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(0), _
                  item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(0)).data(0).n(0), _
                   item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(0), _
                    item0(g_string.item(1)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(0), _
                     item0(g_string.item(1)).data(0).line_no(0), divide_string( _
                    sqr_string(time_string("-1", g_string.para(1), False, False), False, False), _
                     sqr_string(g_string.para(0), False, False), True, False), temp_record, 0, 0, 0, 0, 0, False))
              Exit Function
         '*********
         ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
                item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) Then
               simple_general_string = max_for_byte(1, set_Drelation(item0(g_string.item(0)).data(0).poi(2), _
                 item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(2), _
                  item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(0)).data(0).n(2), _
                   item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).n(2), _
                    item0(g_string.item(1)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(1), _
                     item0(g_string.item(1)).data(0).line_no(1), divide_string( _
                       time_string("-1", g_string.para(1), False, False), _
                        g_string.para(0), False, False), temp_record, 0, 0, 0, 0, 0, False))
              Exit Function
         '**********
          ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(2) And _
                item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(3) Then
               simple_general_string = max_for_byte(1, set_Drelation(item0(g_string.item(0)).data(0).poi(2), _
                 item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(0), _
                  item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(0)).data(0).n(2), _
                   item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).n(0), _
                    item0(g_string.item(1)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(1), _
                     item0(g_string.item(1)).data(0).line_no(0), divide_string( _
                       time_string("-1", g_string.para(1), False, False), _
                        g_string.para(0), False, False), temp_record, 0, 0, 0, 0, 0, False))
              Exit Function
         '**********
          ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(0) And _
                item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(1) Then
               simple_general_string = max_for_byte(1, set_Drelation(item0(g_string.item(0)).data(0).poi(0), _
                 item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(2), _
                  item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(0)).data(0).n(0), _
                   item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(2), _
                    item0(g_string.item(1)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(0), _
                     item0(g_string.item(1)).data(0).line_no(1), divide_string( _
                       time_string("-1", g_string.para(1), False, False), _
                        g_string.para(0), False, False), temp_record, 0, 0, 0, 0, 0, False))
              Exit Function
         '**********
          ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(2) And _
                item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(3) Then
               simple_general_string = max_for_byte(1, set_Drelation(item0(g_string.item(0)).data(0).poi(0), _
                 item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(0), _
                  item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(0)).data(0).n(0), _
                   item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(0), _
                    item0(g_string.item(1)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(0), _
                     item0(g_string.item(1)).data(0).line_no(0), divide_string( _
                       time_string("-1", g_string.para(1), False, False), _
                        g_string.para(0), False, False), temp_record, 0, 0, 0, 0, 0, False))
              Exit Function
          ElseIf minus_string(g_string.para(0), "1", True, False) = "0" And _
                  minus_string(g_string.para(1), "@1", True, False) = "0" Then
           simple_general_string = max_for_byte(1, set_dpoint_pair( _
           item0(g_string.item(0)).data(0).poi(0), item0(g_string.item(0)).data(0).poi(1), _
            item0(g_string.item(1)).data(0).poi(0), item0(g_string.item(1)).data(0).poi(1), _
             item0(g_string.item(1)).data(0).poi(2), item0(g_string.item(1)).data(0).poi(3), _
              item0(g_string.item(0)).data(0).poi(2), item0(g_string.item(0)).data(0).poi(3), _
           item0(g_string.item(0)).data(0).n(0), item0(g_string.item(0)).data(0).n(1), _
            item0(g_string.item(1)).data(0).n(0), item0(g_string.item(1)).data(0).n(1), _
             item0(g_string.item(1)).data(0).n(2), item0(g_string.item(1)).data(0).n(3), _
              item0(g_string.item(0)).data(0).n(2), item0(g_string.item(0)).data(0).n(3), _
           item0(g_string.item(0)).data(0).line_no(0), item0(g_string.item(1)).data(0).line_no(0), _
            item0(g_string.item(1)).data(0).line_no(1), item0(g_string.item(0)).data(0).line_no(1), _
             1, temp_record, False, 0, 0, 0, 0, False))
              Exit Function
         End If
         ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
                  item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) Then
          simple_general_string = set_general_string_from_2_element(item0(g_string.item(0)).data(0).poi(2), _
           item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(2), _
            item0(g_string.item(1)).data(0).poi(3), g_string.para(0), g_string.para(1), temp_record)
              Exit Function
         ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(2) And _
                  item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(3) Then
          simple_general_string = set_general_string_from_2_element(item0(g_string.item(0)).data(0).poi(2), _
           item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(0), _
            item0(g_string.item(1)).data(0).poi(1), g_string.para(0), g_string.para(1), temp_record)
              Exit Function
         ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(0) And _
                  item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(1) Then
           simple_general_string = set_general_string_from_2_element(item0(g_string.item(0)).data(0).poi(0), _
           item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(2), _
            item0(g_string.item(1)).data(0).poi(3), g_string.para(0), g_string.para(1), temp_record)
              Exit Function
        ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(2) And _
                  item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(3) Then
          simple_general_string = set_general_string_from_2_element(item0(g_string.item(0)).data(0).poi(0), _
           item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(0), _
            item0(g_string.item(1)).data(0).poi(1), g_string.para(0), g_string.para(1), temp_record)
              Exit Function
         End If
       ElseIf item0(g_string.item(0)).data(0).sig = "/" And item0(g_string.item(0)).data(0).sig = "/" Then
         If item0(g_string.item(0)).data(0).poi(1) > 0 And item0(g_string.item(1)).data(0).poi(1) > 0 Then
         If is_relation(item0(g_string.item(0)).data(0).poi(2), item0(g_string.item(0)).data(0).poi(3), _
                 item0(g_string.item(1)).data(0).poi(2), item0(g_string.item(1)).data(0).poi(3), _
               item0(g_string.item(0)).data(0).n(2), item0(g_string.item(0)).data(0).n(3), _
                item0(g_string.item(1)).data(0).n(3), item0(g_string.item(1)).data(0).n(3), _
                 item0(g_string.item(0)).data(0).line_no(1), item0(g_string.item(1)).data(0).line_no(1), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
              simple_general_string = set_Drelation(item0(g_string.item(0)).data(0).poi(0), _
               item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(0), _
                item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(0)).data(0).n(0), _
                 item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(0), _
                  item0(g_string.item(1)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(0), _
                   item0(g_string.item(1)).data(0).line_no(1), divide_string( _
                    time_string("-1", time_string(tv, g_string.para(1), False, False), False, False), _
                     g_string.para(0), True, False), _
                       temp_record1, 0, 0, 0, 0, 0, False)
              Exit Function
          ElseIf is_relation(item0(g_string.item(0)).data(0).poi(0), item0(g_string.item(0)).data(0).poi(1), _
                 item0(g_string.item(1)).data(0).poi(0), item0(g_string.item(1)).data(0).poi(1), _
               item0(g_string.item(0)).data(0).n(0), item0(g_string.item(0)).data(0).n(1), _
                item0(g_string.item(1)).data(0).n(0), item0(g_string.item(1)).data(0).n(1), _
                 item0(g_string.item(0)).data(0).line_no(0), item0(g_string.item(1)).data(0).line_no(0), _
                  tv, tn_(0), -1000, 0, 0, 0, dr, tn_(1), tn_(2), ty(0), record_0.data0.condition_data, 0) Then
             temp_record1 = temp_record
              Call add_conditions_to_record(ty(0), tn_(0), tn_(1), tn_(2), temp_record1.record_data.data0.condition_data)
                 simple_general_string = set_Drelation(item0(g_string.item(1)).data(0).poi(2), _
                   item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(0)).data(0).poi(2), _
                    item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).n(2), _
                     item0(g_string.item(1)).data(0).n(3), item0(g_string.item(0)).data(0).n(2), _
                      item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).line_no(1), _
                       item0(g_string.item(0)).data(0).line_no(1), divide_string( _
                        time_string("-1", g_string.para(1), False, False), _
                         time_string(tv, g_string.para(0), False, False), True, False), _
                          temp_record1, 0, 0, 0, 0, 0, False)
              Exit Function
         ElseIf minus_string(g_string.para(0), "1", True, False) = "0" And _
                 minus_string(g_string.para(1), "-1", True, False) = "0" Then
            simple_general_string = set_dpoint_pair( _
         item0(g_string.item(0)).data(0).poi(0), item0(g_string.item(0)).data(0).poi(1), _
          item0(g_string.item(0)).data(0).poi(2), item0(g_string.item(0)).data(0).poi(3), _
           item0(g_string.item(1)).data(0).poi(0), item0(g_string.item(1)).data(0).poi(1), _
            item0(g_string.item(1)).data(0).poi(2), item0(g_string.item(1)).data(0).poi(3), _
         item0(g_string.item(0)).data(0).n(0), item0(g_string.item(0)).data(0).n(1), _
          item0(g_string.item(0)).data(0).n(2), item0(g_string.item(0)).data(0).n(3), _
           item0(g_string.item(1)).data(0).n(0), item0(g_string.item(1)).data(0).n(1), _
            item0(g_string.item(1)).data(0).n(2), item0(g_string.item(1)).data(0).n(3), _
         item0(g_string.item(0)).data(0).line_no(0), item0(g_string.item(0)).data(0).line_no(1), _
          item0(g_string.item(1)).data(0).line_no(0), item0(g_string.item(1)).data(0).line_no(1), _
            0, temp_record, False, 0, 0, 0, 0, False)
              Exit Function
         End If
         ElseIf item0(g_string.item(0)).data(0).poi(1) = 0 And _
                 item0(g_string.item(1)).data(0).poi(1) = 0 Then
                 simple_general_string = set_Drelation(item0(g_string.item(1)).data(0).poi(2), _
                   item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(0)).data(0).poi(2), _
                    item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).n(2), _
                     item0(g_string.item(1)).data(0).n(3), item0(g_string.item(0)).data(0).n(2), _
                      item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).line_no(1), _
                       item0(g_string.item(0)).data(0).line_no(1), divide_string( _
                        time_string("-1", g_string.para(1), False, False), g_string.para(0), True, False), _
                          temp_record, 0, 0, 0, 0, 0, False)
              Exit Function
         End If
       ElseIf item0(g_string.item(0)).data(0).sig = "~" And item0(g_string.item(0)).data(0).sig = "~" Then
         simple_general_string = set_Drelation(item0(g_string.item(0)).data(0).poi(2), _
          item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(2), _
           item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(0)).data(0).n(2), _
            item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).n(2), _
             item0(g_string.item(1)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(1), _
              item0(g_string.item(1)).data(0).line_no(1), divide_string( _
            time_string("-1", g_string.para(1), False, False), g_string.para(0), True, False), _
             temp_record, 0, 0, 0, 0, 0, False)
              Exit Function
       End If
      ElseIf g_string.para(3) = "0" Then
       If item0(g_string.item(0)).data(0).sig = "*" And item0(g_string.item(1)).data(0).sig = "*" And _
           item0(g_string.item(2)).data(0).sig = "*" Then
         If item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
             item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) And _
              item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(2)).data(0).poi(0) And _
               item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(2)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(0), 1, g_string.item(1), 1, _
              g_string.item(2), 1, g_string.para(0), g_string.para(1), g_string.para(2), "0", _
                 temp_record)
          'simple_general_string = set_three_line_value(item0(g_string.item(0)).data(0).poi(2), _
           item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(2), _
            item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(2)).data(0).poi(2), _
             item0(g_string.item(2)).data(0).poi(3), item0(g_string.item(0)).data(0).n(2), _
              item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).n(2), _
               item0(g_string.item(1)).data(0).n(3), item0(g_string.item(2)).data(0).n(2), _
                item0(g_string.item(2)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(1), _
                 item0(g_string.item(1)).data(0).line_no(1), item0(g_string.item(2)).data(0).line_no(1), _
                  g_string.para(0), g_string.para(1), g_string.para(2), "0", temp_record, 0, 0, 0)
              Exit Function
        ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
             item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) And _
              item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(2)).data(0).poi(2) And _
               item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(2)).data(0).poi(3) Then
          simple_general_string = set_three_line_value(item0(g_string.item(0)).data(0).poi(2), _
           item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(2), _
            item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(2)).data(0).poi(0), _
             item0(g_string.item(2)).data(0).poi(1), item0(g_string.item(0)).data(0).n(2), _
              item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).n(2), _
               item0(g_string.item(1)).data(0).n(3), item0(g_string.item(2)).data(0).n(0), _
                item0(g_string.item(2)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(1), _
                 item0(g_string.item(1)).data(0).line_no(1), item0(g_string.item(2)).data(0).line_no(0), _
                  g_string.para(0), g_string.para(1), g_string.para(2), "0", temp_record, 0, 0, 0)
              Exit Function
         ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(2) And _
             item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(3) And _
              item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(2)).data(0).poi(0) And _
               item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(2)).data(0).poi(1) Then
         simple_general_string = set_multi_element(g_string.item(0), 1, g_string.item(1), 0, _
              g_string.item(2), 1, g_string.para(0), g_string.para(1), g_string.para(2), "0", _
                 temp_record)
         'simple_general_string = set_three_line_value(item0(g_string.item(0)).data(0).poi(2), _
           item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(0), _
            item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(2)).data(0).poi(2), _
             item0(g_string.item(2)).data(0).poi(3), item0(g_string.item(0)).data(0).n(2), _
              item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).n(0), _
               item0(g_string.item(1)).data(0).n(1), item0(g_string.item(2)).data(0).n(2), _
                item0(g_string.item(2)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(1), _
                 item0(g_string.item(1)).data(0).line_no(0), item0(g_string.item(2)).data(0).line_no(1), _
                  g_string.para(0), g_string.para(1), g_string.para(2), "0", temp_record, 0, 0, 0)
              Exit Function
         ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(2) And _
             item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(3) And _
              item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(2)).data(0).poi(2) And _
               item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(2)).data(0).poi(3) Then
          simple_general_string = set_multi_element(g_string.item(0), 1, g_string.item(1), 0, _
              g_string.item(2), 0, g_string.para(0), g_string.para(1), g_string.para(2), "0", _
                 temp_record)
          'simple_general_string = set_three_line_value(item0(g_string.item(0)).data(0).poi(2), _
           item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(0), _
            item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(2)).data(0).poi(0), _
             item0(g_string.item(2)).data(0).poi(1), item0(g_string.item(0)).data(0).n(2), _
              item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).n(0), _
               item0(g_string.item(1)).data(0).n(1), item0(g_string.item(2)).data(0).n(0), _
                item0(g_string.item(2)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(1), _
                 item0(g_string.item(1)).data(0).line_no(0), item0(g_string.item(2)).data(0).line_no(0), _
                  g_string.para(0), g_string.para(1), g_string.para(2), "0", temp_record, 0, 0, 0)
              Exit Function
         ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(0) And _
             item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(1) And _
              item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(2)).data(0).poi(0) And _
               item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(2)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(1), 1, _
              g_string.item(2), 1, g_string.para(0), g_string.para(1), g_string.para(2), "0", _
                 temp_record)
         'simple_general_string = set_three_line_value(item0(g_string.item(0)).data(0).poi(0), _
           item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(2), _
            item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(2)).data(0).poi(2), _
             item0(g_string.item(2)).data(0).poi(3), item0(g_string.item(0)).data(0).n(0), _
              item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(2), _
               item0(g_string.item(1)).data(0).n(3), item0(g_string.item(2)).data(0).n(2), _
                item0(g_string.item(2)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(0), _
                 item0(g_string.item(1)).data(0).line_no(1), item0(g_string.item(2)).data(0).line_no(1), _
                  g_string.para(0), g_string.para(1), g_string.para(2), "0", temp_record, 0, 0, 0)
              Exit Function
         ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(0) And _
             item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(1) And _
              item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(2)).data(0).poi(2) And _
               item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(2)).data(0).poi(3) Then
          simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(1), 1, _
              g_string.item(2), 0, g_string.para(0), g_string.para(1), g_string.para(2), "0", _
                 temp_record)
        ' simple_general_string = set_three_line_value(item0(g_string.item(0)).data(0).poi(0), _
           item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(2), _
            item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(2)).data(0).poi(0), _
             item0(g_string.item(2)).data(0).poi(1), item0(g_string.item(0)).data(0).n(0), _
              item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(2), _
               item0(g_string.item(1)).data(0).n(3), item0(g_string.item(2)).data(0).n(0), _
                item0(g_string.item(2)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(0), _
                 item0(g_string.item(1)).data(0).line_no(1), item0(g_string.item(2)).data(0).line_no(0), _
                  g_string.para(0), g_string.para(1), g_string.para(2), "0", temp_record, 0, 0, 0)
              Exit Function
         ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(2) And _
             item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(3) And _
              item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(2)).data(0).poi(0) And _
               item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(2)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(1), 0, _
              g_string.item(2), 1, g_string.para(0), g_string.para(1), g_string.para(2), "0", _
                 temp_record)
  '         simple_general_string = set_three_line_value(item0(g_string.item(0)).data(0).poi(0), _
           item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(0), _
            item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(2)).data(0).poi(2), _
             item0(g_string.item(2)).data(0).poi(3), item0(g_string.item(0)).data(0).n(0), _
              item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(0), _
               item0(g_string.item(1)).data(0).n(1), item0(g_string.item(2)).data(0).n(2), _
                item0(g_string.item(2)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(0), _
                 item0(g_string.item(1)).data(0).line_no(0), item0(g_string.item(2)).data(0).line_no(1), _
                  g_string.para(0), g_string.para(1), g_string.para(2), "0", temp_record, 0, 0, 0)
              Exit Function
         ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(2) And _
             item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(3) And _
              item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(2)).data(0).poi(2) And _
               item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(2)).data(0).poi(3) Then
           simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(1), 0, _
              g_string.item(2), 0, g_string.para(0), g_string.para(1), g_string.para(2), "0", _
                 temp_record)
        '  simple_general_string = set_three_line_value(item0(g_string.item(0)).data(0).poi(0), _
           item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(0), _
            item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(2)).data(0).poi(0), _
             item0(g_string.item(2)).data(0).poi(1), item0(g_string.item(0)).data(0).n(0), _
              item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(0), _
               item0(g_string.item(1)).data(0).n(1), item0(g_string.item(2)).data(0).n(0), _
                item0(g_string.item(2)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(0), _
                 item0(g_string.item(1)).data(0).line_no(0), item0(g_string.item(2)).data(0).line_no(0), _
                  g_string.para(0), g_string.para(1), g_string.para(2), "0", temp_record, 0, 0, 0)
              Exit Function
         End If
       ElseIf item0(g_string.item(0)).data(0).sig = "~" Then
        If item0(g_string.item(1)).data(0).poi(0) = item0(g_string.item(0)).data(0).poi(0) And _
            item0(g_string.item(1)).data(0).poi(1) = item0(g_string.item(0)).data(0).poi(1) And _
              item0(g_string.item(2)).data(0).poi(0) = item0(g_string.item(0)).data(0).poi(0) And _
               item0(g_string.item(2)).data(0).poi(1) = item0(g_string.item(0)).data(0).poi(1) Then
           simple_general_string = set_multi_element(g_string.item(1), 1, g_string.item(2), 1, _
              0, 0, g_string.para(1), g_string.para(2), "0", _
                  time_string("-1", g_string.para(0), True, False), temp_record)
         'simple_general_string = set_two_line_value(item0(g_string.item(1)).data(0).poi(2), _
             item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(2)).data(0).poi(2), _
              item0(g_string.item(2)).data(0).poi(3), item0(g_string.item(1)).data(0).n(2), _
               item0(g_string.item(1)).data(0).n(3), item0(g_string.item(2)).data(0).n(2), _
                item0(g_string.item(2)).data(0).n(3), item0(g_string.item(1)).data(0).line_no(1), _
                 item0(g_string.item(2)).data(0).line_no(1), g_string.para(1), g_string.para(2), _
                  time_string("-1", g_string.para(0), True, False), temp_record, 0, 0)
              Exit Function
        ElseIf item0(g_string.item(1)).data(0).poi(0) = item0(g_string.item(0)).data(0).poi(0) And _
            item0(g_string.item(1)).data(0).poi(1) = item0(g_string.item(0)).data(0).poi(1) And _
              item0(g_string.item(2)).data(0).poi(2) = item0(g_string.item(0)).data(0).poi(0) And _
               item0(g_string.item(2)).data(0).poi(3) = item0(g_string.item(0)).data(0).poi(1) Then
           simple_general_string = set_multi_element(g_string.item(1), 1, g_string.item(2), 0, _
              0, 0, g_string.para(1), g_string.para(2), "0", _
                  time_string("-1", g_string.para(0), True, False), temp_record)
          'simple_general_string = set_two_line_value(item0(g_string.item(1)).data(0).poi(2), _
             item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(2)).data(0).poi(0), _
              item0(g_string.item(2)).data(0).poi(1), item0(g_string.item(1)).data(0).n(2), _
               item0(g_string.item(1)).data(0).n(3), item0(g_string.item(2)).data(0).n(0), _
                item0(g_string.item(2)).data(0).n(1), item0(g_string.item(1)).data(0).line_no(1), _
                 item0(g_string.item(2)).data(0).line_no(0), g_string.para(1), g_string.para(2), _
                  time_string("-1", g_string.para(0), True, False), temp_record, 0, 0)
              Exit Function
        ElseIf item0(g_string.item(1)).data(0).poi(2) = item0(g_string.item(0)).data(0).poi(0) And _
            item0(g_string.item(1)).data(0).poi(3) = item0(g_string.item(0)).data(0).poi(1) And _
              item0(g_string.item(2)).data(0).poi(0) = item0(g_string.item(0)).data(0).poi(0) And _
               item0(g_string.item(2)).data(0).poi(1) = item0(g_string.item(0)).data(0).poi(1) Then
           simple_general_string = set_multi_element(g_string.item(1), 0, g_string.item(2), 1, _
              0, 0, g_string.para(1), g_string.para(2), "0", _
                  time_string("-1", g_string.para(0), True, False), temp_record)
          'simple_general_string = set_two_line_value(item0(g_string.item(1)).data(0).poi(0), _
             item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(2)).data(0).poi(2), _
              item0(g_string.item(2)).data(0).poi(3), item0(g_string.item(1)).data(0).n(0), _
               item0(g_string.item(1)).data(0).n(1), item0(g_string.item(2)).data(0).n(2), _
                item0(g_string.item(2)).data(0).n(3), item0(g_string.item(1)).data(0).line_no(0), _
                 item0(g_string.item(2)).data(0).line_no(1), g_string.para(1), g_string.para(2), _
                  time_string("-1", g_string.para(0), True, False), temp_record, 0, 0)
              Exit Function
        ElseIf item0(g_string.item(1)).data(0).poi(2) = item0(g_string.item(0)).data(0).poi(0) And _
            item0(g_string.item(1)).data(0).poi(3) = item0(g_string.item(0)).data(0).poi(1) And _
              item0(g_string.item(2)).data(0).poi(2) = item0(g_string.item(0)).data(0).poi(0) And _
               item0(g_string.item(2)).data(0).poi(3) = item0(g_string.item(0)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(1), 0, g_string.item(2), 0, _
              0, 0, g_string.para(1), g_string.para(2), "0", _
                  time_string("-1", g_string.para(0), True, False), temp_record)
        ' simple_general_string = set_two_line_value(item0(g_string.item(1)).data(0).poi(0), _
             item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(2)).data(0).poi(0), _
              item0(g_string.item(2)).data(0).poi(1), item0(g_string.item(1)).data(0).n(0), _
               item0(g_string.item(1)).data(0).n(1), item0(g_string.item(2)).data(0).n(0), _
                item0(g_string.item(2)).data(0).n(1), item0(g_string.item(1)).data(0).line_no(0), _
                 item0(g_string.item(2)).data(0).line_no(0), g_string.para(1), g_string.para(2), _
                  time_string("-1", g_string.para(0), True, False), temp_record, 0, 0)
              Exit Function
          End If
       ElseIf item0(g_string.item(1)).data(0).sig = "~" Then
        If item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
            item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) And _
              item0(g_string.item(2)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
               item0(g_string.item(2)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) Then
         simple_general_string = set_multi_element(g_string.item(0), 1, g_string.item(2), 1, _
              0, 0, g_string.para(0), g_string.para(2), "0", _
                  time_string("-1", g_string.para(1), True, False), temp_record)
'         simple_general_string = set_two_line_value(item0(g_string.item(0)).data(0).poi(2), _
             item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(2)).data(0).poi(2), _
              item0(g_string.item(2)).data(0).poi(3), item0(g_string.item(0)).data(0).n(2), _
               item0(g_string.item(0)).data(0).n(3), item0(g_string.item(2)).data(0).n(2), _
                item0(g_string.item(2)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(1), _
                 item0(g_string.item(2)).data(0).line_no(1), g_string.para(0), g_string.para(2), _
                  time_string("-1", g_string.para(1), True, False), temp_record, 0, 0)
              Exit Function
        ElseIf item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
            item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) And _
              item0(g_string.item(2)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(0) And _
               item0(g_string.item(2)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(0), 1, g_string.item(2), 0, _
              0, 0, g_string.para(0), g_string.para(2), "0", _
                  time_string("-1", g_string.para(1), True, False), temp_record)
         'simple_general_string = set_two_line_value(item0(g_string.item(0)).data(0).poi(2), _
             item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(2)).data(0).poi(0), _
              item0(g_string.item(2)).data(0).poi(1), item0(g_string.item(0)).data(0).n(2), _
               item0(g_string.item(0)).data(0).n(3), item0(g_string.item(2)).data(0).n(0), _
                item0(g_string.item(2)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(1), _
                 item0(g_string.item(2)).data(0).line_no(0), g_string.para(0), g_string.para(2), _
                  time_string("-1", g_string.para(1), True, False), temp_record, 0, 0)
              Exit Function
        ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(0) And _
            item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(1) And _
              item0(g_string.item(2)).data(0).poi(0) = item0(g_string.item(1)).data(0).poi(0) And _
               item0(g_string.item(2)).data(0).poi(1) = item0(g_string.item(1)).data(0).poi(1) Then
         simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(2), 1, _
              0, 0, g_string.para(0), g_string.para(2), "0", _
                  time_string("-1", g_string.para(1), True, False), temp_record)
         ' simple_general_string = set_two_line_value(item0(g_string.item(0)).data(0).poi(0), _
             item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(2)).data(0).poi(2), _
              item0(g_string.item(2)).data(0).poi(3), item0(g_string.item(0)).data(0).n(0), _
               item0(g_string.item(0)).data(0).n(1), item0(g_string.item(2)).data(0).n(2), _
                item0(g_string.item(2)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(0), _
                 item0(g_string.item(2)).data(0).line_no(1), g_string.para(0), g_string.para(2), _
                  time_string("-1", g_string.para(1), True, False), temp_record, 0, 0)
              Exit Function
        ElseIf item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(0) And _
            item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(1) And _
              item0(g_string.item(2)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(0) And _
               item0(g_string.item(2)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(2), 0, _
              0, 0, g_string.para(0), g_string.para(2), "0", _
                  time_string("-1", g_string.para(1), True, False), temp_record)
         'simple_general_string = set_two_line_value(item0(g_string.item(0)).data(0).poi(0), _
             item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(2)).data(0).poi(0), _
              item0(g_string.item(2)).data(0).poi(1), item0(g_string.item(0)).data(0).n(0), _
               item0(g_string.item(0)).data(0).n(1), item0(g_string.item(2)).data(0).n(0), _
                item0(g_string.item(2)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(0), _
                 item0(g_string.item(2)).data(0).line_no(0), g_string.para(0), g_string.para(2), _
                  time_string("-1", g_string.para(1), True, False), temp_record, 0, 0)
              Exit Function
        End If
       ElseIf item0(g_string.item(2)).data(0).sig = "~" Then
        If item0(g_string.item(1)).data(0).poi(0) = item0(g_string.item(2)).data(0).poi(0) And _
            item0(g_string.item(1)).data(0).poi(1) = item0(g_string.item(2)).data(0).poi(1) And _
              item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(2)).data(0).poi(0) And _
               item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(2)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(0), 1, g_string.item(1), 1, _
              0, 0, g_string.para(0), g_string.para(1), "0", _
                  time_string("-1", g_string.para(2), True, False), temp_record)
 '         simple_general_string = set_two_line_value(item0(g_string.item(0)).data(0).poi(2), _
             item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(2), _
              item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(0)).data(0).n(2), _
               item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).n(2), _
                item0(g_string.item(1)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(1), _
                 item0(g_string.item(1)).data(0).line_no(1), g_string.para(0), g_string.para(1), _
                  time_string("-1", g_string.para(2), True, False), temp_record, 0, 0)
              Exit Function
       ElseIf item0(g_string.item(1)).data(0).poi(0) = item0(g_string.item(2)).data(0).poi(0) And _
            item0(g_string.item(1)).data(0).poi(1) = item0(g_string.item(2)).data(0).poi(1) And _
              item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(2)).data(0).poi(0) And _
               item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(2)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(0), 1, g_string.item(1), 0, _
              0, 0, g_string.para(0), g_string.para(1), "0", _
                  time_string("-1", g_string.para(2), True, False), temp_record)
          ' simple_general_string = set_two_line_value(item0(g_string.item(0)).data(0).poi(0), _
             item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(2), _
              item0(g_string.item(1)).data(0).poi(3), item0(g_string.item(0)).data(0).n(0), _
               item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(2), _
                item0(g_string.item(1)).data(0).n(3), item0(g_string.item(0)).data(0).line_no(0), _
                 item0(g_string.item(1)).data(0).line_no(1), g_string.para(0), g_string.para(1), _
                  time_string("-1", g_string.para(2), True, False), temp_record, 0, 0)
              Exit Function
        ElseIf item0(g_string.item(1)).data(0).poi(2) = item0(g_string.item(2)).data(0).poi(0) And _
            item0(g_string.item(1)).data(0).poi(3) = item0(g_string.item(2)).data(0).poi(1) And _
              item0(g_string.item(0)).data(0).poi(0) = item0(g_string.item(2)).data(0).poi(0) And _
               item0(g_string.item(0)).data(0).poi(1) = item0(g_string.item(2)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(1), 1, _
              0, 0, g_string.para(0), g_string.para(1), "0", _
                  time_string("-1", g_string.para(2), True, False), temp_record)
           ' simple_general_string = set_two_line_value(item0(g_string.item(0)).data(0).poi(2), _
             item0(g_string.item(0)).data(0).poi(3), item0(g_string.item(1)).data(0).poi(0), _
              item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(0)).data(0).n(2), _
               item0(g_string.item(0)).data(0).n(3), item0(g_string.item(1)).data(0).n(0), _
                item0(g_string.item(1)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(1), _
                 item0(g_string.item(1)).data(0).line_no(0), g_string.para(0), g_string.para(1), _
                  time_string("-1", g_string.para(2), True, False), temp_record, 0, 0)
              Exit Function
       ElseIf item0(g_string.item(1)).data(0).poi(2) = item0(g_string.item(2)).data(0).poi(0) And _
            item0(g_string.item(1)).data(0).poi(3) = item0(g_string.item(2)).data(0).poi(1) And _
              item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(2)).data(0).poi(0) And _
               item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(2)).data(0).poi(1) Then
          simple_general_string = set_multi_element(g_string.item(0), 0, g_string.item(1), 0, _
              0, 0, g_string.para(0), g_string.para(1), "0", _
                  time_string("-1", g_string.para(2), True, False), temp_record)
'           simple_general_string = set_two_line_value(item0(g_string.item(0)).data(0).poi(0), _
             item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(0), _
              item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(0)).data(0).n(0), _
               item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(0), _
                item0(g_string.item(1)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(0), _
                 item0(g_string.item(1)).data(0).line_no(0), g_string.para(0), g_string.para(1), _
                  time_string("-1", g_string.para(2), True, False), temp_record, 0, 0)
              Exit Function
        End If
       ElseIf item0(g_string.item(0)).data(0).sig = "/" And item0(g_string.item(1)).data(0).sig = "/" And _
           item0(g_string.item(2)).data(0).sig = "/" Then
         If item0(g_string.item(0)).data(0).poi(2) = item0(g_string.item(1)).data(0).poi(2) And _
             item0(g_string.item(0)).data(0).poi(3) = item0(g_string.item(1)).data(0).poi(3) And _
              item0(g_string.item(0)).data(2).poi(2) = item0(g_string.item(1)).data(0).poi(2) And _
               item0(g_string.item(0)).data(2).poi(3) = item0(g_string.item(1)).data(0).poi(3) Then
         simple_general_string = set_multi_element(g_string.item(0), 1, g_string.item(1), 1, _
               g_string.item(2), 1, g_string.para(0), g_string.para(1), g_string.para(2), _
                  "0", temp_record)
     
          'simple_general_string = set_three_line_value(item0(g_string.item(0)).data(0).poi(0), _
           item0(g_string.item(0)).data(0).poi(1), item0(g_string.item(1)).data(0).poi(0), _
            item0(g_string.item(1)).data(0).poi(1), item0(g_string.item(2)).data(0).poi(0), _
             item0(g_string.item(2)).data(0).poi(1), item0(g_string.item(0)).data(0).n(0), _
              item0(g_string.item(0)).data(0).n(1), item0(g_string.item(1)).data(0).n(0), _
               item0(g_string.item(1)).data(0).n(1), item0(g_string.item(2)).data(0).n(0), _
                item0(g_string.item(2)).data(0).n(1), item0(g_string.item(0)).data(0).line_no(0), _
                 item0(g_string.item(1)).data(0).line_no(0), item0(g_string.item(2)).data(0).line_no(0), _
                  g_string.para(0), g_string.para(1), g_string.para(2), "0", temp_record, 0, 0, 0)
              Exit Function
         End If
       End If
      End If
    End If
   'End If
 Else
   tv$ = "0"
    For i% = 0 To 3
     If g_string.para(i%) <> "0" And g_string.item(i%) = 0 Then
      tv$ = add_string(tv$, g_string.para(i%), True, False)
     End If
   Next i%
   If tv$ <> "0" Then
    For i% = 0 To 2
     If g_string.item(i%) = 0 Then
      For j% = i% + 1 To 3
       g_string.item(j% - 1) = g_string.item(j%)
        g_string.para(j% - 1) = g_string.para(j%)
      Next j%
       g_string.item(3) = 0
        g_string.para(3) = "0"
     End If
    Next i%
    For i% = 0 To 1
     If g_string.item(i%) = 0 Then
      For j% = i% + 1 To 2
       g_string.item(j% - 1) = g_string.item(j%)
        g_string.para(j% - 1) = g_string.para(j%)
      Next j%
       g_string.item(2) = 0
        g_string.para(2) = "0"
      End If
     Next i%
     If g_string.item(0) = 0 Then
       g_string.item(0) = g_string.item(1)
        g_string.para(0) = g_string.para(1)
          g_string.item(1) = 0
        g_string.para(1) = "0"
      End If
      If g_string.item(0) = 0 Then
        g_string.para(0) = tv$
         g_string.value = tv$
           is_zero = 2
      ElseIf g_string.item(1) = 0 Then
       g_string.para(1) = tv$
      ElseIf g_string.item(2) = 0 Then
       g_string.para(2) = tv$
      ElseIf g_string.item(3) = 0 Then
       g_string.para(3) = tv$
      End If
  End If
  If g_string.para(0) = "0" And g_string.para(1) = "0" And g_string.para(2) = "0" And g_string.para(3) = "0" Then
    If re.record_data.data0.condition_data.condition_no < 8 Then
   If re.record_data.data0.condition_data.condition(re.record_data.data0.condition_data.condition_no).ty = general_string_ Then
    no% = re.record_data.data0.condition_data.condition(re.record_data.data0.condition_data.condition_no).no
     For i% = 1 To re.record_data.data0.condition_data.condition_no - 1
     Call add_conditions_to_record(re.record_data.data0.condition_data.condition(i%).ty, _
         re.record_data.data0.condition_data.condition(i%).no, 0, 0, _
            general_string(no%).data(0).record.data0.condition_data)
     Next i%
     general_string(no%).data(0).value = "0"
     Call set_level(general_string(no%).data(0).record.data0.condition_data)
      simple_general_string = is_con_general_string(no%)
          If simple_general_string > 1 Then
             simple_general_string = True
              Exit Function
          End If
   End If
  End If
 End If
 End If
'tn_(0) = 0
' tn_(1) = 0
' For i% = 0 To 3
'  If g_string.item(i%) > 0 Then
'   tn_(0) = tn_(0) + 1
'    If item0(g_string.item(i%)).data(0).sig = "+" Or _
         item0(g_string.item(i%)).data(0).sig = "-" Then
'          tn_(1) = tn_(1) + 1
'    ElseIf item0(g_string.item(i%)).data(0).sig = "~" Then
'       If item0(g_string.item(i%)).data(0).poi(1) = -1 Then
'        If item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "+" Or _
         item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "-" Then
'          tn_(1) = tn_(1) + 1
'        End If
'       End If
'    ElseIf item0(g_string.item(i%)).data(0).sig = "*" Then
'       If item0(g_string.item(i%)).data(0).poi(1) = -1 And _
        (item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "+" Or _
         item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "-") And _
          item0(g_string.item(i%)).data(0).poi(3) = -1 And _
           (item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "+" Or _
            item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "-") Then
'             tn_(1) = tn_(1) + 3
'       ElseIf item0(g_string.item(i%)).data(0).poi(1) = -1 And _
        (item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "+" Or _
         item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "-") Then
'          tn_(1) = tn_(1) + 1
'       ElseIf item0(g_string.item(i%)).data(0).poi(3) = -1 And _
        (item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "+" Or _
         item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "-") Then
'          tn_(1) = tn_(1) + 1
'       End If
'  End If
'  End If
' Next i%
' If tn_(1) > 0 Then
'  If tn_(0) + tn_(1) > 4 Then
'     simple_general_string = True
'       Exit Function
'  Else
'   tn_(1) = 0
'   For i% = 0 To tn_(0) - 1
'    If item0(g_string.item(i%)).data(0).sig = "+" Then
'     Call set_item0(item0(g_string.item(i%)).data(0).poi(0), item0(g_string.item(i%)).data(0).poi(1), _
         0, 0, "~", item0(g_string.item(i%)).data(0).n(0), item0(g_string.item(i%)).data(0).n(1), 0, 0, _
          item0(g_string.item(i%)).data(0).line_no(0), 0, "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
'       pa(tn_(1)) = g_string.para(i%)
'             tn_(1) = tn_(1) + 1
'     Call set_item0(g_string.item(i%).data(0).poi(2), g_string.item(i%).data(0).poi(3), _
         0, 0, "~", g_string.item(i%).data(0).n(2), g_string.item(i%).data(0).n(3), 0, 0, _
          g_string.item(i%).data(0).line_no(1), 0, "1", "1", "1", "", "1", 0, cond_data0, 0, item(tn_(1)), 0)
'       pa(tn_(1)) = g_string.para(i%)
'             tn_(1) = tn_(1) + 1
'    ElseIf item0(g_string.item(i%)).data(0).sig = "-" Then
'     Call set_item0(g_string.item(i%).data(0).poi(0), g_string.item(i%).data(0).poi(1), _
'         0, 0, "~", g_string.item(i%).data(0).n(0), g_string.item(i%).data(0).n(1), 0, 0, _
          g_string.item(i%).data(0).line_no(0), 0, "1", "1", "1", "", "1", 0, cond_data0, 0, item(tn_(1)), 0)
'       pa(tn_(1)) = g_string.para(i%)
'             tn_(1) = tn_(1) + 1
'     Call set_item0(g_string.item(i%).data(0).poi(2), g_string.item(i%).data(0).poi(3), _
         0, 0, "~", g_string.item(i%).data(0).n(2), g_string.item(i%).data(0).n(3), 0, 0, _
          g_string.item(i%).data(0).line_no(1), 0, "1", "1", "1", "", "1", 0, cond_data0, 0, item(tn_(1)), 0)
'       pa(tn_(1)) = time_string("-1", g_string.para(i%), True, False)
'             tn_(1) = tn_(1) + 1
'    ElseIf item0(g_string.item(i%)).data(0).sig = "~" Then
'     If item0(g_string.item(i%)).data(0).poi(1) = -1 Then
'      ite(tn_(1)) = item0(g_string.item(i%)).data(0).poi(0)
'     Else
'      ite(tn_(1)) = g_string.item(i%)
'     End If
'      pa(tn_(1)) = g_string.para(i%)
'    ElseIf item0(g_string.item(i%)).data(0).sig = "*" Then
'      If item0(g_string.item(i%)).data(0).poi(1) = -1 And _
           item0(g_string.item(i%)).data(0).poi(3) = -1 Then
'         If item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "+" Then
'            If item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "+" Then
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(0), _
                item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(0), _
                  item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(1), "*", _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(1), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(0), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(1), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(0), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(0), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
'               pa(tn_(1)) = g_string.para(i%)
'               tn_(1) = tn_(1) + 1
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(2), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(3), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(2), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(3), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(0), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(1), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
'               pa(tn_(1)) = g_string.para(i%)
'                tn_(1) = tn_(1) + 1
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(3), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(0), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(1), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(3), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(0), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(1), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(0), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
'               pa(tn_(1)) = g_string.para(i%)
'                tn_(1) = tn_(1) + 1
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(3), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(2), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(3), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(3), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(2), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(3), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(1), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
'               pa(tn_(1)) = g_string.para(i%)
'                tn_(1) = tn_(1) + 1
'            ElseIf item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "-" Then
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(0), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(1), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(0), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(1), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(0), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(0), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
'               pa(tn_(1)) = g_string.para(i%)
'               tn_(1) = tn_(1) + 1
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(2), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(3), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(2), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(3), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(0), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(1), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
'               pa(tn_(1)) = time_string("-1", g_string.para(i%), True, False)
 '               tn_(1) = tn_(1) + 1
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(3), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(0), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(1), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(3), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(0), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(1), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(0), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
'               pa(tn_(1)) = g_string.para(i%)
''                tn_(1) = tn_(1) + 1
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(3), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(2), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(3), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(3), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(2), _
                 item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(3), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(1), _
                item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(1), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
 '              pa(tn_(1)) = time_string("-1", g_string.para(i%), True, False)
 '               tn_(1) = tn_(1) + 1
 '           Else
 '           End If
 '       ElseIf item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "-" Then
'            If item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "+" Then
'            ElseIf item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "-" Then
'            Else
 '           End If
'         Else
'            If item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "+" Then
'            ElseIf item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "-" Then
'            Else
'            End If
'         End If
'      ElseIf item0(g_string.item(i%)).data(0).poi(1) = -1 Then
'            If item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "+" Then
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(1), _
                item0(g_string.item(i%)).data(0).poi(2), _
                 item0(g_string.item(i%)).data(0).poi(3), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(1), _
                 item0(g_string.item(i%)).data(0).n(2), _
                  item0(g_string.item(i%)).data(0).n(3), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(0), _
                 item0(g_string.item(i%)).data(0).line_no(1), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
'               pa(tn_(1)) = g_string.para(i%)
'               tn_(1) = tn_(1) + 1
'             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(2), _
                 item0(g_string.item(i%)).data(0).poi(2), _
                  item0(g_string.item(i%)).data(0).poi(3), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(3), _
                 item0(g_string.item(i%)).data(0).n(2), _
                  item0(g_string.item(i%)).data(0).n(3), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(1), _
               item0(g_string.item(i%)).data(0).line_no(1), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
 '              pa(tn_(1)) = g_string.para(i%)
 '               tn_(1) = tn_(1) + 1
 '           ElseIf item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).sig = "-" Then
 '             Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(1), _
                item0(g_string.item(i%)).data(0).poi(2), _
                 item0(g_string.item(i%)).data(0).poi(3), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(0), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(1), _
                 item0(g_string.item(i%)).data(0).n(2), _
                  item0(g_string.item(i%)).data(0).n(3), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(0), _
                 item0(g_string.item(i%)).data(0).line_no(1), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
 '              pa(tn_(1)) = g_string.para(i%)
 '              tn_(1) = tn_(1) + 1
 '            Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).poi(2), _
                 item0(g_string.item(i%)).data(0).poi(2), _
                  item0(g_string.item(i%)).data(0).poi(3), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(2), _
               item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).n(3), _
                 item0(g_string.item(i%)).data(0).n(2), _
                  item0(g_string.item(i%)).data(0).n(3), _
              item0(item0(g_string.item(i%)).data(0).poi(0)).data(0).line_no(1), _
               item0(g_string.item(i%)).data(0).line_no(1), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
 '              pa(tn_(1)) = time_string(g_string.para(i%), "-1", True, False)
 '               tn_(1) = tn_(1) + 1
 '           Else
 '           End If
 '    ElseIf item0(g_string.item(i%)).data(0).poi(3) = -1 Then
 '           If item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "+" Then
 '            Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(0), _
               item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(1), _
                item0(g_string.item(i%)).data(0).poi(0), _
                 item0(g_string.item(i%)).data(0).poi(1), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(0), _
               item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(1), _
                 item0(g_string.item(i%)).data(0).n(0), _
                  item0(g_string.item(i%)).data(0).n(1), _
              item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(0), _
                 item0(g_string.item(i%)).data(0).line_no(0), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
 '              pa(tn_(1)) = g_string.para(i%)
 '              tn_(1) = tn_(1) + 1
 '            Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(2), _
               item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(2), _
                 item0(g_string.item(i%)).data(0).poi(0), _
                  item0(g_string.item(i%)).data(0).poi(1), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(2), _
               item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(3), _
                 item0(g_string.item(i%)).data(0).n(0), _
                  item0(g_string.item(i%)).data(0).n(1), _
              item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(1), _
               item0(g_string.item(i%)).data(0).line_no(0), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
 '              pa(tn_(1)) = g_string.para(i%)
 '               tn_(1) = tn_(1) + 1
 '           ElseIf item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).sig = "-" Then
 '            Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(0), _
               item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(1), _
                item0(g_string.item(i%)).data(0).poi(0), _
                 item0(g_string.item(i%)).data(0).poi(1), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(0), _
               item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(1), _
                 item0(g_string.item(i%)).data(0).n(0), _
                  item0(g_string.item(i%)).data(0).n(1), _
              item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(0), _
                 item0(g_string.item(i%)).data(0).line_no(0), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
 '              pa(tn_(1)) = g_string.para(i%)
 '              tn_(1) = tn_(1) + 1
 '            Call set_item0(item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(2), _
               item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).poi(2), _
                 item0(g_string.item(i%)).data(0).poi(0), _
                  item0(g_string.item(i%)).data(0).poi(1), "*", _
              item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(2), _
               item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).n(3), _
                 item0(g_string.item(i%)).data(0).n(0), _
                  item0(g_string.item(i%)).data(0).n(1), _
              item0(item0(g_string.item(i%)).data(0).poi(2)).data(0).line_no(1), _
               item0(g_string.item(i%)).data(0).line_no(0), _
                  "1", "1", "1", "", "1", 0, cond_data0, 0, ite(tn_(1)), 0)
  '             pa(tn_(1)) = time_string(g_string.para(i%), "-1", True, False)
  '              tn_(1) = tn_(1) + 1
  '          Else
  '          End If
  '  End If
  '  Else
  '   ite(tn_(1)) = g_string.item(i%)
  '   pa(tn_(1)) = g_string.para(i%)
  '   tn_(1) = tn_(1) + 1
  '  End If
  ' Next i%
  'End If
 'End If
  'If g_string.item(0) = 0 Then
   'temp_record1.record_data = general_string(temp_record.record_data.data0.condition_data.condition(1).no).data(0).record
   ' For i% = 2 To 8
    ' If temp_record.record_data.data0.condition_data.condition(i%).ty > 0 Then
     ' Call add_conditions_to_record(temp_record.record_data.data0.condition_data.condition(i%).ty, _
               temp_record.record_data.data0.condition_data.condition(i%).no, 0, 0, temp_record1.record_data.data0.condition_data)
     'End If
   ' Next i%
    'Call set_level(temp_record1.record_data)
    ' If concl_no > 0 Then
    '  If conclusion_no(concl_no - 1) > 0 Then
         '  If general_string(concl_no - 1).data(0).record.data0.level > _
               temp_record1.record_data.data0.level Then
              '  general_string(temp_record.record_data.data0.condition_data.condition(1).no).data(0).record = temp_record1.record_data
                 'general_string(temp_record.record_data.data0.condition_data.condition(1).no).data(0).value = tv$
                  'conclusion_no(concl_no - 1) = temp_record.record_data.data0.condition_data.condition(1).no
             'For i% = 0 To last_conclusion - 1
                   '判断是否全部证明完毕
              'If conclusion_no(i%) = 0 Then
              '  Exit Function
              'End If
            ' Next i%
              ' simple_general_string = 2
              '  Exit Function
           'End If
      'End If
    'End If
    'End If
 'End If
End Function

Public Function set_multi_element(ByVal it1%, ByVal p1%, ByVal it2%, ByVal p2%, ByVal it3%, ByVal p3%, _
                                        ByVal pA1$, ByVal pA2$, ByVal pa3$, ByVal v$, re As total_record_type) As Byte
Dim ite(3) As Integer
Dim t_item0(2) As item0_data_type
Dim cond_data0 As condition_data_type
Dim para(3) As String
If v$ <> "0" Then
  Exit Function
End If
If it1% = 0 And it2% > 0 Then
 Call exchange_two_integer(it1%, it2%)
 Call exchange_two_integer(p1%, p2%)
 Call exchange_string(pA1$, pA2$)
End If
If it2% = 0 And it3% > 0 Then
 Call exchange_two_integer(it2%, it3%)
 Call exchange_two_integer(p2%, p3%)
 Call exchange_string(pA2$, pa3$)
End If
If it1% = 0 And it2% > 0 Then
 Call exchange_two_integer(it1%, it2%)
 Call exchange_two_integer(p1%, p2%)
 Call exchange_string(pA1$, pA2$)
End If
'******************************************
t_item0(0) = item0(it1%).data(0)
t_item0(1) = item0(it2%).data(0)
t_item0(2) = item0(it3%).data(0)
'*************************************
If t_item0(0).poi(2 * p1% + 1) >= 0 Then '线段关系
 If t_item0(1).poi(2 * p2% + 1) >= 0 Then
  If t_item0(2).poi(2 * p3% + 1) >= 0 Then
   set_multi_element = set_three_line_value(t_item0(0).poi(2 * p1%), t_item0(0).poi(2 * p1% + 1), _
    t_item0(1).poi(2 * p2%), t_item0(1).poi(2 * p2% + 1), _
     t_item0(2).poi(2 * p3%), t_item0(2).poi(2 * p3% + 1), _
      t_item0(0).n(2 * p1%), t_item0(0).n(2 * p1% + 1), _
       t_item0(1).n(2 * p2%), t_item0(1).n(2 * p2% + 1), _
        t_item0(2).n(2 * p3%), t_item0(2).n(2 * p3% + 1), _
         t_item0(0).line_no(p1%), t_item0(1).line_no(p2%), _
          t_item0(2).line_no(p3%), pA1$, pA2$, pa3$, v$, re, 0, 0, 0)
   If set_multi_element > 1 Then '化为其他关系
    Exit Function
   End If
  ElseIf t_item0(2).poi(2 * p3% + 1) = 0 Or it3% = 0 Then
   set_multi_element = set_two_line_value(t_item0(0).poi(2 * p1%), t_item0(0).poi(2 * p1% + 1), _
    t_item0(1).poi(2 * p2%), t_item0(1).poi(2 * p2% + 1), _
      t_item0(0).n(2 * p1%), t_item0(0).n(2 * p1% + 1), _
       t_item0(1).n(2 * p2%), t_item0(1).n(2 * p2% + 1), _
         t_item0(0).line_no(p1%), t_item0(1).line_no(p2%), _
           pA1$, pA2$, v$, re, 0, 0)
   If set_multi_element > 1 Then
    Exit Function
   End If
  Else 'it3%<0
   If t_item0(2).poi(2 * p3% + 1) = -1 Then
    Call set_item0(t_item0(0).poi(2 * p1%), t_item0(0).poi(2 * p1% + 1), 0, 0, _
             "~", t_item0(0).n(2 * p1%), t_item0(0).n(2 * p1% + 1), 0, 0, _
                  t_item0(0).line_no(p1%), 0, "1", "1", "1", "", para(0), 0, cond_data0, 0, _
                   ite(0), 0, 0, condition_data0, False)
    Call set_item0(t_item0(1).poi(2 * p2%), t_item0(1).poi(2 * p2% + 1), 0, 0, _
             "~", t_item0(1).n(2 * p2%), t_item0(1).n(2 * p2% + 1), 0, 0, _
                  t_item0(1).line_no(p2%), 0, "1", "1", "1", "", para(1), 0, cond_data0, 0, _
                   ite(1), 0, 0, condition_data0, False)
    If item0(t_item0(2).poi(2 * p3%)).data(0).sig = "+" Or _
          item0(t_item0(2).poi(2 * p3%)).data(0).sig = "-" Then
    Call set_item0(item0(t_item0(2).poi(2 * p3%)).data(0).poi(0), _
                             item0(t_item0(2).poi(2 * p3%)).data(0).poi(1), 0, 0, _
             "~", item0(t_item0(2).poi(2 * p3%)).data(0).n(0), _
                  item0(t_item0(2).poi(2 * p3%)).data(0).n(1), 0, 0, _
                  item0(t_item0(2).poi(2 * p3%)).data(0).line_no(0), 0, _
                    "1", "1", "1", "", para(2), 0, cond_data0, 0, ite(2), 0, 0, condition_data0, False)
    Call set_item0(item0(t_item0(2).poi(2 * p3%)).data(0).poi(2), _
                             item0(t_item0(2).poi(2 * p3%)).data(0).poi(3), 0, 0, _
             "~", item0(t_item0(2).poi(2 * p3%)).data(0).n(2), _
                  item0(t_item0(2).poi(2 * p3%)).data(0).n(3), 0, 0, _
                  item0(t_item0(2).poi(2 * p3%)).data(0).line_no(1), 0, _
                    "1", "1", "1", "", para(3), 0, cond_data0, 0, ite(3), 0, 0, condition_data0, False)
     If item0(t_item0(2).poi(2 * p3%)).data(0).sig = "+" Then
     set_multi_element = set_general_string(ite(0), ite(1), ite(2), ite(3), _
           time_string(pA1$, para(0), True, False), _
            time_string(pA2$, para(1), True, False), _
             time_string(pa3$, para(2), True, False), _
              time_string(pa3$, para(3), True, False), _
               v$, 0, 0, 0, re, 0, 0)
           If set_multi_element > 1 Then
            Exit Function
           End If
     Else
     set_multi_element = set_general_string(ite(0), ite(1), ite(2), ite(3), pA1$, pA2$, pa3$, _
           time_string(pa3$, "-1", True, False), v$, 0, 0, 0, re, 0, 0)
           If set_multi_element > 1 Then
            Exit Function
           End If
     
     End If
    Else '
      set_multi_element = set_general_string(ite(0), ite(1), t_item0(2).poi(2 * p3%), 0, _
            pA1$, pA2$, pa3$, "0", v$, 0, 0, 0, re, 0, 0)
           If set_multi_element > 1 Then
            Exit Function
           End If
    End If '="+
   End If '-1
  End If
 ElseIf t_item0(1).poi(2 * p2% + 1) = 0 Or it2% = 0 Then
     set_multi_element = set_line_value(t_item0(0).poi(2 * p1%), t_item0(0).poi(2 * p1% + 1), _
      divide_string(v$, pA1$, True, False), t_item0(0).n(2 * p1%), t_item0(0).n(2 * p1% + 1), t_item0(0).line_no(p1%), _
        re, 0, 0, False)
           If set_multi_element > 1 Then
            Exit Function
           End If
 ElseIf t_item0(1).poi(2 * p2% + 1) < 0 Then
  If t_item0(1).poi(2 * p2% + 1) = -1 Then
   If item0(t_item0(1).poi(2 * p2%)).data(0).sig = "+" Then
    set_multi_element = set_three_line_value(t_item0(0).poi(2 * p1%), t_item0(0).poi(2 * p1% + 1), _
      item0(t_item0(1).poi(2 * p2%)).data(0).poi(0), item0(t_item0(1).poi(2 * p2%)).data(0).poi(1), _
       item0(t_item0(1).poi(2 * p2%)).data(0).poi(2), item0(t_item0(1).poi(2 * p2%)).data(0).poi(3), _
        t_item0(0).n(2 * p1%), t_item0(0).n(2 * p1% + 1), _
         item0(t_item0(1).poi(2 * p2%)).data(0).n(0), item0(t_item0(1).poi(2 * p2%)).data(0).n(1), _
          item0(t_item0(1).poi(2 * p2%)).data(0).n(2), item0(t_item0(1).poi(2 * p2%)).data(0).n(3), _
           t_item0(0).line_no(p1%), item0(t_item0(1).poi(2 * p2%)).data(0).line_no(0), _
            item0(t_item0(1).poi(2 * p2%)).data(0).line_no(1), pA1$, pA2$, pA2$, v$, re, 0, 0, 0)
            If set_multi_element > 1 Then
             Exit Function
            End If
   ElseIf item0(t_item0(1).poi(2 * p2%)).data(0).sig = "-" Then
    set_multi_element = set_three_line_value(t_item0(0).poi(2 * p1%), t_item0(0).poi(2 * p1% + 1), _
      item0(t_item0(1).poi(2 * p2%)).data(0).poi(0), item0(t_item0(1).poi(2 * p2%)).data(0).poi(1), _
       item0(t_item0(1).poi(2 * p2%)).data(0).poi(2), item0(t_item0(1).poi(2 * p2%)).data(0).poi(3), _
        t_item0(0).n(2 * p1%), t_item0(0).n(2 * p1% + 1), _
         item0(t_item0(1).poi(2 * p2%)).data(0).n(0), item0(t_item0(1).poi(2 * p2%)).data(0).n(1), _
          item0(t_item0(1).poi(2 * p2%)).data(0).n(2), item0(t_item0(1).poi(2 * p2%)).data(0).n(3), _
           t_item0(0).line_no(p1%), item0(t_item0(1).poi(2 * p2%)).data(0).line_no(0), _
            item0(t_item0(1).poi(2 * p2%)).data(0).line_no(1), pA1$, pA2$, _
              time_string(pA2$, "-1", True, False), v$, re, 0, 0, 0)
            If set_multi_element > 1 Then
             Exit Function
            End If
    Else
         Call set_item0(t_item0(0).poi(2 * p1%), t_item0(0).poi(2 * p1% + 1), 0, 0, _
             "~", t_item0(0).n(2 * p1%), t_item0(0).n(2 * p1% + 1), 0, 0, _
                  t_item0(0).line_no(p1%), 0, "1", "1", "1", "", para(0), 0, cond_data0, 0, ite(0), _
                   0, 0, condition_data0, False)
    set_multi_element = set_general_string(ite(0), t_item0(1).poi(2 * p2%), 0, 0, _
       time_string(pA1$, para(0), True, False), time_string(pA2$, para(1), True, False), _
          "0", "0", v$, 0, 0, 0, re, 0, 0)
    If set_multi_element > 1 Then
     Exit Function
    End If
   End If '"+
  Else '<>-1
         Call set_item0(t_item0(0).poi(2 * p1%), t_item0(0).poi(2 * p1% + 1), 0, 0, _
             "~", t_item0(0).n(2 * p1%), t_item0(0).n(2 * p1% + 1), 0, 0, _
                  t_item0(0).line_no(p1%), 0, "1", "1", "1", "", para(0), 0, cond_data0, 0, ite(0), _
                   0, 0, condition_data0, False)
    set_multi_element = set_general_string(ite(0), t_item0(1).poi(2 * p2%), 0, 0, _
       time_string(pA1$, para(0), True, False), time_string(pA2$, para(1), True, False), _
          "0", "0", v$, 0, 0, 0, re, 0, 0)
    If set_multi_element > 1 Then
     Exit Function
    End If
  End If
 End If
Else '
 If t_item0(0).poi(2 * p1% + 1) = -1 Then
    If item0(t_item0(0).poi(2 * p1%)).data(0).sig = "+" Or _
         item0(t_item0(0).poi(2 * p1%)).data(0).sig = "-" Then
     If it2% > 0 Then
      If it3% = 0 Then
        If t_item0(1).poi(2 * p2% + 1) > 0 Then
         If item0(t_item0(0).poi(2 * p1%)).data(0).sig = "+" Then
          set_multi_element = set_three_line_value(item0(t_item0(0).poi(2 * p1%)).data(0).poi(0), _
           item0(t_item0(0).poi(2 * p1%)).data(0).poi(1), item0(t_item0(0).poi(2 * p1%)).data(0).poi(2), _
            item0(t_item0(0).poi(2 * p1%)).data(0).poi(3), t_item0(1).poi(2 * p2%), t_item0(1).poi(2 * p2% + 1), _
             item0(t_item0(0).poi(2 * p1%)).data(0).n(0), item0(t_item0(0).n(2 * p1%)).data(0).poi(1), _
              item0(t_item0(0).poi(2 * p1%)).data(0).n(2), item0(t_item0(0).poi(2 * p1%)).data(0).poi(0), _
           item0(t_item0(0).poi(2 * p1%)).data(0).n(1), item0(t_item0(0).poi(2 * p1%)).data(0).n(2), _
            item0(t_item0(0).poi(2 * p1%)).data(0).n(3), t_item0(1).n(2 * p2%), t_item0(1).n(2 * p2% + 1), _
             pA1$, pA1$, pA2$, v$, re, 0, 0, 0)
            If set_multi_element > 1 Then
             Exit Function
            End If
         Else
          set_multi_element = set_three_line_value(item0(t_item0(0).poi(2 * p1%)).data(0).poi(0), _
           item0(t_item0(0).poi(2 * p1%)).data(0).poi(1), item0(t_item0(0).poi(2 * p1%)).data(0).poi(2), _
            item0(t_item0(0).poi(2 * p1%)).data(0).poi(3), t_item0(1).poi(2 * p2%), t_item0(1).poi(2 * p2% + 1), _
             item0(t_item0(0).poi(2 * p1%)).data(0).n(0), item0(t_item0(0).n(2 * p1%)).data(0).poi(1), _
              item0(t_item0(0).poi(2 * p1%)).data(0).n(2), item0(t_item0(0).poi(2 * p1%)).data(0).poi(0), _
           item0(t_item0(0).poi(2 * p1%)).data(0).n(1), item0(t_item0(0).poi(2 * p1%)).data(0).n(2), _
            item0(t_item0(0).poi(2 * p1%)).data(0).n(3), t_item0(1).n(2 * p2%), t_item0(1).n(2 * p2% + 1), _
             pA1$, time_string(pA1$, "-1", True, False), pA2$, v$, re, 0, 0, 0)
            If set_multi_element > 1 Then
             Exit Function
            End If
         End If
        ElseIf t_item0(2).poi(2 * p2% + 1) = -7 Then '多重项
         If item0(t_item0(0).poi(2 * p1%)).data(0).sig = "+" Or _
          item0(t_item0(0).poi(2 * p1%)).data(0).sig = "-" Then
          
         Else
         End If
      Else 'it3>0
       
      End If
      Else 'it2=0
       If item0(t_item0(0).poi(2 * p1%)).data(0).sig = "+" Then
       set_multi_element = set_two_line_value(item0(t_item0(0).poi(2 * p1%)).data(0).poi(0), _
        item0(t_item0(0).poi(2 * p1%)).data(0).poi(1), item0(t_item0(0).poi(2 * p1%)).data(0).poi(2), _
         item0(t_item0(0).poi(2 * p1%)).data(0).poi(3), item0(t_item0(0).poi(2 * p1%)).data(0).n(0), _
          item0(t_item0(0).poi(2 * p1%)).data(0).n(1), item0(t_item0(0).poi(2 * p1%)).data(0).n(2), _
           item0(t_item0(0).poi(2 * p1%)).data(0).n(3), item0(t_item0(0).poi(2 * p1%)).data(0).line_no(0), _
            item0(t_item0(0).poi(2 * p1%)).data(0).line_no(1), "1", "1", divide_string(v$, pA1$, True, False), _
              re, 0, 0)
       ElseIf item0(t_item0(0).poi(2 * p1%)).data(0).sig = "-" Then
       set_multi_element = set_two_line_value(item0(t_item0(0).poi(2 * p1%)).data(0).poi(0), _
        item0(t_item0(0).poi(2 * p1%)).data(0).poi(1), item0(t_item0(0).poi(2 * p1%)).data(0).poi(2), _
         item0(t_item0(0).poi(2 * p1%)).data(0).poi(3), item0(t_item0(0).poi(2 * p1%)).data(0).n(0), _
          item0(t_item0(0).poi(2 * p1%)).data(0).n(1), item0(t_item0(0).poi(2 * p1%)).data(0).n(2), _
           item0(t_item0(0).poi(2 * p1%)).data(0).n(3), item0(t_item0(0).poi(2 * p1%)).data(0).line_no(0), _
            item0(t_item0(0).poi(2 * p1%)).data(0).line_no(1), "1", "-1", divide_string(v$, pA1$, True, False), _
             re, 0, 0)
       End If
      End If
     Else '<>-1
     End If
    Else '<>+-
     Call set_item0(t_item0(1).poi(2 * p2%), t_item0(1).poi(2 * p2% + 1), 0, 0, "~", _
        t_item0(1).n(2 * p2%), t_item0(1).n(2 * p2% + 1), 0, 0, t_item0(1).line_no(p2%), _
         0, "1", "1", "", para(0), 0, 0, cond_data0, 0, ite(0), 0, 0, condition_data0, False)
     Call set_item0(t_item0(2).poi(2 * p3%), t_item0(2).poi(2 * p3% + 1), 0, 0, "~", _
        t_item0(2).n(2 * p3%), t_item0(2).n(2 * p3% + 1), 0, 0, t_item0(2).line_no(p3%), _
         0, "1", "1", "", para(1), 0, 0, cond_data0, 0, ite(1), 0, 0, condition_data0, False)
     set_multi_element = set_general_string(t_item0(0).poi(2 * p1%), ite(0), ite(1), 0, _
          time_string(pA1$, para(0), True, False), time_string(pA1$, para(0), True, False), _
           time_string(pA2$, para(1), True, False), "0", v$, 0, 0, 0, re, 0, 0)
    End If
 ElseIf t_item0(0).poi(2 * p1% + 1) < 0 And t_item0(0).poi(2 * p1% + 1) > -5 Then
  If it2% = 0 Then
      set_multi_element = set_tri_function_(t_item0(0).poi(2 * p1%), _
         t_item0(0).poi(2 * p1% + 1), divide_string(v$, pA1$, True, False), re, False, 0)
  End If
 ElseIf t_item0(0).poi(2 * p1% + 1) = -6 Then
  If it2% > 0 And it3% > 0 Then
   If t_item0(1).poi(2 * p2% + 1) = -6 And t_item0(2).poi(2 * p3% + 1) = -6 Then
    set_multi_element = set_three_angle_value(t_item0(0).poi(2 * p1%), t_item0(1).poi(2 * p2%), _
     t_item0(2).poi(2 * p3%), pA1$, pA2$, pa3$, v$, 0, re, 0, 0, 0, 0, 0, 0, False)
   End If
  ElseIf it2% > 0 Then
    If t_item0(1).poi(2 * p2% + 1) = -6 Then
    set_multi_element = set_three_angle_value(t_item0(0).poi(2 * p1%), t_item0(1).poi(2 * p2%), _
      0, pA1$, pA2$, "0", v$, 0, re, 0, 0, 0, 0, 0, 0, False)
   End If
  Else
    set_multi_element = set_three_angle_value(t_item0(0).poi(2 * p1%), 0, _
      0, pA1$, "0", "0", divide_string(v$, pA1$, True, False), 0, re, 0, 0, 0, 0, 0, 0, False)
  End If
 ElseIf t_item0(0).poi(2 * p1% + 1) = -5 Then '三角形面积
  
 ElseIf t_item0(0).poi(2 * p1% + 1) = -8 Then '四边形面积
 ElseIf t_item0(0).poi(2 * p1% + 1) = -10 And t_item0(1).poi(2 * p1% + 1) = -10 And it3% = 0 Then
 End If
End If
End Function

Public Function set_conditions_from_item_value(ByVal it%)
Dim temp_record As total_record_type
temp_record.record_data.data0.condition_data = item0(it%).data(0).record_for_value.data0.condition_data
If item0(it%).data(0).sig = "+" Then
 set_conditions_from_item_value = set_multi_element(it%, 0, it%, 1, 0, 0, _
  "1", "1", "0", item0(it%).data(0).value, temp_record)
ElseIf item0(it%).data(0).sig = "-" Then
 set_conditions_from_item_value = set_multi_element(it%, 0, it%, 1, 0, 0, _
  "1", "-1", "0", item0(it%).data(0).value, temp_record)
ElseIf item0(it%).data(0).sig = "/" Then
 set_conditions_from_item_value = set_multi_element(it%, 0, it%, 1, 0, 0, _
  "-1", "1", item0(it%).data(0).value, "0", temp_record)
End If
End Function

Public Sub set_pseudo_mid_point(ByVal p1%, ByVal p2%, ByVal p3%)
Dim i%
Dim md As mid_point_data0_type
Dim cond_data0 As condition_data_type
If is_mid_point(p1%, p2%, p3%, 0, 0, 0, 0, 0, -1000, 0, 0, 0, 0, 0, 0, md, "", 0, 0, 0, cond_data0) Then
 Exit Sub
Else
 If p3% > 0 And p1% > 0 And p1% > p3% Then
  Call exchange_two_integer(p1%, p3%)
 End If
 For i% = 1 To last_conditions.last_cond(1).pseudo_midpoint_no
  If pseudo_mid_point(i%).data(0).data0.poi(0) = p1% And _
      pseudo_mid_point(i%).data(0).data0.poi(1) = p2% And _
       pseudo_mid_point(i%).data(0).data0.poi(2) = p3% Then
        Exit Sub
  End If
 Next i%
If last_conditions.last_cond(1).pseudo_midpoint_no Mod 10 = 0 Then
ReDim Preserve pseudo_mid_point(last_conditions.last_cond(1).pseudo_midpoint_no + 10) _
 As mid_point_type
End If
last_conditions.last_cond(1).pseudo_midpoint_no = last_conditions.last_cond(1).pseudo_midpoint_no + 1
   pseudo_mid_point(last_conditions.last_cond(1).pseudo_midpoint_no).data(0).data0.poi(0) = p1%
    pseudo_mid_point(last_conditions.last_cond(1).pseudo_midpoint_no).data(0).data0.poi(1) = p2%
     pseudo_mid_point(last_conditions.last_cond(1).pseudo_midpoint_no).data(0).data0.poi(2) = p3%
End If
End Sub

Public Function is_used_add_condition(ByVal add_no%) As Boolean
Dim i%
For i% = 1 To display_add_condition(0)
 If display_add_condition(i%) = add_no% Then
   is_used_add_condition = True
    Exit Function
 End If
Next i%
If display_add_condition(0) = 8 Then
    display_add_condition(0) = 1
     display_add_condition(1) = add_no%
Else
    display_add_condition(0) = display_add_condition(0) + 1
     display_add_condition(display_add_condition(0)) = add_no%
End If
End Function

Public Function set_two_line_value_from_tixing(ByVal t_n%) As Byte
Dim t_ti As tixing_data_type
Dim temp_record As total_record_type
t_ti = Dtixing(t_n%).data(0)
If t_ti.mid_position_line_value_no > 0 Then
 Call add_conditions_to_record(tixing_, t_n%, 0, 0, temp_record.record_data.data0.condition_data)
 Call add_conditions_to_record(Dtixing(t_n%).data(0).mid_point_no(0).ty, Dtixing(t_n%).data(0).mid_point_no(0).no, 0, 0, temp_record.record_data.data0.condition_data)
 Call add_conditions_to_record(Dtixing(t_n%).data(0).mid_point_no(1).ty, Dtixing(t_n%).data(0).mid_point_no(1).no, 0, 0, temp_record.record_data.data0.condition_data)
 Call add_conditions_to_record(Dtixing(t_n%).data(0).mid_point_no(2).ty, Dtixing(t_n%).data(0).mid_point_no(2).no, 0, 0, temp_record.record_data.data0.condition_data)
 Call add_conditions_to_record(Dtixing(t_n%).data(0).mid_point_no(3).ty, Dtixing(t_n%).data(0).mid_point_no(3).no, 0, 0, temp_record.record_data.data0.condition_data)
 Call add_conditions_to_record(line_value_, Dtixing(t_n%).data(0).mid_position_line_value_no, 0, 0, temp_record.record_data.data0.condition_data)
 Call add_conditions_to_record(tixing_, t_n%, 0, 0, temp_record.record_data.data0.condition_data)
   set_two_line_value_from_tixing = set_two_line_value(t_ti.poi(0), t_ti.poi(1), _
      t_ti.poi(2), t_ti.poi(3), 0, 0, 0, 0, 0, 0, "1", "1", _
       time_string("2", line_value(t_ti.mid_position_line_value_no).data(0).data0.value_, True, False), _
        temp_record, 0, 0)
   If set_two_line_value_from_tixing > 1 Then
      Exit Function
   End If
       
End If
End Function
Public Function simple_polygon_from_eline(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, re As total_record_type) As Byte
 '矩形化为正方形,平行四边形化为菱形,p1%p2%=p2%p3%
Dim i%, j%, k%, l%, m%
Dim tn(3) As Integer
Dim tp(3) As Integer
Dim poly4 As Integer
Dim ty As Byte
Dim ts$
Dim el As eline_data0_type
Dim temp_record As total_record_type
Dim c_data As condition_data_type
If re.record_data.data0.condition_data.condition_no > 1 Then
Call arrange_four_point(p1%, p2%, p3%, p4%, 0, 0, 0, 0, 0, 0, p1%, p2%, p3%, p4%, _
             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, condition_data0, 0)

End If
If p1% = p3% Then
 tp(0) = p2%
 tp(1) = p1%
 tp(2) = p4%
ElseIf p1% = p4% Then
 tp(0) = p2%
 tp(1) = p1%
 tp(2) = p3%
ElseIf p2% = p3% Then
 tp(0) = p1%
 tp(1) = p2%
 tp(2) = p4%
ElseIf p2% = p4% Then
 tp(0) = p1%
 tp(1) = p2%
 tp(2) = p3%
Else
poly4 = polygon4_number(p1%, p2%, p3%, p4%, 0)
If poly4 > 0 Then
   ty = 1
Else
   poly4 = polygon4_number(p1%, p2%, p4%, p3%, 0)
    If poly4 > 0 Then
     ty = 1
    Else
     Exit Function
    End If
End If
End If
If ty = 0 Then '等边三角形
  temp_record = re
  If is_equal_dline(tp(0), tp(2), tp(0), tp(1), 0, 0, 0, 0, 0, 0, _
                    tn(0), -1000, 0, 0, 0, el, tn(1), tn(2), ty, "", c_data) Then
  Call add_conditions_to_record(ty, tn(0), tn(1), tn(2), temp_record.record_data.data0.condition_data)
  simple_polygon_from_eline = set_equal_sides_triangle(triangle_number( _
         tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0), temp_record, 0)
    If simple_polygon_from_eline > 1 Then
      Exit Function
    End If
  ElseIf is_equal_dline(tp(0), tp(2), tp(2), tp(1), 0, 0, 0, 0, 0, 0, _
                    tn(0), -1000, 0, 0, 0, el, tn(1), tn(2), ty, "", c_data) Then
  Call add_conditions_to_record(ty, tn(0), tn(1), tn(2), temp_record.record_data.data0.condition_data)
      simple_polygon_from_eline = set_equal_sides_triangle(triangle_number( _
         tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0), temp_record, 0)
    If simple_polygon_from_eline > 1 Then
      Exit Function
    End If
  ElseIf is_equal_angle(Abs(angle_number(tp(0), tp(1), tp(2), "", 0)), _
                              Abs(angle_number(tp(1), tp(2), tp(0), "", 0)), tn(0), tn(1)) Then
  Call add_conditions_to_record(angle3_value_, tn(0), tn(1), 0, temp_record.record_data.data0.condition_data)
      simple_polygon_from_eline = set_equal_sides_triangle(triangle_number( _
         tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0), temp_record, 0)
    If simple_polygon_from_eline > 1 Then
      Exit Function
    End If
  ElseIf is_equal_angle(Abs(angle_number(tp(0), tp(1), tp(2), "", 0)), _
                              Abs(angle_number(tp(1), tp(0), tp(2), "", 0)), tn(0), tn(1)) Then
  Call add_conditions_to_record(angle3_value_, tn(0), tn(1), 0, temp_record.record_data.data0.condition_data)
      simple_polygon_from_eline = set_equal_sides_triangle(triangle_number( _
         tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0), temp_record, 0)
    If simple_polygon_from_eline > 1 Then
      Exit Function
    End If
  ElseIf is_angle_value(Abs(angle_number(tp(0), tp(1), tp(2), "", 0)), "60", "60", tn(0), c_data) Then
  Call add_conditions_to_record(angle3_value_, tn(0), 0, 0, temp_record.record_data.data0.condition_data)
      simple_polygon_from_eline = set_equal_sides_triangle(triangle_number( _
         tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0), temp_record, 0)
    If simple_polygon_from_eline > 1 Then
      Exit Function
    End If
  ElseIf is_angle_value(Abs(angle_number(tp(0), tp(2), tp(1), "", 0)), "60", "60", tn(0), c_data) Then
  Call add_conditions_to_record(angle3_value_, tn(0), 0, 0, temp_record.record_data.data0.condition_data)
      simple_polygon_from_eline = set_equal_sides_triangle(triangle_number( _
         tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0), temp_record, 0)
    If simple_polygon_from_eline > 1 Then
      Exit Function
    End If
  ElseIf is_angle_value(Abs(angle_number(tp(2), tp(0), tp(1), "", 0)), "60", "60", tn(0), c_data) Then
  Call add_conditions_to_record(angle3_value_, tn(0), 0, 0, temp_record.record_data.data0.condition_data)
      simple_polygon_from_eline = set_equal_sides_triangle(triangle_number( _
         tp(0), tp(1), tp(2), 0, 0, 0, 0, 0, 0, 0), temp_record, 0)
    If simple_polygon_from_eline > 1 Then
      Exit Function
    End If
  End If
  '******************************
 For i% = 1 To last_conditions.last_cond(1).parallelogram_no
  l% = 0
   For j% = 0 To 3
    If Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(j%) = tp(0) Then
          tn(0) = j%
          l% = l% + 1
          If l% = 3 Then
           GoTo simple_polygon_from_eline_mark1
          End If
    ElseIf Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(j%) = tp(1) Then
          tn(1) = j%
          l% = l% + 1
          If l% = 3 Then
           GoTo simple_polygon_from_eline_mark1
          End If
    ElseIf Dpolygon4(Dparallelogram(i%).data(0).polygon4_no).data(0).poi(j%) = tp(2) Then
          tn(2) = j%
          l% = l% + 1
          If l% = 3 Then
           GoTo simple_polygon_from_eline_mark1
          End If
    End If
    Next j%
    GoTo simple_polygon_from_eline_mark2
simple_polygon_from_eline_mark1:
    If tn(1) = ((tn(0) + tn(2)) Mod 4) / 2 Then '相邻三点
           temp_record = re
            temp_record.record_data.data0.theorem_no = 73
            Call add_conditions_to_record(parallelogram_, i%, 0, 0, temp_record.record_data.data0.condition_data)
             simple_polygon_from_eline = set_rhombus0(Dparallelogram(i%).data(0).polygon4_no, _
                 0, 0, temp_record, 0)
                  If simple_polygon_from_eline > 1 Then
                   Exit Function
                  End If
   End If
simple_polygon_from_eline_mark2:
Next i%
For i% = 1 To last_conditions.last_cond(1).long_squre_no
 l% = 0
  For j% = 0 To 3
   If Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(j%) = tp(0) Then
         tn(0) = j%
         l% = l% + 1
         If l% = 3 Then
          GoTo simple_polygon_from_eline_mark3
         End If
   ElseIf Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(j%) = tp(1) Then
         tn(1) = j%
         l% = l% + 1
         If l% = 3 Then
          GoTo simple_polygon_from_eline_mark3
         End If
   ElseIf Dpolygon4(Dlong_squre(i%).data(0).polygon4_no).data(0).poi(j%) = tp(2) Then
         tn(2) = j%
         l% = l% + 1
          If l% = 3 Then
          GoTo simple_polygon_from_eline_mark3
         End If
  End If
  Next j%
          GoTo simple_polygon_from_eline_mark4
simple_polygon_from_eline_mark3:
    If tn(1) = ((tn(0) + tn(2)) Mod 4) / 2 Then
           temp_record = re
            temp_record.record_data.data0.theorem_no = 82
            Call add_conditions_to_record(long_squre_, i%, 0, 0, temp_record.record_data.data0.condition_data)
             simple_polygon_from_eline = set_squre0(Dlong_squre(i%).data(0).polygon4_no, _
                   0, temp_record)
                  If simple_polygon_from_eline > 1 Then
                   Exit Function
                  End If
   End If
simple_polygon_from_eline_mark4:
Next i%
 '******************************
Else
If Dpolygon4(poly4).data(0).ty = tixing_ Then
   If (is_same_two_point(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(0), _
        Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(3), p1%, p2%) And _
          is_same_two_point(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(1), _
            Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(2), p3%, p4%)) Or _
      (is_same_two_point(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(0), _
        Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(3), p3%, p4%) And _
          is_same_two_point(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(1), _
            Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(2), p1%, p2%)) Or _
      (is_same_two_point(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(0), _
        Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(2), p1%, p2%) And _
          is_same_two_point(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(1), _
            Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(3), p3%, p4%)) Or _
      (is_same_two_point(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(0), _
        Dtixing(Dpolygon4(poly4).data(0).no).data(2).poi(3), p3%, p4%) And _
          is_same_two_point(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(1), _
            Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(3), p1%, p2%)) Then
             temp_record = re
             Call add_record_to_record(temp_record.record_data.data0.condition_data, _
                   Dtixing(Dpolygon4(poly4).data(0).no).data(0).record.data0.condition_data)
           Dtixing(Dpolygon4(poly4).data(0).no).data(0).ty = equal_side_tixing_
             Dpolygon4(poly4).data(0).ty = equal_side_tixing_
              ts$ = m_poi(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(0)).data(0).data0.name + _
                     m_poi(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(1)).data(0).data0.name + _
                      m_poi(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(2)).data(0).data0.name + _
                       m_poi(Dtixing(Dpolygon4(poly4).data(0).no).data(0).poi(3)).data(0).data0.name + _
                       "是等腰梯形"
           simple_polygon_from_eline = set_prove_proccess(ts$, equal_side_tixing_, Dpolygon4(poly4).data(0).no, _
                            Dtixing(Dpolygon4(poly4).data(0).no).data(0).record.display_string)
           If simple_polygon_from_eline > 1 Then
              Exit Function
           End If
    End If
ElseIf Dpolygon4(poly4).data(0).ty = parallelogram_ Then
  If (is_same_two_point(Dpolygon4(poly4).data(0).poi(0), _
          Dpolygon4(poly4).data(0).poi(2), p1%, p2%) And _
          is_same_two_point(Dpolygon4(poly4).data(0).poi(1), _
             Dpolygon4(poly4).data(0).poi(3), p3%, p4%)) Or _
      (is_same_two_point(Dpolygon4(poly4).data(0).poi(0), _
         Dpolygon4(poly4).data(0).poi(3), p3%, p4%) And _
          is_same_two_point(Dpolygon4(poly4).data(0).poi(1), _
             Dpolygon4(poly4).data(0).poi(3), p1%, p2%)) Then
             temp_record = re
             Call add_conditions_to_record(parallelogram_, Dpolygon4(poly4).data(0).no, _
                    0, 0, temp_record.record_data.data0.condition_data)
             simple_polygon_from_eline = set_long_squre(Dpolygon4(poly4).data(0).poi(0), _
                      Dpolygon4(poly4).data(0).poi(1), Dpolygon4(poly4).data(0).poi(2), _
                        Dpolygon4(poly4).data(0).poi(3), _
                         temp_record, 0, 0, 1, False)
             If simple_polygon_from_eline > 1 Then
                Exit Function
             End If
  End If
ElseIf Dpolygon4(poly4).data(0).ty = rhombus_ Then
  If (is_same_two_point(Dpolygon4(poly4).data(0).poi(0), _
          Dpolygon4(poly4).data(0).poi(2), p1%, p2%) And _
          is_same_two_point(Dpolygon4(poly4).data(0).poi(1), _
             Dpolygon4(poly4).data(0).poi(3), p3%, p4%)) Or _
      (is_same_two_point(Dpolygon4(poly4).data(0).poi(0), _
         Dpolygon4(poly4).data(0).poi(3), p3%, p4%) And _
          is_same_two_point(Dpolygon4(poly4).data(0).poi(1), _
             Dpolygon4(poly4).data(0).poi(3), p1%, p2%)) Then
             temp_record = re
             Call add_conditions_to_record(rhombus_, Dpolygon4(poly4).data(0).no, _
                    0, 0, temp_record.record_data.data0.condition_data)
             simple_polygon_from_eline = set_squre(Dpolygon4(poly4).data(0).poi(0), _
                     Dpolygon4(poly4).data(0).poi(1), Dpolygon4(poly4).data(0).poi(2), _
                        Dpolygon4(poly4).data(0).poi(3), _
                          0, temp_record, 1, False)
             If simple_polygon_from_eline > 1 Then
                Exit Function
             End If
End If
End If
End If
End Function
Public Function set_equal_3angle(ByVal A1%, ByVal A2%, ByVal A3%, re As record_data_type) As Byte
Dim i%, p%, A%
Dim tp(1) As Integer
Dim l(3) As Integer
p% = angle(A1%).data(0).poi(1)
If p% = angle(A2%).data(0).poi(1) And p% = angle(A3%).data(0).poi(1) Then
 If angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) And _
     angle(A1%).data(0).te(0) = angle(A2%).data(0).te(1) Then
   If angle(A1%).data(0).line_no(1) = angle(A3%).data(0).line_no(0) And _
     angle(A1%).data(0).te(1) = angle(A3%).data(0).te(0) Then
      l(0) = angle(A2%).data(0).line_no(0)
      l(1) = angle(A1%).data(0).line_no(0)
      l(2) = angle(A3%).data(0).line_no(0)
      l(3) = angle(A3%).data(0).line_no(1)
      tp(0) = angle(A2%).data(0).poi(0)
      tp(1) = angle(A3%).data(0).poi(2)
      Call exchange_two_integer(A1%, A2%)
   ElseIf angle(A2%).data(0).line_no(0) = angle(A3%).data(0).line_no(1) And _
     angle(A2%).data(0).te(0) = angle(A3%).data(0).te(1) Then
      l(0) = angle(A3%).data(0).line_no(0)
      l(1) = angle(A2%).data(0).line_no(0)
      l(2) = angle(A1%).data(0).line_no(0)
      l(3) = angle(A1%).data(0).line_no(1)
      tp(0) = angle(A3%).data(0).poi(0)
      tp(1) = angle(A1%).data(0).poi(2)
      Call exchange_two_integer(A1%, A3%)
   End If
 ElseIf angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0) And _
     angle(A1%).data(0).te(1) = angle(A2%).data(0).te(0) Then
   If angle(A2%).data(0).line_no(1) = angle(A3%).data(0).line_no(0) And _
     angle(A2%).data(0).te(1) = angle(A3%).data(0).te(0) Then
      l(0) = angle(A1%).data(0).line_no(0)
      l(1) = angle(A2%).data(0).line_no(0)
      l(2) = angle(A3%).data(0).line_no(0)
      l(3) = angle(A3%).data(0).line_no(1)
      tp(0) = angle(A1%).data(0).poi(0)
      tp(1) = angle(A3%).data(0).poi(2)
   ElseIf angle(A1%).data(0).line_no(0) = angle(A3%).data(0).line_no(1) And _
     angle(A1%).data(0).te(0) = angle(A3%).data(0).te(1) Then
      l(0) = angle(A3%).data(0).line_no(0)
      l(1) = angle(A1%).data(0).line_no(0)
      l(2) = angle(A2%).data(0).line_no(0)
      l(3) = angle(A2%).data(0).line_no(1)
      tp(0) = angle(A3%).data(0).poi(0)
      tp(1) = angle(A2%).data(0).poi(2)
      Call exchange_two_integer(A1%, A3%)
      Call exchange_two_integer(A2%, A3%)
   End If
 ElseIf angle(A1%).data(0).line_no(0) = angle(A3%).data(0).line_no(1) And _
     angle(A1%).data(0).te(0) = angle(A3%).data(0).te(1) Then
   If angle(A1%).data(0).line_no(1) = angle(A2%).data(0).line_no(0) And _
     angle(A1%).data(0).te(1) = angle(A2%).data(0).te(0) Then
      l(0) = angle(A3%).data(0).line_no(0)
      l(1) = angle(A1%).data(0).line_no(0)
      l(2) = angle(A2%).data(0).line_no(0)
      l(3) = angle(A2%).data(0).line_no(1)
      tp(0) = angle(A3%).data(0).poi(0)
      tp(1) = angle(A2%).data(0).poi(2)
      Call exchange_two_integer(A1%, A3%)
      Call exchange_two_integer(A2%, A3%)
   ElseIf angle(A3%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) And _
     angle(A3%).data(0).te(0) = angle(A2%).data(0).te(1) Then
      l(0) = angle(A2%).data(0).line_no(0)
      l(1) = angle(A3%).data(0).line_no(0)
      l(2) = angle(A1%).data(0).line_no(0)
      l(3) = angle(A1%).data(0).line_no(1)
      tp(0) = angle(A2%).data(0).poi(0)
      tp(1) = angle(A1%).data(0).poi(2)
      Call exchange_two_integer(A2%, A3%)
      Call exchange_two_integer(A1%, A2%)
   End If
 ElseIf angle(A1%).data(0).line_no(1) = angle(A3%).data(0).line_no(0) And _
     angle(A1%).data(0).te(1) = angle(A3%).data(0).te(0) Then
   If angle(A3%).data(0).line_no(1) = angle(A2%).data(0).line_no(0) And _
     angle(A3%).data(0).te(1) = angle(A2%).data(0).te(0) Then
      l(0) = angle(A1%).data(0).line_no(0)
      l(1) = angle(A3%).data(0).line_no(0)
      l(2) = angle(A2%).data(0).line_no(0)
      l(3) = angle(A2%).data(0).line_no(1)
      tp(0) = angle(A1%).data(0).poi(0)
      tp(1) = angle(A2%).data(0).poi(2)
      Call exchange_two_integer(A1%, A3%)
      Call exchange_two_integer(A1%, A2%)
   ElseIf angle(A1%).data(0).line_no(0) = angle(A2%).data(0).line_no(1) And _
     angle(A1%).data(0).te(0) = angle(A2%).data(0).te(1) Then
      l(0) = angle(A2%).data(0).line_no(0)
      l(1) = angle(A1%).data(0).line_no(0)
      l(2) = angle(A3%).data(0).line_no(0)
      l(3) = angle(A3%).data(0).line_no(1)
      tp(0) = angle(A2%).data(0).poi(0)
      tp(1) = angle(A3%).data(0).poi(2)
      Call exchange_two_integer(A1%, A2%)
      Call exchange_two_integer(A1%, A3%)
  End If
 End If
 If l(3) > 0 Then
  For i% = 1 To last_conditions.last_cond(1).equal_3angle_no
   If equal_3angle(i%).data(0).line_no(0) = l(0) And _
       equal_3angle(i%).data(0).line_no(1) = l(1) And _
        equal_3angle(i%).data(0).line_no(2) = l(2) And _
         equal_3angle(i%).data(0).line_no(3) = l(3) Then
          Exit Function
   End If
  Next i%
  A% = angle_number(tp(0), p%, tp(1), "0", 0)
  If A% > 0 Then
  If last_conditions.last_cond(1).equal_3angle_no Mod 10 = 0 Then
  ReDim Preserve equal_3angle(last_conditions.last_cond(1).equal_3angle_no + 10) As equal_3angle_type
  End If
   last_conditions.last_cond(1).equal_3angle_no = _
      last_conditions.last_cond(1).equal_3angle_no + 1
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).angle(0) = A%
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).angle(1) = A1%
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).angle(2) = A2%
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).angle(3) = A3%
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).poi = p%
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).line_no(0) = l(0)
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).line_no(1) = l(1)
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).line_no(2) = l(2)
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).line_no(3) = l(3)
  equal_3angle(last_conditions.last_cond(1).equal_3angle_no).data(0).record = re
  If last_conditions.last_cond(1).equal_3angle_no > 2 Then
  set_equal_3angle = set_th_Morley(last_conditions.last_cond(1).equal_3angle_no)
  End If
  End If
 End If
End If
End Function
Public Function set_th_Morley(ByVal no%) As Byte
Dim i%, k%, j%
Dim tn_(5) As Integer
Dim tn(10) As Integer
Dim tp(2) As Integer
Dim last_tn_%
Dim pol As polygon
Dim temp_record As total_record_type
tn_(0) = no%
last_tn_% = 1
For i% = 1 To last_conditions.last_cond(1).equal_3angle_no
 If i% <> no% Then
  If last_tn_% = 1 Then
   If equal_3angle(i%).data(0).poi <> equal_3angle(no%).data(0).poi Then
     If equal_3angle(i%).data(0).line_no(3) = equal_3angle(no%).data(0).line_no(0) Then
      tn_(2) = i%
      last_tn_% = 2
     ElseIf equal_3angle(i%).data(0).line_no(0) = equal_3angle(no%).data(0).line_no(3) Then
      tn_(1) = i%
      last_tn_% = 2
     End If
   End If
  Else 'last_tn_%=2
   If equal_3angle(i%).data(0).poi <> equal_3angle(tn_(0)).data(0).poi And _
       equal_3angle(i%).data(0).poi <> equal_3angle(tn_(1)).data(0).poi And _
        equal_3angle(i%).data(0).poi <> equal_3angle(tn_(2)).data(0).poi Then
     If equal_3angle(i%).data(0).line_no(3) = equal_3angle(tn_(0)).data(0).line_no(0) Then
      tn_(2) = i%
      GoTo set_th_morley_mark1
     ElseIf equal_3angle(i%).data(0).line_no(0) = equal_3angle(tn_(0)).data(0).line_no(3) Then
      tn_(1) = i%
      GoTo set_th_morley_mark1
     'ElseIf equal_3angle(i%).data(0).line_no(3) = equal_3angle(tn_(1)).line_no(0) Then
     ' tn_(0) = i%
     ' last_tn_% = 2
     ElseIf equal_3angle(i%).data(0).line_no(0) = equal_3angle(tn_(1)).data(0).line_no(3) Then
      tn_(2) = i%
      GoTo set_th_morley_mark1
     ElseIf equal_3angle(i%).data(0).line_no(3) = equal_3angle(tn_(2)).data(0).line_no(0) Then
      tn_(1) = i%
      GoTo set_th_morley_mark1
     'ElseIf equal_3angle(i%).data(0).line_no(0) = equal_3angle(tn(2)).line_no(3) Then
     ' tn_(0) = i%
     ' last_tn_% = 2
     End If
   End If
  End If
 End If
Next i%
Exit Function
set_th_morley_mark1:
tp(0) = is_line_line_intersect(equal_3angle(tn_(0)).data(0).line_no(2), _
       equal_3angle(tn_(1)).data(0).line_no(1), 0, 0, False)
tp(1) = is_line_line_intersect(equal_3angle(tn_(1)).data(0).line_no(2), _
       equal_3angle(tn_(2)).data(0).line_no(1), 0, 0, False)
tp(2) = is_line_line_intersect(equal_3angle(tn_(2)).data(0).line_no(2), _
       equal_3angle(tn_(0)).data(0).line_no(1), 0, 0, False)
 If tp(0) > 0 And tp(1) > 0 And tp(2) > 0 Then
  Call add_record_to_record(equal_3angle(tn_(0)).data(0).record.data0.condition_data, _
                  temp_record.record_data.data0.condition_data)
  Call add_record_to_record(equal_3angle(tn_(1)).data(0).record.data0.condition_data, _
                  temp_record.record_data.data0.condition_data)
  Call add_record_to_record(equal_3angle(tn_(2)).data(0).record.data0.condition_data, _
                  temp_record.record_data.data0.condition_data)
  pol.total_v = 3
  pol.v(0) = tp(0)
  pol.v(1) = tp(1)
  pol.v(2) = tp(2)
  For i% = 0 To 2
   For j% = 0 To 2
    For k% = 0 To 2
     set_th_Morley = set_three_angle_value(equal_3angle(tn_(0)).data(0).angle(i%), _
           equal_3angle(tn_(1)).data(0).angle(j%), equal_3angle(tn_(2)).data(0).angle(k%), _
            "1", "1", "1", "60", 0, temp_record, 0, 0, 0, 0, 0, 0, False)
       If set_th_Morley > 1 Then
          Exit Function
       End If
    Next k%
   Next j%
  Next i%
  tn(0) = equal_3angle(tn_(0)).data(0).line_no(1)
  tn(1) = equal_3angle(tn_(1)).data(0).line_no(2)
  tn(2) = 0
  tn(3) = 0
  tn(4) = 1
  tn(5) = 0
  tn(6) = 0
  Call C_wait_for_aid_point.set_wait_for_aid_point(interset_point_line_line, tn(), 7)
  'set_th_Morley = add_interset_point_line_line(equal_3angle(tn_(0)).data(0).line_no(1), _
       equal_3angle(tn_(1)).data(0).line_no(2), 0, 0, 1, 0, 0, condition_data0)
  'If set_th_Morley > 1 Then
  '   Exit Function
  'End If
  tn(0) = equal_3angle(tn_(1)).data(0).line_no(1)
  tn(1) = equal_3angle(tn_(2)).data(0).line_no(2)
  tn(2) = 0
  tn(3) = 0
  tn(4) = 1
  tn(5) = 0
  tn(6) = 0
  Call C_wait_for_aid_point.set_wait_for_aid_point(interset_point_line_line, tn(), 7)
  'set_th_Morley = add_interset_point_line_line(equal_3angle(tn_(1)).data(0).line_no(1), _
       equal_3angle(tn_(2)).data(0).line_no(2), 0, 0, 1, 0, 0, condition_data0)
  'If set_th_Morley > 1 Then
  '   Exit Function
  'End If
  tn(0) = equal_3angle(tn_(2)).data(0).line_no(1)
  tn(1) = equal_3angle(tn_(0)).data(0).line_no(2)
  tn(2) = 0
  tn(3) = 0
  tn(4) = 1
  tn(5) = 0
  tn(6) = 0
  Call C_wait_for_aid_point.set_wait_for_aid_point(interset_point_line_line, tn(), 7)
  'set_th_Morley = add_interset_point_line_line(equal_3angle(tn_(2)).data(0).line_no(1), _
       equal_3angle(tn_(0)).data(0).line_no(2), 0, 0, 1, 0, 0, condition_data0)
  'If set_th_Morley > 1 Then
  '   Exit Function
  'End If
  'set_th_Morley = set_Epolygon(pol, temp_record, 0, 0)
 End If
End Function

Public Function set_area_relation_display_string(area_rel As area_relation_data_type, _
       ty As Byte, is_depend As Boolean) As String
Dim area_elem(1) As String
 area_elem(0) = set_element_display_string(area_rel.area_element(0), is_depend)
 area_elem(1) = set_element_display_string(area_rel.area_element(1), is_depend)
 If area_rel.value = "1" Then
 set_area_relation_display_string = _
      area_elem(0) + "=" + area_elem(1)
 Else
 If ty Then
 set_area_relation_display_string = _
      area_elem(0) + "/" + area_elem(1) + "=" + _
             "!" + display_string_(area_rel.value, ty) + "~"
 Else
     set_area_relation_display_string = _
       area_elem(0) + "/" + area_elem(1) + "=" _
             + display_string_(area_rel.value, ty)
 End If
 End If
End Function
Public Function set_area_relation_from_new_area_element_in_conclusion(new_area_ele As condition_type) As Byte
Dim i%, j%, k%
Dim tp1(2) As Integer
Dim tp2(2) As Integer
Dim v(1) As String
Dim A(1) As String
Dim ele(2) As condition_type
Dim temp_record  As total_record_type
If new_area_ele.ty <> triangle_ Then
 Exit Function
End If
For i% = 1 To last_conditions.last_cond(1).relation_on_line_no
temp_record.record_data.data0.condition_data = relation_on_line(i%).data(0).record
 If triangle(new_area_ele.no).data(0).poi(2) >= relation_on_line(i%).data(0).data0.poi(3) Then
  For j% = 0 To 2
   tp1(0) = (j% + 1) Mod 3
    tp1(1) = (j% + 2) Mod 3
     tp1(2) = j%
   For k% = 0 To 2
   tp2(1) = (k% + 1) Mod 3
    tp2(2) = (k% + 2) Mod 3
     tp2(0) = k%
    If is_same_two_point(triangle(new_area_ele.no).data(0).poi(tp1(0)), _
        triangle(new_area_ele.no).data(0).poi(tp1(1)), _
           relation_on_line(i%).data(0).data0.poi(tp2(0)), _
             relation_on_line(i%).data(0).data0.poi(tp2(1))) Then
     Call read_ratio_from_relation(relation_on_line(i%).data(0).data0.value, _
         k%, v(0), v(1), True, 3)
       A(0) = triangle_number(triangle(new_area_ele.no).data(0).poi(j), _
             relation_on_line(i%).data(0).data0.poi(tp2(1)), _
               relation_on_line(i%).data(0).data0.poi(tp2(2)), 0, 0, 0, 0, 0, 0, 0)
       A(1) = triangle_number(triangle(new_area_ele.no).data(0).poi(j), _
             relation_on_line(i%).data(0).data0.poi(tp2(2)), _
               relation_on_line(i%).data(0).data0.poi(tp2(0)), 0, 0, 0, 0, 0, 0, 0)
       If triangle(A(0)).data(0).poi(2) < triangle(new_area_ele.no).data(0).poi(2) Then
        ele(0).ty = triangle_
        ele(0).no = A(0)
        set_area_relation_from_new_area_element_in_conclusion = _
         set_area_relation(new_area_ele, ele(0), v(0), temp_record, 0, 0, 0)
          If set_area_relation_from_new_area_element_in_conclusion > 1 Then
           Exit Function
          End If
       End If
       If triangle(A(1)).data(0).poi(2) < triangle(new_area_ele.no).data(0).poi(2) Then
        ele(0).ty = triangle_
        ele(0).no = A(1)
        set_area_relation_from_new_area_element_in_conclusion = _
         set_area_relation(new_area_ele, ele(0), v(1), temp_record, 0, 0, 0)
          If set_area_relation_from_new_area_element_in_conclusion > 1 Then
           Exit Function
          End If
       End If
    End If
   Next k%
  Next j%
 End If
Next i%
End Function


Public Function set_area_element_display_string(area_ele As area_of_element_data_type, _
                                               dis_ty As Byte, is_depend As Boolean) As String
Dim ele_string As String
ele_string = set_element_display_string(area_ele.element, is_depend)
set_area_element_display_string = LoadResString_(1795, _
           "\\1\\" + ele_string + _
           "\\2\\" + display_string_(area_ele.value, dis_ty))
End Function

Public Function set_area_of_element(ByVal ty As Byte, ByVal n%, ByVal v As String, no%, re As total_record_type) As Byte
Dim no_%, i%
Dim temp_record As total_record_type
Dim area_ele(1) As area_of_element_data_type
temp_record = re
no_% = no%
If InStr(1, v, "F", 0) > 0 Then
 Exit Function
ElseIf no% > 0 Then
  ty = area_of_element(no_%).data(0).element.ty
  n% = area_of_element(no_%).data(0).element.no
End If
If ty = triangle_ And n% > 0 Then
  set_area_of_element = set_area_of_triangle(n%, v, temp_record, no%, 0)
          If set_area_of_element > 1 Then
             Exit Function
          End If
Else
  If no% = 0 Then
  set_area_of_element = set_area_of_polygon(Dpolygon4(n%).data(0).poi(0), _
       Dpolygon4(n%).data(0).poi(1), Dpolygon4(n%).data(0).poi(2), _
        Dpolygon4(n%).data(0).poi(3), v, temp_record, no%, 0)
          If set_area_of_element > 1 Then
             Exit Function
          End If
  Else
  set_area_of_element = set_area_of_polygon(0, 0, 0, 0, v, re, no%, 0)
          If set_area_of_element > 1 Then
             Exit Function
          End If
  End If
End If
If no_% > 0 Then
 area_ele(0) = area_of_element(no_%).data(0)
 For i% = 1 To no_%
 If i% <> no_% Then
 area_ele(1) = area_of_element(i%).data(0)
  temp_record.record_data.data0.condition_data.condition_no = 2
  temp_record.record_data.data0.condition_data.condition(1).no = i%
  temp_record.record_data.data0.condition_data.condition(2).no = no_%
  temp_record.record_data.data0.condition_data.condition(1).ty = area_of_element_
  temp_record.record_data.data0.condition_data.condition(2).ty = area_of_element_
  temp_record.record_data.data0.theorem_no = 1
  set_area_of_element = combine_two_area_of_element(area_ele(0), area_ele(1), temp_record)
          If set_area_of_element > 1 Then
             Exit Function
          End If
 End If
 Next i%
End If
End Function
Public Function set_element_display_string(ele As condition_type, is_depend As Boolean) As String
If ele.ty = triangle_ Then
 set_element_display_string = set_display_triangle(ele.no, is_depend, 0, 0)
Else
 set_element_display_string = set_display_polygon4(Dpolygon4(ele.no).data(0), 0, is_depend, 0, 0)
End If
End Function
Public Function set_display_triangle(n%, is_depend As Boolean, ty As Byte, st%) As String
If ty = 0 Then
  set_display_triangle = set_display_triangle0( _
           m_poi(triangle(n%).data(0).poi(0)).data(0).data0.name + _
            m_poi(triangle(n%).data(0).poi(1)).data(0).data0.name + _
             m_poi(triangle(n%).data(0).poi(2)).data(0).data0.name, 0, 0)
If is_depend Then
   Call set_depend_from_point(triangle(n%).data(0).poi(0))
   Call set_depend_from_point(triangle(n%).data(0).poi(1))
   Call set_depend_from_point(triangle(n%).data(0).poi(2))
End If
Else
  set_display_triangle = "\\" + Trim(str(st%)) + "\\" + m_poi(triangle(n%).data(0).poi(0)).data(0).data0.name + _
                         "\\" + Trim(str(st% + 1)) + "\\" + m_poi(triangle(n%).data(0).poi(1)).data(0).data0.name + _
                         "\\" + Trim(str(st% + 2)) + "\\" + m_poi(triangle(n%).data(0).poi(2)).data(0).data0.name
End If
End Function
Public Function set_display_triangle0(triangle_s As String, ty As Byte, st%) As String
If ty = 0 Then
  set_display_triangle0 = _
          LoadResString_(1385, "") + triangle_s
Else
  set_display_triangle0 = "\\" + Trim(str(st%)) + "\\" + Mid$(triangle_s, 1, 1) + _
                          "\\" + Trim(str(st% + 1)) + "\\" + Mid$(triangle_s, 2, 1) + _
                          "\\" + Trim(str(st% + 2)) + "\\" + Mid$(triangle_s, 3, 1)
                         
End If
End Function
Public Function set_display_circle(ByVal n%) As String
  If m_Circ(n%).data(0).circle_type = 1 Then
      set_display_circle = _
          LoadResString_(1410, "") + _
           m_poi(m_Circ(n%).data(0).data0.center).data(0).data0.name + _
            "[down(" + m_poi(m_Circ(n%).data(0).data0.in_point(1)).data(0).data0.name + ")]"
  Else
   set_display_circle = _
          LoadResString_(1410, "") + _
           "[down" & m_poi(m_Circ(n%).data(0).data0.in_point(1)).data(0).data0.name + _
             m_poi(m_Circ(n%).data(0).data0.in_point(2)).data(0).data0.name + _
              m_poi(m_Circ(n%).data(0).data0.in_point(3)).data(0).data0.name & "]"
  End If
End Function
Public Function set_display_circle0(ByVal c_string$) As String
       set_display_circle0 = LoadResString_(1410, "") + c_string
End Function
Public Function str_for_measure(v As Single) As String
Dim p%
str_for_measure = str(v)
p% = InStr(1, v, ".", 0)
If p% > 0 Then
p% = p% + 2
If p% < Len(str_for_measure) Then
 str_for_measure = Mid$(str_for_measure, 1, p%)
End If
End If
End Function
Public Function set_length_of_sides_from_length_of_sides(ByVal triA%) As Byte
Dim i%, last_tn_%, l%, k%
Dim tn_() As Integer
Dim tv$
Dim n(1) As Integer
Dim tn(1) As Integer
Dim t_triA As two_triangle_type
Dim temp_record As total_record_type
Dim re As record_data_type
For i% = 0 To 1
 n(0) = i%
  n(1) = (i% + 1) Mod 2
 If th_chose(111).chose = 1 Then
 t_triA.triangle(n(0)) = triA%
 t_triA.triangle(n(1)) = -1
 Call search_for_similar_triangle(t_triA, n(0), tn(0), 1, 0)
 t_triA.triangle(n(1)) = 30000
 Call search_for_similar_triangle(t_triA, n(0), tn(1), 1, 0)
 last_tn_% = 0
 For l% = tn(0) + 1 To tn(1)
  k% = Dsimilar_triangle(l%).data(0).record.data1.index.i(n(0))
   last_tn_% = last_tn_% + 1
   ReDim Preserve tn_(last_tn_%) As Integer
    tn_(last_tn_%) = k%
 Next l%
 For l% = 1 To last_tn_%
  k% = tn_(l%)
   If triangle(Dsimilar_triangle(k%).data(0).triangle(n(1))).data(0).length_of_sides_value = "" Then
    re.data0.condition_data.condition_no = 0
    If read_ratio_of_similar_triangle(k%, tv$, 0, 0, 0, 0, 0, 0, re) Then
     temp_record.record_data.data0.condition_data.condition(1).ty = similar_triangle_
     temp_record.record_data.data0.condition_data.condition(1).no = k%
     temp_record.record_data.data0.condition_data.condition_no = 1
     Call add_record_to_record(re.data0.condition_data, temp_record.record_data.data0.condition_data)
     Call add_record_to_record(triangle(Dsimilar_triangle(k%).data(0).triangle(n(0))).data(0).length_of_sides, _
           temp_record.record_data.data0.condition_data)
     temp_record.record_data.data0.theorem_no = 111
     If n(0) = 0 Then
     tv$ = divide_string(triangle(Dsimilar_triangle(k%).data(0).triangle(n(0))).data(0).length_of_sides_value, _
           tv$, True, False)
     Else
     tv$ = time_string(triangle(Dsimilar_triangle(k%).data(0).triangle(n(0))).data(0).length_of_sides_value, _
           tv$, True, False)
     End If
     set_length_of_sides_from_length_of_sides = set_three_line_value( _
         triangle(Dsimilar_triangle(k%).data(0).triangle(n(1))).data(0).poi(0), _
         triangle(Dsimilar_triangle(k%).data(0).triangle(n(1))).data(0).poi(1), _
         triangle(Dsimilar_triangle(k%).data(0).triangle(n(1))).data(0).poi(1), _
         triangle(Dsimilar_triangle(k%).data(0).triangle(n(1))).data(0).poi(2), _
         triangle(Dsimilar_triangle(k%).data(0).triangle(n(1))).data(0).poi(1), _
         triangle(Dsimilar_triangle(k%).data(0).triangle(n(1))).data(0).poi(0), _
         0, 0, 0, 0, 0, 0, 0, 0, 0, "1", "1", "1", tv$, temp_record, 0, 0, 0)
         If set_length_of_sides_from_length_of_sides > 1 Then
             Exit Function
         End If
    End If
   End If
 Next l%
 End If
'****************
If th_chose(26).chose = 1 Then
 t_triA.triangle(n(0)) = triA%
 t_triA.triangle(n(1)) = -1
 Call search_for_total_equal_triangle(t_triA, n(0), tn(0), 1, 0)
 t_triA.triangle(n(1)) = 30000
 Call search_for_total_equal_triangle(t_triA, n(0), tn(1), 1, 0)
 last_tn_% = 0
 For l% = tn(0) + 1 To tn(1)
  k% = Dtotal_equal_triangle(l%).data(0).record.data1.index.i(n(0))
   last_tn_% = last_tn_% + 1
   ReDim Preserve tn_(last_tn_%) As Integer
    tn_(last_tn_%) = k%
 Next l%
 For l% = 1 To last_tn_%
  k% = tn_(l%)
   If triangle(Dtotal_equal_triangle(k%).data(0).triangle(n(1))).data(0).length_of_sides_value = "" Then
     temp_record.record_data.data0.condition_data.condition(1).ty = total_equal_triangle_
     temp_record.record_data.data0.condition_data.condition(1).no = k%
     temp_record.record_data.data0.condition_data.condition_no = 1
     Call add_record_to_record(triangle(Dtotal_equal_triangle(k%).data(0).triangle(n(0))).data(0).length_of_sides, _
           temp_record.record_data.data0.condition_data)
     temp_record.record_data.data0.theorem_no = 26
     set_length_of_sides_from_length_of_sides = set_three_line_value( _
         triangle(Dtotal_equal_triangle(k%).data(0).triangle(n(1))).data(0).poi(0), _
         triangle(Dtotal_equal_triangle(k%).data(0).triangle(n(1))).data(0).poi(1), _
         triangle(Dtotal_equal_triangle(k%).data(0).triangle(n(1))).data(0).poi(1), _
         triangle(Dtotal_equal_triangle(k%).data(0).triangle(n(1))).data(0).poi(2), _
         triangle(Dtotal_equal_triangle(k%).data(0).triangle(n(1))).data(0).poi(2), _
         triangle(Dtotal_equal_triangle(k%).data(0).triangle(n(1))).data(0).poi(0), _
         0, 0, 0, 0, 0, 0, 0, 0, 0, "1", "1", "1", _
           triangle(Dtotal_equal_triangle(k%).data(0).triangle(n(0))).data(0).length_of_sides_value, _
             temp_record, 0, 0, 0)
         If set_length_of_sides_from_length_of_sides > 1 Then
             Exit Function
         End If
    End If
 Next l%
 End If
Next i%
End Function

Public Function set_property_of_triangle_relation(ByVal triA1%, ByVal triA2%, ByVal value As String, re As total_record_type) As Byte
Dim i%, j%, tp%
Dim temp_record As total_record_type
temp_record = re
For i% = 0 To 2
 For j% = 0 To 2
  If th_chose(157).chose = 1 Then
  If is_same_two_point(triangle(triA1%).data(0).poi(i%), _
   triangle(triA1%).data(0).poi((i% + 1) Mod 3), _
    triangle(triA2%).data(0).poi(j%), triangle(triA2%).data(0).poi((j% + 1) Mod 3)) Then
     '共边
  tp = is_line_line_intersect( _
    line_number0(triangle(triA1%).data(0).poi(i%), _
    triangle(triA1%).data(0).poi((i% + 1) Mod 3), 0, 0), _
      line_number0(triangle(triA1%).data(0).poi((i% + 2) Mod 3), _
      triangle(triA2%).data(0).poi((j% + 2) Mod 3), 0, 0), 0, 0, False)
   If tp% > 0 Then
    temp_record.record_data.data0.theorem_no = 157
   set_property_of_triangle_relation = _
    set_Drelation(triangle(triA1%).data(0).poi((i% + 2) Mod 3), _
        tp%, tp%, triangle(triA2%).data(0).poi((j% + 2) Mod 3), _
           0, 0, 0, 0, 0, 0, value, _
            temp_record, 0, 0, 0, 0, 0, False)
If set_property_of_triangle_relation > 1 Then
 Exit Function
End If
   End If
ElseIf is_same_two_point(triangle(triA1%).data(0).poi(i%), _
   triangle(triA1%).data(0).poi((i% + 1) Mod 3), _
    triangle(triA2%).data(0).poi(j%), _
     triangle(triA2%).data(0).poi((j% + 2) Mod 3)) Then
     '共边
  tp% = is_line_line_intersect( _
      line_number0(triangle(triA1%).data(0).poi(i%), _
    triangle(triA1%).data(0).poi((i% + 1) Mod 3), 0, 0), _
       line_number0(triangle(triA1%).data(0).poi((i% + 2) Mod 3), _
      triangle(triA2%).data(0).poi((j% + 1) Mod 3), 0, 0), 0, 0, False)
   If tp% > 0 Then
    temp_record.record_data.data0.theorem_no = 156
   set_property_of_triangle_relation = _
    set_Drelation(triangle(triA1%).data(0).poi((i% + 2) Mod 3), _
        tp%, tp%, triangle(triA2%).data(0).poi((j% + 1) Mod 3), _
          0, 0, 0, 0, 0, 0, value, temp_record, 0, 0, 0, 0, 0, False)
If set_property_of_triangle_relation > 1 Then
 Exit Function
End If
   End If
End If
ElseIf th_chose(158).chose = 1 Then
 temp_record.record_data.data0.theorem_no = 158
  If line_number0(triangle(triA1%).data(0).poi(i%), _
   triangle(triA1%).data(0).poi((i% + 1) Mod 3), 0, 0) = _
     line_number0(triangle(triA2%).data(0).poi(j%), _
     triangle(triA2%).data(0).poi((j% + 1) Mod 3), 0, 0) And _
       triangle(triA1%).data(0).poi((i% + 2) Mod 3) = _
        triangle(triA2%).data(0).poi((j% + 2) Mod 3) Then
 set_property_of_triangle_relation = _
    set_Drelation(triangle(triA1%).data(0).poi(i%), _
        triangle(triA1%).data(0).poi((i% + 1) Mod 3), _
         triangle(triA2%).data(0).poi(j%), _
            triangle(triA2%).data(0).poi((j% + 1) Mod 3), _
             0, 0, 0, 0, 0, 0, value, temp_record, 0, 0, 0, 0, 0, False)
          If set_property_of_triangle_relation > 1 Then
           Exit Function
          End If
  ElseIf line_number0(triangle(triA1%).data(0).poi(i%), _
   triangle(triA1%).data(0).poi((i% + 1) Mod 3), 0, 0) = _
     line_number0(triangle(triA2%).data(0).poi(j%), _
     triangle(triA2%).data(0).poi((j% + 2) Mod 3), 0, 0) And _
       triangle(triA1%).data(0).poi((i% + 2) Mod 3) = _
        triangle(triA2%).data(0).poi((j% + 1) Mod 3) Then
  set_property_of_triangle_relation = _
    set_Drelation(triangle(triA1%).data(0).poi(i%), _
        triangle(triA1%).data(0).poi((i% + 1) Mod 3), _
         triangle(triA2%).data(0).poi(j%), _
            triangle(triA2%).data(0).poi((j% + 2) Mod 3), _
             0, 0, 0, 0, 0, 0, value, temp_record, 0, 0, 0, 0, 0, False)
          If set_property_of_triangle_relation > 1 Then
           Exit Function
          End If
End If
End If
   Next j%
    Next i%
End Function
Public Function set_V_line_value(ByVal p1%, ByVal p2%, ByVal n1%, ByVal n2%, ByVal l%, _
                 v As String, re As total_record_type, no%, is_initial As Boolean) As Byte
Dim i%, j%, tn%, triA%, temp_no%
Dim n_(3) As Integer
Dim n(1) As Integer
Dim tp(3) As Integer
Dim tl As Integer
Dim tA(1) As Integer
Dim ty As Byte
Dim lv As V_line_value_data0_type
Dim temp_record As total_record_type
Dim temp_record1 As total_record_type
Dim ts$
Dim level As Byte
Dim set_new_data As Boolean
'On Error GoTo set_line_value_error
If no% > 0 Then
 If V_line_value(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
  GoTo set_v_line_value_mark0
 End If
Else
 If v = "" Then
  v = "0"
 End If
 If v = "" Then
  v = "0"
 End If
 If no% = -1 Then
  display_inform = 1
 ElseIf InStr(1, v, "F", 0) > 0 Then
  Exit Function
 ElseIf v = "0" Then
  Exit Function
 End If
End If
If (p1% = p2% And no% = 0) Then
Exit Function
End If
display_inform = 0
temp_record = re
level = set_level(temp_record.record_data.data0.condition_data)
If level > 30 Then
Exit Function
End If
If is_V_line_value(p1%, p2%, n1%, n2%, l%, v, no%, n_(0), n_(1), _
     n_(2), n_(3), lv, is_initial) Then
 If no% > 0 And run_type < 10 Then
  set_V_line_value = set_string_value_(V_line_value(no%).data(0).value, _
                       lv.value, V_line_value_, no%, temp_record1.record_data, 0)
  Call simple_record(V_line_value_, no%, V_line_value(no%).data(0).record.data0.condition_data.level, level)
 End If
      Exit Function
End If
set_V_line_value_set:
If last_conditions.last_cond(1).v_line_value_no Mod 10 = 0 Then
 ReDim Preserve V_line_value(last_conditions.last_cond(1).v_line_value_no + 10) As V_line_value_type
End If
last_conditions.last_cond(1).v_line_value_no = last_conditions.last_cond(1).v_line_value_no + 1
'set_new_data = True
V_line_value(last_conditions.last_cond(1).v_line_value_no).data(0) = lv
V_line_value(last_conditions.last_cond(1).v_line_value_no).data(0).value = lv.value
V_line_value(last_conditions.last_cond(1).v_line_value_no).data(0).record = temp_record.record_data
V_line_value(last_conditions.last_cond(1).v_line_value_no).record_ = temp_record.record_
V_line_value(last_conditions.last_cond(1).v_line_value_no).record_.no_reduce = 0
For j% = 0 To 2
For i% = last_conditions.last_cond(1).v_line_value_no To n_(j%) + 2 Step -1
V_line_value(i%).data(0).record.data1.index.i(j%) = _
 V_line_value(i% - 1).data(0).record.data1.index.i(j%)
Next i%
V_line_value(n_(j%) + 1).data(0).record.data1.index.i(j%) = last_conditions.last_cond(1).v_line_value_no
Next j%
no% = last_conditions.last_cond(1).v_line_value_no
If InStr(1, V_line_value(no%).data(0).value, "[", 0) = 0 Then
       Dtwo_point_line(lv.v_line).data(0).v_value = lv.value
          Dtwo_point_line(lv.v_line).data(0).v_line_value_no = no
End If
 ts$ = set_display_string_of_V_line_value(V_line_value(no%).data(0), False)
    set_V_line_value = set_prove_proccess(ts$, line_value_, no%, V_line_value(no%).data(0).record.display_string)
    If set_V_line_value > 1 Then
      Exit Function
    Else
        set_V_line_value = set_property_of_V_line_value(no%, 0)
         Exit Function
    End If
set_v_line_value_mark0:
If V_line_value(no%).record_.no_reduce = 0 Or _
    V_line_value(no%).record_.no_reduce = 2 Or _
     V_line_value(no%).record_.no_reduce = 4 Then
      Call set_level_(V_line_value(no%).record_.no_reduce, 1)
'等量替换
End If
        set_V_line_value = set_property_of_V_line_value(no%, 1)
        If set_V_line_value > 1 Then
         Exit Function
        End If
set_v_line_value_combine:
If V_line_value(no%).record_.no_reduce < 2 Then
'If line_value(no%).data(0).record.data0.level <= 10 Then
  set_V_line_value = combine_v_line_value_with_v_line_value(no%)
  If set_V_line_value > 1 Then
   Exit Function
  End If
  set_V_line_value = combine_v_line_value_with_item(no%)
If V_line_value(no%).record_.no_reduce < 2 Then
V_line_value(no%).record_.no_reduce = _
 V_line_value(no%).record_.no_reduce + 2
End If
End If
Exit Function
set_V_line_value_error:
set_V_line_value = 0
If set_new_data Then
last_conditions.last_cond(1).v_line_value_no = temp_no%
For i% = 1 To temp_no%
V_line_value(i%).record_.index = V_line_value(i%).data(0).record.data1.index
Next i%
End If
set_line_value_error:
End Function

Public Sub remove_circle_center()
Dim i%, j%, k%, c%, l%, n%, m%
Dim tp(26) As Integer
Dim tp_(2) As Integer
Dim last_p%, last_p_%
For i% = 1 To C_display_picture.m_circle.Count
   If m_Circ(i%).data(0).data0.center > 0 Then
      c% = m_Circ(i%).data(0).data0.center
        For j% = 1 To C_display_wenti.m_last_input_wenti_no
           For k% = 0 To 50
            If C_display_wenti.m_point_no(j%, k%) = c% Then
              If C_display_wenti.m_no(j%) = 8 And k% = 3 Then
                GoTo remove_circle_center_mark0
              ElseIf C_display_wenti.m_no(j%) = 7 And k% = 0 Then
                GoTo remove_circle_center_mark0
              ElseIf C_display_wenti.m_no(j%) = 11 And k% = 3 Then
                GoTo remove_circle_center_mark0
              ElseIf C_display_wenti.m_no(j%) = -33 And k% = 1 Then
                GoTo remove_circle_center_mark1
              ElseIf C_display_wenti.m_no(j%) = -32 And (k% = 1 Or k% = 3) Then
                GoTo remove_circle_center_mark1
              ElseIf C_display_wenti.m_no(j%) = 12 And (k% = 1 Or k% = 0) Then
                GoTo remove_circle_center_mark1
              Else
                GoTo remove_circle_center_mark0
              End If

            ElseIf C_display_wenti.m_condition(j%, k%) = empty_char Then
               GoTo remove_circle_center_mark1
            End If
           Next k%
remove_circle_center_mark1:
        Next j%
        Call set_point_visible(c%, 0, False)
        Call set_point_no_reduce(c%, True)
   End If
remove_circle_center_mark0:
Next i%
For i% = last_conditions.last_cond(1).squre_no To 1 Step -1
     k% = -Dsqure(i%).record_.display_no - 1
      For l% = 0 To 3
         For j% = 1 To C_display_wenti.m_last_input_wenti_no
          If j% <> k% Then
            For n% = 0 To 50
            If C_display_wenti.m_point_no(j%, n%) = Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(l%) Then '先出现的点
             If C_display_wenti.m_no(j%) = -12 Then
              For c% = 1 To last_p%
               If tp(c%) = Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(l%) Then
                GoTo remove_circle_center_mark3
               End If
              Next c%
              last_p% = last_p% + 1
              tp(last_p%) = Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(l%)
              GoTo remove_circle_center_mark3
              Else
              For c% = 1 To last_p%
               If tp(c%) = Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(l%) Then
                 last_p% = last_p% - 1
                  For m% = c To last_p%
                   tp(m%) = tp(m% + 1)
                  Next m%
                   tp(last_p% + 1) = 0
               End If
              Next c%
              GoTo remove_circle_center_mark2
              End If
            ElseIf C_display_wenti.m_condition(j%, n%) = empty_char Then
             GoTo remove_circle_center_mark3 '下一句
            End If
            Next n%
          End If
remove_circle_center_mark3:
         Next j%
     Call set_point_visible(Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(l%), 0, False)
     Call set_point_no_reduce(Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(l%), True)
remove_circle_center_mark2:
        Next l%
Next i%
For i% = last_conditions.last_cond(1).squre_no To 2 Step -1
  For j% = i% - 1 To 1 Step -1
       last_p_% = 0
        tp_(0) = 0
        tp_(1) = 0
        tp_(2) = 0
       For k% = 0 To 3
        For l% = 0 To 3
         If Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(k%) = _
              Dpolygon4(Dsqure(j%).data(0).polygon4_no).data(0).poi(l%) Then
           tp_(last_p_%) = Dpolygon4(Dsqure(i%).data(0).polygon4_no).data(0).poi(k%)
           last_p_% = last_p_% + 1
         End If
        Next l%
       Next k%
       If last_p_% = 2 Then
          For k% = 0 To 1
           For c% = 1 To last_p%
            If tp_(k%) = tp(c%) Then
             Call set_point_visible(tp_(k%), 0, True)
             Call set_point_no_reduce(tp_(k%), True)
            End If
           Next c%
          Next k%
          GoTo remove_circle_center_mark6
       End If
  Next j%
remove_circle_center_mark6:
Next i%
End Sub

Public Sub set_total_angle0(ByVal l1%, ByVal l2%)
Dim t_A As total_angle_data_type
t_A.line_no(0) = l1%
t_A.line_no(1) = l2%
Call set_total_angle(t_A, 0, 0, False)
End Sub
Public Function total_angle_no(ByVal l1%, ByVal l2%) As Integer
Dim t_A As total_angle_data_type
t_A.line_no(0) = l1%
t_A.line_no(1) = l2%
Call set_total_angle(t_A, 0, total_angle_no, False)
End Function

Public Function set_length_of_polygon(l_of_p As length_of_polygon_type, no%, re As total_record_type) As Byte
Dim i%, j%
Dim temp_record As total_record_type
temp_record = re
If no% > 0 Then
          GoTo set_length_of_polygon_mark0
ElseIf conclusion_data(l_of_p.record_.conclusion_no - 1).no(0) > 0 Then
   Exit Function
End If
For i% = 1 To last_conditions.last_cond(1).length_of_polygon_no
 If l_of_p.polygon_ty = length_of_polygon(i%).polygon_ty And _
      l_of_p.polygon_no = length_of_polygon(i%).polygon_no Then
    If l_of_p.data(0).last_segment = length_of_polygon(i%).data(0).last_segment Then
      For j% = 1 To l_of_p.data(0).last_segment
        If l_of_p.data(0).segment(j%).line_no = length_of_polygon(i%).data(0).segment(j%).line_no Then
         If l_of_p.data(0).segment(j%).poi(0) = length_of_polygon(i%).data(0).segment(j%).poi(0) And _
            l_of_p.data(0).segment(j%).poi(1) = length_of_polygon(i%).data(0).segment(j%).poi(1) Then
             If l_of_p.data(0).segment(j%).para <> length_of_polygon(i%).data(0).segment(j%).para Then
              GoTo set_length_of_polygon_mark1
             End If
         Else
          GoTo set_length_of_polygon_mark1
         End If
        Else
          GoTo set_length_of_polygon_mark1
        End If
      Next j%
      Exit Function
    Else
          GoTo set_length_of_polygon_mark1
    End If
 Else
          GoTo set_length_of_polygon_mark1
 End If
set_length_of_polygon_mark1:
Next i%
Call set_level(temp_record.record_data.data0.condition_data)
If last_conditions.last_cond(1).length_of_polygon_no Mod 10 = 0 Then
ReDim Preserve length_of_polygon(last_conditions.last_cond(1).length_of_polygon_no + 10) As _
                    length_of_polygon_type
End If
last_conditions.last_cond(1).length_of_polygon_no = last_conditions.last_cond(1).length_of_polygon_no + 1
no% = last_conditions.last_cond(1).length_of_polygon_no
length_of_polygon(no%) = l_of_p
length_of_polygon(no%).record_ = l_of_p.record_
length_of_polygon(no%).data(0).record = temp_record.record_data
set_length_of_polygon = set_prove_proccess(set_display_string_for_length_of_polygon(length_of_polygon(no%), 0, False), _
                 length_of_polygon_, no%, length_of_polygon(no%).data(0).record.display_string)
    Exit Function
set_length_of_polygon_mark0:
set_length_of_polygon = combine_length_of_polygon_with_line_value(no%)
If set_length_of_polygon > 1 Then
   Exit Function
End If
set_length_of_polygon = combine_length_of_polygon_with_two_line_value(no%)
If set_length_of_polygon > 1 Then
   Exit Function
End If
set_length_of_polygon = combine_length_of_polygon_with_line3_value(no%)
If set_length_of_polygon > 1 Then
   Exit Function
End If
End Function

Public Function set_display_string_for_length_of_polygon(l_of_p As length_of_polygon_type, _
                     ty As Byte, is_depend As Boolean) As String
Dim ts As String
Dim i%, tl%
If is_depend Then
 For tl% = 1 To l_of_p.data(0).last_segment
   For i% = 0 To 1
    Call set_depend_from_point(l_of_p.data(0).segment(1).poi(i%))
   Next i%
 Next tl%
End If
If l_of_p.data(0).last_segment > 0 Then
If l_of_p.data(0).segment(1).para = "1" Then
ts = m_poi(l_of_p.data(0).segment(1).poi(0)).data(0).data0.name
Else
ts = l_of_p.data(0).segment(1).para + m_poi(l_of_p.data(0).segment(1).poi(0)).data(0).data0.name
End If
tl% = l_of_p.data(0).segment(1).lin
For i% = 2 To l_of_p.data(0).last_segment
  If l_of_p.data(0).segment(i%).poi(0) <> l_of_p.data(0).segment(i% - 1).poi(1) Or _
       l_of_p.data(0).segment(i%).para <> l_of_p.data(0).segment(i% - 1).para Or _
          tl% <> l_of_p.data(0).segment(i%).line_no Then
    If l_of_p.data(0).segment(i%).para = "1" Then
      ts = ts + m_poi(l_of_p.data(0).segment(i% - 1).poi(1)).data(0).data0.name + "+" + _
          m_poi(l_of_p.data(0).segment(i%).poi(0)).data(0).data0.name
    Else
      ts = ts + m_poi(l_of_p.data(0).segment(i% - 1).poi(1)).data(0).data0.name + "+" + _
             l_of_p.data(0).segment(i%).para + _
               m_poi(l_of_p.data(0).segment(i%).poi(0)).data(0).data0.name
    End If
   End If
     tl% = l_of_p.data(0).segment(i%).lin
Next i%
ts = ts + m_poi(l_of_p.data(0).segment(l_of_p.data(0).last_segment).poi(1)).data(0).data0.name
If l_of_p.data(0).value <> "" And l_of_p.data(0).value <> "0" Then
 ts = ts + "+" + l_of_p.data(0).value
End If
Else
ts = l_of_p.data(0).value
End If
If ty = 0 Then
 If l_of_p.polygon_ty = triangle_ Then
   set_display_string_for_length_of_polygon = LoadResString_from_inpcond(62, _
      set_triangle_display_string(l_of_p.polygon_no, 1, no_display, is_depend, 1, 0) + "\\3\\" + _
           ts)
 Else
   set_display_string_for_length_of_polygon = LoadResString_from_inpcond(64, _
      set_display_polygon4(Dpolygon4(l_of_p.polygon_no).data(0), 0, is_depend, 1, 0) + "\\4\\" + _
         ts)
 End If
Else
 If l_of_p.polygon_ty = triangle_ Then
   If l_of_p.data(0).record.data0.condition_data.condition_no = 0 Then
    set_display_string_for_length_of_polygon = LoadResString_from_inpcond(62, _
      set_triangle_display_string(l_of_p.polygon_no, 1, no_display, is_depend, 1, 0) + _
       "\\3\\" + ts)
   Else
    set_display_string_for_length_of_polygon = "   =" + ts
   End If
 Else
   If l_of_p.data(0).record.data0.condition_data.condition_no = 0 Then
    set_display_string_for_length_of_polygon = LoadResString_from_inpcond(64, _
      set_display_polygon4(Dpolygon4(l_of_p.polygon_no).data(0), 0, is_depend, 1, 0) + _
        "\\4\\" + ts)
   Else
    set_display_string_for_length_of_polygon = "   =" + ts
   End If
 End If
End If
End Function

Public Sub different_two_line(ByVal p1%, ByVal p2%, ByVal n1%, _
                       ByVal n2%, ByVal p3%, ByVal p4%, ByVal n3%, ByVal n4%, _
                          p5%, p6%, n5%, n6%, ty As Integer)
If n1% = n3% Then
 If n4% < n2% Then
 ty = 1
 p5% = p4%
 p6% = p2%
 n5% = n4%
 p6% = n2%
 ElseIf n4% > n2% Then
 ty = -1
 p5% = p2%
 p6% = p4%
 n5% = n2%
 p6% = n4%
 End If
ElseIf n2% = n4% Then
 If n1% < n3% Then
 ty = 1
 p5% = p1%
 p6% = p3%
 n5% = n1%
 p6% = n3%
 ElseIf n1% > n3% Then
 ty = -1
 p5% = p3%
 p6% = p1%
 n5% = n3%
 p6% = n1%
 End If
End If
End Sub

Public Function set_equal_chord(ByVal c%, ByVal p1%, ByVal p2%, ByVal p3%, ByVal l1%, ByVal l3%, re As total_record_type) As Byte
Dim temp_record As total_record_type
Dim l2%, l4%, i%, tn1%, tn2%, j%
Dim tp1(1) As Integer
Dim tp2(1) As Integer
If th_chose(124).chose = 1 Then
 temp_record = re
 temp_record.record_data.data0.theorem_no = 124
  For i% = 1 To last_conditions.last_cond(1).verti_no
      If Dverti(i%).data(0).line_no(0) = l1% Then
         If Dverti(i%).data(0).inter_poi = p2% Then
            l2% = Dverti(i%).data(0).line_no(1)
             tn1% = i%
         End If
      ElseIf Dverti(i%).data(0).line_no(0) = l3% Then
         If Dverti(i%).data(0).inter_poi = p3% Then
            l4% = Dverti(i%).data(0).line_no(1)
             tn2% = i%
         End If
      ElseIf Dverti(i%).data(0).line_no(1) = l1% Then
         If Dverti(i%).data(0).inter_poi = p2% Then
            l2% = Dverti(i%).data(0).line_no(0)
              tn1% = i%
         End If
      ElseIf Dverti(i%).data(0).line_no(1) = l3% Then
         If Dverti(i%).data(0).inter_poi = p3% Then
            l4% = Dverti(i%).data(0).line_no(0)
             tn2% = i%
         End If
      End If
  Next i%
  If tn1% > 0 And tn2% > 0 Then
     For i% = 1 To m_Circ(c%).data(0).data0.in_point(0)
       For j% = 1 To m_lin(l2%).data(0).data0.in_point(0)
         If m_lin(l2%).data(0).data0.in_point(j%) = m_Circ(c%).data(0).data0.in_point(i%) Then
            If tp1(0) = 0 Then
               tp1(0) = m_lin(l2%).data(0).data0.in_point(j%)
            Else
               tp1(1) = m_lin(l2%).data(0).data0.in_point(j%)
            End If
         End If
       Next j%
       For j% = 1 To m_lin(l4%).data(0).data0.in_point(0)
         If m_lin(l4%).data(0).data0.in_point(j%) = m_Circ(c%).data(0).data0.in_point(i%) Then
            If tp2(0) = 0 Then
               tp2(0) = m_lin(l4%).data(0).data0.in_point(j%)
            Else
               tp2(1) = m_lin(l4%).data(0).data0.in_point(j%)
            End If
         End If
       Next j%
     Next i%
    If tp1(0) > 0 And tp1(1) > 0 And tp2(0) > 0 And tp2(1) > 0 Then
       Call add_conditions_to_record(verti_, tn1%, tn2%, 0, temp_record.record_data.data0.condition_data)
        set_equal_chord = set_equal_dline(tp1(0), tp1(1), tp2(0), tp2(1), 0, 0, 0, 0, 0, 0, 0, _
              temp_record, 0, 0, 0, 0, 0, False)
              If set_equal_chord > 1 Then
                 Exit Function
              End If
    End If
  End If
End If

End Function
Public Function set_distance_of_paral_line(ByVal pl%, ByVal lv_n%, ByVal value$, no%, re As record_data_type) As Byte
Dim i%, j%, k%, l%, m%, poly_no%
Dim tv$
Dim temp_record As total_record_type
 temp_record.record_data = re
If value$ = "F" Then
 Exit Function
ElseIf no% > 0 Then
  GoTo set_distance_of_paral_line_mark0
End If
Call set_level(temp_record.record_data.data0.condition_data)
If Dparal(pl%).data(0).distance_no > 0 Then
   If Ddistance_of_paral_line(Dparal(pl%).data(0).distance_no).data(0).lv_no = 0 And lv_n% > 0 Then
       If Ddistance_of_paral_line(Dparal(pl%).data(0).distance_no).data(0).record.data0.condition_data.level >= _
           temp_record.record_data.data0.condition_data.level Then
            Ddistance_of_paral_line(Dparal(pl%).data(0).distance_no).data(0).lv_no = lv_n%
             Ddistance_of_paral_line(Dparal(pl%).data(0).distance_no).data(0).record = _
               temp_record.record_data
       End If
   End If
Else
If last_conditions.last_cond(1).distance_of_paral_line_no Mod 10 = 0 Then
ReDim Preserve Ddistance_of_paral_line(last_conditions.last_cond(1).distance_of_paral_line_no + 10) As distance_of_paral_line_data_type
End If
last_conditions.last_cond(1).distance_of_paral_line_no = _
     last_conditions.last_cond(1).distance_of_paral_line_no + 1
  no% = last_conditions.last_cond(1).distance_of_paral_line_no
Ddistance_of_paral_line(no%).data(0).lv_no = lv_n%
Ddistance_of_paral_line(no%).data(0).paral_no = pl%
If value$ <> "" Then
Ddistance_of_paral_line(no%).data(0).value = value$
Else
Ddistance_of_paral_line(no%).data(0).value = line_value(lv_n%).data(0).data0.value
End If
Ddistance_of_paral_line(no%).data(0).record = re
Dparal(pl%).data(0).distance_no = no%
Dparal(pl%).data(0).distance = line_value(lv_n%).data(0).data0.value
End If
set_distance_of_paral_line_mark0:
'For i% = 2 To m_lin(Dparal(Ddistance_of_paral_line(no%).data(0).paral_no).data(0).data0.line_no(0)).data(0).data0.in_point(0)
' For j% = 1 To i% - 1
'  For k% = 2 To lin(Dparal(Ddistance_of_paral_line(no%).data(0).paral_no).data(0).data0.line_no(1)).data(0).data0.in_point(0)
'   For l% = 1 To k% - 1
'    poly_no% = polygon4_number( _
'        lin(Dparal(Ddistance_of_paral_line(no%).data(0).paral_no).data(0).data0.line_no(0)).data(0).data0.in_point(i%), _
'        lin(Dparal(Ddistance_of_paral_line(no%).data(0).paral_no).data(0).data0.line_no(0)).data(0).data0.in_point(j%), _
'        lin(Dparal(Ddistance_of_paral_line(no%).data(0).paral_no).data(0).data0.line_no(1)).data(0).data0.in_point(l%), _
'        lin(Dparal(Ddistance_of_paral_line(no%).data(0).paral_no).data(0).data0.line_no(1)).data(0).data0.in_point(k%))
'        If poly_no% > 0 Then
'         If Dpolygon4(poly_no%).data(0).area_value <> "" Then
'         If Dpolygon4(poly_no%).data(0).ty = tixing_ Then
'            temp_record.record_data.data0.condition_data.condition_no = 0
'            Call add_conditions_to_record(area_of_element_, Dpolygon4(poly_no%).data(0).area_value_no, _
                  0, 0, temp_record.record_data.data0.condition_data)
'            If Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).distance_paral_no > 0 Then
'            Call add_record_to_record(Ddistance_of_paral_line(Dpolygon4(poly_no%).data(0).height_no).data(0).record, _
'                    temp_record.record_data.data0.condition_data)
'            tv$ = divide_string(Dpolygon4(poly_no%).data(0).area_value, _
'                   line_value(Ddistance_of_paral_line(Dpolygon4(poly_no%).data(0).height_no).data(0).lv_no).data(0).data0.value, True, False)
'            Else
'            Call add_conditions_to_record(distance_of_paral_line, no%, _
                  0, 0, temp_record.record_data.data0.condition_data)
'            tv$ = divide_string(Dpolygon4(poly_no%).data(0).area_value, _
                   Ddistance_of_paral_line(no%).data(0).dis_v, True, False)
'            End If
'            set_distance_of_paral_line = set_two_line_value(Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).poi(0), _
'                     Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).poi(1), _
'                      Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).poi(2), _
'                       Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).poi(3), _
'                        0, 0, 0, 0, 0, 0, "1", "1", time_string(tv$, "2", True, False), temp_record, 0, 0)
'            If set_distance_of_paral_line > 1 Then
'               Exit Function
'            End If
'            If Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).mid_poi(0) > 0 And _
                 Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).mid_poi(1) > 0 Then'
'            For m% = 0 To 3
'            Call add_conditions_to_record(Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).mid_point_no(m%).ty, _
'                     Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).mid_point_no(m%).no, 0, 0, _
'                       temp_record.record_data.data0.condition_data)
'            Next m%
'            set_distance_of_paral_line = set_line_value(Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).mid_poi(0), _
                     Dtixing(Dpolygon4(poly_no%).data(0).no).data(0).mid_poi(1), _
                        tv$, 0, 0, 0, temp_record, 0, 0)
'            If set_distance_of_paral_line > 1 Then
'               Exit Function
'            End If
'           End If
'         ElseIf Dpolygon4(poly_no%).data(0).ty = rhombus_ Then
'         ElseIf Dpolygon4(poly_no%).data(0).ty = Squre Then
'         ElseIf Dpolygon4(poly_no%).data(0).ty = long_squre_ Then
'         ElseIf Dpolygon4(poly_no%).data(0).ty = parallelogram_ Then
            
'         End If
'        End If
'       End If
'   Next l%
'  Next k%
' Next j%
'Next i%
End Function
Public Function set_distance_of_point_line()

End Function
Public Function set_new_value(ite() As item0_data_type, para() As String, st%, en%) As String
Dim tv$
Dim no%
If st% = en% Then
 If ite(st%).sig = "~" Then
  If ite(st%).poi(0) > 0 And ite(st%).poi(1) > 0 Then
    set_new_value = next_char(0, "", 0, 0)
     Call add_new_value_for_line0(ite(st%).poi(0), ite(st%).poi(1), set_new_value, 0, no%)
      Call next_char(0, set_new_value, line_value_, no%)
      set_new_value = time_string(set_new_value, para(st%), True, False)
  ElseIf ite(st%).poi(1) = -6 Then
    set_new_value = next_char(0, "", 0, 0)
     Call add_new_value_for_angle0(ite(st%).poi(0), set_new_value, 0, no%)
      Call next_char(0, set_new_value, angle3_value_, no%)
       set_new_value = time_string(set_new_value, para(st%), True, False)
  End If
 ElseIf ite(st%).sig = "*" Then
 ElseIf ite(st%).sig = "/" Then
  If ite(st%).poi(1) > 0 And ite(st%).poi(3) > 0 Then
    set_new_value = next_char(0, "", 0, 0)
     Call add_new_value_for_relation0(ite(st%).poi(0), ite(st%).poi(1), _
            ite(st%).poi(2), ite(st%).poi(3), set_new_value, 0, no%)
      Call next_char(0, set_new_value, relation_, no%)
       set_new_value = time_string(set_new_value, para(st%), True, False)
  End If
 End If
ElseIf st% > en% Then
set_new_value = "0"
Else
tv$ = set_new_value(ite(), para(), st% + 1, en%)
set_new_value = add_string(set_new_value(ite(), para(), st%, st%), tv$, True, False)
End If
End Function

Public Function set_tangent_circle(ByVal c1%, ByVal c2%, ByVal co_poi%, ByVal tangent_l%, _
           no%, re As total_record_type) As Byte
Dim i%
For i% = 1 To last_conditions.last_cond(1).tangent_circle_no
 If is_same_two_point(tangent_circle(i%).data(0).circ(0), _
       tangent_circle(i%).data(0).circ(1), c1%, c2%) Then
         Exit Function
 End If
Next i%
If c1% > c2% Then
 Call exchange_two_integer(c1%, c2%)
End If
If last_conditions.last_cond(1).tangent_circle_no Mod 10 = 0 Then
ReDim Preserve tangent_circle(last_conditions.last_cond(1).tangent_circle_no + 10) As tangent_circle_type
End If
last_conditions.last_cond(1).tangent_circle_no = _
     last_conditions.last_cond(1).tangent_circle_no + 1
      no% = last_conditions.last_cond(1).tangent_circle_no
tangent_circle(no%).data(0).tangent_line = tangent_l%
tangent_circle(no%).data(0).circ(0) = c1%
tangent_circle(no%).data(0).circ(1) = c2%
tangent_circle(no%).data(0).commom_tangent_point = co_poi%
tangent_circle(no%).data(0).record = re.record_data
tangent_circle(no%).record_ = re.record_
End Function
Public Function set_squre_length(s_no%) As Byte
Dim temp_record As total_record_type
Dim v(2) As String
Dim tv$
Dim i%
If Dsqure(s_no%).data(0).is_set_length Then
   Exit Function
Else
 temp_record.record_data.data0.condition_data.condition_no = 1
  temp_record.record_data.data0.condition_data.condition(1).ty = Squre
   temp_record.record_data.data0.condition_data.condition(1).no = s_no%
 If Dsqure(s_no%).data(0).length_of_side_no Then
  Call add_conditions_to_record(line_value_, Dsqure(s_no%).data(0).length_of_side_no, _
      0, 0, temp_record.record_data.data0.condition_data)
       Dsqure(s_no%).data(0).is_set_length = True
    v(0) = line_value(Dsqure(s_no%).data(0).length_of_side_no).data(0).data0.value
    v(1) = time_string(v(0), "'2", True, False)
    v(2) = divide_string(v(1), "2", True, False)
 ElseIf Dsqure(s_no%).data(0).length_of_diag_no Then
  Call add_conditions_to_record(line_value_, Dsqure(s_no%).data(0).length_of_diag_no, _
      0, 0, temp_record.record_data.data0.condition_data)
       Dsqure(s_no%).data(0).is_set_length = True
    v(1) = line_value(Dsqure(s_no%).data(0).length_of_diag_no).data(0).data0.value
    v(0) = divide_string(v(1), "'2", True, False)
    v(2) = divide_string(v(1), "2", True, False)
 ElseIf Dsqure(s_no%).data(0).radii_no Then
  Call add_conditions_to_record(line_value_, Dsqure(s_no%).data(0).radii_no, _
      0, 0, temp_record.record_data.data0.condition_data)
       Dsqure(s_no%).data(0).is_set_length = True
    v(2) = line_value(Dsqure(s_no%).data(0).radii_no).data(0).data0.value
    v(1) = time_string(v(2), "2", True, False)
    v(0) = divide_string(v(2), "'2", True, False)
 Else
  Exit Function
 End If
 For i% = 0 To 3
 set_squre_length = set_line_value(Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi(i%), _
      Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi((i% + 1) Mod 4), _
        v(0), 0, 0, 0, temp_record, 0, 0, False)
    If set_squre_length > 1 Then
    Exit Function
    End If
 Next i%
     tv$ = time_string(v(0), v(0), False, False)
     set_squre_length = set_area_of_polygon0(Dsqure(s_no%).data(0).polygon4_no, _
        tv$, temp_record, 0, 0)
    If set_squre_length > 1 Then
     Exit Function
    End If
     tv$ = divide_string(tv$, "2", True, False)
     set_squre_length = set_area_of_triangle(Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).triAngle1(0), _
        tv$, temp_record, 0, 0)
    If set_squre_length > 1 Then
     Exit Function
    End If
     set_squre_length = set_area_of_triangle(Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).triAngle1(1), _
        tv$, temp_record, 0, 0)
    If set_squre_length > 1 Then
     Exit Function
    End If
     set_squre_length = set_area_of_triangle(Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).triAngle2(0), _
        tv$, temp_record, 0, 0)
    If set_squre_length > 1 Then
     Exit Function
    End If
     set_squre_length = set_area_of_triangle(Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).triAngle2(1), _
        tv$, temp_record, 0, 0)
    If set_squre_length > 1 Then
     Exit Function
    End If
 set_squre_length = set_line_value(Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi(0), _
      Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi(2), _
        v(1), 0, 0, 0, temp_record, 0, 0, False)
    If set_squre_length > 1 Then
    Exit Function
    End If
 set_squre_length = set_line_value(Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi(1), _
      Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi(3), _
        v(1), 0, 0, 0, temp_record, 0, 0, False)
    If set_squre_length > 1 Then
    Exit Function
    End If
 If Dsqure(s_no%).data(0).four_point_on_circle_no > 0 Then
  If m_Circ(Dsqure(s_no%).data(0).four_point_on_circle_no).data(0).data0.center > 0 Then
   If m_poi(m_Circ(Dsqure(s_no%).data(0).four_point_on_circle_no).data(0).data0.center).data(0).data0.visible > 0 Then
    For i% = 0 To 3
     set_squre_length = set_line_value(Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi(i%), _
      m_Circ(Dsqure(s_no%).data(0).four_point_on_circle_no).data(0).data0.center, _
        v(2), 0, 0, 0, temp_record, 0, 0, False)
    If set_squre_length > 1 Then
    Exit Function
    End If
    Next i%
   End If
  End If
 End If
End If
End Function

Public Function set_similar_triangle_for_squre(ByVal s_no%) As Byte
Dim i%, j%
Dim temp_record As total_record_type
If Dsqure(s_no%).data(0).four_point_on_circle_no > 0 Then
 If m_Circ(Dsqure(s_no%).data(0).four_point_on_circle_no).data(0).data0.center > 0 Then
  If m_poi(m_Circ(Dsqure(s_no%).data(0).four_point_on_circle_no).data(0).data0.center).data(0).data0.visible > 0 Then
   temp_record.record_data.data0.condition_data.condition_no = 1
   temp_record.record_data.data0.condition_data.condition(1).ty = Squre
   temp_record.record_data.data0.condition_data.condition(1).no = s_no%
   For i% = 0 To 3
    For j% = 0 To 3
   set_similar_triangle_for_squre = set_similar_triangle( _
        Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi(i%), _
         Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi((i% + 1) Mod 4), _
          Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi((i% + 2) Mod 4), _
        Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi(j%), _
         m_Circ(Dsqure(s_no%).data(0).four_point_on_circle_no).data(0).data0.center, _
          Dpolygon4(Dsqure(s_no%).data(0).polygon4_no).data(0).poi((j% + 1) Mod 4), _
           temp_record, 0, 0, 0)
   If set_similar_triangle_for_squre > 1 Then
      Exit Function
   End If
   Next j%
   Next i%
   End If
 End If
End If
End Function

Public Function set_property_of_equal_sides_tixing(ByVal eqs_tixing_no%, re As total_record_type) As Byte
set_property_of_equal_sides_tixing = set_property_of_tixing(eqs_tixing_no%, re)
Dim temp_record As total_record_type
 If set_property_of_equal_sides_tixing > 1 Then
    Exit Function
 End If
If Dtixing(eqs_tixing_no%).data(0).ty = equal_side_tixing_ Then
   temp_record = re
    set_property_of_equal_sides_tixing = set_equal_dline(Dtixing(eqs_tixing_no%).data(0).poi(0), _
      Dtixing(eqs_tixing_no%).data(0).poi(3), Dtixing(eqs_tixing_no%).data(0).poi(2), _
       Dtixing(eqs_tixing_no%).data(0).poi(1), 0, 0, 0, 0, 0, 0, 0, temp_record, _
         0, 0, 0, 0, 0, False)
    If set_property_of_equal_sides_tixing > 1 Then
       Exit Function
    End If
    set_property_of_equal_sides_tixing = set_equal_dline(Dtixing(eqs_tixing_no%).data(0).poi(0), _
      Dtixing(eqs_tixing_no%).data(0).poi(2), Dtixing(eqs_tixing_no%).data(0).poi(1), _
       Dtixing(eqs_tixing_no%).data(0).poi(3), 0, 0, 0, 0, 0, 0, 0, temp_record, _
         0, 0, 0, 0, 0, False)
    If set_property_of_equal_sides_tixing > 1 Then
       Exit Function
    End If
    set_property_of_equal_sides_tixing = set_three_angle_value( _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(3), Dtixing(eqs_tixing_no%).data(0).poi(0), _
        Dtixing(eqs_tixing_no%).data(0).poi(1), "", 0)), _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(0), Dtixing(eqs_tixing_no%).data(0).poi(1), _
        Dtixing(eqs_tixing_no%).data(0).poi(2), "", 0)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, _
         0, 0, 0, False)
    If set_property_of_equal_sides_tixing > 1 Then
       Exit Function
    End If
    set_property_of_equal_sides_tixing = set_three_angle_value( _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(1), Dtixing(eqs_tixing_no%).data(0).poi(2), _
        Dtixing(eqs_tixing_no%).data(0).poi(3), "", 0)), _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(2), Dtixing(eqs_tixing_no%).data(0).poi(3), _
        Dtixing(eqs_tixing_no%).data(0).poi(0), "", 0)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, _
         0, 0, 0, False)
    If set_property_of_equal_sides_tixing > 1 Then
       Exit Function
    End If
    set_property_of_equal_sides_tixing = set_three_angle_value( _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(1), Dtixing(eqs_tixing_no%).data(0).poi(0), _
        Dtixing(eqs_tixing_no%).data(0).poi(2), "", 0)), _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(0), Dtixing(eqs_tixing_no%).data(0).poi(1), _
        Dtixing(eqs_tixing_no%).data(0).poi(3), "", 0)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, _
         0, 0, 0, False)
    If set_property_of_equal_sides_tixing > 1 Then
       Exit Function
    End If
    set_property_of_equal_sides_tixing = set_three_angle_value( _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(3), Dtixing(eqs_tixing_no%).data(0).poi(0), _
        Dtixing(eqs_tixing_no%).data(0).poi(2), "", 0)), _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(3), Dtixing(eqs_tixing_no%).data(0).poi(1), _
        Dtixing(eqs_tixing_no%).data(0).poi(2), "", 0)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, _
         0, 0, 0, False)
    If set_property_of_equal_sides_tixing > 1 Then
       Exit Function
    End If
    set_property_of_equal_sides_tixing = set_three_angle_value( _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(0), Dtixing(eqs_tixing_no%).data(0).poi(2), _
        Dtixing(eqs_tixing_no%).data(0).poi(1), "", 0)), _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(0), Dtixing(eqs_tixing_no%).data(0).poi(3), _
        Dtixing(eqs_tixing_no%).data(0).poi(1), "", 0)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, _
         0, 0, 0, False)
    If set_property_of_equal_sides_tixing > 1 Then
       Exit Function
    End If
    set_property_of_equal_sides_tixing = set_three_angle_value( _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(0), Dtixing(eqs_tixing_no%).data(0).poi(2), _
        Dtixing(eqs_tixing_no%).data(0).poi(3), "", 0)), _
       Abs(angle_number(Dtixing(eqs_tixing_no%).data(0).poi(2), Dtixing(eqs_tixing_no%).data(0).poi(3), _
        Dtixing(eqs_tixing_no%).data(0).poi(1), "", 0)), 0, "1", "-1", "0", "0", 0, temp_record, 0, 0, 0, _
         0, 0, 0, False)
    If set_property_of_equal_sides_tixing > 1 Then
       Exit Function
    End If
End If
End Function
Public Function set_property_of_tixing(ByVal tixing_no%, re As total_record_type) As Byte
Dim tn(1) As Integer
Dim tl_v$
Dim temp_record As total_record_type
Dim l_v0 As line_value_data0_type
Dim t_l_v0 As two_line_value_data0_type
Dim md As mid_point_data0_type
Dim cond_ty As Byte
If Dtixing(tixing_no%).data(0).buttom_(0).no = 0 Or Dtixing(tixing_no%).data(0).buttom_(0).ty = two_line_value_ Then
 If is_line_value(Dtixing(tixing_no%).data(0).poi(0), Dtixing(tixing_no%).data(0).poi(1), 0, 0, 0, "", _
      tn(0), -1000, 0, 0, 0, l_v0) = 1 Then
       If Dtixing(tixing_no%).data(0).buttom_(0).ty = two_line_value_ Then
        tl_v$ = two_line_value(Dtixing(tixing_no%).data(0).buttom_(0).no%).data(0).data0.value
        temp_record = re
         Call add_conditions_to_record(two_line_value_, Dtixing(tixing_no%).data(0).buttom_(0).no, _
             0, 0, temp_record.record_data.data0.condition_data)
        Dtixing(tixing_no%).data(0).buttom_(0).ty = line_value_
         Dtixing(tixing_no%).data(0).buttom_(0).no = tn(0)
        Dtixing(tixing_no%).data(0).buttom_(1).ty = line_value_
          Dtixing(tixing_no%).data(0).buttom_(1).no = 0
           Dtixing(tixing_no%).data(0).line_value_no(0) = tn(0)
          set_property_of_tixing = set_line_value(Dtixing(tixing_no%).data(0).poi(2), Dtixing(tixing_no%).data(0).poi(3), _
            minus_string(tl_v$, line_value(tn(0)).data(0).data0.value, True, False), 0, 0, 0, temp_record, _
                Dtixing(tixing_no%).data(0).buttom_(1).no, 0, False)
          If set_property_of_tixing > 1 Then
             Exit Function
              
          End If
           Dtixing(tixing_no%).data(0).line_value_no(2) = Dtixing(tixing_no%).data(0).buttom_(1).no
       Else
         Dtixing(tixing_no%).data(0).buttom_(0).ty = line_value_
         Dtixing(tixing_no%).data(0).buttom_(0).no = tn(0)
         Dtixing(tixing_no%).data(0).line_value_no(0) = tn(0)
       End If
 End If
End If
If Dtixing(tixing_no%).data(0).buttom_(1).no = tn(0) = 0 Or Dtixing(tixing_no%).data(0).buttom_(0).no = 0 Or _
     Dtixing(tixing_no%).data(0).buttom_(0).ty = two_line_value_ Then
If is_line_value(Dtixing(tixing_no%).data(0).poi(2), Dtixing(tixing_no%).data(0).poi(3), 0, 0, 0, "", _
     tn(1), -1000, 0, 0, 0, l_v0) = 1 Then
    Dtixing(tixing_no%).data(0).line_value_no(2) = tn(0)
    If Dtixing(tixing_no%).data(0).buttom_(0).no = 0 Then
     Dtixing(tixing_no%).data(0).buttom_(0).ty = line_value_
     Dtixing(tixing_no%).data(0).buttom_(0).no = tn(0)
    Else
     If Dtixing(tixing_no%).data(0).buttom_(0).ty = two_line_value_ Then
        tl_v$ = two_line_value(Dtixing(tixing_no%).data(0).buttom_(0).no%).data(0).data0.value
        temp_record = re
         Call add_conditions_to_record(two_line_value_, Dtixing(tixing_no%).data(0).buttom_(0).no, _
             0, 0, temp_record.record_data.data0.condition_data)
        Dtixing(tixing_no%).data(0).buttom_(1).ty = line_value_
         Dtixing(tixing_no%).data(0).buttom_(1).no = tn(0)
        Dtixing(tixing_no%).data(0).buttom_(0).ty = line_value_
          Dtixing(tixing_no%).data(0).buttom_(0).no = 0
           Dtixing(tixing_no%).data(0).line_value_no(1) = tn(0)
          set_property_of_tixing = set_line_value(Dtixing(tixing_no%).data(0).poi(0), Dtixing(tixing_no%).data(0).poi(1), _
            minus_string(tl_v$, line_value(tn(0)).data(0).data0.value, True, False), 0, 0, 0, temp_record, _
                Dtixing(tixing_no%).data(0).buttom_(0).no, 0, False)
          If set_property_of_tixing > 1 Then
             Exit Function
          End If
           Dtixing(tixing_no%).data(0).line_value_no(0) = Dtixing(tixing_no%).data(0).buttom_(0).no
     Else
      Dtixing(tixing_no%).data(0).buttom_(1).ty = line_value_
      Dtixing(tixing_no%).data(0).buttom_(1).no = tn(0)
     End If
    End If
End If
End If
If Dtixing(tixing_no%).data(0).line_value_no(1) = 0 Then
If is_line_value(Dtixing(tixing_no%).data(0).poi(1), Dtixing(tixing_no%).data(0).poi(2), 0, 0, 0, "", _
     tn(1), -1000, 0, 0, 0, l_v0) = 1 Then
    Dtixing(tixing_no%).data(0).line_value_no(1) = tn(0)
End If
End If
If Dtixing(tixing_no%).data(0).line_value_no(3) = 0 Then
If is_line_value(Dtixing(tixing_no%).data(0).poi(3), Dtixing(tixing_no%).data(0).poi(0), 0, 0, 0, "", _
     tn(1), -1000, 0, 0, 0, l_v0) = 1 Then
    Dtixing(tixing_no%).data(0).line_value_no(3) = tn(0)
End If
End If
If Dtixing(tixing_no%).data(0).paral_no = 0 Then
   Call is_dparal(line_number0(Dtixing(tixing_no%).data(0).poi(0), Dtixing(tixing_no%).data(0).poi(1), 0, 0), _
           line_number0(Dtixing(tixing_no%).data(0).poi(2), Dtixing(tixing_no%).data(0).poi(3), 0, 0), _
             Dtixing(tixing_no%).data(0).paral_no, -1000, 0, 0, 0, 0)
End If
If is_two_line_value(Dtixing(tixing_no%).data(0).poi(0), Dtixing(tixing_no%).data(0).poi(1), _
         Dtixing(tixing_no%).data(0).poi(2), Dtixing(tixing_no%).data(0).poi(3), 0, 0, 0, 0, _
            0, 0, "1", "1", "", tn(0), -1000, 0, 0, 0, _
                  t_l_v0, 0, condition_data0) = 1 Then
     Dtixing(tixing_no%).data(0).buttom_(0).ty = two_line_value_
     Dtixing(tixing_no%).data(0).buttom_(0).no = tn(0)
End If
tn(0) = 0
tn(1) = 0
If is_mid_point(Dtixing(tixing_no%).data(0).poi(1), tn(0), Dtixing(tixing_no%).data(0).poi(2), 0, _
       0, 0, 0, tn(1), -1000, 0, 0, 0, 0, 0, 0, md, "", cond_ty, tn(0), tn(1), condition_data0) Then
   Dtixing(tixing_no%).data(0).mid_poi(0) = md.poi(1)
   Dtixing(tixing_no%).data(0).mid_point_no(0).ty = cond_ty
   Dtixing(tixing_no%).data(0).mid_point_no(0).no = tn(0)
   Dtixing(tixing_no%).data(0).mid_point_no(1).ty = cond_ty
   Dtixing(tixing_no%).data(0).mid_point_no(1).no = tn(1)
End If
tn(0) = 0
tn(1) = 0
If is_mid_point(Dtixing(tixing_no%).data(0).poi(0), tn(0), Dtixing(tixing_no%).data(0).poi(3), 0, _
       0, 0, 0, tn(1), -1000, 0, 0, 0, 0, 0, 0, md, "", cond_ty, tn(0), tn(1), condition_data0) Then
   Dtixing(tixing_no%).data(0).mid_poi(1) = md.poi(1)
   Dtixing(tixing_no%).data(0).mid_point_no(2).ty = cond_ty
   Dtixing(tixing_no%).data(0).mid_point_no(2).no = tn(0)
   Dtixing(tixing_no%).data(0).mid_point_no(3).ty = cond_ty
   Dtixing(tixing_no%).data(0).mid_point_no(3).no = tn(1)
End If
If Dtixing(tixing_no%).data(0).mid_poi(0) > 0 And Dtixing(tixing_no%).data(0).mid_poi(1) > 0 Then
   temp_record = re
   Call add_conditions_to_record(Dtixing(tixing_no%).data(0).mid_point_no(0).ty, _
                                    Dtixing(tixing_no%).data(0).mid_point_no(0).no, _
                                     Dtixing(tixing_no%).data(0).mid_point_no(1).no, _
                                      0, temp_record.record_data.data0.condition_data)
   Call add_conditions_to_record(Dtixing(tixing_no%).data(0).mid_point_no(2).ty, _
                                    Dtixing(tixing_no%).data(0).mid_point_no(2).no, _
                                     Dtixing(tixing_no%).data(0).mid_point_no(3).no, _
                                      0, temp_record.record_data.data0.condition_data)
     set_property_of_tixing = set_three_line_value(Dtixing(tixing_no%).data(0).poi(0), _
        Dtixing(tixing_no%).data(0).poi(1), Dtixing(tixing_no%).data(0).poi(2), _
          Dtixing(tixing_no%).data(0).poi(3), Dtixing(tixing_no%).data(0).mid_poi(0), _
           Dtixing(tixing_no%).data(0).mid_poi(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, _
            "1", "1", "-2", "0", temp_record, 0, 0, 0)
     If set_property_of_tixing > 1 Then
        Exit Function
     End If
End If
End Function
Public Sub set_condition_tree(ByVal conclusion_ty As Byte, ByVal conclusion_no As Integer, _
                  ByVal conc_no As Byte, is_remove As Byte)
'证明的结果是树形结构,this sub 将树型结构转化为线性结构.conclusion_ty conclusion_no
'结论的数据
Dim i%
Dim re As total_record_type
Dim f_no%, same_cond_no%
Dim initial_no_condition_tree%
Dim cond_no As condition_data_type
Dim come_back(1) As Integer
Dim come_back_(1) As Integer
Dim is_set_back As Boolean
Dim t_back_no%
Dim loop_end As Boolean
If last_condition_tree Mod 10 = 0 Then
ReDim Preserve condition_tree(last_condition_tree + 10) As condition_tree_type
End If
last_condition_tree = last_condition_tree + 1
condition_tree(last_condition_tree).condition.ty = conclusion_ty
condition_tree(last_condition_tree).condition.no = conclusion_no
condition_tree(last_condition_tree).conclusion_no = conc_no
 'Call set_display_string_no_(conclusion_ty, conclusion_no, conclusion, is_remove, re)
  Call record_no_(conclusion_ty, conclusion_no%, re)    '读出响应的记录
   condition_tree(last_condition_tree).conditions.data = re.record_data.data0.condition_data  '响应数据的记录
If last_condition_tree = 1 Then
   condition_tree_head = 1
   condition_tree_tail = 1
ElseIf last_condition_tree > 0 Then  '
 condition_tree(last_condition_tree).pre_no = condition_tree_tail
 condition_tree(last_condition_tree).next_no = 0  '链表的尾
 condition_tree(condition_tree_tail).next_no = last_condition_tree
 condition_tree_tail = last_condition_tree
End If
Call simple_condition_tree
initial_no_condition_tree% = last_condition_tree
f_no% = 0
come_back(0) = last_condition_tree
come_back(1) = condition_tree(last_condition_tree).conditions.data.condition_no  '记录的条件数
If come_back(1) > 0 Then
Do
come_back_(0) = come_back(0) '当前操作的记录的号
come_back_(1) = come_back(1) '当前操作的记录的条件号
If condition_tree(come_back_(0)).conditions.data.condition_no > 0 And _
    condition_tree(come_back_(0)).conditions.data.condition_no < 9 Then
       If come_back_(1) > 0 Then
         cond_no = condition_tree(come_back_(0)).conditions.data
           'Call set_display_string_no_(cond_no.condition(come_back_(1)).ty, cond_no.condition(come_back_(1)).no, _
                 condition, is_remove, re)
         Call record_no_(cond_no.condition(come_back_(1)).ty, cond_no.condition(come_back_(1)).no, re)
          If re.record_data.data0.condition_data.condition_no = 1 And _
              re.record_data.data0.condition_data.condition(1).ty = 126 Then
               If new_point(re.record_data.data0.condition_data.condition(1).no).data(0).cond.ty = _
                   cond_no.condition(come_back_(1)).ty And _
                  new_point(re.record_data.data0.condition_data.condition(1).no).data(0).cond.no = _
                   cond_no.condition(come_back_(1)).no Then
                condition_tree(come_back_(0)).conditions.data.condition(come_back_(1)).ty = 126
                condition_tree(come_back_(0)).conditions.data.condition(come_back_(1)).no = _
                  re.record_data.data0.condition_data.condition(1).no
                  cond_no.condition(come_back_(1)).ty = 126
                  cond_no.condition(come_back_(1)).no = _
                   re.record_data.data0.condition_data.condition(1).no
                  re.record_data = new_point(re.record_data.data0.condition_data.condition(1).no).data(0).record
               End If
          End If
            If ((re.record_data.data0.condition_data.condition_no = 0 And re.record_.display_no <> 0) Or _
              re.record_data.data0.condition_data.condition_no > 8) And _
                re.record_.conclusion_no = 0 And _
                 cond_no.condition(come_back_(1)).ty <> 126 And _
                   re.record_data.data0.condition_data.condition(8).ty <> 126 Then
               '已知条件(不含结论和辅助条件)
                Call set_depend_condition(cond_no.condition(come_back_(1)).ty, _
                   cond_no.condition(come_back_(1)).no)
                        come_back(1) = come_back_(1) - 1
            ElseIf simple_condition_tree1(cond_no.condition(come_back_(1)).ty, _
                cond_no.condition(come_back_(1)).no, 0) Then
                   '合并,成功
                        come_back(1) = come_back_(1) - 1
            Else
             If last_condition_tree Mod 10 = 0 Then
              ReDim Preserve condition_tree(last_condition_tree + 10) As condition_tree_type
             End If
              last_condition_tree = last_condition_tree + 1
              condition_tree(last_condition_tree).conditions.data = re.record_data.data0.condition_data
               condition_tree(last_condition_tree).condition = cond_no.condition(come_back_(1))
                For i% = 0 To re.record_.depend_display_no(0)
                 condition_tree(last_condition_tree).depend_dispaly_no(i%) = re.record_.depend_display_no(i%)
                Next i%
                condition_tree(last_condition_tree).father_condition_no(0) = come_back_(0)
                 condition_tree(last_condition_tree).father_condition_no(1) = come_back_(1)
                  condition_tree(last_condition_tree).pre_no = condition_tree_tail
                   condition_tree(last_condition_tree).next_no = 0
                    condition_tree(condition_tree_tail).next_no = last_condition_tree
                     condition_tree_tail = last_condition_tree
                      condition_tree(come_back_(0)).conditions.condition_tree_no(come_back_(1)) = last_condition_tree
                       come_back(0) = last_condition_tree
                        come_back(1) = condition_tree(last_condition_tree).conditions.data.condition_no
               '***********************************************
                Call simple_condition_tree
                '***********************************************
         End If
         Else
           come_back(0) = condition_tree(come_back_(0)).father_condition_no(0)
           come_back(1) = condition_tree(come_back_(0)).father_condition_no(1) - 1
       End If
Else
          come_back(1) = condition_tree(come_back_(0)).father_condition_no(1) - 1
          come_back(0) = condition_tree(come_back_(0)).father_condition_no(0)
End If
    Loop Until come_back(0) = initial_no_condition_tree% And come_back(1) = 0
    End If
End Sub
Private Function insert_condition_tree0(ByVal no%, ByVal insert_to_no%) As Boolean
Dim i%, t_no%
Dim insert_next_no%, t_next_no%, t_pro_no%
insert_next_no% = condition_tree(insert_to_no%).next_no
t_next_no% = condition_tree(no%).next_no
t_pro_no% = condition_tree(no%).pre_no
'no%插入 insert_to_no%后
If no% <> insert_to_no% And (no% <> condition_tree(insert_to_no%).next_no) Then
If t_pro_no% > 0 And t_next_no% > 0 Then
       condition_tree(t_pro_no%).next_no = t_next_no%
       condition_tree(t_next_no%).pre_no = t_pro_no%
ElseIf t_pro_no% = 0 Then
       condition_tree(t_next_no%).pre_no = t_pro_no%
       condition_tree_head = t_next_no%
ElseIf t_next_no% = 0 Then
       condition_tree(t_pro_no%).next_no = t_next_no%
       condition_tree_tail = t_pro_no%
End If
'******************************************************************
If insert_next_no% = 0 Then
     condition_tree(insert_to_no%).next_no = no%
     condition_tree(no%).pre_no = insert_to_no%
     condition_tree(no%).next_no = 0
     condition_tree_tail = no%
Else
     condition_tree(insert_next_no%).pre_no = no%
     condition_tree(insert_to_no%).next_no = no%
     condition_tree(no%).pre_no = insert_to_no%
     condition_tree(no%).next_no = insert_next_no%
End If
    insert_condition_tree0 = True
End If
End Function
Private Function move_condition_tree0(no%) As Boolean
Dim insert_no%
insert_no% = insert_condition_tree_position(condition_tree(no%).condition.ty, condition_tree(no%).condition.no, _
                 condition_tree(no%).conditions.data.condition(8).ty)
If insert_no% > 0 Then
   move_condition_tree0 = insert_condition_tree0(no%, insert_no%)
End If
End Function
Private Sub move_condition_tree(ByVal no%)
Dim come_back(1) As Integer
Dim come_back_(1) As Integer
Dim is_set_back  As Boolean
Dim cond_data As condition_data0_type
If move_condition_tree0(no%) Then
come_back(0) = no%
come_back(1) = condition_tree(no%).conditions.data.condition_no
If come_back(1) > 0 Then
Do
come_back_(0) = come_back(0)
come_back_(1) = come_back(1)
If condition_tree(come_back_(0)).conditions.data.condition_no > 0 And _
    condition_tree(come_back_(0)).conditions.data.condition_no < 9 Then
       If come_back_(1) > 0 Then
           cond_data = condition_tree(come_back_(0)).conditions
            is_set_back = False
            If cond_data.condition_tree_no(come_back_(1)) = 0 Then
               Call simple_condition_tree1(cond_data.data.condition(come_back_(1)).ty, _
                cond_data.data.condition(come_back_(1)).no, come_back(0))
                  come_back(1) = come_back_(1) - 1
            Else
              If move_condition_tree0(cond_data.condition_tree_no(come_back_(1))) Then
                  come_back(0) = cond_data.condition_tree_no(come_back_(1))
                  come_back(1) = condition_tree(come_back(0)).conditions.data.condition_no
              Else
                  come_back(1) = come_back_(1) - 1
              End If
            End If
       Else
          come_back(1) = condition_tree(come_back_(0)).father_condition_no(1) - 1
          come_back(0) = condition_tree(come_back_(0)).father_condition_no(0)
       End If
Else
          come_back(1) = condition_tree(come_back_(0)).father_condition_no(1) - 1
          come_back(0) = condition_tree(come_back_(0)).father_condition_no(0)
End If
Loop Until come_back(0) = no% And come_back(1) = 0
End If
End If
End Sub
Private Function simple_condition_tree()
Dim insert_no%
insert_no% = insert_condition_tree_position(condition_tree(condition_tree_tail).condition.ty, _
                   condition_tree(condition_tree_tail).condition.no, _
                     condition_tree(condition_tree_tail).conditions.data.condition(8).ty)
If insert_no% > 0 Then
   Call insert_condition_tree0(condition_tree_tail, insert_no%)
End If
End Function
Private Function insert_condition_tree_position(ByVal ty As Byte, ByVal no%, ByVal ty1 As Byte) As Integer
Dim t_condition_tree_no%, t_tail% 'ty1=126 辅助条件
Dim loop_end As Boolean
t_condition_tree_no% = condition_tree_tail
If t_condition_tree_no% > 0 Then
    Do
     If ty1 = 126 Then
         loop_end = True '假设条件在最后
     ElseIf (condition_tree(t_condition_tree_no%).condition.ty = new_point_ And _
         ty = new_point_ And condition_tree(t_condition_tree_no%).condition.no <= no%) Or _
          condition_tree(t_condition_tree_no%).conditions.data.condition(8).ty = new_point_ Then
          '辅助条件按号排序
             t_condition_tree_no% = condition_tree(t_condition_tree_no%).pre_no
     ElseIf (condition_tree(t_condition_tree_no%).condition.ty = new_point_ And _
             ty <> new_point_) Or _
              condition_tree(t_condition_tree_no%).conditions.data.condition(8).ty = new_point_ Then
              t_condition_tree_no% = condition_tree(t_condition_tree_no%).pre_no
     ElseIf (condition_tree(t_condition_tree_no%).condition.ty = ty And _
              condition_tree(t_condition_tree_no%).condition.no = no%) Or _
                condition_tree(t_condition_tree_no%).conditions.data.condition(8).ty = new_point_ Then
              t_condition_tree_no% = condition_tree(t_condition_tree_no%).pre_no
     Else
                         loop_end = True
     End If
    Loop Until loop_end
'If t_condition_tree_no% = condition_tree(condition_tree_tail).pre_no Then
'   insert_condition_tree_position = 0
'Else
   insert_condition_tree_position = t_condition_tree_no%
'End If
End If
End Function

Private Function simple_condition_tree1(ByVal ty As Integer, ByVal no%, ByVal t_condition_tree_no%) As Boolean
Dim same_no%
If ty = general_string_ Then  'general_string
    If general_string(no%).record_.conclusion_no > 0 Then
     Exit Function
    End If
End If
   same_no% = condition_tree_tail
Do
 If condition_tree(same_no%).condition.ty = ty And _
             condition_tree(same_no%).condition.no = no Then
     If (t_condition_tree_no% > 0 And same_no% <> t_condition_tree_no%) Or t_condition_tree_no% = 0 Then
       Call move_condition_tree(same_no%)
        '数据ty,no与same_no同,将same_no%移到最后
     End If
       simple_condition_tree1 = True
     Exit Function
 Else
     same_no% = condition_tree(same_no%).pre_no
 End If
Loop Until same_no% = 0
End Function

Public Function wenti_no_from_point(ByVal p%) As Integer
Dim i%, j%
For i% = 1 To C_display_wenti.m_last_input_wenti_no
 For j% = 0 To 8
  If C_display_wenti.m_point_no(i%, j%) = p% Then
      wenti_no_from_point = i% + 1
       Exit Function
  End If
 Next j%
Next
End Function

Public Sub set_pseudo_inter_point_line_line()
Dim i%, j%
Dim tA(1) As Integer
Dim tn(6) As Integer
 For i% = 2 To last_conditions.last_cond(1).line_no
   If m_lin(i%).data(0).data0.visible > 0 Then
    For j% = 1 To i% - 1
     If m_lin(j%).data(0).data0.visible > 0 Then
      If is_line_line_intersect(i%, j%, 0, 0, False) = 0 Then
       tA(0) = angle_number(m_lin(i%).data(0).data0.poi(0), m_lin(j%).data(0).data0.poi(0), m_lin(i%).data(0).data0.poi(1), "", 0)
       tA(1) = angle_number(m_lin(i%).data(0).data0.poi(0), m_lin(j%).data(0).data0.poi(1), m_lin(i%).data(0).data0.poi(1), "", 0)
       If (tA(0) > 0 And tA(1) < 0) Or (tA(0) < 0 And tA(1) > 0) Then
        tA(0) = angle_number(m_lin(j%).data(0).data0.poi(0), m_lin(i%).data(0).data0.poi(0), m_lin(j%).data(0).data0.poi(1), "", 0)
         tA(1) = angle_number(m_lin(j%).data(0).data0.poi(0), m_lin(i%).data(0).data0.poi(1), m_lin(j%).data(0).data0.poi(1), "", 0)
       If (tA(0) > 0 And tA(1) < 0) Or (tA(0) < 0 And tA(1) > 0) Then
'       If is_line_line_intersect(i%, j%, 0, 0) = 0 Then
        tn(0) = i%
        tn(1) = j%
        tn(2) = 0
        tn(3) = 0
        tn(4) = 1
        tn(5) = 0
        tn(6) = 0
         Call C_wait_for_aid_point.set_wait_for_aid_point(interset_point_line_line, tn(), 7)
 '     End If
     End If
    End If
   End If
 End If
Next j%
End If
Next i%
End Sub

Public Sub add_line_to_point(ByVal l%, ByVal p%)
Dim i%
If l% > 0 Then
 For i% = 1 To m_poi(p%).data(0).in_line(0)
 If m_poi(p%).data(0).in_line(i%) = l% Then
  '新线已过点,推出
   Exit Sub
 End If
Next i%
m_poi(p%).data(0).in_line(0) = m_poi(p%).data(0).in_line(0) + 1
m_poi(p%).data(0).in_line(m_poi(p%).data(0).in_line(0)) = l%
Call set_point_in_line(p%, l%)
End If

End Sub
Public Sub set_depend_condition_from_wenti_point(wenti_no%)
 'c_
End Sub

Private Sub record_no_(ByVal ty As Byte, ByVal n%, re As total_record_type)
Dim i%, j%, k%, dn%
'Dim re As total_record_type
Dim is_same_theorem As Byte
Dim is_remove_ As Byte
 If n% = 0 Then '无记录
  Exit Sub
 End If
 Call record_no(ty, n%, re, True, 0, 0) '读出(ty,n%)的记录
 If re.record_data.data0.condition_data.condition_no > 8 Then
   If ty = general_string_ Then
    re.record_data.data0.condition_data.condition_no = 0
   'Else
    'is_remove = 1
     'Exit Sub
   End If
 Else
    'is_remove = 0
 End If
 '******************************************************************
 '修改,增加记录
If re.record_data.data0.condition_data.condition_no < 9 Then
For i% = 1 To re.record_data.data0.condition_data.condition_no
If re.record_data.data0.condition_data.condition(i%).ty = pseudo_total_equal_triangle_ Or _
     re.record_data.data0.condition_data.condition(i%).ty = pseudo_similar_triangle_ Then
    Call set_pseudo_condition(re, i%)
     Call record_no(ty, n%, re, True, 1, 0) '更新(ty,n%)的记录
       GoTo set_record_no__mark0
ElseIf (ty = eline_ Or ty = angle3_value_) And re.record_data.data0.theorem_no = 120 Then
'引用垂径定理,但无垂足
    Call set_set_pseudo_condition_for_th120(ty, n%, re)
      Call record_no(ty, n%, re, True, 1, 0) '更新(ty,n%)的记录
       GoTo set_record_no__mark0
End If
Next i%
End If
'*******************************************************************
set_record_no__mark0:
End Sub

Public Function set_min_max_value(ByVal ge%) As Byte
Dim it(3) As Integer
Dim para(3) As String
Dim para_(3) As String
Dim Tit(3) As Integer
Dim Tpara(3) As String
Dim tp(2) As Integer
Dim t_p(3) As Integer
Dim i%, tn%
Dim s$
Dim str1$, str2$
Dim max_min_mark$
Dim equal_mark_no As Byte
Dim tD As condition_data_type
Dim temp_record As total_record_type
Dim c_data0 As condition_data_type
For i% = 0 To 3
 it(i%) = general_string(ge%).data(0).item(i%)
 para(i%) = general_string(ge%).data(0).para(i%)
Next i%
If it(1) = 0 Then '一项
   If item0(it(0)).data(0).sig = "~" Then
      If general_string(ge%).record_.conclusion_ty = 75 Then
         max_min_mark$ = "Min"
         equal_mark_no = 1
      ElseIf general_string(ge%).record_.conclusion_ty = 76 Then
         max_min_mark$ = "Max"
         equal_mark_no = 2
      End If
      If set_max_min_element(item0(it(0)).data(0).poi(0), item0(it(0)).data(0).poi(1), _
            general_string(ge%).record_.conclusion_ty, t_p(0), t_p(1), t_p(2), t_p(3), _
              c_data0, str1$, str2$) Then
         If t_p(0) <> 0 And t_p(1) <> 0 Then
         Call set_item0(t_p(0), t_p(1), 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", para_(0), 0, _
               tD, 0, Tit(0), 0, 0, tD, False)
            temp_record.record_data.data0.condition_data.condition_no = 1
            temp_record.record_data.data0.condition_data.condition(1).ty = general_string_
            temp_record.record_data.data0.condition_data.condition(1).no = ge%
            temp_record.record_.conclusion_no = general_string(ge%).record_.conclusion_no
            temp_record.record_.conclusion_ty = general_string(ge%).record_.conclusion_ty
            Call add_record_to_record(c_data0, temp_record.record_data.data0.condition_data)
            tn% = 0
            set_min_max_value = set_general_string(Tit(0), 0, 0, 0, _
               time_string(para(0), para_(0), True, False), "0", para(2), para(3), _
               "", general_string(ge%).record_.conclusion_no, equal_mark_no, 0, temp_record, tn%, 0)
              If set_min_max_value > 1 Then
                 s$ = str1$ + "," + max_min_mark + "(" + _
                     set_display_g_string(con_general_string(temp_record.record_.conclusion_no - 1), True, 0, True) + ")="
                 Call C_display_wenti.Set_m_condition_for_min_max_value( _
                 general_string(ge%).record_.conclusion_no - 1, s$)
                Exit Function
              End If
          End If
         If t_p(2) <> 0 And t_p(3) <> 0 Then
         Call set_item0(t_p(2), t_p(3), 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", para_(0), 0, _
               tD, 0, Tit(0), 0, 0, tD, False)
            temp_record.record_data.data0.condition_data.condition_no = 1
            temp_record.record_data.data0.condition_data.condition(1).ty = general_string_
            temp_record.record_data.data0.condition_data.condition(1).no = ge%
            temp_record.record_.conclusion_no = general_string(ge%).record_.conclusion_no
            temp_record.record_.conclusion_ty = general_string(ge%).record_.conclusion_ty
            Call add_record_to_record(c_data0, temp_record.record_data.data0.condition_data)
            tn% = 0
            set_min_max_value = set_general_string(Tit(0), 0, 0, 0, _
                 time_string(para(0), para_(0), True, False), "0", para(2), para(3), _
               "", general_string(ge%).record_.conclusion_no, equal_mark_no, 0, temp_record, tn%, 0)
              If set_min_max_value > 1 Then
                  s$ = str1$ + "," + max_min_mark + "(" + _
                     set_display_g_string(con_general_string(temp_record.record_.conclusion_no - 1), True, 0, True) + ")="
                 Call C_display_wenti.Set_m_condition_for_min_max_value( _
                 general_string(ge%).record_.conclusion_no - 1, s$)
                Exit Function
              End If
          End If
      End If
   ElseIf item0(it(0)).data(0).sig = "*" Then

   ElseIf item0(it(0)).data(0).sig = "/" Then
     'if i
   End If
ElseIf it(2) = 0 Then '两项
 If item0(it(0)).data(0).sig = "~" And item0(it(1)).data(0).sig = "~" Then
    If item0(it(0)).data(0).poi(1) > 0 And item0(it(1)).data(0).poi(1) > 0 Then
       If item0(it(0)).data(0).poi(0) = item0(it(1)).data(0).poi(0) Then
        tp(0) = item0(it(0)).data(0).poi(1)
        tp(1) = item0(it(1)).data(0).poi(1)
        tp(2) = item0(it(0)).data(0).poi(0)
       ElseIf item0(it(0)).data(0).poi(0) = item0(it(1)).data(0).poi(1) Then
        tp(0) = item0(it(0)).data(0).poi(1)
        tp(1) = item0(it(1)).data(0).poi(0)
        tp(2) = item0(it(0)).data(0).poi(0)
       ElseIf item0(it(0)).data(0).poi(1) = item0(it(1)).data(0).poi(0) Then
        tp(0) = item0(it(0)).data(0).poi(0)
        tp(1) = item0(it(1)).data(0).poi(1)
        tp(2) = item0(it(1)).data(0).poi(0)
       ElseIf item0(it(0)).data(0).poi(1) = item0(it(1)).data(0).poi(1) Then
        tp(0) = item0(it(0)).data(0).poi(0)
        tp(1) = item0(it(1)).data(0).poi(0)
        tp(2) = item0(it(0)).data(0).poi(1)
       Else
        GoTo set_min_max_value_mark0
       End If
       If para(1) = para(0) And general_string(ge%).record_.conclusion_ty = 75 Then '极小
        If m_poi(tp(2)).data(0).parent.co_degree = 1 Then
           set_min_max_value = set_min_max_of_two_line_value(tp(0), tp(1), tp(2), 1, t_p(0), _
                                                t_p(1), t_p(2), str1$, c_data0)
           If set_min_max_value > 1 Then
            Exit Function
           ElseIf t_p(0) <> 0 And t_p(1) <> 0 Then
            Call set_item0(t_p(0), t_p(1), 0, 0, "~", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", para_(0), 0, _
               tD, 0, Tit(0), 0, 0, tD, False)
            temp_record.record_data.data0.condition_data.condition_no = 1
            temp_record.record_data.data0.condition_data.condition(1).ty = general_string_
            temp_record.record_data.data0.condition_data.condition(1).no = ge%
            temp_record.record_.conclusion_no = general_string(ge%).record_.conclusion_no
            temp_record.record_.conclusion_ty = general_string(ge%).record_.conclusion_ty
            Call add_record_to_record(c_data0, temp_record.record_data.data0.condition_data)
            new_point(c_data0.condition(1).no).record_.conclusion_no = temp_record.record_.conclusion_no
            tn% = 0
            set_min_max_value = set_general_string(Tit(0), 0, 0, 0, _
             time_string(para(0), para_(0), True, False), "0", para(2), para(3), _
               "", general_string(ge%).record_.conclusion_no, 1, 0, temp_record, tn%, 0)
              If set_min_max_value > 1 Then
               s$ = str1$ + max_min_mark$ + "(" + _
                      set_display_g_string(con_general_string(temp_record.record_.conclusion_no - 1), True, 0, True) + ")="
                Call C_display_wenti.Set_m_condition_for_min_max_value( _
                 general_string(ge%).record_.conclusion_no - 1, s$)
                  Exit Function
              End If
           End If
        End If
       ElseIf minus_string(para(0), para(1), True, False) = "0" Then
       End If
    End If
set_min_max_value_mark0:
 End If
ElseIf it(3) = 0 Then '三项
End If
End Function

Public Function set_const_value(ByVal ge%) As Byte

End Function

Public Function set_min_max_of_two_line_value(p1%, p2%, p3%, ty As Byte, out_p1%, out_p2%, out_p3%, _
                    note_string$, c_data0 As condition_data_type) As Byte
'p1p3+p2p3% p3是半自由点,ty=1 和最小,差最大
Dim c%, l%, i%
Dim tA(1) As Integer
Dim point_in_circle(1) As Integer
If m_poi(p3%).data(0).parent.element(1).no > 0 Then
 Exit Function
Else
 If m_poi(p3%).data(0).parent.element(0).ty = line_ Then
    l% = m_poi(p3%).data(0).parent.element(0).no
 Else
  c% = m_poi(p3%).data(0).parent.element(0).no
 End If
End If
If c% > 0 Then
   point_in_circle(0) = -1000
   point_in_circle(1) = -1000
   For i% = 1 To m_Circ(c%).data(0).data0.in_point(0)
       If m_Circ(c%).data(0).data0.in_point(i%) = p1% Then
         point_in_circle(0) = 0
       ElseIf m_Circ(c%).data(0).data0.in_point(i%) = p2% Then
         point_in_circle(1) = 0
       End If
   Next i%
   If point_in_circle(0) <> 0 Then
        point_in_circle(0) = is_point_in_circle_(m_poi(p1%).data(0).data0.coordinate, m_Circ(c%).data(0).data0)
   End If
   If point_in_circle(1) <> 0 Then
        point_in_circle(1) = is_point_in_circle_(m_poi(p2%).data(0).data0.coordinate, m_Circ(c%).data(0).data0)
   End If
     If ((point_in_circle(0) > 0 And point_in_circle(1) < 0) Or _
          (point_in_circle(0) < 0 And point_in_circle(1) > 0)) And ty = 1 Then
       out_p1% = p1%
       out_p2% = p2%
       Call add_interset_point_line_circle(p1%, p2%, line_number0(p1%, p2%, 0, 0), c%, _
             out_p3%, c_data0, 2)
       note_string$ = "当点" + m_poi(p3%).data(0).data0.name + "与点" + _
                    m_poi(out_p3%).data(0).data0.name + "重合,"
       set_min_max_of_two_line_value = 1
       Exit Function
     ElseIf ((point_in_circle(0) > 0 And point_in_circle(1) > 0) Or _
          (point_in_circle(0) < 0 And point_in_circle(1) < 0)) And ty = 2 Then
       out_p1% = p1%
       out_p2% = p2%
       Call add_interset_point_line_circle(p1%, p2%, line_number0(p1%, p2%, 0, 0), c%, _
             out_p3%, c_data0, 2)
       note_string$ = "当点" + m_poi(p3%).data(0).data0.name + "与点" + _
                    m_poi(out_p3%).data(0).data0.name + "重合,"
       set_min_max_of_two_line_value = 1
       Exit Function
     ElseIf point_in_circle(0) = 0 And point_in_circle(1) = 0 And ty = 2 Then
     End If
ElseIf l% > 0 Then
  tA(0) = angle_number(m_lin(l%).data(0).data0.poi(0), p1%, m_lin(l%).data(0).data0.poi(1), "", 0)
  tA(1) = angle_number(m_lin(l%).data(0).data0.poi(0), p2%, m_lin(l%).data(0).data0.poi(1), "", 0)
  If (tA(0) > 0 And tA(1) > 0) Or (tA(0) < 0 And tA(1) < 0) Then '同侧
     If ty = 1 Then
      set_min_max_of_two_line_value = add_symmetry_point_of_line(p1%, l%, out_p1%, out_p2%, c_data0)
       If set_min_max_of_two_line_value > 1 Then
         Exit Function
       Else
         set_min_max_of_two_line_value = 0
          Exit Function
       End If
      Else
         Call add_interset_point_line_line(l%, line_number0(p1%, p2%, 0, 0), out_p3%, _
                     2, 0, 0, 0, c_data0)
       out_p1% = p1%
       out_p2% = p2%
       note_string$ = "当点" + m_poi(p3%).data(0).data0.name + "与点" + _
                    m_poi(out_p3%).data(0).data0.name + "重合,"
       set_min_max_of_two_line_value = 1
       Exit Function
      End If
  ElseIf (tA(0) > 0 And tA(1) < 0) Or (tA(0) < 0 And tA(1) > 0) Then '异侧
     If ty = 1 Then
       Call add_interset_point_line_line(l%, line_number0(p1%, p2%, 0, 0), out_p3%, _
                     2, 0, 0, 0, c_data0)
       out_p1% = p1%
       out_p2% = p2%
       note_string$ = "当点" + m_poi(p3%).data(0).data0.name + "与点" + _
                    m_poi(out_p3%).data(0).data0.name + "重合,"
       set_min_max_of_two_line_value = 1
       Exit Function
     Else
      set_min_max_of_two_line_value = add_symmetry_point_of_line(p1%, l%, out_p1%, out_p2%, c_data0)
       If set_min_max_of_two_line_value > 1 Then
         Exit Function
       Else
         set_min_max_of_two_line_value = 0
          Exit Function
       End If
     End If
 Else
  End If
End If
End Function
Public Function set_max_min_element(ByVal p1%, ByVal p2%, ty As Byte, out_p1%, _
                                out_p2%, out_p3%, out_p4%, c_data0 As condition_data_type, str1$, str2$) As Boolean
Dim triA As temp_triangle_type
Dim i%, j%, k%, l%
Dim l_n%, c_n%
Dim tn(2) As Integer
Dim tl(1) As Integer
Dim is_verti(1) As Boolean
Dim v_no(1) As Integer
If m_poi(p1%).data(0).degree_for_reduce = 0 And m_poi(p2%).data(0).degree_for_reduce = 0 Then
 Exit Function
ElseIf m_poi(p2%).data(0).degree_for_reduce = 0 Then
  Call exchange_two_integer(p1%, p2%)
End If
 If m_poi(p2%).data(0).parent.element(0).no > 0 And _
      m_poi(p2%).data(0).parent.element(0).ty = circle_ Then
  l% = 0
  Call add_interset_point_line_circle(p1%, m_Circ(c_n%).data(0).data0.center, l%, c_n%, out_p2%, c_data0, 2)
  Call is_point_in_line3(p1%, m_lin(l%).data(0).data0, tn(0))
  Call is_point_in_line3(m_Circ(c_n%).data(0).data0.center, m_lin(l%).data(0).data0, tn(1))
  Call is_point_in_line3(out_p3%, m_lin(l%).data(0).data0, tn(2))
  c_n% = m_poi(p2%).data(0).parent.element(0).no
  'If is_point_in_circle1(p1%, C_n%) Or _
     is_point_in_circle_(m_poi(p1%).data(0).data0, m_Circ(C_n%).data(0).data0) < 0 Then
     '定点在圆内
       If ty = 76 Then
        If ((tn(1) < tn(0) And tn(0) < tn(2)) Or (tn(1) > tn(0) And tn(0) > tn(2))) Then
          out_p2% = 0
           Call add_interset_point_line_circle(p1%, m_Circ(c_n%).data(0).data0.center, l%, c_n%, out_p2%, c_data0, 2)
        End If
        out_p1% = p1%
                 str1$ = "当点" + m_poi(p2%).data(0).data0.name + "与点" + m_poi(out_p1%).data(0).data0.name + "重合"
                          set_max_min_element = True
       ElseIf ty = 75 Then
        If ((tn(0) > tn(1) And tn(1) > tn(2)) Or (tn(0) < tn(1) And tn(1) < tn(2))) Then
          out_p2% = 0
           Call add_interset_point_line_circle(p1%, m_Circ(c_n%).data(0).data0.center, l%, c_n%, out_p2%, c_data0, 2)
        End If
        out_p1% = p1%
                 str1$ = "当点" + m_poi(p2%).data(0).data0.name + "与点" + m_poi(out_p1%).data(0).data0.name + "重合"
                          set_max_min_element = True
        End If
   '    ElseIf is_point_in_circle_(m_poi(p1%).data(0).data0, m_Circ(C_n%).data(0).data0) > 0 Then
     '定点在圆外
   '    End
  ElseIf m_poi(p2%).data(0).parent.element(0).ty = line_ Then
    l_n% = m_poi(p2%).data(0).parent.element(0).no
    If ty = 75 Then
     Call add_aid_point_for_verti0(p1%, l_n%, l_n%, out_p2%, c_data0, 2)
     out_p1% = p1%
           str1$ = "当" + m_poi(p1%).data(0).data0.name + m_poi(p1%).data(0).data0.name + _
                "⊥" + m_poi(m_lin(l_n%).data(0).data0.poi(0)).data(0).data0.name + _
                 m_poi(m_lin(l_n%).data(0).data0.poi(1)).data(0).data0.name + ","
                              
                              set_max_min_element = True
    End If
  End If
 If c_n% > 0 Then
 ElseIf l_n% > 0 Then
 End If
 Call set_temp_triangle_from_lin(p1%, p2%, 0, triA, False)
For i% = 1 To triA.last_T
  If ty = 75 Then
      If angle(triA.data(i%).angle(1)).data(0).value = "90" Then
         out_p1% = triA.data(0).poi(0)
         out_p2% = triA.data(0).poi(2)
         str1$ = "当点" + m_poi(p1%).data(0).data0.name + "与点" + m_poi(out_p1%).data(0).data0.name + "重合,"
         c_data0.condition_no = 1
         c_data0.condition(1).ty = angle3_value_
         c_data0.condition(1).no = angle(triA.data(i%).angle(1)).data(0).value_no
         set_max_min_element = True
         Exit Function
      ElseIf angle(triA.data(i%).angle(2)).data(0).value = "90" Then
         out_p1% = triA.data(0).poi(0)
         out_p2% = triA.data(0).poi(1)
         set_max_min_element = True
         str1$ = "当点" + m_poi(p2%).data(0).data0.name + "与点" + m_poi(out_p1%).data(0).data0.name + "重合,"
         c_data0.condition_no = 1
         c_data0.condition(1).ty = angle3_value_
         c_data0.condition(1).no = angle(triA.data(i%).angle(2)).data(0).value_no
          set_max_min_element = True
         Exit Function
      End If
  ElseIf ty = 76 Then
      If angle(triA.data(i%).angle(0)).data(0).value = "90" Then
         out_p1% = triA.data(0).poi(0)
         out_p2% = triA.data(0).poi(1)
         str1$ = "当点" + m_poi(p2%).data(0).data0.name + "与点" + m_poi(out_p1%).data(0).data0.name + "重合,"
         out_p3% = triA.data(0).poi(0)
         out_p4% = triA.data(0).poi(2)
         str2$ = "当点" + m_poi(p1%).data(0).data0.name + "与点" + m_poi(out_p1%).data(0).data0.name + "重合,"
         c_data0.condition_no = 1
         c_data0.condition(1).ty = angle3_value_
         c_data0.condition(1).no = angle(triA.data(i%).angle(0)).data(0).value_no
         set_max_min_element = True
         Exit Function
       End If
  End If
Next i%
For i% = 1 To last_conditions.last_cond(1).paral_no
c_data0.condition_no = 1
c_data0.condition(1).no = i%
c_data0.condition(1).ty = paral_
If is_point_in_line3(p1%, m_lin(Dparal(i%).data(0).data0.line_no(0)).data(0).data0, 0) And _
     is_point_in_line3(p2%, m_lin(Dparal(i%).data(0).data0.line_no(1)).data(0).data0, 0) Then
ElseIf is_point_in_line3(p2%, m_lin(Dparal(i%).data(0).data0.line_no(0)).data(0).data0, 0) And _
     is_point_in_line3(p1%, m_lin(Dparal(i%).data(0).data0.line_no(1)).data(0).data0, 0) Then
     Call exchange_two_integer(p1%, p2%)
Else
   Exit Function
End If
  tl(0) = line_number0(p1%, p2%, 0, 0)
  is_verti(0) = is_dverti(tl(0), Dparal(i%).data(0).data0.line_no(0), v_no(0), 0, 0, 0, 0, 0)
  If is_verti(0) = False Then
  v_no(0) = 0
  is_verti(0) = is_dverti(tl(0), Dparal(i%).data(0).data0.line_no(1), v_no(0), 0, 0, 0, 0, 0)
  End If
 If (ty = 75 And is_verti(0) = False) Or (ty = 76 And is_verti(0)) Then
 For j% = 1 To m_lin(Dparal(i%).data(0).data0.line_no(0)).data(0).data0.in_point(0)
 For k% = 1 To m_lin(Dparal(i%).data(0).data0.line_no(1)).data(0).data0.in_point(0)
  tl(1) = line_number0(m_lin(Dparal(i%).data(0).data0.line_no(0)).data(0).data0.in_point(j%), _
           m_lin(Dparal(i%).data(0).data0.line_no(1)).data(0).data0.in_point(k%), 0, 0)
  If tl(0) <> tl(1) Then
    is_verti(1) = is_dverti(tl(1), Dparal(i%).data(0).data0.line_no(0), v_no(1), 0, 0, 0, 0, 0)
    If is_verti(1) = False Then
    v_no(1) = 0
    is_verti(1) = is_dverti(tl(1), Dparal(i%).data(0).data0.line_no(1), v_no(1), 0, 0, 0, 0, 0)
    End If
    out_p1% = is_line_line_intersect(tl(1), Dparal(i%).data(0).data0.line_no(0), 0, 0, False)
    out_p2% = is_line_line_intersect(tl(1), Dparal(i%).data(0).data0.line_no(1), 0, 0, False)
   If out_p1% > 0 And out_p2% > 0 Then
    If (ty = 75 And is_verti(1)) Then
       Call add_conditions_to_record(verti_, v_no(1), 0, 0, c_data0)
       str1$ = "当" + m_poi(p1%).data(0).data0.name + m_poi(p2%).data(0).data0.name + "∥" + _
              m_poi(out_p1%).data(0).data0.name + m_poi(out_p2%).data(0).data0.name + ","
         set_max_min_element = True
         Exit Function
    ElseIf (ty = 76 And is_verti(1) = False) Then
       Call add_conditions_to_record(verti_, v_no(0), 0, 0, c_data0)
       str1$ = "当" + m_poi(p1%).data(0).data0.name + m_poi(p2%).data(0).data0.name + "∥" + _
              m_poi(out_p1%).data(0).data0.name + m_poi(out_p2%).data(0).data0.name + ","
         set_max_min_element = True
         Exit Function
    End If
   End If
  End If
 Next k%
 Next j%
 End If
Next i%
If p1% > 0 And p2% > 0 Then
l% = line_number0(p1%, p2%, 0, 0)
For i% = 1 To C_display_picture.m_circle.Count
 k% = 0
 For j% = 1 To m_Circ(i%).data(0).data0.in_point(0)
   If is_point_in_line3(m_Circ(i%).data(0).data0.in_point(j%), m_lin(l%).data(0).data0, 0) Then
    tn(k%) = m_Circ(i%).data(0).data0.in_point(j%)
     If k% = 1 Then
      Call C_wait_for_aid_point.set_wait_for_aid_point(midpoint_, tn(), 2)
       GoTo set_max_min_element_mark0
     Else
     k% = k% + 1
     End If
   End If
 Next j%
set_max_min_element_mark0:
Next i%
End If
End Function
Public Function set_display_string_of_V_line_value(v_lv As V_line_value_data0_type, is_depend As Boolean) As String
Dim value_string As String
If v_lv.value = "" Or _
     v_lv.value = "0" Then
     value_string = ""
Else
     value_string = display_string_(v_lv.value, 0)
End If
set_display_string_of_V_line_value = _
    set_display_string_of_V_line( _
         v_lv.v_line, is_depend) + "=" + value_string

End Function
Public Function set_display_string_of_V_line(v_line_no%, is_depend As Boolean) As String
 set_display_string_of_V_line = "[arrow\\" + m_poi(Dtwo_point_line(v_line_no%).data(0).v_poi(0)).data(0).data0.name + _
              m_poi(Dtwo_point_line(v_line_no%).data(0).v_poi(1)).data(0).data0.name + "]"
If is_depend Then
   Call set_depend_from_point(Dtwo_point_line(v_line_no%).data(0).v_poi(0))
   Call set_depend_from_point(Dtwo_point_line(v_line_no%).data(0).v_poi(0))
End If
End Function
Public Function set_property_of_V_line_value(ByVal vl%, ty As Byte) As Byte
Dim i%, tn_%
Dim tp(2) As Integer
Dim tri As triangle_data0_type
Dim triA As temp_triangle_type
Dim t_lv(2) As Integer
Dim dir(2) As String
Dim para(2) As String
Dim c_data As condition_data_type
Dim temp_record As total_record_type
set_property_of_V_line_value = combine_v_line_value_with_v_line_value(vl%)
 If set_property_of_V_line_value > 1 Then
   Exit Function
 End If
 If ty = 1 Then
tp(0) = Dtwo_point_line(V_line_value(vl%).data(0).v_line).data(0).v_poi(0)
tp(1) = Dtwo_point_line(V_line_value(vl%).data(0).v_line).data(0).v_poi(1)
Call set_temp_triangle_from_lin(tp(0), tp(1), 0, triA, False)
For i% = 1 To triA.last_T
    tn_% = position_from_direction(triA.data(i%).direction, 0)
    If triangle(triA.data(i%).no).data(0).v_line(tn_%) = 0 Then
     triangle(triA.data(i%).no).data(0).v_line(tn_%) = vl%
    End If
    'If triangle(triA.data(i%).no).data(0).v_line(0) = 0 And _
    '      triangle(triA.data(i%).no).data(0).v_line(1) > 0 And _
            triangle(triA.data(i%).no).data(0).v_line(2) > 0 Then
        set_property_of_V_line_value = combine_two_v_line_value_0( _
            triangle(triA.data(i%).no).data(0).v_line(1), _
             triangle(triA.data(i%).no).data(0).v_line(2), 0)
    '    If set_property_of_V_line_value > 1 Then
    '       Exit Function
    '    End If
    'ElseIf triangle(triA.data(i%).no).data(0).v_line(0) > 0 And _
          triangle(triA.data(i%).no).data(0).v_line(1) = 0 And _
            triangle(triA.data(i%).no).data(0).v_line(2) > 0 Then
    '    set_property_of_V_line_value = combine_two_v_line_value_0( _
            triangle(triA.data(i%).no).data(0).v_line(0), _
             triangle(triA.data(i%).no).data(0).v_line(2), 0)
    '    If set_property_of_V_line_value > 1 Then
    '       Exit Function
    '    End If
    'ElseIf triangle(triA.data(i%).no).data(0).v_line(0) > 0 And _
          triangle(triA.data(i%).no).data(0).v_line(1) > 0 And _
            triangle(triA.data(i%).no).data(0).v_line(2) = 0 Then
    '     set_property_of_V_line_value = combine_two_v_line_value_0( _
            triangle(triA.data(i%).no).data(0).v_line(0), _
             triangle(triA.data(i%).no).data(0).v_line(1), 0)
    '    If set_property_of_V_line_value > 1 Then
    '       Exit Function
    '    End If
    'Else 'If V_line_value(vl%).data(0).record.data0.condition_data.condition_no > 0 Then
        temp_record.record_data.data0.condition_data.condition_no = 1
        temp_record.record_data.data0.condition_data.condition(1).no = vl%
        temp_record.record_data.data0.condition_data.condition(1).ty = V_line_value_
        t_lv(0) = vector_number(triangle(triA.data(i%).no).data(0).poi(tn_%), _
                       triangle(triA.data(i%).no).data(0).poi((tn_% + 1) Mod 3), dir(0))
        t_lv(1) = vector_number(triangle(triA.data(i%).no).data(0).poi(tn_%), _
                       triangle(triA.data(i%).no).data(0).poi((tn_% + 2) Mod 3), dir(1))
        t_lv(2) = vector_number(triangle(triA.data(i%).no).data(0).poi((tn_% + 1) Mod 3), _
                       triangle(triA.data(i%).no).data(0).poi((tn_% + 2) Mod 3), dir(2))
        If t_lv(0) > 0 And t_lv(1) > 0 And Dtwo_point_line(t_lv(0)).data(0).v_value = "" And _
             Dtwo_point_line(t_lv(1)).data(0).v_value = "" Then
         set_property_of_V_line_value = set_two_line_value(t_lv(1), -10, t_lv(0), -10, _
             0, 0, 0, 0, 0, 0, dir(1), time_string("-1", dir(0), True, False), time_string(dir(2), _
                  V_line_value(vl%).data(0).value, True, False), temp_record, 0, 0)
        If set_property_of_V_line_value > 1 Then
           Exit Function
        End If
        End If
   Next i%
End If
End Function
Public Sub set_initial_data_from_two_point_in_circle_for_run_type_1(c%, i%, j%)
Dim k%, m%, l%, no%
Dim dir(1) As String
Dim pA As String
Dim para(3) As String
Dim v_line(2) As Integer
Dim tn(2) As Integer
Dim con_dis_string As String
Dim temp_record As total_record_type
Dim c_data As condition_data_type
If regist_data.run_type = 0 Then
 Exit Sub
End If
  v_line(0) = vector_number(m_Circ(c%).data(0).data0.center, m_Circ(c%).data(0).data0.in_point(i%), dir(0))
  Call set_item0(v_line(0), -10, v_line(0), -10, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(0), _
        0, c_data, -1, tn(0), 0, 0, temp_record.record_data.data0.condition_data, False)
  v_line(1) = vector_number(m_Circ(c%).data(0).data0.center, m_Circ(c%).data(0).data0.in_point(j%), dir(1))
  Call set_item0(v_line(1), -10, v_line(1), -10, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(1), _
        0, c_data, -1, tn(1), 0, 0, temp_record.record_data.data0.condition_data, False)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(0)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(1)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(0)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(1)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
   Call set_general_string(tn(0), tn(1), 0, 0, para(0), _
          time_string("-1", para(1), True, False), "0", "0", "0", 0, 0, _
     0, temp_record, no%, 0)
     con_dis_string = "[arrow\\" + _
            m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(0)).data(0).data0.name + _
             m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(1)).data(0).data0.name + "]^2[arrow\\" + _
            "-" + m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(0)).data(0).data0.name + _
             m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(1)).data(0).data0.name + "]^2"
     If para(0) <> "1" Or para(1) <> "" And is_same_two_point(tn(0), tn(1), _
                     general_string(no%).data(0).item(0), general_string(no%).data(0).item(1)) = False Then
              general_string(no%).display_con_string = con_dis_string
     End If
   l% = line_number0(m_Circ(c%).data(0).data0.in_point(i%), _
         m_Circ(c%).data(0).data0.in_point(j%), 0, 0)
   For k% = 1 To m_lin(l%).data(0).data0.in_point(0)
    For m% = k% + 1 To m_lin(l%).data(0).data0.in_point(0)
     v_line(2) = vector_number(m_lin(l%).data(0).data0.in_point(k%), _
                         m_lin(l%).data(0).data0.in_point(m%), 0)
   temp_record.record_data.data0.condition_data.condition_no = 0
   Call set_item0(v_line(0), -10, v_line(2), -10, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(0), _
        0, c_data, -1, tn(0), 0, 0, temp_record.record_data.data0.condition_data, False)
   Call set_item0(v_line(1), -10, v_line(2), -10, "*", 0, 0, 0, 0, 0, 0, "1", "1", "1", "", para(1), _
        0, c_data, -1, tn(1), 0, 0, temp_record.record_data.data0.condition_data, False)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(0)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(1)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(0)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(1)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(2)).data(0).v_poi(0)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
    Call add_depend_display_no(m_poi(Dtwo_point_line(v_line(2)).data(0).v_poi(1)).data(0).from_wenti_no, _
                         temp_record.record_.depend_display_no)
      If dir(0) = dir(1) Then
       pA = "1"
      Else
       pA = "-1"
      End If
      no% = 0
      Call set_general_string(tn(0), tn(1), 0, 0, para(0), time_string(pA, para(1), True, False), "0", "0", "0", 0, 0, _
     0, temp_record, no%, 0)
       If para(0) <> "1" Or para(1) <> "" And is_same_two_point(tn(0), tn(1), _
                     general_string(no%).data(0).item(0), general_string(no%).data(0).item(1)) = False Then
       general_string(no%).display_con_string = con_dis_string + "=" + _
           "([arrow\\" + m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(0)).data(0).data0.name + _
                m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(1)).data(0).data0.name + "]+[arrow\\" + _
             m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(0)).data(0).data0.name + _
                m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(1)).data(0).data0.name + "])*([arrow\\" + _
            m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(0)).data(0).data0.name + _
                m_poi(Dtwo_point_line(v_line(0)).data(0).v_poi(1)).data(0).data0.name + "]-[arrow\\" + _
             m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(0)).data(0).data0.name + _
                m_poi(Dtwo_point_line(v_line(1)).data(0).v_poi(1)).data(0).data0.name + "])"
       End If
   Next m%
   Next k%
     

End Sub

Public Function set_P_theorem_for_run_type_1(ByVal p0%, ByVal p1%, ByVal p2%, re As total_record_type) As Byte
Dim t_line(2) As Integer
Dim tn(2) As Integer
Dim c_data As condition_data_type
Dim temp_record As total_record_type
Dim para(3) As String
temp_record = re
t_line(0) = vector_number(p1%, p2%, 0)
t_line(1) = vector_number(p1%, p0%, 0)
t_line(2) = vector_number(p0%, p2%, 0)
If t_line(0) > 0 And t_line(1) > 0 And t_line(2) > 0 Then
 c_data.condition_no = 0
Call set_item0(t_line(0), -10, t_line(0), -10, "*", 0, 0, 0, 0, 0, 0, _
   "1", "1", "1", "", para(0), 0, c_data, 0, tn(0), 0, 0, c_data, False)
    Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
 c_data.condition_no = 0
Call set_item0(t_line(1), -10, t_line(1), -10, "*", 0, 0, 0, 0, 0, 0, _
   "1", "1", "1", "", para(1), 0, c_data, 0, tn(1), 0, 0, c_data, False)
    Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
 c_data.condition_no = 0
Call set_item0(t_line(2), -10, t_line(2), -10, "*", 0, 0, 0, 0, 0, 0, _
   "1", "1", "1", "", para(2), 0, c_data, 0, tn(2), 0, 0, c_data, False)
    Call add_record_to_record(c_data, temp_record.record_data.data0.condition_data)
   set_P_theorem_for_run_type_1 = set_general_string(tn(1), tn(2), tn(0), _
     0, para(1), para(2), time_string("-1", para(0), True, False), "0", "0", 0, 0, 0, temp_record, 0, 0)
      If set_P_theorem_for_run_type_1 > 1 Then
         Exit Function
      End If
End If
End Function

Public Function set_v_relation(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, value As String, _
         no%, re As total_record_type) As Byte
Dim v_re_data As V_relation_data0_type
Dim temp_record As total_record_type
Dim ts$
Dim cond_ty As Byte
If no% > 0 Then
 If v_Drelation(no%).record_.no_reduce = 255 Then
  Exit Function
 Else
 GoTo set_v_drelation_mark0
 End If
ElseIf no% = -1 Then
 display_inform = 1
ElseIf InStr(1, value, "F", 0) > 0 Or InStr(1, value, ".", 0) > 0 Then
 Exit Function
ElseIf no% = 0 Then
 If p1% = 0 Or p2% = 0 Or p3% = 0 Or p4% = 0 Then
 Exit Function
 End If
End If
temp_record = re
display_inform = 0
'level = set_level(temp_record.record_data)
If is_v_relation(p1%, p2%, p3%, p4%, value, no%, cond_ty, v_re_data, _
           temp_record.record_data.data0.condition_data) Then
 Call set_level(temp_record.record_data.data0.condition_data)
 If no% > 0 And run_type < 10 Then
  set_v_relation = set_string_value_(v_Drelation(no%).data(0).data0.value, _
                       v_re_data.value, v_relation_, no%, temp_record.record_data, 0)
 End If
  Exit Function
Else
 If cond_ty = V_line_value_ Then
    set_v_relation = set_V_line_value(Dtwo_point_line(v_re_data.v_line(0)).data(0).v_poi(0), _
          Dtwo_point_line(v_re_data.v_line(0)).data(0).v_poi(1), 0, 0, 0, _
             v_re_data.value, temp_record, 0, False)
    Exit Function
 End If
 If last_conditions.last_cond(1).v_relation_no Mod 10 = 0 Then
  ReDim Preserve v_Drelation(last_conditions.last_cond(1).v_relation_no + 10) As v_relation_type
 End If
 last_conditions.last_cond(1).v_relation_no = last_conditions.last_cond(1).v_relation_no + 1
   v_Drelation(last_conditions.last_cond(1).v_relation_no).data(0).data0 = v_re_data
          v_Drelation(last_conditions.last_cond(1).v_relation_no).data(0).record = temp_record.record_data
           v_Drelation(last_conditions.last_cond(1).v_relation_no).record_ = temp_record.record_
 no% = last_conditions.last_cond(1).v_relation_no
 ts$ = set_display_string_of_v_relation(no%, False)
set_v_relation = set_prove_proccess(ts$, relation_, no%, Drelation(no%).data(0).record.display_string)
    If set_v_relation > 1 Then
     Exit Function
    Else
     set_v_relation = 1
    End If
Exit Function
set_v_drelation_mark0:
If v_Drelation(no%).record_.no_reduce = 0 Or _
    v_Drelation(no%).record_.no_reduce = 2 Or _
     v_Drelation(no%).record_.no_reduce = 4 Then
Dim tp%
temp_record.record_data.data0.condition_data.condition_no = 1
temp_record.record_data.data0.condition_data.condition(1).ty = v_relation_
temp_record.record_data.data0.condition_data.condition(1).no = no%
set_v_relation = set_property_of_v_relation( _
     v_Drelation(no%).data(0).data0.v_line(0), _
      v_Drelation(no%).data(0).data0.v_line(1), _
       v_Drelation(no%).data(0).data0.value, temp_record)
     If set_v_relation > 0 Then
        Exit Function
     End If
    'set_v_drelation = set_v_relation(tp_%, Dvector(v_Drelation(no%).data(0).data0.v_line(0)).data(0).poi(0), _
        Dvector(v_Drelation(no%).data(0).data0.v_line(1)).data(0).poi(1), _
          v_Drelation(no%).data(0).data0.value, 0, temp_record)
     'If set_v_drelation > 0 Then
      '  Exit Function
     'End If
     'set_v_drelation = set_v_relation(Dvector(v_Drelation(no%).data(0).data0.v_line(0)).data(0).poi(1), _
        tp%, tp%, Dvector(v_Drelation(no%).data(0).data0.v_line(1)).data(0).poi(0), _
          v_Drelation(no%).data(0).data0.value, 0, temp_record)
     'If set_v_drelation > 0 Then
     '   Exit Function
     'End If
set_v_relation = combine_v_relation_with_v_line_value(no%)
  If set_v_relation > 1 Then
   Exit Function
  End If
set_v_relation = combine_v_relation_with_v_relation(no%)
  If set_v_relation > 1 Then
   Exit Function
  End If

End If
End If
 End Function

Public Function set_display_string_of_v_relation(ByVal v_re_no%, is_depend As Boolean) As String
If v_Drelation(v_re_no%).data(0).data0.value = "1" Then
   set_display_string_of_v_relation = _
      set_display_string_of_V_line(v_Drelation(v_re_no%).data(0).data0.v_line(0), is_depend) + "=" + _
       set_display_string_of_V_line(v_Drelation(v_re_no%).data(0).data0.v_line(1), is_depend)
ElseIf v_Drelation(v_re_no%).data(0).data0.value = "-1" Then
   set_display_string_of_v_relation = _
      set_display_string_of_V_line(v_Drelation(v_re_no%).data(0).data0.v_line(0), is_depend) + "=-" + _
       set_display_string_of_V_line(v_Drelation(v_re_no%).data(0).data0.v_line(1), is_depend)
Else
 If InStr(1, v_Drelation(v_re_no%).data(0).data0.value, "+", 0) = 0 And _
     InStr(2, v_Drelation(v_re_no%).data(0).data0.value, "-", 0) And _
      InStr(1, v_Drelation(v_re_no%).data(0).data0.value, "/", 0) Then
   set_display_string_of_v_relation = _
      set_display_string_of_V_line(v_Drelation(v_re_no%).data(0).data0.v_line(0), is_depend) + "=" + _
       v_Drelation(v_re_no%).data(0).data0.value + _
        set_display_string_of_V_line(v_Drelation(v_re_no%).data(0).data0.v_line(1), is_depend)
 Else
   set_display_string_of_v_relation = _
      set_display_string_of_V_line(v_Drelation(v_re_no%).data(0).data0.v_line(0), is_depend) + "=(" + _
       v_Drelation(v_re_no%).data(0).data0.value + ")" + _
        set_display_string_of_V_line(v_Drelation(v_re_no%).data(0).data0.v_line(1), is_depend)
 End If
End If
End Function

Public Function set_property_of_v_relation(ByVal dv_no1%, _
                          ByVal dv_no2%, ByVal re_v As String, re As total_record_type) As Byte
Dim temp_record As total_record_type
Dim tp(2) As Integer
Dim tn(2) As Integer
Dim tl(1) As Integer
Dim t_re_v As String
Dim dv1 As line_from_two_point_data
Dim dv2 As line_from_two_point_data
dv1 = Dtwo_point_line(dv_no1%).data(0)
dv2 = Dtwo_point_line(dv_no2%).data(0)
temp_record = re
'整理dv2 使得dv1dv2同向
If dv1.dir = dv2.dir Then
    tp(0) = dv2.v_poi(0)
    tp(1) = dv2.v_poi(1)
    t_re_v = re_v
Else
    tp(0) = dv2.v_poi(1)
    tp(1) = dv2.v_poi(2)
    t_re_v = time_string(re_v, "-1", False, False)
End If
set_property_of_v_relation = set_Drelation(dv1.v_poi(0), dv1.v_poi(1), tp(0), tp(1), _
    0, 0, 0, 0, 0, 0, t_re_v, temp_record, 0, 0, 0, 0, 0, False)
           If set_property_of_v_relation > 1 Then
             Exit Function
          End If
'*******************************************************
'外交点
  tl(0) = line_number0(dv1.v_poi(0), tp(0), tn(0), tn(1))
  tl(1) = line_number0(dv1.v_poi(1), tp(1), 0, 0)
  tp(2) = is_line_line_intersect(tl(0), tl(1), tn(2), 0, False)
'************************************************************
  If tp(2) > 0 Then
   If (tn(0) < tn(1) And tn(1) < tn(2)) Or (tn(0) > tn(1) And tn(1) > tn(2)) Then
   '交店在dv2之外
    t_re_v = minus_string(t_re_v, "1", False, False)
    set_property_of_v_relation = set_v_relation(dv1.v_poi(0), tp(0), tp(0), tp(2), _
        t_re_v, 0, temp_record)
          If set_property_of_v_relation > 1 Then
             Exit Function
          End If
    set_property_of_v_relation = set_v_relation(dv1.v_poi(1), tp(1), tp(1), tp(2), _
        t_re_v, 0, temp_record)
          If set_property_of_v_relation > 1 Then
             Exit Function
          End If
   ElseIf (tn(2) < tn(0) And tn(0) < tn(1)) Or (tn(2) > tn(0) And tn(0) > tn(1)) Then
    '交店在dv1之外
    t_re_v = divide_string(t_re_v, minus_string("1", t_re_v, False, False), False, False)
    set_property_of_v_relation = set_v_relation(tp(2), dv1.v_poi(0), dv1.v_poi(0), tp(0), _
         t_re_v, 0, temp_record)
          If set_property_of_v_relation > 1 Then
             Exit Function
          End If
    set_property_of_v_relation = set_v_relation(tp(2), dv1.v_poi(1), dv1.v_poi(1), tp(1), _
        t_re_v, 0, temp_record)
          If set_property_of_v_relation > 1 Then
             Exit Function
          End If
   End If
  End If
  tl(0) = line_number0(dv1.v_poi(0), tp(1), 0, 0)
  tl(1) = line_number0(dv1.v_poi(1), tp(0), 0, 0)
  tp(2) = is_line_line_intersect(tl(0), tl(1), 0, 0, False)
  If tp(2) > 0 Then
  set_property_of_v_relation = set_v_relation(dv1.v_poi(0), tp(2), tp(2), tp(1), _
         t_re_v, 0, temp_record)
          If set_property_of_v_relation > 1 Then
             Exit Function
          End If
    set_property_of_v_relation = set_v_relation(dv1.v_poi(1), tp(2), tp(2), tp(0), _
        t_re_v, 0, temp_record)
          If set_property_of_v_relation > 1 Then
             Exit Function
          End If
  End If
End Function

Public Function set_relation_string(ByVal ts As String, no%, re As total_record_type) As Byte
Dim ty As Byte
Dim ch$
Dim s(3) As String
Dim i%, j%
Dim temp_record As total_record_type
temp_record = re
ty = string_type(ts, s(0), s(1), s(2), s(3))
If ty = 3 Then
   ts = s(1)
End If
If do_factor1(ts, s(0), s(1), s(2), s(3), 0) Then
   ts = "1"
   For i% = 0 To 3
     For j% = 1 To Len(s(i%))
       ch$ = Mid$(s(i%), 1, j%)
        If (ch$ >= "A" And ch < "Z") Or (ch$ > "a" And ch$ < "z") Then
           GoTo set_relation_string_next
        End If
     Next j%
     ts = time_string(ts, s(i%), True, False)
set_relation_string_next:
     Next i%
End If
For i% = 1 To last_conditions.last_cond(1).relation_string_no
    If relation_string(i%).data(0).relation_string = ts Then
       Exit Function
    End If
Next i%
Call set_level(temp_record.record_data.data0.condition_data)
If last_conditions.last_cond(1).relation_string_no Mod 10 = 0 Then
   ReDim Preserve relation_string( _
        last_conditions.last_cond(1).relation_string_no + 10) As relation_string_type
End If
last_conditions.last_cond(1).relation_string_no = _
    last_conditions.last_cond(1).relation_string_no + 1
     no% = last_conditions.last_cond(1).relation_string_no
      relation_string(no%).data(0).relation_string = ts
       s(0) = ts
       Call string_type(ts, "", relation_string(no%).data(0).para(0), _
               relation_string(no%).data(0).element(0), s(3))
      relation_string(no%).data(0).record = temp_record.record_data
      set_relation_string = 1
End Function

Public Function set_equal_v_line(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, re As total_record_type) As Byte
Dim tl(1) As Integer
Dim it(1) As Integer
Dim para(1) As String
Dim c_data As condition_data_type
tl(0) = vector_number(p1%, p2%, "")
tl(1) = vector_number(p3%, p4%, "")
Call set_item0(tl(0), -10, tl(0), -10, "*", 0, 0, 0, 0, 0, 0, _
                      "1", "1", "1", "", para(0), 0, c_data, 0, it(0), 0, 0, _
                        re.record_data.data0.condition_data, False)
Call set_item0(tl(1), -10, tl(1), -10, "*", 0, 0, 0, 0, 0, 0, _
                      "1", "1", "1", "", para(1), 0, c_data, 0, it(1), 0, 0, _
                        re.record_data.data0.condition_data, False)
 set_equal_v_line = set_general_string(it(0), it(1), 0, 0, para(0), _
            time_string("-1", para(1), True, False), "0", "0", "0", 0, 0, _
              0, re, 0, 0)
End Function
Public Function set_angle_value_for_triangle_from_two_angle_value(ByVal no%) As Byte
Dim i%, j%, tn%
Dim tn_(2) As Integer
Dim para As String
Dim v$
Dim triA As temp_triangle_type
Dim temp_record As total_record_type
For i% = 0 To 1
para = divide_string(angle3_value(no%).data(0).data0.para((i% + 1) Mod 2), _
         angle3_value(no%).data(0).data0.para(i%), False, False)
para = time_string("-1", para, True, False)
v$ = divide_string(angle3_value(no%).data(0).data0.value, _
         angle3_value(no%).data(0).data0.para(i%), False, False)
Call set_temp_triangle_from_angle(angle3_value(no%).data(0).data0.angle(i%), 0, triA, False)
For j% = 1 To triA.last_T
 tn_(0) = position_from_direction(triA.data(j%).direction, 0)
  tn_(1) = (tn_(0) + 1) Mod 3
   tn_(2) = (tn_(0) + 2) Mod 3
  If triangle(triA.data(j%).no).data(0).angle_value(tn_(0)) = 0 Then
      triangle(triA.data(j%).no).data(0).angle_value_no_from_two_angle(tn_(0)) = no%
       triangle(triA.data(j%).no).data(0).angle_value_from_two_angle(tn_(0)).add_value = v$
        triangle(triA.data(j%).no).data(0).angle_value_from_two_angle(tn_(0)).element_no = _
          angle3_value(no%).data(0).data0.para((i% + 1) Mod 2)
        triangle(triA.data(j%).no).data(0).angle_value_from_two_angle(tn_(0)).para = para
      If triangle(triA.data(j%).no).data(0).angle_value(tn_(1)) = 0 And _
          triangle(triA.data(j%).no).data(0).angle_value_no_from_two_angle(tn_(1)) = 0 Then
           If triangle(triA.data(j%).no).data(0).angle_value(tn_(2)) > 0 Then
              temp_record.record_data.data0.condition_data.condition_no = 0
              Call add_conditions_to_record(angle3_value_, no%, _
                triangle(triA.data(j%).no).data(0).angle_value(tn_(2)), 0, _
                 temp_record.record_data.data0.condition_data)
           set_angle_value_for_triangle_from_two_angle_value = _
             set_three_angle_value(triangle(triA.data(j%).no).data(0).angle_value(tn_(1)), _
                angle3_value(no%).data(0).data0.para((i% + 1) Mod 2), 0, "1", para, v$, _
                  minus_string("180", _
                   angle3_value(triangle(triA.data(j%).no).data(0).angle_value(tn_(2))).data(0).data0.value, _
                    True, False), 0, temp_record, 0, 0, 0, 0, 0, 0, False)
           If set_angle_value_for_triangle_from_two_angle_value > 1 Then
              Exit Function
           End If
           ElseIf triangle(triA.data(j%).no).data(0).angle_value_no_from_two_angle(tn_(2)) > 0 Then
              temp_record.record_data.data0.condition_data.condition_no = 0
               Call add_conditions_to_record(angle3_value_, no%, _
                triangle(triA.data(j%).no).data(0).angle_value_no_from_two_angle(tn_(2)), 0, _
                 temp_record.record_data.data0.condition_data)
           set_angle_value_for_triangle_from_two_angle_value = _
             set_three_angle_value(triangle(triA.data(j%).no).data(0).angle_value(tn_(1)), _
                angle3_value(no%).data(0).data0.para((i% + 1) Mod 2), _
                 triangle(triA.data(j%).no).data(0).angle_value_from_two_angle(tn_(2)).element_no, _
                  "1", para, triangle(triA.data(j%).no).data(0).angle_value_from_two_angle(tn_(2)).para, _
                   minus_string(minus_string("180", v$, False, False), _
                    triangle(triA.data(j%).no).data(0).angle_value_from_two_angle(tn_(2)).add_value, _
                     True, False), 0, temp_record, 0, 0, 0, 0, 0, 0, False)
           If set_angle_value_for_triangle_from_two_angle_value > 1 Then
              Exit Function
           End If
           End If
      ElseIf triangle(triA.data(j%).no).data(0).angle_value(tn_(2)) = 0 And _
          triangle(triA.data(j%).no).data(0).angle_value_no_from_two_angle(tn_(2)) = 0 Then
           If triangle(triA.data(j%).no).data(0).angle_value(tn_(1)) > 0 Then
              temp_record.record_data.data0.condition_data.condition_no = 0
              Call add_conditions_to_record(angle3_value_, no%, _
                triangle(triA.data(j%).no).data(0).angle_value(tn_(1)), 0, _
                 temp_record.record_data.data0.condition_data)
            set_angle_value_for_triangle_from_two_angle_value = _
             set_three_angle_value(triangle(triA.data(j%).no).data(0).angle_value(tn_(2)), _
                angle3_value(no%).data(0).data0.para((i% + 1) Mod 2), 0, "1", para, v$, _
                  minus_string("180", _
                   angle3_value(triangle(triA.data(j%).no).data(0).angle_value(tn_(1))).data(0).data0.value, _
                    True, False), 0, temp_record, 0, 0, 0, 0, 0, 0, False)
           If set_angle_value_for_triangle_from_two_angle_value > 1 Then
              Exit Function
           End If
          ElseIf triangle(triA.data(j%).no).data(0).angle_value_no_from_two_angle(tn_(1)) > 0 Then
              temp_record.record_data.data0.condition_data.condition_no = 0
               Call add_conditions_to_record(angle3_value_, no%, _
                triangle(triA.data(j%).no).data(0).angle_value_no_from_two_angle(tn_(1)), 0, _
                 temp_record.record_data.data0.condition_data)
            set_angle_value_for_triangle_from_two_angle_value = _
             set_three_angle_value(triangle(triA.data(j%).no).data(0).angle_value(tn_(2)), _
                angle3_value(no%).data(0).data0.para((i% + 1) Mod 2), _
                 triangle(triA.data(j%).no).data(0).angle_value_from_two_angle(tn_(1)).element_no, _
                  "1", para, triangle(triA.data(j%).no).data(0).angle_value_from_two_angle(tn_(1)).para, _
                   minus_string(minus_string("180", v$, False, False), _
                    triangle(triA.data(j%).no).data(0).angle_value_from_two_angle(tn_(1)).add_value, _
                     True, False), 0, temp_record, 0, 0, 0, 0, 0, 0, False)
           If set_angle_value_for_triangle_from_two_angle_value > 1 Then
              Exit Function
           End If
          End If
      End If
  End If
Next j%
Next i%
End Function

Public Sub add_t_line_to_circlc(ByVal lin_no%, ByVal circ_no%, _
                ByVal t_poi_no%, data_no As condition_type)
Dim i%
If lin_no% > 0 And t_poi_no% > 0 Then
For i% = 1 To m_Circ(circ_no%).data(0).tangent_line.tangent_line_no
  If m_Circ(circ_no%).data(0).tangent_line.tangent_line(i%).tangent_poi = t_poi_no% And _
      m_Circ(circ_no%).data(0).tangent_line.tangent_line(i%).tangent_lin = lin_no% Then
       Exit Sub
  End If
Next i%
m_Circ(circ_no%).data(0).tangent_line.tangent_line_no = _
   m_Circ(circ_no%).data(0).tangent_line.tangent_line_no + 1
   i% = m_Circ(circ_no%).data(0).tangent_line.tangent_line_no
    m_Circ(circ_no%).data(0).tangent_line.tangent_line(i%).tangent_poi = t_poi_no% And _
      m_Circ(circ_no%).data(0).tangent_line.tangent_line(i%).tangent_lin = lin_no%
       m_Circ(circ_no%).data(0).tangent_line.tangent_line(i%).data_no = data_no
End If
End Sub

Public Sub add_t_circle_to_line(ByVal circ_no%, ByVal lin_no%, _
                ByVal t_poi_no%, data_no As condition_type)
Dim i%
If circ_no% > 0 And t_poi_no% > 0 Then
For i% = 1 To m_lin(lin_no%).data(0).tangent_circle.tangent_circ_no
  If m_lin(lin_no%).data(0).tangent_circle.tangent_circle(i%).tangent_poi = t_poi_no% And _
      m_lin(lin_no%).data(0).tangent_circle.tangent_circle(i%).tangent_circ = circ_no% Then
       Exit Sub
  End If
Next i%
m_lin(lin_no%).data(0).tangent_circle.tangent_circ_no = _
   m_lin(lin_no%).data(0).tangent_circle.tangent_circ_no + 1
   i% = m_lin(lin_no%).data(0).tangent_circle.tangent_circ_no
    m_lin(lin_no%).data(0).tangent_circle.tangent_circle(i%).tangent_poi = t_poi_no%
      m_lin(lin_no%).data(0).tangent_circle.tangent_circle(i%).tangent_circ = circ_no%
   m_lin(lin_no%).data(0).tangent_circle.tangent_circle(i%).data_no = data_no
End If
End Sub
Public Function set_point(coord As POINTAPI, visible As Byte, color As Byte, degree As Byte, point_name As String) As Integer
Dim data0 As point_data0_type
Dim i%
For i% = 1 To last_conditions.last_cond(1).point_no
 If is_same_POINTAPI(coord, m_poi(i%).data(0).data0.coordinate) Then
     set_point = i%
      Exit Function
 End If
Next i%
last_conditions.last_cond(1).point_no = last_conditions.last_cond(1).point_no + 1
set_point = last_conditions.last_cond(1).point_no
data0.coordinate = coord
data0.visible = visible
data0.color = color
data0.name = next_char(last_conditions.last_cond(1).point_no, point_name, 0, 0)
Call set_point_data0(set_point, data0, True, degree)
End Function
Public Function set_display_line(ByVal l%) As String
set_display_line = m_poi(m_lin(l%).data(0).data0.poi(0)).data(0).data0.name + _
                      m_poi(m_lin(l%).data(0).data0.poi(1)).data(0).data0.name
End Function
Public Function set_display_line0(ByVal l_string As String) As String
set_display_line0 = LoadResString_(4135, "\\1\\" + l_string)
End Function

Public Function set_display_two_icon() As String
 set_display_two_icon = global_icon_char + global_icon_char
End Function
Public Function set_display_three_icon() As String
 set_display_three_icon = global_icon_char + global_icon_char + _
                          global_icon_char
End Function

Public Function set_display_four_icon() As String
 set_display_four_icon = global_icon_char + global_icon_char + _
                        global_icon_char + global_icon_char
End Function
Public Function set_four_point_on_circle0(ByVal p1%, ByVal p2%, ByVal p3%, ByVal p4%, ByVal c%, re As total_record_type) As Integer
Dim ang(1) As Integer
Dim time_angle_number As Integer
Dim cond_ty As Byte
Dim dn(2) As Integer
ang(0) = angle_number(p1%, p2%, p4%, "", 0)
ang(1) = angle_number(p1%, p3%, p4%, "", 0)
time_angle_number = ang(0) * ang(1)
If time_angle_number > 0 Then
Call set_three_angle_value(Abs(ang(0)), Abs(ang(1)), 0, "1", "-1", "0", _
          "0", 0, re, 0, 0, 0, 0, 0, 0, False)
  If is_equal_dline(p1%, p2%, p3%, p4%, 0, 0, 0, _
    0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
      cond_ty, "", re.record_data.data0.condition_data) Then
   Call set_equal_dline(p1%, p3%, p2%, p4%, 0, 0, _
     0, 0, 0, 0, True, re, 0, 0, 0, 0, 0, False)  '平行弦所夹的弧相等
     set_four_point_on_circle0 = set_dparal(line_number0(p1%, p4%, 0, 0), _
     line_number0(p2%, p3%, 0, 0), re, 0, 0, False) '等弧所夹的弦平行等
  ElseIf is_equal_dline(p1%, p3%, p2%, p4%, 0, 0, 0, _
    0, 0, 0, dn(0), -1000, 0, 0, 0, eline_data0, dn(1), dn(2), _
     cond_ty, "", re.record_data.data0.condition_data) Then
  Call set_equal_dline(p1%, p2%, p3%, p4%, 0, 0, _
    0, 0, 0, 0, True, re, 0, 0, 0, 0, 0, False) '平行弦所夹的弧相等
   set_four_point_on_circle0 = set_dparal(line_number0(p1%, p4%, 0, 0), _
     line_number0(p2%, p3%, 0, 0), re, 0, 0, False) '等弧所夹的弦平行等
 End If
ElseIf time_angle_number < 0 Then
Call set_three_angle_value(Abs(ang(0)), Abs(ang(1)), 0, "1", "1", "0", _
          "180", 0, re, 0, 0, 0, 0, 0, 0, False)
End If
End Function

Public Function add_tangent_line_to_circle(ByVal tangent_line_no%, ByVal circle_no%, re As total_record_type) As Integer
Dim tangent_point_no%
Dim i%, j%
If tangent_line(tangent_line_no).data(0).circ(0) = circle_no% Then
    tangent_point_no% = tangent_line(tangent_line_no%).data(0).poi(0)
ElseIf tangent_line(tangent_line_no).data(0).circ(0) = circle_no% Then
    tangent_point_no% = tangent_line(tangent_line_no%).data(0).poi(1)
End If
For i% = 1 To m_Circ(circle_no%).data(0).data0.tangent_line.element_no
    If m_Circ(circle_no%).data(0).data0.tangent_line.tangent_celement(i%).tangent_element_no = tangent_line_no% Then
      Exit Function
    End If
Next i%
m_Circ(circle_no%).data(0).data0.tangent_line.element_no = _
                m_Circ(circle_no%).data(0).data0.tangent_line.element_no + 1
m_Circ(circle_no%).data(0).data0.tangent_line.tangent_celement _
     (m_Circ(circle_no%).data(0).data0.tangent_line.element_no).tangent_element_no = tangent_line_no%
m_Circ(circle_no%).data(0).data0.tangent_line.tangent_celement _
     (m_Circ(circle_no%).data(0).data0.tangent_line.element_no).tangent_point = tangent_point_no%
     For i% = 1 To m_Circ(circle_no%).data(0).data0.in_point(0) - 1
      For j% = i% + 1 To m_Circ(circle_no%).data(0).data0.in_point(0)
       If m_Circ(circle_no%).data(0).data0.in_point(i%) <> tangent_point_no% And _
            m_Circ(circle_no%).data(0).data0.in_point(j%) <> tangent_point_no% Then
       add_tangent_line_to_circle = add_tangent_line_to_circle0(tangent_line_no%, tangent_point_no%, _
           m_Circ(circle_no%).data(0).data0.in_point(i%), m_Circ(circle_no%).data(0).data0.in_point(j%), re)
       End If
      Next j%
     Next i%
End Function
Public Function add_tangent_line_to_circle0(ByVal tangent_line_no%, _
                  ByVal tangent_point%, ByVal p1%, ByVal p2%, re As total_record_type) As Integer
Dim tp(1) As Integer
Dim n%, tl%
tl% = tangent_line(tangent_line_no%).data(0).line_no
Call is_point_in_line3(tangent_point%, m_lin(tl%).data(0).data0, n%)
If n% <> 1 Then
 tp(0) = m_lin(tl%).data(0).data0.in_point(1)
  add_tangent_line_to_circle0 = set_angle_from_tangent_line_circle(tp(0), tangent_point%, p1%, p2%, re)
End If
If n% <> m_lin(tl%).data(0).data0.in_point(0) Then
 tp(1) = m_lin(tl%).data(0).data0.in_point(m_lin(tl%).data(0).data0.in_point(0))
   add_tangent_line_to_circle0 = set_angle_from_tangent_line_circle(tp(1), tangent_point%, p1%, p2%, re)
End If

End Function
Public Function set_angle_from_tangent_line_circle(ByVal p0%, _
                   ByVal tangent_point%, ByVal p1%, ByVal p2%, re As total_record_type) As Integer
Dim ang(1) As Integer
Dim time_ang As Integer
ang(0) = angle_number(p0%, tangent_point%, p1%, "", 0)
ang(1) = angle_number(tangent_point%, p2%, p1%, "", 0)
time_ang = ang(0) * ang(1)
If time_ang > 0 Then
 Call set_three_angle_value(Abs(ang(0)), Abs(ang(1)), 0, "1", "-1", "0", _
          "0", 0, re, 0, 0, 0, 0, 0, 0, False)
ElseIf time_ang < 0 Then
Call set_three_angle_value(Abs(ang(0)), Abs(ang(1)), 0, "1", "1", "0", _
          "180", 0, re, 0, 0, 0, 0, 0, 0, False)
End If
ang(0) = angle_number(p0%, tangent_point%, p2%, "", 0)
ang(1) = angle_number(tangent_point%, p1%, p2%, "", 0)
time_ang = ang(0) * ang(1)
If time_ang > 0 Then
Call set_three_angle_value(Abs(ang(0)), Abs(ang(1)), 0, "1", "-1", "0", _
          "0", 0, re, 0, 0, 0, 0, 0, 0, False)

ElseIf time_ang < 0 Then
Call set_three_angle_value(Abs(ang(0)), Abs(ang(1)), 0, "1", "1", "0", _
          "180", 0, re, 0, 0, 0, 0, 0, 0, False)

End If
End Function
